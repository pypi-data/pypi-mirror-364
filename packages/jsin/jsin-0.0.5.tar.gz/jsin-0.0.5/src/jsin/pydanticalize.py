'''
define the pydanticalize function that infers the pydantic schema
from a loaded JSON object
'''

from collections import defaultdict

from . import schematic_tree_nodes as stn
from .infer import infer
from .signature import signature


class _Model():
    t: type[dict]
    name_suggestions: set[str]

    def __init__(self, t: type[dict]):
        self.t = t
        self.name_suggestions = set()

    def __str__(self):
        lines = []

        if len(self.name_suggestions) > 0:
            lines.append(f'# name suggestions: {self.name_suggestions}')

        lines.append(f'class {signature(self.t)}(BaseModel):')

        for key, value in self.t.__annotations__.items():
            sig = signature(value)

            if sig.default_none:
                lines.append(
                    f'    {key}: {sig} = None',
                )
            else:
                lines.append(
                    f'    {key}: {sig}',
                )

        return '\n'.join(lines)


def pydanticalize(obj):
    '''
    infer the pydantic classes from a loaded JSON object
    '''

    # HACK: wrapping object inside an object coerces
    # resulting object to be a KeyIndexedArrayNode,
    # which simplifies the creation of the pydantic classes
    # definition file
    schematic_tree: stn.ObjectNode = infer(
        {'json': obj},
    ).convert_to_object_node()

    models: dict[str, _Model] = dict()

    for name, node in schematic_tree.iter_nodes_postorder('Response'):
        if isinstance(node, stn.ObjectNode):
            t = node.to_python_type()

            sig = signature(t)

            if str(sig) not in models:
                models[str(sig)] = _Model(t)

            if name != '':
                models[str(sig)].name_suggestions.add(
                    ''.join(
                        segment.capitalize() for segment in name.split('_')
                    )
                )

    base_sig = signature(schematic_tree.to_python_type())
    deps = defaultdict(set)

    for dep in base_sig.dependencies:
        deps[dep[0]].add(dep[1])

    lines = [
        "'''",
        'pydantic class definition automatically generated by jsin',
        'from inferred schema of a JSON object',
        "'''",
        '',
    ]

    # HACK: pydantic < typing, alphabetically,
    # so we follow PEP8 import order by sorting items in reverse
    for lib, objs in sorted(deps.items(), reverse=True):
        lines.append('')
        for obj in sorted(objs):
            lines.append(f'from {lib} import {obj}')

        lines.append('')

    for model in models.values():
        lines.extend([
            '',
            str(model),
            ''
        ])

    return '\n'.join(lines)
