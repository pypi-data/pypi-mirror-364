# .github/workflows/python-publish.yml
name: Publish Python Package to PyPI and TestPyPI

on:
  push:
    branches:
      - main       # Or your primary release branch (e.g., master)
      - develop    # Or your development branch for TestPyPI releases
    tags:
      - 'v*.*.*'   # Publishes on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Specify your desired Python version, e.g., '3.9', '3.10', '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    # Run this job for pushes to the 'develop' branch or manual dispatch to 'testpypi'
    # Adjust 'refs/heads/develop' if your development branch has a different name
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi')
    environment:
      name: testpypi
      url: https://test.pypi.org/pypi/edgework/
    permissions:
      id-token: write # Required for trusted publishing (OIDC)
    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          # For trusted publishing (OIDC), no token is needed here if TestPyPI project is configured.
          # To use an API token instead (less secure):
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-to-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    # Run this job for pushes of tags starting with 'v',
    # or pushes to the 'main' branch,
    # or manual dispatch to 'pypi'.
    # Adjust 'refs/heads/main' if your release branch has a different name.
    # Prioritize tag-based releases for official versions.
    if: |
      (startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
    environment:
      name: pypi
      url: https://pypi.org/pypi/edgework/
    permissions:
      id-token: write # Required for trusted publishing (OIDC)
    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          # For trusted publishing (OIDC), no token is needed here if PyPI project is configured.
          # The 'repository-url' defaults to PyPI, so it's not strictly needed.
          # To use an API token instead (less secure):
          # password: ${{ secrets.PYPI_API_TOKEN }}
          # skip_existing: true # Optional: uncomment to skip if version already exists
