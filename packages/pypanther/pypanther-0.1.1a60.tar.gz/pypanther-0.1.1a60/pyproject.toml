[tool.poetry]
name = "pypanther"
version = "0.1.1a60"
description = ""
authors = ["Panther Labs Inc <pypi@runpanther.io>"]
readme = "README.md"
keywords = ["Security", "CLI"]
classifiers = ["Operating System :: OS Independent"]
license = "Apache-2.0"
include = ["pypanther/py.typed"]

[tool.poetry.dependencies]
python = "3.11.*"
pydantic = "^2.7.1"
ruamel-yaml = "^0.18.6"
ast-comments = "^1.2.2"
panther-detection-helpers = "^0.4.0"
panther-core = ">= 0.11.2, < 1.0"
boto3 = "^1.34.99"
policyuniverse = "^1.5.1.20231109"
jsonpath-ng = "^1.6.1"
gql = "^3.5.0"
aiohttp = ">=3.9.5,<=3.11.6"
dynaconf = "^3.2.5"
colorama = "^0.4.6"
prettytable = "^3.10.0"
gitpython = "^3.1.43"
ruff = "^0.4.4"
types-requests = "^2.32.0.20241016"
pycountry = "^24.6.1"

[tool.poetry.scripts]
pypanther = 'pypanther.main:run'

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0, < 1.11"
pre-commit = "^3.7.0"
types-python-dateutil = "^2.9.0.20240316"
types-pyyaml = "^6.0.12.20240311"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = true
exclude = [
    '^pypanther/rules/',
    '^pypanther/helpers/',
    '^pypanther/data_models/',
]

[[tool.mypy.overrides]]
module = "panther_detection_helpers.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pypanther.data_models.*"
follow_imports = "skip"

[[tool.mypy.overrides]]
module = "pypanther.helpers.*"
follow_imports = "skip"

[[tool.mypy.overrides]]
module = "pypanther.rules.*"
follow_imports = "skip"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = []
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A002", # Argument `id` is shadowing a Python builtin
    "ANN001", # Missing type annotation for function argument `event`
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN201", # Missing return type annotation for public function `test_include`
    "ANN202", # Missing return type annotation for private function `rule`
    "ANN204", # Missing return type annotation for special method `__init__`
    "ANN206", # Missing return type annotation for classmethod `validate_config`
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `obj`
    "ARG001", # Unused function argument: `event`
    "ARG002", # Unused method argument: `event`
    "ARG005", # Unused lambda argument: `x`
    "B027", # `Rule.validate_config` is an empty method in an abstract base class, but has no abstract decorator
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "BLE001", # Do not catch blind exception: `BaseException`
    "C401", # Unnecessary generator (rewrite as a `set` comprehension)
    "C405", # Unnecessary `list` literal (rewrite as a `set` literal)
    "C414", # Unnecessary `tuple` call within `set()`
    "C416", # Unnecessary `set` comprehension (rewrite using `set()`)
    "C901", # `upload_zip` is too complex (19 > 10)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "D200", # One-line docstring should fit on one line
    "D203", # 1 blank line before class (conflicts with D211)
    "D205", # 1 blank line required between summary line and description
    "D212", # multi line summary first line (conflicts with D213)
    "D301", # Use `r"""` if any backslashes in a docstring
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood: "Creates a main.py at the cwd if it does not exist."
    "D404", # First word of the docstring should not be "This"
    "D415", # First line should end with a period, question mark, or exclamation point
    "D417", # Missing argument descriptions in the docstring for `p_matches`: `event`, `p_match`
    "DTZ001", # `datetime.datetime()` called without a `tzinfo` argument
    "DTZ002", # `datetime.datetime.today()` used
    "DTZ003", # `datetime.datetime.utcnow()` used
    "DTZ004", # `datetime.datetime.utcfromtimestamp()` used
    "DTZ005", # `datetime.datetime.now()` called without a `tz` argument
    "DTZ007", # Naive datetime constructed using `datetime.datetime.strptime()` without %z
    "E501", # Line too long (165 > 120)
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "ERA001", # Found commented-out code
    "FA100", # Add `from __future__ import annotations` to simplify `typing.Type`
    "FA102", # Missing `from __future__ import annotations`, but uses PEP 604 union
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "FBT003", # Boolean positional value in function call
    "FIX002", # Line contains TODO, consider resolving the issue
    "FLY002", # Consider `f"{city}_{region}_{country}"` instead of string join
    "INP001", # File `tests/fixtures/get_rules_test_data/rules/sub_no_init/c_rule.py` is part of an implicit namespace package. Add an `__init__.py`.
    "ISC001", # Implicitly concatenated string literals on one line (conflicts with COM812)
    "ISC003", # Explicitly concatenated string should be implicitly concatenated
    "N801", # Class name `rule` should use CapWords convention
    "N802", # Function name `assertDetectionResultEqual` should be lowercase
    "N818", # Exception name `BackendNotFoundException` should be named with an Error suffix
    "PERF102", # When using only the values of a dict use the `values()` method
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PERF401", # Use a list comprehension to create a transformed list
    "PGH003", # Use specific rule codes when ignoring type issues
    "PIE810", # Call `startswith` once with a `tuple`
    "PLC0414", # Import alias does not rename original package
    "PLR0911", # Too many return statements (7 > 6)
    "PLR0912", # Too many branches (19 > 12)
    "PLR0913", # Too many arguments in function definition (6 > 5)
    "PLR0915", # Too many statements (76 > 50) # have to disable this because of the way we use generate.py
    "PLR2004", # Magic value used in comparison, consider replacing `4` with a constant variable
    "PLW0603", # Using the global statement to update `_RESOURCE_TABLE` is discouraged
    "PLW2901", # `for` loop variable `p` overwritten by assignment target
    "PT009", # Use a regular `assert` instead of unittest-style `assertIsNotNone`
    "PT012", # `pytest.raises()` block should contain a single simple statement
    "PT018", # Assertion should be broken down into multiple parts
    "PTH107", # `os.remove()` should be replaced by `Path.unlink()`
    "PTH109", # `os.getcwd()` should be replaced by `Path.cwd()`
    "PTH110", # `os.path.exists()` should be replaced by `Path.exists()`
    "PTH113", # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH120", # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH123", # `open()` should be replaced by `Path.open()`
    "PYI051", # `Literal["DEFAULT"]` is redundant in a union with `str`
    "RET504", # Unnecessary assignment to `instance` before `return` statement
    "RUF001", # String contains ambiguous `â€™` (RIGHT SINGLE QUOTATION MARK). Did you mean ``` (GRAVE ACCENT)?
    "RUF005", # Consider `[*Test.tags, "new"]` instead of concatenation
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013", # PEP 484 prohibits implicit `Optional`
    "RUF015", # Prefer `next(iter(last_login))` over single element slice
    "S101", # Use of `assert` detected
    "S104", # Possible binding to all interfaces
    "S105", # Possible hardcoded password assigned to: "_API_TOKEN_HEADER"
    "S108", # Probable insecure usage of temporary file or directory: "/tmp/*"
    "S110", # `try`-`except`-`pass` detected, consider logging the exception
    "S603", # `subprocess` call: check for execution of untrusted input
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM105", # Use `contextlib.suppress(BaseException)` instead of `try`-`except`-`pass`
    "SIM108", # Use ternary operator `setting_change = "Use Adaptive MFA" if "confidence-score" in request_body else "Unknown"` instead of `if`-`else`-block
    "SIM110", # Use `return any(method in self.phishable_mfa for method in mfa_methods)` instead of `for` loop
    "SIM115", # Use context handler for opening files
    "SIM118", # Use `key in dict` instead of `key in dict.keys()`
    "SLF001", # Private member accessed: `_tests`
    "T201", # `print` found
    "TCH002", # Move third-party import `jsonpath_ng.Fields` into a type-checking block
    "TD002", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003", # Missing issue link on the line following this TODO
    "TID252", # Prefer absolute imports over relative imports from parent modules
    "TRY002", # Create your own exception
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY201", # Use `raise` without specifying exception name
    "TRY300", # Consider moving this statement to an `else` block
    "TRY301", # Abstract `raise` to an inner function
]

[tool.ruff.lint.per-file-ignores]
"pypanther/helpers/*" = [
    # Helpers are converted automatically, so we don't want to fix this because it could be reverted
    # next time it is generated
    "E402", # Module level import not at top of file
]
"tests/*" = [
    "D106", # Missing docstring in public nested class
]
