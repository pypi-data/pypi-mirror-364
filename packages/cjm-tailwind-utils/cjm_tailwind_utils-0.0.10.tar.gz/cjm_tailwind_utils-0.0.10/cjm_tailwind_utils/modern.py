"""Tailwind v4+ features including container queries, `:has()` pseudo-class, and `@supports`. Optional module for cutting-edge CSS features."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/modern.ipynb.

# %% auto 0
__all__ = ['test_modern_usage_examples']

# %% ../nbs/modern.ipynb 3
from typing import Union, Optional, Self

from .core import TailwindBuilder, patch, deduplicate_classes

# %% ../nbs/modern.ipynb 5
@patch  
def container_query(
    self:TailwindBuilder,
    name: Optional[str] = None  # Optional container name
) -> Self:  # Self for chaining
    """Add container query support for container queries.
    """
    if name:
        class_str = f"@container/{name}"
    else:
        class_str = "@container"
    self._add_class(class_str)
    return self

# %% ../nbs/modern.ipynb 6
@patch
def cq(
    self:TailwindBuilder,
    size: Union[str, int],  # Container size (e.g., 'sm', 'md', '300px', 20)
    *classes: str  # Classes to apply at container size
) -> Self:  # Self for chaining
    """Add container query size variant to classes.
    """
    # Handle different size formats
    if isinstance(size, int):
        # Numeric values are treated as rem
        size_str = f"[{size}rem]"
    elif isinstance(size, str) and size not in ['sm', 'md', 'lg', 'xl', '2xl']:
        # Arbitrary sizes need brackets
        size_str = f"[{size}]"
    else:
        # Named sizes
        size_str = size
    
    class_str = " ".join(f"@{size_str}:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/modern.ipynb 7
@patch
def has(
    self:TailwindBuilder,
    selector: str,  # Selector to check for (e.g., 'hover', '[disabled]')
    *classes: str  # Classes to apply when selector matches
) -> Self:  # Self for chaining
    """Add :has() pseudo-class support.
    """
    # If selector already has brackets, don't add them again
    if selector.startswith('[') and selector.endswith(']'):
        # Add extra brackets for Tailwind's arbitrary value syntax
        selector = f"[{selector}]"
    elif not selector.startswith('['):
        # Wrap selector in brackets if not already
        selector = f"[{selector}]"
    
    class_str = " ".join(f"has-{selector}:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/modern.ipynb 8
@patch
def supports(
    self:TailwindBuilder,
    feature: str,  # CSS feature to check support for
    *classes: str  # Classes to apply when feature is supported
) -> Self:  # Self for chaining
    """Add @supports feature query support.
    """
    class_str = " ".join(f"supports-[{feature}]:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/modern.ipynb 9
@patch
def data(
    self:TailwindBuilder,
    attribute: str,  # Data attribute to check (without data- prefix)
    value: Optional[str] = None,  # Optional value to match
    *classes: str  # Classes to apply when data attribute matches
) -> Self:  # Self for chaining
    """Add data attribute selector support.
    """
    if value:
        selector = f"[{attribute}={value}]"
    else:
        selector = f"[{attribute}]"
    
    class_str = " ".join(f"data-{selector}:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/modern.ipynb 19
def test_modern_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate modern CSS features for cutting-edge web development.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the modern utilities in cjm-tailwind-utils. It demonstrates:
    
    1. Container queries for component-based responsive design
    2. Container query size variants
    3. :has() pseudo-class for parent selection
    4. @supports feature queries for progressive enhancement
    5. Data attribute selectors for state-based styling
    6. Method chaining with modern features
    
    Each test includes clear examples to help coding assistants understand
    modern CSS features available in Tailwind CSS v4+.
    """
    
    # Import necessary for standalone usage
    from cjm_tailwind_utils.core import TailwindBuilder
    from cjm_tailwind_utils.variants import hover
    
    # === Container Queries ===
    # Component-level responsive design
    
    # Basic container query setup
    basic_container = TailwindBuilder().container_query().build()
    assert basic_container == "@container", "Basic container query marker"
    
    # Named container query
    named_container = TailwindBuilder().container_query("sidebar").build()
    assert named_container == "@container/sidebar", "Named container for scoped queries"
    
    # === Container Query Size Variants ===
    # Respond to container size instead of viewport
    
    # Named container sizes (like breakpoints but for containers)
    container_sm = TailwindBuilder().cq("sm", "p-4").build()
    assert container_sm == "@sm:p-4", "Small container size variant"
    
    container_md = TailwindBuilder().cq("md", "grid-cols-2").build()
    assert container_md == "@md:grid-cols-2", "Medium container size variant"
    
    container_lg = TailwindBuilder().cq("lg", "text-lg", "gap-6").build()
    assert container_lg == deduplicate_classes("@lg:text-lg @lg:gap-6"), "Large container with multiple classes"
    
    # Arbitrary container sizes
    container_pixels = TailwindBuilder().cq("300px", "hidden").build()
    assert container_pixels == "@[300px]:hidden", "Hide at specific pixel width"
    
    # Rem-based container queries
    container_rem_string = TailwindBuilder().cq("20rem", "flex").build()
    assert container_rem_string == "@[20rem]:flex", "Rem-based container query"
    
    container_rem_numeric = TailwindBuilder().cq(20, "flex").build()
    assert container_rem_numeric == "@[20rem]:flex", "Numeric rem conversion"
    
    # === :has() Pseudo-class ===
    # Style parent based on children
    
    # Basic has selector
    has_hover = TailwindBuilder().has("hover", "bg-gray-100").build()
    assert has_hover == "has-[hover]:bg-gray-100", "Style when child is hovered"
    
    # Attribute selector with has
    has_disabled = TailwindBuilder().has("[disabled]", "opacity-50").build()
    assert has_disabled == "has-[[disabled]]:opacity-50", "Style when child is disabled"
    
    # Class selector with has
    has_error = TailwindBuilder().has(".error", "border-red-500", "bg-red-50").build()
    assert has_error == deduplicate_classes("has-[.error]:border-red-500 has-[.error]:bg-red-50"), "Style when child has error class"
    
    # Complex selector
    has_checked = TailwindBuilder().has("input:checked", "bg-blue-500").build()
    assert has_checked == "has-[input:checked]:bg-blue-500", "Style when input child is checked"
    
    # === @supports Feature Queries ===
    # Progressive enhancement based on browser capabilities
    
    # Grid support
    supports_grid = TailwindBuilder().supports("grid", "grid", "grid-cols-3").build()
    assert supports_grid == "supports-[grid]:grid supports-[grid]:grid-cols-3", "Use grid if supported"
    
    # Display grid support (with parentheses)
    supports_display_grid = TailwindBuilder().supports("(display: grid)", "grid").build()
    assert supports_display_grid == "supports-[(display: grid)]:grid", "Formal property check"
    
    # Backdrop filter support
    supports_backdrop = TailwindBuilder().supports("backdrop-filter", "backdrop-blur-sm").build()
    assert supports_backdrop == "supports-[backdrop-filter]:backdrop-blur-sm", "Backdrop blur if supported"
    
    # Container queries support check
    supports_container = TailwindBuilder().supports("container-type", "@container").build()
    assert supports_container == "supports-[container-type]:@container", "Container queries if supported"
    
    # === Data Attribute Selectors ===
    # Style based on data attributes
    
    # Data attribute without value (pass None as value)
    data_open = TailwindBuilder().data("open", None, "block").build()
    assert data_open == "data-[open]:block", "Show when data-open exists"
    
    # Data attribute with specific value
    data_state_active = TailwindBuilder().data("state", "active", "bg-blue-500", "text-white").build()
    assert data_state_active == "data-[state=active]:bg-blue-500 data-[state=active]:text-white", "Active state styling"
    
    # Multiple data attributes
    data_selected = TailwindBuilder().data("selected", None, "ring-2", "ring-blue-500").build()
    assert data_selected == "data-[selected]:ring-2 data-[selected]:ring-blue-500", "Selected item styling"
    
    # === Complex Modern Examples ===
    # Real-world usage patterns
    
    # Responsive card component using container queries
    responsive_card = (TailwindBuilder()
        .container_query("card")
        .util("bg-white", "rounded-lg", "shadow", "p-4")
        .cq("sm", "p-6")
        .cq("md", "p-8", "grid", "grid-cols-2", "gap-4")
        .cq("lg", "p-10", "gap-6")
        .build())
    assert "@container/card" in responsive_card, "Named container for card"
    assert "@sm:p-6" in responsive_card, "Small container padding"
    assert "@md:p-8" in responsive_card, "Medium container padding"
    assert "@md:grid" in responsive_card, "Grid layout at medium"
    assert "@lg:p-10" in responsive_card, "Large container padding"
    
    # Form field with has() validation styling
    form_field = (TailwindBuilder()
        .util("relative", "border", "rounded", "p-2")
        .has("input:invalid", "border-red-500", "bg-red-50")
        .has("input:valid", "border-green-500", "bg-green-50")
        .has("input:focus", "ring-2", "ring-blue-500")
        .build())
    assert "has-[input:invalid]:border-red-500" in form_field, "Invalid input styling"
    assert "has-[input:valid]:border-green-500" in form_field, "Valid input styling"
    assert "has-[input:focus]:ring-2" in form_field, "Focused input styling"
    
    # Progressive enhancement with @supports
    progressive_layout = (TailwindBuilder()
        .util("display", "block")  # Fallback
        .supports("(display: grid)", "grid", "grid-cols-3", "gap-4")
        .supports("(display: flex)", "flex", "flex-wrap", "gap-4")
        .build())
    assert "supports-[(display: grid)]:grid" in progressive_layout, "Grid if supported"
    assert "supports-[(display: flex)]:flex" in progressive_layout, "Flexbox if supported"
    
    # Interactive component with data attributes
    interactive_component = (TailwindBuilder()
        .util("cursor-pointer", "transition-all")
        .data("state", "loading", "opacity-50", "cursor-wait")
        .data("state", "error", "bg-red-100", "text-red-700")
        .data("state", "success", "bg-green-100", "text-green-700")
        .hover("shadow-lg", "scale-105")
        .build())
    assert "data-[state=loading]:opacity-50" in interactive_component, "Loading state"
    assert "data-[state=error]:bg-red-100" in interactive_component, "Error state"
    assert "data-[state=success]:bg-green-100" in interactive_component, "Success state"
    assert "hover:shadow-lg" in interactive_component, "Hover effects"
    
    # === Edge Cases ===
    # Test boundary conditions
    
    # Container query without classes
    empty_cq = TailwindBuilder().cq("sm").build()
    assert empty_cq == "", "Empty container query returns empty string"
    
    # Has without classes
    empty_has = TailwindBuilder().has(".test").build()
    assert empty_has == "", "Empty has selector returns empty string"
    
    # Supports without classes
    empty_supports = TailwindBuilder().supports("grid").build()
    assert empty_supports == "", "Empty supports query returns empty string"
    
    # Data without classes
    empty_data = TailwindBuilder().data("test", None).build()
    assert empty_data == "", "Empty data selector returns empty string"
    
    # === Method Chaining ===
    # Combining modern features
    
    combined = (TailwindBuilder()
        .container_query()
        .cq("md", "p-6")
        .has(".active", "bg-blue-100")
        .data("theme", "dark", "bg-gray-800")
        .supports("(gap: 1rem)", "gap-4")
        .build())
    assert "@container" in combined, "Container query marker"
    assert "@md:p-6" in combined, "Container size variant"
    assert "has-[.active]:bg-blue-100" in combined, "Has selector"
    assert "data-[theme=dark]:bg-gray-800" in combined, "Data attribute"
    assert "supports-[(gap: 1rem)]:gap-4" in combined, "Supports query"
    
    return "All modern tests passed!"
