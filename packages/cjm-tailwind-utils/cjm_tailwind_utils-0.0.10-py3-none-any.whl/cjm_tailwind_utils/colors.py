"""Color system with validation for Tailwind colors, hex, RGB, HSL, and CSS variables. Provides color validation and normalization for style utilities."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/colors.ipynb.

# %% auto 0
__all__ = ['TAILWIND_COLORS', 'SPECIAL_COLORS', 'HEX_PATTERN', 'RGB_PATTERN', 'HSL_PATTERN', 'VAR_PATTERN', 'is_valid_color',
           'normalize_color', 'validate_color_value', 'color_with_opacity', 'make_color', 'test_colors_usage_examples']

# %% ../nbs/colors.ipynb 3
import re
from typing import Optional, Dict, Set
from functools import lru_cache

from .types import OpacityValue, BaseColor, ColorShade
from .validation import InvalidColorError

# %% ../nbs/colors.ipynb 5
TAILWIND_COLORS = { # Predefined Tailwind color palette
    "slate": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "gray": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "zinc": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "neutral": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "stone": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "red": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "orange": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "amber": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "yellow": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "lime": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "green": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "emerald": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "teal": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "cyan": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "sky": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "blue": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "indigo": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "violet": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "purple": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "fuchsia": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "pink": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "rose": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
} 

# %% ../nbs/colors.ipynb 6
SPECIAL_COLORS = {"transparent", "current", "inherit", "white", "black"} # Special colors that don't have shades

# %% ../nbs/colors.ipynb 7
HEX_PATTERN = re.compile(r'^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$') # CSS Hex color format patterns

# %% ../nbs/colors.ipynb 8
RGB_PATTERN = re.compile(r'^rgba?\s*\([^)]+\)$', re.IGNORECASE) # CSS RGB color format patterns

# %% ../nbs/colors.ipynb 9
HSL_PATTERN = re.compile(r'^hsla?\s*\([^)]+\)$', re.IGNORECASE) # CSS HSL color format patterns

# %% ../nbs/colors.ipynb 10
VAR_PATTERN = re.compile(r'^var\s*\([^)]+\)$') # CSS VAR color format patterns

# %% ../nbs/colors.ipynb 11
@lru_cache(maxsize=512)
def is_valid_color(
    color: str  # Color string to validate
) -> bool:  # True if valid color, False otherwise
    "Validate if a string is a valid color value. Valid colors include: - Tailwind color names (with or without shade) - Special color keywords - Hex colors (#RGB, #RRGGBB, #RRGGBBAA) - RGB/RGBA functions - HSL/HSLA functions - CSS variables"
    if not color:
        return False
        
    # Check special colors
    if color in SPECIAL_COLORS:
        return True
    
    # Check if it's a Tailwind color with shade (e.g., "blue-500")
    if "-" in color and not color.startswith('var('):  # Don't treat var(--foo) as color-shade
        parts = color.split("-", 1)
        if len(parts) == 2:
            base, shade = parts
            try:
                shade_num = int(shade)
                return base in TAILWIND_COLORS and shade_num in TAILWIND_COLORS[base]
            except ValueError:
                return False
    
    # Check if it's just a base color name
    if color in TAILWIND_COLORS:
        return True
    
    # Check CSS color formats - use 'is not None' to check for match objects
    return (
        HEX_PATTERN.match(color) is not None or
        RGB_PATTERN.match(color) is not None or
        HSL_PATTERN.match(color) is not None or
        VAR_PATTERN.match(color) is not None
    )

# %% ../nbs/colors.ipynb 12
@lru_cache(maxsize=256)
def normalize_color(
    color: str  # Color string to normalize
) -> str:  # Normalized color string
    "Normalize color value for use in Tailwind classes. This function handles: - Standard Tailwind colors (returns as-is) - CSS color functions (ensures proper formatting) - CSS variables (ensures proper formatting)"
    if not color:
        return color
    
    # For Tailwind colors and special colors, return as-is
    if color in SPECIAL_COLORS or color in TAILWIND_COLORS:
        return color
    
    # For Tailwind colors with shades, validate and return as-is
    if "-" in color and not color.startswith('var(') and is_valid_color(color):
        return color
    
    # For CSS functions and variables, ensure no extra spaces
    if any(pattern.match(color) is not None for pattern in [RGB_PATTERN, HSL_PATTERN, VAR_PATTERN]):
        # Remove extra spaces around parentheses and commas
        color = re.sub(r'\s*([(),])\s*', r'\1', color)
        # Ensure single space after function name
        color = re.sub(r'^(\w+)\s*\(', r'\1(', color)
    
    return color

# %% ../nbs/colors.ipynb 13
def validate_color_value(
    color: str,  # The color value to validate
    allow_opacity_suffix: bool = False  # Whether to allow opacity suffix like 'white/80'
) -> None:  # No return value
    "Validate a color value using the is_valid_color function."
    if not isinstance(color, str):
        raise InvalidColorError(f"Color must be a string, got {type(color).__name__}")
    
    if not color:
        raise InvalidColorError("Color value cannot be empty")
    
    # Check if color has opacity suffix
    if allow_opacity_suffix and "/" in color:
        color_part, opacity_part = color.rsplit("/", 1)
        # Validate the color part
        if not is_valid_color(color_part):
            raise InvalidColorError(
                f"Invalid color in '{color}'. "
                f"Color part '{color_part}' is not valid."
            )
        # Validate the opacity part
        try:
            opacity = int(opacity_part)
            if not 0 <= opacity <= 100:
                raise InvalidColorError(
                    f"Invalid opacity '{opacity_part}' in '{color}'. "
                    f"Opacity must be between 0 and 100."
                )
        except ValueError:
            raise InvalidColorError(
                f"Invalid opacity '{opacity_part}' in '{color}'. "
                f"Opacity must be a number between 0 and 100."
            )
        return
    
    if not is_valid_color(color):
        # Provide helpful error message based on the type of error
        if "-" in color:
            parts = color.split("-", 1)
            if len(parts) == 2:
                base, shade = parts
                if base not in TAILWIND_COLORS:
                    raise InvalidColorError(
                        f"Invalid color base '{base}'. "
                        f"Valid color bases: {', '.join(sorted(TAILWIND_COLORS.keys()))}"
                    )
                try:
                    shade_num = int(shade)
                    valid_shades = sorted(TAILWIND_COLORS.get(base, set()))
                    raise InvalidColorError(
                        f"Invalid shade '{shade}' for color '{base}'. "
                        f"Valid shades: {valid_shades}"
                    )
                except ValueError:
                    raise InvalidColorError(
                        f"Invalid color format '{color}'. "
                        f"Expected format: 'color-shade' (e.g., 'blue-500')"
                    )
        
        raise InvalidColorError(
            f"Invalid color value '{color}'. "
            f"Must be a Tailwind color (e.g., 'blue-500'), "
            f"special color (white, black, transparent, current, inherit), "
            f"hex color (e.g., '#ff0000'), "
            f"RGB/RGBA (e.g., 'rgb(255, 0, 0)'), "
            f"HSL/HSLA (e.g., 'hsl(0, 100%, 50%)'), "
            f"or CSS variable (e.g., 'var(--primary)')"
        )

# %% ../nbs/colors.ipynb 14
def color_with_opacity(
    color: str,  # Base color value
    opacity: Optional[OpacityValue] = None  # Optional opacity value (0-100)
) -> str:  # Color string with opacity modifier if provided
    "Generate color string with optional opacity modifier."
    if opacity is not None:
        return f"{color}/{opacity}"
    return color

# %% ../nbs/colors.ipynb 15
def make_color(
    base: BaseColor,  # Base color name
    shade: ColorShade  # Color shade value
) -> str:  # Complete color string (e.g., "blue-500")
    """Create a color string from base color and shade."""
    return f"{base}-{shade}"

# %% ../nbs/colors.ipynb 25
def test_colors_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate color system functionality.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the color validation and manipulation system. It demonstrates:
    
    1. Tailwind color validation (with base colors and shades)
    2. Special color keywords (transparent, current, inherit, etc.)
    3. CSS color format support (hex, rgb, hsl, CSS variables)
    4. Color normalization for consistent formatting
    5. Opacity suffix validation
    6. Error handling for invalid colors
    7. Helper functions for building color strings
    
    Each test includes clear examples to help coding assistants understand
    proper color handling in the cjm-tailwind-utils library.
    """
    
    # === Tailwind Color Validation ===
    # Standard Tailwind colors with numeric shades
    
    # Example: Common Tailwind colors with shades
    assert is_valid_color("blue-500") == True, "Standard blue shade should be valid"
    assert is_valid_color("red-950") == True, "Dark red shade should be valid"
    assert is_valid_color("slate-50") == True, "Light slate shade should be valid"
    
    # Example: Base colors without shades (also valid)
    assert is_valid_color("blue") == True, "Base color 'blue' without shade is valid"
    assert is_valid_color("red") == True, "Base color 'red' without shade is valid"
    
    # Example: Invalid Tailwind colors
    assert is_valid_color("blue-1000") == False, "Shade 1000 doesn't exist in Tailwind"
    assert is_valid_color("notacolor-500") == False, "Non-existent base color should be invalid"
    assert is_valid_color("blue-") == False, "Missing shade number should be invalid"
    assert is_valid_color("-500") == False, "Missing base color should be invalid"
    
    # === Special Color Keywords ===
    # Tailwind's special color values that don't have shades
    
    assert is_valid_color("white") == True, "Special color 'white' is valid"
    assert is_valid_color("black") == True, "Special color 'black' is valid"
    assert is_valid_color("transparent") == True, "Special color 'transparent' is valid"
    assert is_valid_color("current") == True, "Special color 'current' (currentColor) is valid"
    assert is_valid_color("inherit") == True, "Special color 'inherit' is valid"
    
    # === CSS Color Formats ===
    # Support for standard CSS color notations
    
    # Hex colors
    assert is_valid_color("#fff") == True, "3-digit hex color is valid"
    assert is_valid_color("#ffffff") == True, "6-digit hex color is valid"
    assert is_valid_color("#ffffffff") == True, "8-digit hex color (with alpha) is valid"
    assert is_valid_color("#gg0000") == False, "Invalid hex characters should fail"
    
    # RGB/RGBA colors
    assert is_valid_color("rgb(255, 0, 0)") == True, "RGB color is valid"
    assert is_valid_color("rgba(255, 0, 0, 0.5)") == True, "RGBA color with alpha is valid"
    assert is_valid_color("RGB(255, 0, 0)") == True, "Uppercase RGB is valid"
    assert is_valid_color("rgba( 255 , 0 , 0 , 0.5 )") == True, "RGB with extra spaces is valid"
    
    # HSL/HSLA colors
    assert is_valid_color("hsl(0, 100%, 50%)") == True, "HSL color is valid"
    assert is_valid_color("hsla(0, 100%, 50%, 0.5)") == True, "HSLA color with alpha is valid"
    
    # CSS variables
    assert is_valid_color("var(--primary-color)") == True, "CSS variable is valid"
    assert is_valid_color("var(--my-custom-color)") == True, "Custom CSS variable is valid"
    assert is_valid_color("var(--color-with-dashes)") == True, "CSS variable with multiple dashes is valid"
    
    # Edge cases
    assert is_valid_color("") == False, "Empty string should be invalid"
    
    # === Color Normalization ===
    # Ensures consistent formatting for CSS color functions
    
    # Tailwind colors pass through unchanged
    assert normalize_color("blue-500") == "blue-500"
    assert normalize_color("white") == "white"
    
    # CSS functions get normalized spacing
    assert normalize_color("rgb( 255 , 0 , 0 )") == "rgb(255,0,0)"
    assert normalize_color("rgba( 255, 0, 0, 0.5 )") == "rgba(255,0,0,0.5)"
    assert normalize_color("hsl( 0 , 100% , 50% )") == "hsl(0,100%,50%)"
    assert normalize_color("var( --primary )") == "var(--primary)"
    
    # === Color Validation with Error Messages ===
    # The validate_color_value function provides helpful error messages
    
    # Valid colors should not raise exceptions
    try:
        validate_color_value("blue-500")
        validate_color_value("white")
        validate_color_value("#ff0000")
        validate_color_value("rgb(255, 0, 0)")
        validate_color_value("var(--primary)")
        validation_passed = True
    except Exception:
        validation_passed = False
    assert validation_passed, "Valid colors should not raise exceptions"
    
    # === Opacity Suffix Support ===
    # Colors can include opacity modifiers using slash notation
    
    try:
        validate_color_value("white/80", allow_opacity_suffix=True)
        validate_color_value("blue-500/50", allow_opacity_suffix=True)
        validate_color_value("#ff0000/25", allow_opacity_suffix=True)
        opacity_validation_passed = True
    except Exception:
        opacity_validation_passed = False
    assert opacity_validation_passed, "Valid colors with opacity should not raise exceptions"
    
    # Invalid opacity values should raise errors
    from cjm_tailwind_utils.validation import InvalidColorError
    
    try:
        validate_color_value("white/150", allow_opacity_suffix=True)
        assert False, "Opacity > 100 should raise InvalidColorError"
    except InvalidColorError:
        pass  # Expected
    
    # === Helper Functions ===
    # Utilities for building color strings programmatically
    
    # color_with_opacity: Add opacity modifier to colors
    assert color_with_opacity("blue-500") == "blue-500", "Color without opacity returns unchanged"
    assert color_with_opacity("blue-500", 50) == "blue-500/50", "Adds opacity modifier"
    assert color_with_opacity("white", 80) == "white/80", "Works with special colors"
    
    # make_color: Build Tailwind color from components
    assert make_color("blue", 500) == "blue-500", "Combines base and shade"
    assert make_color("red", 950) == "red-950", "Works with dark shades"
    assert make_color("slate", 50) == "slate-50", "Works with light shades"
    
    return "All color tests passed!"
