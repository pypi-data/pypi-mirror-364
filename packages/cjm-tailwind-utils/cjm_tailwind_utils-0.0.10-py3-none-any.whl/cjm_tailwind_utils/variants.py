"""State variants (hover, focus), responsive breakpoints (sm, md, lg), dark mode, and modifier utilities. Add interactivity and responsiveness to components."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/variants.ipynb.

# %% auto 0
__all__ = ['test_variants_usage_examples']

# %% ../nbs/variants.ipynb 3
from typing import Union, List, Self

from .core import TailwindBuilder, patch, deduplicate_classes

# %% ../nbs/variants.ipynb 5
@patch
def hover(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add hover state variant to classes."""
    class_str = " ".join(f"hover:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 6
@patch
def focus(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add focus state variant to classes."""
    class_str = " ".join(f"focus:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 7
@patch
def active(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add active state variant to classes."""
    class_str = " ".join(f"active:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 8
@patch
def disabled(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add disabled state variant to classes."""
    class_str = " ".join(f"disabled:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 10
@patch
def sm(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add small screen variant to classes."""
    class_str = " ".join(f"sm:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 11
@patch
def md(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add medium screen variant to classes."""
    class_str = " ".join(f"md:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 12
@patch
def lg(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add large screen variant to classes."""
    class_str = " ".join(f"lg:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 13
@patch
def xl(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add extra large screen variant to classes."""
    class_str = " ".join(f"xl:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 14
@patch
def xxl(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add 2xl screen variant to classes."""
    class_str = " ".join(f"2xl:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 16
@patch
def dark(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add dark mode variant to classes."""
    class_str = " ".join(f"dark:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 18
@patch
def group_hover(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add group-hover variant to classes."""
    class_str = " ".join(f"group-hover:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 19
@patch
def peer_hover(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add peer-hover variant to classes."""
    class_str = " ".join(f"peer-hover:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 20
@patch
def modifiers(
    self:TailwindBuilder,
    *modifiers: str,
    classes: Union[str, List[str]]
) -> Self:  # Self for chaining
    """Apply multiple modifiers to classes with support for stacking.
    """
    # Ensure classes is a list
    if isinstance(classes, str):
        class_list = [classes]
    else:
        class_list = list(classes)
    
    # Apply modifiers in order
    modifier_prefix = ":".join(modifiers)
    modified_classes = [f"{modifier_prefix}:{cls}" for cls in class_list]
    
    class_str = " ".join(modified_classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 21
@patch
def first(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add first-child variant to classes."""
    class_str = " ".join(f"first:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 22
@patch
def last(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add last-child variant to classes."""
    class_str = " ".join(f"last:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 23
@patch
def even(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add even-child variant to classes."""
    class_str = " ".join(f"even:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 24
@patch
def odd(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    """Add odd-child variant to classes."""
    class_str = " ".join(f"odd:{cls}" for cls in classes)
    self._add_class(class_str)
    return self

# %% ../nbs/variants.ipynb 25
@patch
def group(
    self:TailwindBuilder
) -> Self:  # Self for chaining
    """Add group class for group-hover and similar variants."""
    self._add_class("group")
    return self

# %% ../nbs/variants.ipynb 26
@patch
def peer(
    self:TailwindBuilder
) -> Self:  # Self for chaining
    """Add peer class for peer-hover and similar variants."""
    self._add_class("peer")
    return self

# %% ../nbs/variants.ipynb 36
def test_variants_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate variant utilities for state, responsiveness, and modifiers.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the variant utilities in cjm-tailwind-utils. It demonstrates:
    
    1. State variants (hover, focus, active, disabled)
    2. Responsive breakpoint variants (sm, md, lg, xl, 2xl)
    3. Dark mode support
    4. Group and peer variants for parent-child interactions
    5. Child selector variants (first, last, even, odd)
    6. Advanced modifier stacking
    7. Method chaining with variants
    
    Each test includes clear examples to help coding assistants understand
    how to add interactivity and responsiveness to Tailwind classes.
    """
    
    # Import necessary for standalone usage
    from cjm_tailwind_utils.core import TailwindBuilder
    
    # === State Variants ===
    # Add interactivity to elements
    
    # Hover state - single class
    hover_single = TailwindBuilder().hover("bg-blue-600").build()
    assert hover_single == "hover:bg-blue-600", "Single hover class"
    
    # Hover state - multiple classes
    hover_multiple = TailwindBuilder().hover("bg-blue-600", "text-white").build()
    assert hover_multiple == "hover:bg-blue-600 hover:text-white", "Multiple hover classes"
    
    # Focus state - for form elements and interactive components
    focus_state = TailwindBuilder().focus("outline-none", "ring-2").build()
    assert focus_state == "focus:outline-none focus:ring-2", "Focus state styling"
    
    # Active state - when element is being clicked/pressed
    active_state = TailwindBuilder().active("scale-95").build()
    assert active_state == "active:scale-95", "Active state for click feedback"
    
    # Disabled state - for non-interactive elements
    disabled_state = TailwindBuilder().disabled("opacity-50", "cursor-not-allowed").build()
    assert disabled_state == deduplicate_classes("disabled:opacity-50 disabled:cursor-not-allowed"), "Disabled state styling"
    
    # === Responsive Breakpoint Variants ===
    # Apply styles at different screen sizes
    
    # Small screens (640px and up)
    small_screen = TailwindBuilder().sm("p-4").build()
    assert small_screen == "sm:p-4", "Small screen variant"
    
    # Multiple classes for same breakpoint
    small_multiple = TailwindBuilder().sm("p-4", "text-lg").build()
    assert small_multiple == "sm:p-4 sm:text-lg", "Multiple small screen classes"
    
    # Medium screens (768px and up)
    medium_screen = TailwindBuilder().md("grid-cols-2").build()
    assert medium_screen == "md:grid-cols-2", "Medium screen variant"
    
    # Large screens (1024px and up)
    large_screen = TailwindBuilder().lg("flex", "gap-4").build()
    assert large_screen == "lg:flex lg:gap-4", "Large screen variant"
    
    # Extra large screens (1280px and up)
    xl_screen = TailwindBuilder().xl("text-2xl").build()
    assert xl_screen == "xl:text-2xl", "Extra large screen variant"
    
    # 2xl screens (1536px and up)
    xxl_screen = TailwindBuilder().xxl("max-w-7xl").build()
    assert xxl_screen == "2xl:max-w-7xl", "2xl screen variant"
    
    # === Dark Mode Support ===
    # Styles that apply in dark mode
    
    # Single dark mode class
    dark_single = TailwindBuilder().dark("bg-gray-800").build()
    assert dark_single == "dark:bg-gray-800", "Dark mode background"
    
    # Multiple dark mode classes
    dark_multiple = TailwindBuilder().dark("bg-gray-800", "text-white").build()
    assert dark_multiple == "dark:bg-gray-800 dark:text-white", "Dark mode theme"
    
    # === Group and Peer Variants ===
    # Parent-child interaction patterns
    
    # Group marker
    group_marker = TailwindBuilder().group().build()
    assert group_marker == "group", "Group parent marker"
    
    # Peer marker
    peer_marker = TailwindBuilder().peer().build()
    assert peer_marker == "peer", "Peer sibling marker"
    
    # Group hover - child changes when parent is hovered
    group_hover = TailwindBuilder().group_hover("bg-blue-500").build()
    assert group_hover == "group-hover:bg-blue-500", "Group hover variant"
    
    # Peer hover - element changes when sibling is hovered
    peer_hover = TailwindBuilder().peer_hover("text-blue-500").build()
    assert peer_hover == "peer-hover:text-blue-500", "Peer hover variant"
    
    # === Child Selector Variants ===
    # Target specific children in lists
    
    # First child
    first_child = TailwindBuilder().first("mt-0").build()
    assert first_child == "first:mt-0", "Remove top margin on first child"
    
    # Last child
    last_child = TailwindBuilder().last("mb-0").build()
    assert last_child == "last:mb-0", "Remove bottom margin on last child"
    
    # Even children (2nd, 4th, 6th, etc.)
    even_children = TailwindBuilder().even("bg-gray-100").build()
    assert even_children == "even:bg-gray-100", "Zebra striping for even rows"
    
    # Odd children (1st, 3rd, 5th, etc.)
    odd_children = TailwindBuilder().odd("bg-white").build()
    assert odd_children == "odd:bg-white", "Zebra striping for odd rows"
    
    # === Advanced Modifier Stacking ===
    # Combine multiple modifiers for complex interactions
    
    # Single modifier with single class
    single_modifier = TailwindBuilder().modifiers("dark", "hover", classes="bg-blue-500").build()
    assert single_modifier == "dark:hover:bg-blue-500", "Dark mode hover state"
    
    # Responsive modifier
    responsive_modifier = TailwindBuilder().modifiers("sm", classes="hidden").build()
    assert responsive_modifier == "sm:hidden", "Hidden on small screens"
    
    # Triple modifier stack
    triple_stack = TailwindBuilder().modifiers("lg", "dark", "hover", classes="text-white").build()
    assert triple_stack == "lg:dark:hover:text-white", "Complex modifier stack"
    
    # Modifiers with multiple classes
    multi_class_modifier = TailwindBuilder().modifiers("dark", classes=["bg-gray-800", "text-white"]).build()
    assert multi_class_modifier == "dark:bg-gray-800 dark:text-white", "Multiple classes with same modifier"
    
    # Stacked modifiers with multiple classes
    stacked_multi = TailwindBuilder().modifiers("hover", "focus", classes=["ring-2", "ring-blue-500"]).build()
    assert stacked_multi == "hover:focus:ring-2 hover:focus:ring-blue-500", "Stacked modifiers on multiple classes"
    
    # === Real-World Examples ===
    # Common patterns using variants
    
    # Interactive button
    button = (TailwindBuilder()
        .util("bg-blue-500", "text-white", "px-4", "py-2", "rounded")
        .hover("bg-blue-600")
        .active("scale-95")
        .disabled("opacity-50", "cursor-not-allowed")
        .build())
    assert "bg-blue-500" in button, "Button has base background"
    assert "hover:bg-blue-600" in button, "Button has hover state"
    assert "active:scale-95" in button, "Button has active state"
    assert "disabled:opacity-50" in button, "Button has disabled state"
    
    # Responsive layout
    responsive_layout = (TailwindBuilder()
        .util("grid", "gap-4")
        .sm("grid-cols-1")
        .md("grid-cols-2")
        .lg("grid-cols-3")
        .xl("grid-cols-4")
        .build())
    assert "grid" in responsive_layout, "Base grid layout"
    assert "sm:grid-cols-1" in responsive_layout, "1 column on small"
    assert "md:grid-cols-2" in responsive_layout, "2 columns on medium"
    assert "lg:grid-cols-3" in responsive_layout, "3 columns on large"
    assert "xl:grid-cols-4" in responsive_layout, "4 columns on extra large"
    
    # Dark mode theme
    themed_card = (TailwindBuilder()
        .util("bg-white", "text-gray-900", "p-6", "rounded-lg", "shadow")
        .dark("bg-gray-800", "text-white")
        .build())
    assert "bg-white" in themed_card, "Light mode background"
    assert "text-gray-900" in themed_card, "Light mode text"
    assert "dark:bg-gray-800" in themed_card, "Dark mode background"
    assert "dark:text-white" in themed_card, "Dark mode text"
    
    # Group interaction pattern
    interactive_card = (TailwindBuilder()
        .group()
        .util("relative", "p-4", "cursor-pointer")
        .group_hover("scale-105", "shadow-lg")
        .build())
    assert "group" in interactive_card, "Group parent marker"
    assert "group-hover:scale-105" in interactive_card, "Scale on group hover"
    assert "group-hover:shadow-lg" in interactive_card, "Shadow on group hover"
    
    # === Edge Cases ===
    # Test boundary conditions
    
    # Empty variant calls return empty string
    assert TailwindBuilder().hover().build() == "", "Empty hover returns empty string"
    assert TailwindBuilder().sm().build() == "", "Empty responsive returns empty string"
    assert TailwindBuilder().modifiers("hover", classes=[]).build() == "", "Empty modifier classes returns empty string"
    
    return "All variant tests passed!"
