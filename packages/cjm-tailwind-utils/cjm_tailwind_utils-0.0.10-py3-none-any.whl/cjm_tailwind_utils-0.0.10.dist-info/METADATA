Metadata-Version: 2.4
Name: cjm-tailwind-utils
Version: 0.0.10
Summary: Type-safe, chainable Tailwind CSS class builder with validation, deduplication, and modern CSS support.
Home-page: https://github.com/cj-mills/cjm-tailwind-utils
Author: Christian J. Mills
Author-email: 9126128+cj-mills@users.noreply.github.com
License: Apache Software License 2.0
Keywords: nbdev jupyter notebook python
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastcore
Provides-Extra: dev
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# cjm-tailwind-utils


<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

### Installation

``` sh
$ pip install cjm_tailwind_utils
```

## Project Structure

    nbs/
    ├── all.ipynb        # Convenience module that imports all TailwindBuilder methods.
    ├── cli.ipynb        # CLI tool for Claude Code and other coding assistants to understand and use cjm-tailwind-utils optimally
    ├── colors.ipynb     # Color system with validation for Tailwind colors, hex, RGB, HSL, and CSS variables. Provides color validation and normalization for style utilities.
    ├── core.ipynb       # Core TailwindBuilder class with chainable API, deduplication, and utility methods. This is the foundation - always import this module first.
    ├── layout.ipynb     # Layout utilities for spacing (padding, margin), sizing (width, height), positioning, flexbox, and grid. Essential for component structure and spacing.
    ├── modern.ipynb     # Tailwind v4+ features including container queries, `:has()` pseudo-class, and `@supports`. Optional module for cutting-edge CSS features.
    ├── style.ipynb      # Visual styling utilities for typography, backgrounds, borders, shadows, and effects. Depends on colors module for color validation.
    ├── types.ipynb      # Type definitions for Tailwind values (spacing, colors, sizes, etc.). Import only when you need type hints for better IDE support and type checking.
    ├── validation.ipynb # Validation functions and error handling for Tailwind utilities. Internal module - typically not imported directly unless creating custom utilities.
    └── variants.ipynb   # State variants (hover, focus), responsive breakpoints (sm, md, lg), dark mode, and modifier utilities. Add interactivity and responsiveness to components.

Total: 10 notebooks

## Module Dependencies

``` mermaid
graph LR
    all[all<br/>All]
    cli[cli<br/>CLI]
    colors[colors<br/>Colors]
    core[core<br/>Core]
    layout[layout<br/>Layout]
    modern[modern<br/>Modern]
    style_mod[style<br/>Style]
    types[types<br/>Type Definitions]
    validation[validation<br/>Validation]
    variants[variants<br/>Variants]

    all --> modern
    all --> layout
    all --> style_mod
    all --> variants
    all --> core
    cli --> core
    colors --> validation
    colors --> types
    core --> types
    core --> validation
    layout --> types
    layout --> validation
    layout --> core
    modern --> core
    style_mod --> colors
    style_mod --> core
    style_mod --> validation
    style_mod --> types
    variants --> core
```

*19 cross-module dependencies detected*

## CLI Reference

### `cjm-tailwind-utils` Command

    usage: cjm-tailwind-utils [-h]
                              {list-methods,method,method-source,list-variables,variable,variable-source,list-types,type,type-source,list-imports,import,module,search,list-examples,examples,validate-code}
                              ...

    cjm-tailwind-utils: Type-safe, chainable Tailwind CSS class builder with validation, deduplication, and modern CSS support.

    This library provides a fluent API for building Tailwind CSS classes programmatically in Python.
    Key features: method chaining, automatic deduplication, arbitrary value support, and modern CSS (v4+).

    This CLI tool helps you explore the library's API: discover methods, view examples, understand imports.
    Perfect for coding assistants to quickly understand available functionality and usage patterns.

    Quick start: Try "cjm-tailwind-utils list-imports" to see import patterns, or
    "cjm-tailwind-utils search <keyword>" to find specific methods.

    For coding assistants: Use "cjm-tailwind-utils validate-code" to test your code snippets!

    positional arguments:
      {list-methods,method,method-source,list-variables,variable,variable-source,list-types,type,type-source,list-imports,import,module,search,list-examples,examples,validate-code}
                            Commands (use "<command> -h" for help)
        list-methods        Show all TailwindBuilder methods → Find what you can
                            build
        method              Get method details → See parameters and usage
        method-source       View method source → Understand implementation
        list-variables      Show constants/variables → See available data
        variable            Get variable details → See value and usage
        variable-source     View variable source → See definition
        list-types          Show type definitions → For type hints
        type                Get type details → See allowed values
        type-source         View type source → See definition
        list-imports        Show import patterns → Start here!
        import              Get import details → See what it provides
        module              Explore a module → See methods and usage
        search              Search everything → Find by keyword
        list-examples       Show example modules → Learn by example
        examples            View example code → See real usage
        validate-code       Test your code snippets → Auto-imports & helpful
                            errors!

    options:
      -h, --help            show this help message and exit

For detailed help on any command, use
`cjm-tailwind-utils <command> --help`.

## Module Overview

Detailed documentation for each module in the project:

### All (`all.ipynb`)

> Convenience module that imports all TailwindBuilder methods.

#### Import

``` python
from cjm_tailwind_utils.all import (
    test_all_usage_examples
)
```

#### Functions

``` python
def test_all_usage_examples()
    """
    Test and demonstrate comprehensive TailwindBuilder usage with all modules.
    
    This function serves as both a test suite and a comprehensive usage guide
    for using TailwindBuilder with all methods available from all modules.
    It demonstrates how the 'all' module provides convenient access to the
    complete TailwindBuilder API.
    
    Rather than duplicating all tests, this function runs the test functions
    from each individual module to ensure comprehensive coverage.
    """
```

### CLI (`cli.ipynb`)

> CLI tool for Claude Code and other coding assistants to understand and
> use cjm-tailwind-utils optimally

#### Import

``` python
from cjm_tailwind_utils.cli import (
    MethodInfo,
    get_all_tailwind_methods,
    get_module_methods,
    cmd_list_methods,
    cmd_module_info,
    cmd_search,
    cmd_method_details,
    cmd_source,
    VariableInfo,
    get_all_exported_variables,
    cmd_list_variables,
    cmd_variable_details,
    cmd_variable_source,
    TypeInfo,
    get_all_type_definitions,
    cmd_list_types,
    cmd_type_details,
    cmd_type_source,
    ImportInfo,
    get_import_patterns,
    cmd_list_imports,
    cmd_import_details,
    ExampleInfo,
    get_all_test_examples,
    cmd_list_examples,
    cmd_show_example,
    cmd_validate_code,
    main
)
```

#### Functions

``` python
def get_all_tailwind_methods(
) -> Dict[str, MethodInfo]:  # Dictionary mapping method names to MethodInfo objects
    "Discover all TailwindBuilder methods using introspection."
```

``` python
def get_module_methods(
) -> Dict[str, List[str]]:  # Dictionary mapping module names to lists of method names
    "Get methods organized by module using ground truth introspection."
```

``` python
def cmd_list_methods(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "List all available TailwindBuilder methods."
```

``` python
def cmd_module_info(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show detailed information about a specific module."
```

``` python
def cmd_search(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Search for methods by keyword."
```

``` python
def cmd_method_details(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show detailed signature and parameter information for a specific method."
```

``` python
def cmd_source(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show the full source code for a specific method."
```

``` python
def get_all_exported_variables(
) -> Dict[str, VariableInfo]:  # Dictionary mapping variable names to VariableInfo objects
    "Discover all exported variables/constants using introspection."
```

``` python
def cmd_list_variables(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "List all exported variables/constants."
```

``` python
def cmd_variable_details(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show detailed information about a specific variable/constant."
```

``` python
def cmd_variable_source(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show the source definition of a specific variable/constant."
```

``` python
def get_all_type_definitions(
) -> Dict[str, TypeInfo]:  # Dictionary mapping type names to TypeInfo objects
    "Discover all type definitions using introspection."
```

``` python
def cmd_list_types(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "List all type definitions."
```

``` python
def cmd_type_details(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show detailed information about a specific type definition."
```

``` python
def cmd_type_source(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show the source definition of a specific type."
```

``` python
def get_import_patterns(
) -> Dict[str, ImportInfo]:  # Dictionary mapping pattern names to ImportInfo objects
    "Discover optimal import patterns using ground truth analysis."
```

``` python
def cmd_list_imports(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "List all recommended import patterns."
```

``` python
def cmd_import_details(
    args    # Parsed command line arguments from argparse - TODO: Add type hint
): # None
    "Show detailed information about a specific import pattern."
```

``` python
def get_all_test_examples(
) -> Dict[str, ExampleInfo]:  # Dictionary mapping module names to ExampleInfo objects
    "Discover all test example functions following the test_<module>_usage_examples naming convention."
```

``` python
def cmd_list_examples(
    args    # Parsed command line arguments from argparse
): # None
    "List all available test example functions."
```

``` python
def cmd_show_example(
    args    # Parsed command line arguments from argparse
): # None
    "Show the source code of a specific test example function."
```

``` python
def cmd_validate_code(
    args    # Parsed command line arguments from argparse
): # None
    "Validate Python code that uses cjm-tailwind-utils."
```

``` python
def main(
): # None
    "Main CLI entry point for cjm-tailwind-utils"
```

#### Classes

``` python
@dataclass
class MethodInfo:
    "Information about a TailwindBuilder method"
    
    name: str
    module: str
    signature: str
    docstring: Optional[str]
    return_type: str
    parameters: List[Dict[str, Any]]
```

``` python
@dataclass
class VariableInfo:
    "Information about an exported variable/constant"
    
    name: str
    module: str
    type_name: str
    value: Any
    value_preview: str
    docstring: Optional[str]
```

``` python
@dataclass
class TypeInfo:
    "Information about a type definition"
    
    name: str
    module: str
    type_kind: str  # 'TypeAlias', 'Union', 'Literal', etc.
    definition: str
    docstring: Optional[str]
    actual_type: Any
```

``` python
@dataclass
class ImportInfo:
    "Information about import patterns and recommendations"
    
    import_statement: str
    description: str
    use_case: str
    items: List[str]
    dependencies: List[str]
```

``` python
@dataclass
class ExampleInfo:
    "Information about a test example function"
    
    name: str
    module: str
    function_name: str
    docstring: Optional[str]
    source: str
```

### Colors (`colors.ipynb`)

> Color system with validation for Tailwind colors, hex, RGB, HSL, and
> CSS variables. Provides color validation and normalization for style
> utilities.

#### Import

``` python
from cjm_tailwind_utils.colors import (
    TAILWIND_COLORS,
    SPECIAL_COLORS,
    HEX_PATTERN,
    RGB_PATTERN,
    HSL_PATTERN,
    VAR_PATTERN,
    is_valid_color,
    normalize_color,
    validate_color_value,
    color_with_opacity,
    make_color,
    test_colors_usage_examples
)
```

#### Functions

``` python
def is_valid_color(
    color: str  # Color string to validate
) -> bool:  # True if valid color, False otherwise
    "Validate if a string is a valid color value. Valid colors include: - Tailwind color names (with or without shade) - Special color keywords - Hex colors (#RGB, #RRGGBB, #RRGGBBAA) - RGB/RGBA functions - HSL/HSLA functions - CSS variables"
```

``` python
def normalize_color(
    color: str  # Color string to normalize
) -> str:  # Normalized color string
    "Normalize color value for use in Tailwind classes. This function handles: - Standard Tailwind colors (returns as-is) - CSS color functions (ensures proper formatting) - CSS variables (ensures proper formatting)"
```

``` python
def validate_color_value(
    color: str,  # The color value to validate
    allow_opacity_suffix: bool = False  # Whether to allow opacity suffix like 'white/80'
) -> None:  # No return value
    "Validate a color value using the is_valid_color function."
```

``` python
def color_with_opacity(
    color: str,  # Base color value
    opacity: Optional[OpacityValue] = None  # Optional opacity value (0-100)
) -> str:  # Color string with opacity modifier if provided
    "Generate color string with optional opacity modifier."
```

``` python
def make_color(
    base: BaseColor,  # Base color name
    shade: ColorShade  # Color shade value
) -> str:  # Complete color string (e.g., "blue-500")
    "Create a color string from base color and shade."
```

``` python
def test_colors_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate color system functionality.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the color validation and manipulation system. It demonstrates:
    
    1. Tailwind color validation (with base colors and shades)
    2. Special color keywords (transparent, current, inherit, etc.)
    3. CSS color format support (hex, rgb, hsl, CSS variables)
    4. Color normalization for consistent formatting
    5. Opacity suffix validation
    6. Error handling for invalid colors
    7. Helper functions for building color strings
    
    Each test includes clear examples to help coding assistants understand
    proper color handling in the cjm-tailwind-utils library.
    """
```

#### Variables

``` python
TAILWIND_COLORS = {22 items}  # Predefined Tailwind color palette
SPECIAL_COLORS  # Special colors that don't have shades
HEX_PATTERN  # ([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$') # CSS Hex color format patterns
RGB_PATTERN  # CSS RGB color format patterns
HSL_PATTERN  # CSS HSL color format patterns
VAR_PATTERN  # CSS VAR color format patterns
```

### Core (`core.ipynb`)

> Core TailwindBuilder class with chainable API, deduplication, and
> utility methods. This is the foundation - always import this module
> first.

#### Import

``` python
from cjm_tailwind_utils.core import (
    deduplicate_classes,
    TailwindBuilder,
    test_core_usage_examples
)
```

#### Functions

``` python
def _smart_split_classes(class_string: str) -> List[str]:
    """Split a class string intelligently, preserving spaces within brackets/parentheses.
    
    This function handles cases like 'supports-[(display: grid)]:grid' where spaces
    inside brackets should not cause the class to be split.
    """
    if not class_string
    """
    Split a class string intelligently, preserving spaces within brackets/parentheses.
    
    This function handles cases like 'supports-[(display: grid)]:grid' where spaces
    inside brackets should not cause the class to be split.
    """
```

``` python
def deduplicate_classes(
    *class_sources: Union[str, List[str], None] # Multiple sources of CSS classes (strings, lists, or None)
) -> str:  # Space-separated string of deduplicated CSS classes, sorted alphabetically
    """
    Deduplicate CSS classes from multiple sources.
    
    Takes multiple sources of CSS classes (strings, lists, or None values) and
    returns a single space-separated string with duplicates removed and sorted
    alphabetically for consistency.
    
    Args:
        *class_sources: Variable number of class sources, each can be:
            - A space-separated string of CSS classes
            - A list of CSS class strings
            - None (will be ignored)
    
    Returns:
        A space-separated string of unique CSS classes, sorted alphabetically
        
    Examples:
        >>> deduplicate_classes("btn btn-primary", ["btn", "btn-lg"])
        'btn btn-lg btn-primary'
        
        >>> deduplicate_classes("hidden md:block", None, ["hidden", "lg:block"])
        'hidden lg:block md:block'
    """
```

``` python
@patch
def arbitrary(
    self:TailwindBuilder,
    prefix: str,  # CSS utility prefix (e.g., 'p', 'w', 'text')
    value: str,  # Arbitrary value (e.g., '23px', '#1da1f2', 'calc(100%-1rem)')
    suffix: Optional[str] = None  # Optional suffix (e.g., for p-[20px]/50)
) -> Self:  # Returns self for chaining
    "Generate arbitrary value utility class."
```

``` python
@patch
def util(
    self:TailwindBuilder,
    *classes: str  # Raw Tailwind utility classes to add
) -> Self:  # Returns self for chaining
    """
    Add raw Tailwind utility classes without validation.
    
    This method allows adding any Tailwind utility classes directly,
    useful for custom utilities, newer Tailwind features, or third-party plugins.
    """
```

``` python
@patch
def add_class(
    self:TailwindBuilder,
    class_str: str  # Class string to add
) -> Self:  # Returns self for chaining
    "Add arbitrary class string."
```

``` python
@patch
def build(
    self:TailwindBuilder
) -> str:  # Final class string
    "Build and return the final class string."
```

``` python
@patch
def __str__(
    self:TailwindBuilder
) -> str:  # String representation
    "String representation."
```

``` python
@patch
def __repr__(
    self:TailwindBuilder
) -> str:  # Representation
    "Representation."
```

``` python
@patch
def merge(
    self:TailwindBuilder,
    *class_strings: str,
    dedupe: bool = True  # Whether to deduplicate conflicting classes (default: True)
) -> Self:  # Returns self for chaining
    "Merge multiple class strings into the builder, with optional deduplication."
```

``` python
@patch
def _spacing_class(
    self:TailwindBuilder,
    prefix: str,  # CSS class prefix (e.g., 'p', 'mx', 'gap')
    value: Union[SpacingValue, str]  # Spacing value to format
) -> str:  # Complete CSS class string
    "Build spacing utility class."
```

``` python
@patch
def _size_class(
    self:TailwindBuilder,
    prefix: str,  # CSS class prefix (e.g., 'w', 'h', 'max-w')
    value: Union[SizeValue, str]  # Size value to format
) -> str:  # Complete CSS class string
    "Build size utility class."
```

``` python
def _format_spacing_value(
    value: SpacingValue  # Spacing value to format (numeric or string)
) -> str:  # Formatted string for CSS class name
    "Format spacing value for class name."
```

``` python
def test_core_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate core TailwindBuilder functionality.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the TailwindBuilder core functionality. It demonstrates:
    
    1. Arbitrary value support with square brackets
    2. Raw utility class addition
    3. Method chaining and fluent API
    4. Class merging with deduplication
    5. Builder independence and immutability
    
    Each test includes clear variable names and comments to help coding
    assistants understand the expected behavior and use cases.
    """
```

#### Classes

``` python
class TailwindBuilder:
    def __init__(
        self,
        dedupe: bool = False      # TODO: Add description
    )
    """
    Dynamic Tailwind CSS utility class builder with chainable fluent API.
    
    This builder provides methods for generating Tailwind utility classes with proper type hints
    and validation. It uses a chainable fluent API where methods return self for chaining.
    """
    
    def __init__(
            self,
            dedupe: bool = False      # TODO: Add description
        )
        "Initialize builder."
```

### Layout (`layout.ipynb`)

> Layout utilities for spacing (padding, margin), sizing (width,
> height), positioning, flexbox, and grid. Essential for component
> structure and spacing.

#### Import

``` python
from cjm_tailwind_utils.layout import (
    test_layout_usage_examples
)
```

#### Functions

``` python
@patch
def p(
    self:TailwindBuilder,
    value: Union[SpacingValue, str],  # Spacing value or arbitrary value string
    side: Optional[Literal["t", "r", "b", "l", "x", "y"]] = None  # Optional side specification
) -> Self:  # Self for chaining
    "Generate padding utility class with arbitrary value support and validation."
```

``` python
@patch
def m(
    self:TailwindBuilder,
    value: Union[SpacingValue, str],  # Spacing value or arbitrary value string
    side: Optional[Literal["t", "r", "b", "l", "x", "y"]] = None,  # Optional side specification
    negative: bool = False  # Whether to apply negative value
) -> Self:  # Self for chaining
    "Generate margin utility class with arbitrary value support, validation, and negative values."
```

``` python
@patch
def gap(
    self:TailwindBuilder,
    value: Union[SpacingValue, str],  # Spacing value or arbitrary value string
    axis: Optional[Literal["x", "y"]] = None  # Optional axis specification
) -> Self:  # Self for chaining
    "Generate gap utility class with arbitrary value support."
```

``` python
@patch
def space(
    self:TailwindBuilder,
    value: Union[SpacingValue, str],  # Spacing value or arbitrary value string
    axis: Literal["x", "y"]  # Axis for spacing
) -> Self:  # Self for chaining
    "Generate space between utility class with arbitrary value support."
```

``` python
@patch
def w(
    self:TailwindBuilder,
    value: Union[SizeValue, str],  # Size value or arbitrary value string
    important: bool = False  # Whether to add !important modifier
) -> Self:  # Self for chaining
    "Generate width utility class with arbitrary value support."
```

``` python
@patch
def h(
    self:TailwindBuilder,
    value: Union[SizeValue, str],  # Size value or arbitrary value string
    important: bool = False  # Whether to add !important modifier
) -> Self:  # Self for chaining
    "Generate height utility class with arbitrary value support."
```

``` python
@patch
def size(
    self:TailwindBuilder,
    value: Union[SizeValue, str]  # Size value or arbitrary value string
) -> Self:  # Self for chaining
    "Generate size utility class (sets both width and height) with arbitrary value support."
```

``` python
@patch
def min_w(
    self:TailwindBuilder,
    value: Union[SizeValue, str]  # Size value or arbitrary value string
) -> Self:  # Self for chaining
    "Generate min-width utility class with arbitrary value support."
```

``` python
@patch
def max_w(
    self:TailwindBuilder,
    value: Union[SizeValue, str, Literal["xs", "sm", "md", "lg", "xl", "2xl", "3xl", "4xl", "5xl", "6xl", "7xl", "prose"]]  # Size value, arbitrary value, or named size
) -> Self:  # Self for chaining
    "Generate max-width utility class with arbitrary value support."
```

``` python
@patch
def min_h(
    self:TailwindBuilder,
    value: Union[SizeValue, str]  # Size value or arbitrary value string
) -> Self:  # Self for chaining
    "Generate min-height utility class with arbitrary value support."
```

``` python
@patch
def max_h(
    self:TailwindBuilder,
    value: Union[SizeValue, str]  # Size value or arbitrary value string
) -> Self:  # Self for chaining
    "Generate max-height utility class with arbitrary value support."
```

``` python
@patch
def position(
    self:TailwindBuilder,
    value: Literal["static", "fixed", "absolute", "relative", "sticky"]  # Position type
) -> Self:  # Self for chaining
    "Generate position utility class."
```

``` python
@patch
def inset(
    self:TailwindBuilder,
    value: Union[SpacingValue, str],  # Inset value or arbitrary value string
    side: Optional[Literal["top", "right", "bottom", "left", "x", "y"]] = None,  # Optional side specification
    negative: bool = False  # Whether to apply negative value
) -> Self:  # Self for chaining
    "Generate inset (top/right/bottom/left) utility class with arbitrary value support and negative values."
```

``` python
@patch
def z(
    self:TailwindBuilder,
    value: Union[ZIndexValue, int, str]  # Z-index value, integer, or arbitrary value string
) -> Self:  # Self for chaining
    "Generate z-index utility class with arbitrary value support."
```

``` python
@patch
def display(
    self:TailwindBuilder,
    value: Literal["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"]  # Display type
) -> Self:  # Self for chaining
    "Generate display utility class."
```

``` python
@patch
def flex(self:TailwindBuilder, 
         direction: Optional[Literal["row", "row-reverse", "col", "col-reverse"]] = None,
         wrap: Optional[Literal["wrap", "wrap-reverse", "nowrap"]] = None,
         grow: Optional[Literal[0, 1]] = None,
         shrink: Optional[Literal[0, 1]] = None,
         basis: Optional[Union[SizeValue, str]] = None) -> Self
    "Generate flex utility classes with arbitrary value support."
```

``` python
@patch
def items(
    self:TailwindBuilder,
    value: Literal["start", "end", "center", "baseline", "stretch"]  # Alignment value for flex/grid items
) -> Self:  # Self for chaining
    "Generate align-items utility class."
```

``` python
@patch
def justify(
    self:TailwindBuilder,
    value: Literal["normal", "start", "end", "center", "between", "around", "evenly", "stretch"]  # Justify-content value
) -> Self:  # Self for chaining
    "Generate justify-content utility class."
```

``` python
@patch
def align(
    self:TailwindBuilder,
    value: Literal["auto", "start", "end", "center", "stretch", "baseline"]  # Align-self value
) -> Self:  # Self for chaining
    "Generate align-self utility class."
```

``` python
@patch
def grid(self:TailwindBuilder, 
         cols: Optional[Union[int, Literal["none"], str]] = None,
         rows: Optional[Union[int, Literal["none"], str]] = None,
         flow: Optional[Literal["row", "col", "dense", "row-dense", "col-dense"]] = None) -> Self
    "Generate grid utility classes with arbitrary value support."
```

``` python
@patch
def col(
    self:TailwindBuilder,
    span: Union[int, Literal["auto", "full"]],  # Number of columns to span or keyword
    start: Optional[int] = None  # Starting column number
) -> Self:  # Self for chaining
    "Generate grid column utility classes."
```

``` python
@patch
def row(
    self:TailwindBuilder,
    span: Union[int, Literal["auto", "full"]],  # Number of rows to span or keyword
    start: Optional[int] = None  # Starting row number
) -> Self:  # Self for chaining
    "Generate grid row utility classes."
```

``` python
def test_layout_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate layout utilities for spacing, sizing, positioning, flexbox, and grid.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the layout utilities in cjm-tailwind-utils. It demonstrates:
    
    1. Spacing utilities (padding, margin, gap, space)
    2. Size utilities (width, height, min/max dimensions)
    3. Position utilities (position type, inset, z-index)
    4. Display utilities
    5. Flexbox utilities and parameters
    6. Grid utilities and configuration
    7. Arbitrary value support
    8. Negative value support
    9. Method chaining and fluent API
    
    Each test includes clear examples to help coding assistants understand
    proper usage of layout utilities.
    """
```

### Modern (`modern.ipynb`)

> Tailwind v4+ features including container queries, `:has()`
> pseudo-class, and `@supports`. Optional module for cutting-edge CSS
> features.

#### Import

``` python
from cjm_tailwind_utils.modern import (
    test_modern_usage_examples
)
```

#### Functions

``` python
@patch
def container_query(
    self:TailwindBuilder,
    name: Optional[str] = None  # Optional container name
) -> Self:  # Self for chaining
    "Add container query support for container queries."
```

``` python
@patch
def cq(
    self:TailwindBuilder,
    size: Union[str, int],  # Container size (e.g., 'sm', 'md', '300px', 20)
    *classes: str  # Classes to apply at container size
) -> Self:  # Self for chaining
    "Add container query size variant to classes."
```

``` python
@patch
def has(
    self:TailwindBuilder,
    selector: str,  # Selector to check for (e.g., 'hover', '[disabled]')
    *classes: str  # Classes to apply when selector matches
) -> Self:  # Self for chaining
    "Add :has() pseudo-class support."
```

``` python
@patch
def supports(
    self:TailwindBuilder,
    feature: str,  # CSS feature to check support for
    *classes: str  # Classes to apply when feature is supported
) -> Self:  # Self for chaining
    "Add @supports feature query support."
```

``` python
@patch
def data(
    self:TailwindBuilder,
    attribute: str,  # Data attribute to check (without data- prefix)
    value: Optional[str] = None,  # Optional value to match
    *classes: str  # Classes to apply when data attribute matches
) -> Self:  # Self for chaining
    "Add data attribute selector support."
```

``` python
def test_modern_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate modern CSS features for cutting-edge web development.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the modern utilities in cjm-tailwind-utils. It demonstrates:
    
    1. Container queries for component-based responsive design
    2. Container query size variants
    3. :has() pseudo-class for parent selection
    4. @supports feature queries for progressive enhancement
    5. Data attribute selectors for state-based styling
    6. Method chaining with modern features
    
    Each test includes clear examples to help coding assistants understand
    modern CSS features available in Tailwind CSS v4+.
    """
```

### Style (`style.ipynb`)

> Visual styling utilities for typography, backgrounds, borders,
> shadows, and effects. Depends on colors module for color validation.

#### Import

``` python
from cjm_tailwind_utils.style import (
    test_style_usage_examples
)
```

#### Functions

``` python
@patch
def text(self:TailwindBuilder, 
         size: Optional[Union[Literal["xs", "sm", "base", "lg", "xl", "2xl", "3xl", "4xl", "5xl", "6xl", "7xl", "8xl", "9xl"], str]] = None,
         align: Optional[Literal["left", "center", "right", "justify", "start", "end"]] = None,
         weight: Optional[Literal["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black"]] = None,
         color: Optional[Union[ColorValue, str]] = None) -> Self
    "Generate text utility classes with color validation and arbitrary value support."
```

``` python
@patch
def font(
    self:TailwindBuilder,
    family: Union[Literal["sans", "serif", "mono"], str]  # Font family type or arbitrary value
) -> Self:  # Returns self for chaining
    "Generate font family utility class with arbitrary value support."
```

``` python
@patch
def leading(
    self:TailwindBuilder,
    value: Union[Literal["none", "tight", "snug", "normal", "relaxed", "loose"], int, str]  # Line height value or arbitrary value
) -> Self:  # Returns self for chaining
    "Generate line-height utility class with arbitrary value support."
```

``` python
@patch
def tracking(
    self:TailwindBuilder,
    value: Union[Literal["tighter", "tight", "normal", "wide", "wider", "widest"], str]  # Letter spacing value or arbitrary value
) -> Self:  # Returns self for chaining
    "Generate letter-spacing utility class with arbitrary value support."
```

``` python
@patch
def bg(
    self:TailwindBuilder,
    color: Union[ColorValue, str],  # Background color value or arbitrary value
    opacity: Optional[OpacityValue] = None,  # Optional opacity value (0-100)
    validate: bool = True # Vaidate the provided color predefined Tailwind color palette
) -> Self:  # Returns self for chaining
    "Generate background color utility class with validation and arbitrary value support."
```

``` python
@patch
def border(self:TailwindBuilder, 
           width: Optional[Union[Literal[0, 2, 4, 8], Literal[""], str]] = "",
           side: Optional[Literal["t", "r", "b", "l", "x", "y"]] = None,
           color: Optional[Union[ColorValue, str]] = None,  # Border color value or arbitrary value
           style: Optional[Literal["solid", "dashed", "dotted", "double", "hidden", "none"]] = None) -> Self
    "Generate border utility classes with color validation and arbitrary value support."
```

``` python
@patch
def rounded(self:TailwindBuilder, 
            size: Optional[Union[Literal["none", "sm", "", "md", "lg", "xl", "2xl", "3xl", "full"], str]] = "",
            side: Optional[Literal["t", "r", "b", "l", "tl", "tr", "br", "bl"]] = None) -> Self
    "Generate border-radius utility class with arbitrary value support."
```

``` python
@patch
def shadow(
    self:TailwindBuilder,
    size: Optional[Union[Literal["sm", "", "md", "lg", "xl", "2xl", "inner", "none"], str]] = ""  # Shadow size or arbitrary value
) -> Self:  # Returns self for chaining
    "Generate box-shadow utility class with arbitrary value support."
```

``` python
@patch
def opacity(
    self:TailwindBuilder,
    value: Union[OpacityValue, int, float, str]  # Opacity value or arbitrary value
) -> Self:  # Returns self for chaining
    "Generate opacity utility class with arbitrary value support."
```

``` python
@patch
def overflow(self:TailwindBuilder, 
             value: Literal["auto", "hidden", "clip", "visible", "scroll"],
             axis: Optional[Literal["x", "y"]] = None) -> Self
    "Generate overflow utility class."
```

``` python
@patch
def object(self:TailwindBuilder, 
           fit: Optional[Literal["contain", "cover", "fill", "none", "scale-down"]] = None,
           position: Optional[Union[Literal["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"], str]] = None) -> Self
    "Generate object-fit and object-position utility classes with arbitrary value support."
```

``` python
@patch
def cursor(
    self:TailwindBuilder,
    value: Union[Literal["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out"], str]  # Cursor type or arbitrary value
) -> Self:  # Returns self for chaining
    "Generate cursor utility class with arbitrary value support."
```

``` python
@patch
def transition(self:TailwindBuilder, 
               property: Optional[Literal["none", "all", "", "colors", "opacity", "shadow", "transform"]] = "",
               duration: Optional[Union[Literal[75, 100, 150, 200, 300, 500, 700, 1000], int, str]] = None,
               timing: Optional[Union[Literal["linear", "in", "out", "in-out"], str]] = None,
               delay: Optional[Union[int, str]] = None) -> Self
    "Generate transition utility classes with arbitrary value support."
```

``` python
@patch
def animate(
    self:TailwindBuilder,
    value: Union[Literal["none", "spin", "ping", "pulse", "bounce"], str]  # Animation type or arbitrary value
) -> Self:  # Returns self for chaining
    "Generate animation utility class with arbitrary value support."
```

``` python
@patch
def transform(self:TailwindBuilder, 
              scale: Optional[Union[Literal[0, 50, 75, 90, 95, 100, 105, 110, 125, 150], Tuple[Literal["x", "y"], Union[Literal[0, 50, 75, 90, 95, 100, 105, 110, 125, 150], str]], str]] = None,
              rotate: Optional[Union[Literal[0, 1, 2, 3, 6, 12, 45, 90, 180], Literal["-1", "-2", "-3", "-6", "-12", "-45", "-90", "-180"], str]] = None,
              translate: Optional[Union[Tuple[Literal["x", "y"], Union[SpacingValue, str, Tuple[Union[SpacingValue, str], bool]]], str]] = None) -> Self
    "Generate transform utility classes with arbitrary value support and negative translate."
```

``` python
@patch
def container(
    self:TailwindBuilder,
    center: bool = True,  # Whether to center the container with mx-auto
    padding: Optional[SpacingValue] = None  # Optional padding to add
) -> Self:  # Returns self for chaining
    "Generate container utility classes."
```

``` python
@patch
def stack(
    self:TailwindBuilder,
    gap: SpacingValue = 4  # Gap between stacked items
) -> Self:  # Returns self for chaining
    "Generate flex stack utility classes."
```

``` python
@patch
def center(
    self:TailwindBuilder,
    method: Literal["flex", "grid", "absolute"] = "flex"  # Centering method to use
) -> Self:  # Returns self for chaining
    "Generate centering utility classes."
```

``` python
@patch
def prose(
    self:TailwindBuilder,
    size: Optional[Literal["sm", "", "lg", "xl", "2xl"]] = ""  # Prose size variant
) -> Self:  # Returns self for chaining
    "Generate prose (typography) utility classes."
```

``` python
@patch
def sr_only(
    self:TailwindBuilder
) -> Self:  # Returns self for chaining
    "Generate screen reader only utility class."
```

``` python
@patch
def not_sr_only(
    self:TailwindBuilder
) -> Self:  # Returns self for chaining
    "Generate not screen reader only utility class."
```

``` python
def test_style_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate style utilities for visual styling and effects.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the style utilities in cjm-tailwind-utils. It demonstrates:
    
    1. Typography utilities (text size, color, alignment, weight)
    2. Font and text styling (family, line height, letter spacing)
    3. Background colors with opacity support
    4. Border utilities with comprehensive options
    5. Border radius (rounded corners)
    6. Shadow effects
    7. Opacity control
    8. Overflow behavior
    9. Object fit and position
    10. Cursor styles
    11. Transitions and animations
    12. Transform utilities (scale, rotate, translate)
    13. Helper utilities (container, stack, center, prose)
    14. Error handling for invalid values
    
    Each test includes clear examples to help coding assistants understand
    proper usage of visual styling utilities.
    """
```

### Type Definitions (`types.ipynb`)

> Type definitions for Tailwind values (spacing, colors, sizes, etc.).
> Import only when you need type hints for better IDE support and type
> checking.

#### Import

``` python
from cjm_tailwind_utils.types import (
    SpacingValue,
    FractionValue,
    SizeValue,
    OpacityValue,
    ZIndexValue,
    BaseColor,
    ColorShade,
    SpecialColor,
    ColorValue
)
```

#### Variables

``` python
SpacingValue  # Extended spacing scale with new values from Tailwind v4
FractionValue  # Fraction values
SizeValue  # Common size values
OpacityValue  # Color opacity values
ZIndexValue  # Z-index values
BaseColor  # Base color names from Tailwind CSS color palette
ColorShade  # Standard color shade values
SpecialColor  # Special color keywords
ColorValue  # Complete color value type
```

### Validation (`validation.ipynb`)

> Validation functions and error handling for Tailwind utilities.
> Internal module - typically not imported directly unless creating
> custom utilities.

#### Import

``` python
from cjm_tailwind_utils.validation import (
    VALID_SPACING_VALUES,
    VALID_SPACING_STRINGS,
    CONFLICTING_GROUPS,
    TailwindBuilderError,
    InvalidValueError,
    InvalidColorError,
    ChainModeError,
    validate_spacing_value,
    validate_opacity_value,
    extract_modifiers,
    extract_class_prefix,
    get_conflicting_group,
    should_replace_class,
    test_validation_usage_examples
)
```

#### Functions

``` python
def validate_spacing_value(
    value: Any,  # The value to validate
    allow_negative: bool = False  # Whether to allow negative values
) -> None:  # No return value
    "Validate a spacing value."
```

``` python
def validate_opacity_value(
    value: Any  # The opacity value to validate
) -> None:  # No return value
    "Validate an opacity value."
```

``` python
def extract_modifiers(
    class_str: str  # Tailwind class string to extract modifiers from
) -> Tuple[str, str]:  # Tuple of (modifiers, base_class) where modifiers is like 'hover:dark:' or ''
    "Extract modifiers and base class from a utility class."
```

``` python
def extract_class_prefix(
    class_str: str  # Tailwind class string to extract prefix from
) -> str:  # The extracted prefix (e.g., 'p' from 'p-4', 'bg' from 'bg-blue-500')
    "Extract the prefix from a utility class."
```

``` python
def get_conflicting_group(
    prefix: str  # The utility prefix to check for conflicts
) -> Optional[str]:  # The conflicting group name if found, None otherwise
    "Get the conflicting group for a given prefix."
```

``` python
def should_replace_class(
    existing_class: str,  # The existing class string in the builder
    new_class: str  # The new class string being added
) -> bool:  # True if new_class should replace existing_class, False otherwise
    "Determine if new_class should replace existing_class."
```

``` python
def test_validation_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate validation utilities for class deduplication.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the validation system that powers intelligent class deduplication.
    It demonstrates:
    
    1. Extracting class prefixes from utility classes
    2. Handling modifiers (hover:, sm:, dark:, etc.)
    3. Detecting conflicting utility groups
    4. Smart replacement logic for deduplication
    5. Special handling for flex utilities
    6. Padding/margin specificity rules
    7. Value validation for spacing and opacity
    
    Each test includes clear examples to help coding assistants understand
    how the deduplication system works under the hood.
    """
```

#### Classes

``` python
class TailwindBuilderError(Exception):
    "Base exception for TailwindBuilder errors."
```

``` python
class InvalidValueError(TailwindBuilderError):
    "Raised when an invalid value is provided to a utility method."
```

``` python
class InvalidColorError(TailwindBuilderError):
    "Raised when an invalid color value is provided."
```

``` python
class ChainModeError(TailwindBuilderError):
    "Raised when chain-mode specific methods are called in direct mode."
```

#### Variables

``` python
VALID_SPACING_VALUES  # Valid spacing values including decimals
VALID_SPACING_STRINGS  # Valid spacing strings
CONFLICTING_GROUPS: Dict[str, Tuple[str, ...]]
```

### Variants (`variants.ipynb`)

> State variants (hover, focus), responsive breakpoints (sm, md, lg),
> dark mode, and modifier utilities. Add interactivity and
> responsiveness to components.

#### Import

``` python
from cjm_tailwind_utils.variants import (
    test_variants_usage_examples
)
```

#### Functions

``` python
@patch
def hover(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add hover state variant to classes."
```

``` python
@patch
def focus(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add focus state variant to classes."
```

``` python
@patch
def active(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add active state variant to classes."
```

``` python
@patch
def disabled(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add disabled state variant to classes."
```

``` python
@patch
def sm(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add small screen variant to classes."
```

``` python
@patch
def md(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add medium screen variant to classes."
```

``` python
@patch
def lg(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add large screen variant to classes."
```

``` python
@patch
def xl(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add extra large screen variant to classes."
```

``` python
@patch
def xxl(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add 2xl screen variant to classes."
```

``` python
@patch
def dark(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add dark mode variant to classes."
```

``` python
@patch
def group_hover(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add group-hover variant to classes."
```

``` python
@patch
def peer_hover(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add peer-hover variant to classes."
```

``` python
@patch
def modifiers(
    self:TailwindBuilder,
    *modifiers: str,
    classes: Union[str, List[str]]
) -> Self:  # Self for chaining
    "Apply multiple modifiers to classes with support for stacking."
```

``` python
@patch
def first(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add first-child variant to classes."
```

``` python
@patch
def last(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add last-child variant to classes."
```

``` python
@patch
def even(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add even-child variant to classes."
```

``` python
@patch
def odd(
    self:TailwindBuilder,
    *classes: str
) -> Self:  # Self for chaining
    "Add odd-child variant to classes."
```

``` python
@patch
def group(
    self:TailwindBuilder
) -> Self:  # Self for chaining
    "Add group class for group-hover and similar variants."
```

``` python
@patch
def peer(
    self:TailwindBuilder
) -> Self:  # Self for chaining
    "Add peer class for peer-hover and similar variants."
```

``` python
def test_variants_usage_examples(
): # TODO: Add type hint
    """
    Test and demonstrate variant utilities for state, responsiveness, and modifiers.
    
    This function serves as both a test suite and a comprehensive usage guide
    for the variant utilities in cjm-tailwind-utils. It demonstrates:
    
    1. State variants (hover, focus, active, disabled)
    2. Responsive breakpoint variants (sm, md, lg, xl, 2xl)
    3. Dark mode support
    4. Group and peer variants for parent-child interactions
    5. Child selector variants (first, last, even, odd)
    6. Advanced modifier stacking
    7. Method chaining with variants
    
    Each test includes clear examples to help coding assistants understand
    how to add interactivity and responsiveness to Tailwind classes.
    """
```
