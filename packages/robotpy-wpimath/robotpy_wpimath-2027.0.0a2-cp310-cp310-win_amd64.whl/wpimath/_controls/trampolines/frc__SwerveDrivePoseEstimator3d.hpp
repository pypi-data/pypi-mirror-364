// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/estimator/SwerveDrivePoseEstimator3d.h>

// from extra_includes
#include <frc/kinematics/SwerveModuleState.h>

#include <wpi_array_type_caster.h>

namespace swgen {

using namespace frc;

template <size_t NumModules>
struct bind_frc__SwerveDrivePoseEstimator3d {
  py::class_<typename frc::SwerveDrivePoseEstimator3d<NumModules>, py::smart_holder, frc::PoseEstimator3d<wpi::array<SwerveModuleState, NumModules>, wpi::array<SwerveModulePosition, NumModules>>> cls_SwerveDrivePoseEstimator3d;

  py::module &m;
  std::string clsName;
  bind_frc__SwerveDrivePoseEstimator3d(py::module &m, const char * clsName) :
    cls_SwerveDrivePoseEstimator3d(m, clsName),
    m(m),
    clsName(clsName) {
  }

  void finish(const char * set_doc = NULL, const char * add_doc = NULL) {
    cls_SwerveDrivePoseEstimator3d.doc() = 
      "This class wraps Swerve Drive Odometry to fuse latency-compensated\n"
      "vision measurements with swerve drive encoder distance measurements. It is\n"
      "intended to be a drop-in for SwerveDriveOdometry3d. It is also intended to be\n"
      "an easy replacement for PoseEstimator, only requiring the addition of a\n"
      "standard deviation for Z and appropriate conversions between 2D and 3D\n"
      "versions of geometry classes. (See Pose3d(Pose2d), Rotation3d(Rotation2d),\n"
      "Translation3d(Translation2d), and Pose3d.ToPose2d().)\n"
      "\n"
      "Update() should be called every robot loop.\n"
      "\n"
      "AddVisionMeasurement() can be called as infrequently as you want; if you\n"
      "never call it, then this class will behave as regular encoder\n"
      "odometry.";
    cls_SwerveDrivePoseEstimator3d
      .def(py::init<SwerveDriveKinematics<NumModules>&, const Rotation3d&, const wpi::array<SwerveModulePosition, NumModules>&, const Pose3d&>()
        , py::arg("kinematics"), py::arg("gyroAngle"), py::arg("modulePositions"), py::arg("initialPose")
        , release_gil(), py::keep_alive<1, 2>(), py::keep_alive<1, 3>(), py::keep_alive<1, 4>(), py::keep_alive<1, 5>()
        , py::doc(
        "Constructs a SwerveDrivePoseEstimator3d with default standard deviations\n"
        "for the model and vision measurements.\n"
        "\n"
        "The default standard deviations of the model states are\n"
        "0.1 meters for x, 0.1 meters for y, 0.1 meters for z, and 0.1 radians for\n"
        "angle. The default standard deviations of the vision measurements are 0.9\n"
        "meters for x, 0.9 meters for y, 0.9 meters for z, and 0.9 radians for\n"
        "angle.\n"
        "\n"
        ":param kinematics:      A correctly-configured kinematics object for your\n"
        "                        drivetrain.\n"
        ":param gyroAngle:       The current gyro angle.\n"
        ":param modulePositions: The current distance and rotation measurements of\n"
        "                        the swerve modules.\n"
        ":param initialPose:     The starting pose estimate.")
      )
      .def(py::init<SwerveDriveKinematics<NumModules>&, const Rotation3d&, const wpi::array<SwerveModulePosition, NumModules>&, const Pose3d&, const wpi::array<double, 4>&, const wpi::array<double, 4>&>()
        , py::arg("kinematics"), py::arg("gyroAngle"), py::arg("modulePositions"), py::arg("initialPose"), py::arg("stateStdDevs"), py::arg("visionMeasurementStdDevs")
        , release_gil(), py::keep_alive<1, 2>(), py::keep_alive<1, 3>(), py::keep_alive<1, 4>(), py::keep_alive<1, 5>(), py::keep_alive<1, 6>(), py::keep_alive<1, 7>()
        , py::doc(
        "Constructs a SwerveDrivePoseEstimator3d.\n"
        "\n"
        ":param kinematics:               A correctly-configured kinematics object for your\n"
        "                                 drivetrain.\n"
        ":param gyroAngle:                The current gyro angle.\n"
        ":param modulePositions:          The current distance and rotation measurements of\n"
        "                                 the swerve modules.\n"
        ":param initialPose:              The starting pose estimate.\n"
        ":param stateStdDevs:             Standard deviations of the pose estimate (x position in\n"
        "                                 meters, y position in meters, and heading in radians). Increase these\n"
        "                                 numbers to trust your state estimate less.\n"
        ":param visionMeasurementStdDevs: Standard deviations of the vision pose\n"
        "                                 measurement (x position in meters, y position in meters, and heading in\n"
        "                                 radians). Increase these numbers to trust the vision pose measurement\n"
        "                                 less.")
      )
    ;
    if (set_doc) {
      cls_SwerveDrivePoseEstimator3d.doc() = set_doc;
    }
    if (add_doc) {
      cls_SwerveDrivePoseEstimator3d.doc() = py::cast<std::string>(cls_SwerveDrivePoseEstimator3d.doc()) + add_doc;
    }
  }
}; // struct bind_frc__SwerveDrivePoseEstimator3d

}; // namespace swgen
