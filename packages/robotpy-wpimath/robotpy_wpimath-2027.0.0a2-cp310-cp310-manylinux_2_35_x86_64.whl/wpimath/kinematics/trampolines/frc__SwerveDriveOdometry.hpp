// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/kinematics/SwerveDriveOdometry.h>

#include <wpi_array_type_caster.h>

namespace swgen {

using namespace frc;

template <size_t NumModules>
struct bind_frc__SwerveDriveOdometry {
  py::class_<typename frc::SwerveDriveOdometry<NumModules>, py::smart_holder, frc::Odometry<wpi::array<SwerveModuleState, NumModules>, wpi::array<SwerveModulePosition, NumModules>>> cls_SwerveDriveOdometry;

  py::module &m;
  std::string clsName;
  bind_frc__SwerveDriveOdometry(py::module &m, const char * clsName) :
    cls_SwerveDriveOdometry(m, clsName),
    m(m),
    clsName(clsName) {
  }

  void finish(const char * set_doc = NULL, const char * add_doc = NULL) {
    cls_SwerveDriveOdometry.doc() = 
      "Class for swerve drive odometry. Odometry allows you to track the robot's\n"
      "position on the field over a course of a match using readings from your\n"
      "swerve drive encoders and swerve azimuth encoders.\n"
      "\n"
      "Teams can use odometry during the autonomous period for complex tasks like\n"
      "path following. Furthermore, odometry can be used for latency compensation\n"
      "when using computer-vision systems.";
    cls_SwerveDriveOdometry
      .def(py::init<SwerveDriveKinematics<NumModules>, const Rotation2d&, const wpi::array<SwerveModulePosition, NumModules>&, const Pose2d&>()
        , py::arg("kinematics"), py::arg("gyroAngle"), py::arg("modulePositions"), py::arg("initialPose") = Pose2d{}
        , release_gil(), py::keep_alive<1, 3>(), py::keep_alive<1, 4>(), py::keep_alive<1, 5>()
        , py::doc(
        "Constructs a SwerveDriveOdometry object.\n"
        "\n"
        ":param kinematics:      The swerve drive kinematics for your drivetrain.\n"
        ":param gyroAngle:       The angle reported by the gyroscope.\n"
        ":param modulePositions: The wheel positions reported by each module.\n"
        ":param initialPose:     The starting position of the robot on the field.")
      )
    ;
    if (set_doc) {
      cls_SwerveDriveOdometry.doc() = set_doc;
    }
    if (add_doc) {
      cls_SwerveDriveOdometry.doc() = py::cast<std::string>(cls_SwerveDriveOdometry.doc()) + add_doc;
    }
  }
}; // struct bind_frc__SwerveDriveOdometry

}; // namespace swgen
