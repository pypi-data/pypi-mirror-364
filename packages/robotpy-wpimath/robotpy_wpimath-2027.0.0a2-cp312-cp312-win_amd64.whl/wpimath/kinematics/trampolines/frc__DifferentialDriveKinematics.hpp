// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/kinematics/DifferentialDriveKinematics.h>

// from extra_includes
#include <wpystruct.h>

#include <trampolines/frc__Kinematics.hpp>

namespace frc {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_DifferentialDriveKinematics :
  frc::PyTrampolineCfg_Kinematics<DifferentialDriveWheelSpeeds, DifferentialDriveWheelPositions, 
  CfgBase
  >
{
  using Base = frc::DifferentialDriveKinematics;
  using override_base_KToChassisSpeeds_KRTDifferentialDriveWheelSpeeds = frc::DifferentialDriveKinematics;
  using override_base_KToWheelSpeeds_KRTChassisSpeeds = frc::DifferentialDriveKinematics;
  using override_base_KToTwist2d_KRTDifferentialDriveWheelPositions_KRTDifferentialDriveWheelPositions = frc::DifferentialDriveKinematics;
  using override_base_KInterpolate_KRTDifferentialDriveWheelPositions_KRTDifferentialDriveWheelPositions_d = frc::DifferentialDriveKinematics;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_DifferentialDriveKinematics =
  frc::PyTrampoline_Kinematics<
    PyTrampolineBase
    , DifferentialDriveWheelSpeeds, DifferentialDriveWheelPositions
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_DifferentialDriveKinematics : PyTrampolineBase_DifferentialDriveKinematics<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_DifferentialDriveKinematics<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_DifferentialDriveKinematics;

  #ifndef SWGEN_DISABLE_KToChassisSpeeds_KRTDifferentialDriveWheelSpeeds
    ChassisSpeeds ToChassisSpeeds(const DifferentialDriveWheelSpeeds& wheelSpeeds) const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KToChassisSpeeds_KRTDifferentialDriveWheelSpeeds;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(ChassisSpeeds), LookupBase,
        "toChassisSpeeds", wheelSpeeds);
      return CxxCallBase::ToChassisSpeeds(std::forward<decltype(wheelSpeeds)>(wheelSpeeds));
    }
  #endif

  #ifndef SWGEN_DISABLE_KToWheelSpeeds_KRTChassisSpeeds
    DifferentialDriveWheelSpeeds ToWheelSpeeds(const ChassisSpeeds& chassisSpeeds) const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KToWheelSpeeds_KRTChassisSpeeds;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(DifferentialDriveWheelSpeeds), LookupBase,
        "toWheelSpeeds", chassisSpeeds);
      return CxxCallBase::ToWheelSpeeds(std::forward<decltype(chassisSpeeds)>(chassisSpeeds));
    }
  #endif

  #ifndef SWGEN_DISABLE_KToTwist2d_KRTDifferentialDriveWheelPositions_KRTDifferentialDriveWheelPositions
    Twist2d ToTwist2d(const DifferentialDriveWheelPositions& start, const DifferentialDriveWheelPositions& end) const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KToTwist2d_KRTDifferentialDriveWheelPositions_KRTDifferentialDriveWheelPositions;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(Twist2d), LookupBase,
        "toTwist2d", start, end);
      return CxxCallBase::ToTwist2d(std::forward<decltype(start)>(start), std::forward<decltype(end)>(end));
    }
  #endif

  #ifndef SWGEN_DISABLE_KInterpolate_KRTDifferentialDriveWheelPositions_KRTDifferentialDriveWheelPositions_d
    DifferentialDriveWheelPositions Interpolate(const DifferentialDriveWheelPositions& start, const DifferentialDriveWheelPositions& end, double t) const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KInterpolate_KRTDifferentialDriveWheelPositions_KRTDifferentialDriveWheelPositions_d;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(DifferentialDriveWheelPositions), LookupBase,
        "interpolate", start, end, t);
      return CxxCallBase::Interpolate(std::forward<decltype(start)>(start), std::forward<decltype(end)>(end), std::move(t));
    }
  #endif
};

}; // namespace frc
