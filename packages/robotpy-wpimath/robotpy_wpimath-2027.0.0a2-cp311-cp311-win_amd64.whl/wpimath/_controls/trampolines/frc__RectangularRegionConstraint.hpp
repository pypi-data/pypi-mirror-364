// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/trajectory/constraint/RectangularRegionConstraint.h>

// from extra_includes
#include <PyTrajectoryConstraint.h>

#include <trampolines/frc__TrajectoryConstraint.hpp>

namespace frc {

template <typename Constraint, typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_RectangularRegionConstraint :
  frc::PyTrampolineCfg_TrajectoryConstraint<
  CfgBase
  >
{
  using Base = frc::RectangularRegionConstraint<Constraint>;
  using override_base_KMaxVelocity_KRTPose2d_Tcurvature_t_Tmeters_per_second_t = frc::RectangularRegionConstraint<Constraint>;
  using override_base_KMinMaxAcceleration_KRTPose2d_Tcurvature_t_Tmeters_per_second_t = frc::RectangularRegionConstraint<Constraint>;
};

template <typename PyTrampolineBase, typename Constraint, typename PyTrampolineCfg>
using PyTrampolineBase_RectangularRegionConstraint =
  frc::PyTrampoline_TrajectoryConstraint<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename Constraint, typename PyTrampolineCfg>
struct PyTrampoline_RectangularRegionConstraint : PyTrampolineBase_RectangularRegionConstraint<PyTrampolineBase, Constraint, PyTrampolineCfg> {
  using PyTrampolineBase_RectangularRegionConstraint<PyTrampolineBase, Constraint, PyTrampolineCfg>::PyTrampolineBase_RectangularRegionConstraint;
  using MinMax = frc::TrajectoryConstraint::MinMax;

  #ifndef SWGEN_DISABLE_KMaxVelocity_KRTPose2d_Tcurvature_t_Tmeters_per_second_t
    units::meters_per_second_t MaxVelocity(const Pose2d& pose, units::curvature_t curvature, units::meters_per_second_t velocity) const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KMaxVelocity_KRTPose2d_Tcurvature_t_Tmeters_per_second_t;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(units::meters_per_second_t), LookupBase,
        "maxVelocity", pose, curvature, velocity);
      return CxxCallBase::MaxVelocity(std::forward<decltype(pose)>(pose), std::move(curvature), std::move(velocity));
    }
  #endif

  #ifndef SWGEN_DISABLE_KMinMaxAcceleration_KRTPose2d_Tcurvature_t_Tmeters_per_second_t
    MinMax MinMaxAcceleration(const Pose2d& pose, units::curvature_t curvature, units::meters_per_second_t speed) const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KMinMaxAcceleration_KRTPose2d_Tcurvature_t_Tmeters_per_second_t;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(MinMax), LookupBase,
        "minMaxAcceleration", pose, curvature, speed);
      return CxxCallBase::MinMaxAcceleration(std::forward<decltype(pose)>(pose), std::move(curvature), std::move(speed));
    }
  #endif
};

}; // namespace frc

#include <units_compound_type_caster.h>
#include <units_velocity_type_caster.h>

namespace swgen {

using namespace frc;

template <typename Constraint>
struct bind_frc__RectangularRegionConstraint {
  using MinMax = frc::TrajectoryConstraint::MinMax;
  struct RectangularRegionConstraint_Trampoline : frc::PyTrampoline_RectangularRegionConstraint<typename frc::RectangularRegionConstraint<Constraint>, Constraint, typename frc::PyTrampolineCfg_RectangularRegionConstraint<Constraint>>, py::trampoline_self_life_support {
      using RpyBase = frc::PyTrampoline_RectangularRegionConstraint<typename frc::RectangularRegionConstraint<Constraint>, Constraint, typename frc::PyTrampolineCfg_RectangularRegionConstraint<Constraint>>;
      using RpyBase::RpyBase;
  };
  static_assert(std::is_abstract<RectangularRegionConstraint_Trampoline>::value == false, "frc::RectangularRegionConstraint<Constraint> " SEMIWRAP_BAD_TRAMPOLINE);
  py::class_<typename frc::RectangularRegionConstraint<Constraint>, py::smart_holder, RectangularRegionConstraint_Trampoline, frc::TrajectoryConstraint> cls_RectangularRegionConstraint;

  py::module &m;
  std::string clsName;
  bind_frc__RectangularRegionConstraint(py::module &m, const char * clsName) :
    cls_RectangularRegionConstraint(m, clsName),
    m(m),
    clsName(clsName) {
  }

  void finish(const char * set_doc = NULL, const char * add_doc = NULL) {
    cls_RectangularRegionConstraint.doc() = "Enforces a particular constraint only within a rectangular region.";
    cls_RectangularRegionConstraint
      .def(py::init<const Translation2d&, const Translation2d&, const Constraint&>()
        , py::arg("bottomLeftPoint"), py::arg("topRightPoint"), py::arg("constraint")
        , release_gil(), py::keep_alive<1, 2>(), py::keep_alive<1, 3>(), py::keep_alive<1, 4>()
        , py::doc(
        "Constructs a new RectangularRegionConstraint.\n"
        "\n"
        ":deprecated: Use constructor taking Rectangle2d instead.\n"
        "\n"
        ":param bottomLeftPoint: The bottom left point of the rectangular region in\n"
        "                        which to enforce the constraint.\n"
        ":param topRightPoint:   The top right point of the rectangular region in which\n"
        "                        to enforce the constraint.\n"
        ":param constraint:      The constraint to enforce when the robot is within the\n"
        "                        region.")
      )
      .def(py::init<const Rectangle2d&, const Constraint&>()
        , py::arg("rectangle"), py::arg("constraint")
        , release_gil(), py::keep_alive<1, 2>(), py::keep_alive<1, 3>()
        , py::doc(
        "Constructs a new RectangularRegionConstraint.\n"
        "\n"
        ":param rectangle:  The rectangular region in which to enforce the constraint.\n"
        ":param constraint: The constraint to enforce when the robot is within the\n"
        "                   region.")
      )
      .def("maxVelocity", &frc::RectangularRegionConstraint<Constraint>::MaxVelocity
        , py::arg("pose"), py::arg("curvature"), py::arg("velocity")
        , release_gil()
      )
      .def("minMaxAcceleration", &frc::RectangularRegionConstraint<Constraint>::MinMaxAcceleration
        , py::arg("pose"), py::arg("curvature"), py::arg("speed")
        , release_gil()
      )
    ;
    if (set_doc) {
      cls_RectangularRegionConstraint.doc() = set_doc;
    }
    if (add_doc) {
      cls_RectangularRegionConstraint.doc() = py::cast<std::string>(cls_RectangularRegionConstraint.doc()) + add_doc;
    }
  }
}; // struct bind_frc__RectangularRegionConstraint

}; // namespace swgen
