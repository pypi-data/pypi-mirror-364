[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "orka-reasoning"
version = "0.7.8"
description = "Modular agent orchestrator for reasoning pipelines"
authors = [
  { name = "Marco Somma", email = "marcosomma.work@gmail.com" }
]
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3",
  "Operating System :: OS Independent",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
  # Core Dependencies
  "redis[async]>=5.0.0",
  "redis-om>=0.2.1",
  "pyyaml>=6.0.2",
  "python-dotenv>=0.19.0",
  
  # AI and ML
  "openai>=1.0.0",
  "litellm>=1.0.0",
  "sentence-transformers>=2.2.0",
  "numpy>=1.21.0",
  
  # Search and APIs
  "duckduckgo-search>=3.0.0",
  "google-api-python-client>=2.0.0",
  
  # Web Framework
  "fastapi>=0.68.0",
  "uvicorn>=0.15.0",
  "pydantic>=1.8.0",
  "httpx>=0.24.0",
  "jinja2>=3.0.0",
  "async-timeout>=4.0.0",
  
  # UI Components
  "rich>=13.0.0",
  "textual>=0.40.0"
]

[project.optional-dependencies]
# Development Tools
dev = [
  # Testing
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-cov>=4.0.0",
  "coverage>=7.0.0",
  "fakeredis>=2.0.0",
  
  # Linting and Formatting
  "black>=24.2.0",
  "flake8>=7.0.0",
  "flake8-docstrings>=1.7.0",
  "flake8-bugbear>=24.1.0",
  "flake8-comprehensions>=3.14.0",
  "flake8-pytest-style>=1.7.0",
  
  # Documentation
  "sphinx>=7.0.0",
  "sphinx-rtd-theme>=1.0.0"
]

# Schema Registry and Kafka Support
schema = [
  "confluent-kafka[avro,protobuf,schema-registry]>=2.3.0",
  "avro-python3>=1.10.2",
  "fastavro>=1.9.0",
  "protobuf>=4.25.0",
  "jsonschema>=4.20.0",
  "kafka-python>=2.0.2"
]

# Production Dependencies
prod = [
  "gunicorn>=21.0.0",
  "supervisor>=4.2.0"
]

# All Dependencies (for development with all features)
all = [
  "orka-reasoning[dev,schema,prod]"
]

[project.urls]
Homepage = "https://orkacore.com"
Documentation = "https://docs.orkacore.com"
Repository = "https://github.com/marcosomma/orka-reasoning"

[project.scripts]
orka = "orka.orka_cli:cli_main"
orka-start = "orka.orka_start:cli_main"
orka-redis = "orka.start_redis_only:cli_main"
orka-kafka = "orka.start_kafka:cli_main"

[project.entry-points."orka.agents"]
openai-builder = "orka.agents.llm_agents:OpenAIAnswerBuilder"
rag-agent = "orka.agents.rag_agent:RAGAgent"
local-llm = "orka.agents.local_llm_agents:LocalLLMAgent"
binary = "orka.agents.agents:BinaryAgent"
classification = "orka.agents.agents:ClassificationAgent"
validate-and-structure = "orka.agents.validation_and_structuring_agent:ValidationAndStructuringAgent"

[project.entry-points."orka.nodes"]
memory-writer = "orka.nodes.memory_writer_node:MemoryWriterNode"
memory-reader = "orka.nodes.memory_reader_node:MemoryReaderNode"
rag-node = "orka.nodes.rag_node:RAGNode"
fork-node = "orka.nodes.fork_node:ForkNode"
join-node = "orka.nodes.join_node:JoinNode"
failover-node = "orka.nodes.failover_node:FailoverNode"
router-node = "orka.nodes.router_node:RouterNode"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
exclude = ["test*", "tests*"]

[tool.setuptools.package-data]
orka = [
    "docker/*",
    "docker/*.sh",
    "docker/*.bat",
    "docker/*.yml",
    "docker/*.md",
    "docker/Dockerfile*"
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["test"]
python_files = "test_*.py"
python_functions = "test_*"
pythonpath = ["."]
addopts = "--cov=orka --cov-report=xml:coverage.xml --cov-report=term --no-cov-on-fail"
filterwarnings = [
    "ignore::RuntimeWarning:unittest.mock",
    "ignore::DeprecationWarning:datetime",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "redis: marks tests that require Redis",
    "llm: marks tests that require LLM APIs",
    "asyncio: marks tests as async",
]

[tool.coverage.run]
source = ["orka"]
branch = true
parallel = true
omit = [
    "*/site-packages/*",
    "*/tests/*",
    "test/*",
    "setup.py",
    "orka/start_kafka.py",
    "orka/start_redis_only.py",
    "orka/orka_start.py",
    "orka/docker/*",
    "orka/tui/*",
    "orka/startup/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "return NotImplemented",
]
fail_under = 80

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/docs/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "venv",
    ".env",
    ".venv",
    "docs",
]
per-file-ignores = [
    "__init__.py:F401",
    "test_*.py:D100,D101,D102,D103"
]
docstring-convention = "google"
max-complexity = 10
