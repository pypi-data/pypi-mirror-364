# -*- mode: python ; coding: utf-8 -*-
"""
PyInstaller spec template for folder2md4llms
Unified template for generating platform-specific binaries
Supports macOS, Windows, and Linux

Template variables:
- {{BINARY_NAME}}: Platform-specific binary name (e.g., folder2md-windows-x64.exe)
- {{ENTRY_POINT}}: Main entry point script
- {{SRC_PATH}}: Source path configuration
- {{PLATFORM_HIDDENIMPORTS}}: Platform-specific hidden imports
- {{PLATFORM_EXCLUDES}}: Platform-specific excludes
- {{PLATFORM_DATAS}}: Platform-specific data files
- {{PLATFORM_BINARIES}}: Platform-specific binary files
"""

import sys
from pathlib import Path

# Define the project root and source paths
project_root = Path(SPECPATH)
{{SRC_PATH}}

# Get the version dynamically
version_path = src_path / "folder2md4llms" / "__version__.py"
version_vars = {}
exec(version_path.read_text(), version_vars)
app_version = version_vars["__version__"]

# Analysis configuration
a = Analysis(
    # Entry point script
    [{{ENTRY_POINT}}],

    # Additional paths for module discovery
    pathex=[str(src_path)],

    # Binary dependencies
    binaries=[{{PLATFORM_BINARIES}}],

    # Data files to include
    datas=[
        # Include all package data
        (str(src_path / "folder2md4llms"), "folder2md4llms"),
        {{PLATFORM_DATAS}}
    ],

    # Hidden imports that PyInstaller might miss
    hiddenimports=[
        # Core dependencies - common to all platforms
        "folder2md4llms",
        "folder2md4llms.cli",
        "folder2md4llms.processor",
        "folder2md4llms.converters",
        "folder2md4llms.analyzers",
        "folder2md4llms.engine",
        "folder2md4llms.formatters",
        "folder2md4llms.utils",

        # Rich and CLI dependencies
        "rich",
        "rich.console",
        "rich.progress",
        "rich.table",
        "rich.text",
        "rich.panel",
        "rich.markup",
        "rich_click",
        "click",
        "click.core",

        # File processing and utilities
        "magic",
        "mimetypes",
        "pathlib",
        "yaml",
        "pyyaml",
        "typing_extensions",

        # Document converters
        "pypdf",
        "pypdf._reader",
        "pypdf._writer",
        "docx",
        "docx.shared",
        "openpyxl",
        "openpyxl.workbook",
        "striprtf",
        "striprtf.striprtf",
        "nbconvert",
        "nbconvert.exporters",
        "pptx",

        # Image processing
        "PIL",
        "PIL.Image",
        "PIL.ExifTags",

        # Text processing and highlighting
        "markdown",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",

        # System and networking
        "psutil",
        "httpx",
        "pyperclip",
        "tqdm",

        # Token counting (optional)
        "tiktoken",
        "tiktoken_ext",
        "tiktoken_ext.openai_public",

        # HTTP utilities
        "urllib3",
        "certifi",
        "charset_normalizer",
        "idna",

        # Async and concurrency
        "asyncio",
        "concurrent.futures",

        {{PLATFORM_HIDDENIMPORTS}}
    ],

    # Hook directories
    hookspath=[],

    # Hook configuration
    hooksconfig={},

    # Runtime hooks
    runtime_hooks=[],

    # Modules to exclude
    excludes=[
        # Test modules
        "tests",
        "test",
        "pytest",
        "unittest",

        # Development tools
        "mypy",
        "ruff",
        "black",
        "isort",
        "setuptools",
        "pip",
        "wheel",
        "distutils",

        # GUI frameworks (CLI only)
        "tkinter",
        "PySide2",
        "PySide6",
        "PyQt5",
        "PyQt6",

        # Web frameworks
        "flask",
        "django",
        "fastapi",
        "jinja2",

        # Large optional dependencies
        "matplotlib",
        "numpy",
        "pandas",
        "scipy",
        "jupyter",
        "tensorflow",
        "torch",
        "keras",

        # Documentation tools
        "sphinx",

        {{PLATFORM_EXCLUDES}}
    ],

    # Archive configuration
    noarchive=False,
    optimize=0,
)

# Create PYZ archive
pyz = PYZ(a.pure, a.zipped_data, cipher=None)

# Create executable
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],

    # Output binary name (platform-specific)
    name="{{BINARY_NAME}}",

    # Debug options
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,

    # Compression
    upx=True,
    upx_exclude=[],

    # Runtime options
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,

    # Platform-specific options
    target_arch=None,  # Use current architecture
    codesign_identity=None,  # macOS code signing (if needed)
    entitlements_file=None,  # macOS entitlements (if needed)

    # Windows-specific options
    version=None,
    uac_admin=False,  # Don't require admin privileges
    uac_uiaccess=False,  # Don't require UI access

    # Bundle options
    onefile=True,
)

# macOS App bundle (optional, for future GUI versions)
if sys.platform == "darwin":
    app = BUNDLE(
        exe,
        name="folder2md.app",
        icon=None,
        bundle_identifier="org.henriqueslab.folder2md4llms",
        version=app_version,
        info_plist={
            "CFBundleName": "folder2md4llms",
            "CFBundleDisplayName": "Folder to Markdown for LLMs",
            "CFBundleVersion": app_version,
            "CFBundleShortVersionString": app_version,
            "CFBundleIdentifier": "org.henriqueslab.folder2md4llms",
            "NSHighResolutionCapable": True,
            "LSBackgroundOnly": False,
        },
    )
