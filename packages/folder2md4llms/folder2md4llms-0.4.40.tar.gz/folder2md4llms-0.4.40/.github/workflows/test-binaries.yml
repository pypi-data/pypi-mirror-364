name: Test Binary Builds

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to test (e.g., v0.4.28)'
        required: true
        type: string
      test_local_artifacts:
        description: 'Test local artifacts instead of release assets'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  actions: write

jobs:
  test-macos:
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - arch: x64
            runner: macos-13  # Intel runner
          - arch: arm64
            runner: macos-latest  # Apple Silicon runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download binary from release
      if: ${{ !inputs.test_local_artifacts }}
      run: |
        echo "Downloading macOS ${{ matrix.arch }} binary from release ${{ inputs.release_tag }}"

        BINARY_NAME="folder2md-macos-${{ matrix.arch }}"
        DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ inputs.release_tag }}/${BINARY_NAME}"

        # Download the binary
        curl -L -o "${BINARY_NAME}" "${DOWNLOAD_URL}"

        # Verify download
        if [ ! -f "${BINARY_NAME}" ]; then
          echo "❌ Failed to download binary: ${BINARY_NAME}"
          exit 1
        fi

        echo "✅ Successfully downloaded ${BINARY_NAME}"
        ls -lh "${BINARY_NAME}"

    - name: Download binary from artifacts
      if: ${{ inputs.test_local_artifacts }}
      uses: actions/download-artifact@v4
      with:
        name: folder2md-macos-${{ matrix.arch }}
        path: .

    - name: Test binary functionality
      run: |
        BINARY_NAME="folder2md-macos-${{ matrix.arch }}"

        echo "::group::Preparing binary"

        # Make binary executable
        chmod +x "${BINARY_NAME}"

        # Verify binary properties
        echo "Binary information:"
        file "${BINARY_NAME}"
        ls -lh "${BINARY_NAME}"

        echo "::endgroup::"

        echo "::group::Testing basic functionality"

        # Test version command
        echo "Testing --version:"
        ./"${BINARY_NAME}" --version

        # Test help command
        echo "Testing --help:"
        ./"${BINARY_NAME}" --help > /dev/null

        # Test with actual functionality
        echo "Testing basic processing:"
        echo "# Test File" > test.md
        echo "print('hello world')" > test.py

        ./"${BINARY_NAME}" . --output test_output.md --force

        # Verify output was created
        if [ ! -f "test_output.md" ]; then
          echo "❌ Output file was not created"
          exit 1
        fi

        echo "✅ Output file created successfully"
        echo "Output file size: $(wc -l < test_output.md) lines"

        echo "::endgroup::"

        echo "✅ macOS ${{ matrix.arch }} binary test successful"

    - name: Cleanup
      if: always()
      run: |
        rm -f test.md test.py test_output.md folder2md-macos-* || true

  test-windows:
    runs-on: windows-latest
    timeout-minutes: 15
    strategy:
      matrix:
        arch: [x64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download binary from release
      if: ${{ !inputs.test_local_artifacts }}
      run: |
        Write-Host "Downloading Windows ${{ matrix.arch }} binary from release ${{ inputs.release_tag }}"

        $BINARY_NAME = "folder2md-windows-${{ matrix.arch }}.exe"
        $DOWNLOAD_URL = "https://github.com/${{ github.repository }}/releases/download/${{ inputs.release_tag }}/$BINARY_NAME"

        # Download the binary
        Invoke-WebRequest -Uri $DOWNLOAD_URL -OutFile $BINARY_NAME

        # Verify download
        if (-not (Test-Path $BINARY_NAME)) {
          Write-Host "❌ Failed to download binary: $BINARY_NAME"
          exit 1
        }

        Write-Host "✅ Successfully downloaded $BINARY_NAME"
        Get-ChildItem $BINARY_NAME | Format-List
      shell: pwsh

    - name: Download binary from artifacts
      if: ${{ inputs.test_local_artifacts }}
      uses: actions/download-artifact@v4
      with:
        name: folder2md-windows-${{ matrix.arch }}
        path: .

    - name: Test binary functionality
      run: |
        $BINARY_NAME = "folder2md-windows-${{ matrix.arch }}.exe"

        Write-Host "::group::Preparing binary"

        # Verify binary properties
        Write-Host "Binary information:"
        Get-ChildItem $BINARY_NAME | Format-List

        Write-Host "::endgroup::"

        Write-Host "::group::Testing basic functionality"

        # Test version command
        Write-Host "Testing --version:"
        & .\$BINARY_NAME --version

        # Test help command
        Write-Host "Testing --help:"
        & .\$BINARY_NAME --help | Out-Null

        # Test with actual functionality
        Write-Host "Testing basic processing:"
        Set-Content -Path "test.md" -Value "# Test File"
        Set-Content -Path "test.py" -Value "print('hello world')"

        & .\$BINARY_NAME . --output test_output.md --force

        # Verify output was created
        if (-not (Test-Path "test_output.md")) {
          Write-Host "❌ Output file was not created"
          exit 1
        }

        Write-Host "✅ Output file created successfully"
        $lineCount = (Get-Content "test_output.md" | Measure-Object -Line).Lines
        Write-Host "Output file size: $lineCount lines"

        Write-Host "::endgroup::"

        Write-Host "✅ Windows ${{ matrix.arch }} binary test successful"
      shell: pwsh

    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path test.md, test.py, test_output.md, folder2md-windows-*.exe -Force -ErrorAction SilentlyContinue
      shell: pwsh
