# coding: utf-8

"""
    Jaqpot API

    A modern RESTful API for model management and prediction services, built using Spring Boot and Kotlin. Supports seamless integration with machine learning workflows.

    The version of the OpenAPI document: 1.0.0
    Contact: upci.ntua@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from jaqpot_api_client.models.get_model_download_urls200_response_doa_urls_inner import GetModelDownloadUrls200ResponseDoaUrlsInner
from typing import Optional, Set
from typing_extensions import Self

class GetModelDownloadUrls200Response(BaseModel):
    """
    GetModelDownloadUrls200Response
    """ # noqa: E501
    model_url: Optional[StrictStr] = Field(default=None, description="Presigned S3 URL for downloading the model file", alias="modelUrl")
    preprocessor_url: Optional[StrictStr] = Field(default=None, description="Presigned S3 URL for downloading the preprocessor", alias="preprocessorUrl")
    doa_urls: Optional[List[GetModelDownloadUrls200ResponseDoaUrlsInner]] = Field(default=None, description="Presigned S3 URLs for downloading DOA files", alias="doaUrls")
    expires_at: Optional[datetime] = Field(default=None, description="URL expiration timestamp for all URLs", alias="expiresAt")
    __properties: ClassVar[List[str]] = ["modelUrl", "preprocessorUrl", "doaUrls", "expiresAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetModelDownloadUrls200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in doa_urls (list)
        _items = []
        if self.doa_urls:
            for _item_doa_urls in self.doa_urls:
                if _item_doa_urls:
                    _items.append(_item_doa_urls.to_dict())
            _dict['doaUrls'] = _items
        # set to None if model_url (nullable) is None
        # and model_fields_set contains the field
        if self.model_url is None and "model_url" in self.model_fields_set:
            _dict['modelUrl'] = None

        # set to None if preprocessor_url (nullable) is None
        # and model_fields_set contains the field
        if self.preprocessor_url is None and "preprocessor_url" in self.model_fields_set:
            _dict['preprocessorUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetModelDownloadUrls200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modelUrl": obj.get("modelUrl"),
            "preprocessorUrl": obj.get("preprocessorUrl"),
            "doaUrls": [GetModelDownloadUrls200ResponseDoaUrlsInner.from_dict(_item) for _item in obj["doaUrls"]] if obj.get("doaUrls") is not None else None,
            "expiresAt": obj.get("expiresAt")
        })
        return _obj


