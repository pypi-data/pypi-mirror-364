name: 📦 PyPI Release
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # 匹配类似 1.0.0, 2.1.3 等格式的标签
  workflow_dispatch:
permissions:
  contents: write  # 用于创建 release
  id-token: write  # 用于发布到 PyPI
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      should-publish-public: ${% raw %}{{ steps.determine-strategy.outputs.publish-public }}{% endraw %}
      should-publish-private: ${% raw %}{{ steps.determine-strategy.outputs.publish-private }}{% endraw %}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine publishing strategy
        id: determine-strategy
        run: |
          # 根据配置决定发布策略
          {% if cookiecutter.use_public_pypi == "true" -%}
          # 公共 PyPI 模式：同时发布到公共和私有
          echo "publish-public=true" >> $GITHUB_OUTPUT
          {% if cookiecutter.use_private_pypi == "true" -%}
          echo "publish-private=true" >> $GITHUB_OUTPUT
          {% else -%}
          echo "publish-private=false" >> $GITHUB_OUTPUT
          {% endif -%}
          {% else -%}
          # 仅私有 PyPI 模式：只发布到私有
          echo "publish-public=false" >> $GITHUB_OUTPUT
          {% if cookiecutter.use_private_pypi == "true" -%}
          echo "publish-private=true" >> $GITHUB_OUTPUT
          {% else -%}
          echo "publish-private=false" >> $GITHUB_OUTPUT
          {% endif -%}
          {% endif -%}

      {% if cookiecutter.use_task == "true" -%}
      - name: Install Task
        uses: arduino/setup-task@v2
      {% endif -%}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # Environment setup and testing
      - name: Initialize environment and test
        env:
          {% if cookiecutter.use_private_pypi == "true" -%}
          UV_INDEX_{{cookiecutter.private_pypi_name | upper}}_USERNAME: ${% raw %}{{ secrets.PYPI_SERVER_USERNAME }}{% endraw %}
          UV_INDEX_{{cookiecutter.private_pypi_name | upper}}_PASSWORD: ${% raw %}{{ secrets.PYPI_SERVER_PASSWORD }}{% endraw %}
          {% endif -%}
        {% if cookiecutter.use_task == "true" -%}
        run: |
          task init # 初始化项目环境
          task lint # 运行代码检查
          task test:all # 运行所有测试
        {% else -%}
        run: |
          uv sync --extra dev
          uv run ruff check .
          uv run ruff format --check .
          uv run pytest --cov={{cookiecutter.package_name}} tests/
        {% endif -%}

      # Build package
      - name: Build package
        {% if cookiecutter.use_task == "true" -%}
        run: task build
        {% else -%}
        run: uv build
        {% endif -%}

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 1

  publish-to-public-pypi:
    name: Publish to Public PyPI
    needs: build-and-test
    if: needs.build-and-test.outputs.should-publish-public == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # 用于 PyPI trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use trusted publishing (no token needed)
          # Configure at: https://pypi.org/manage/account/publishing/
          print-hash: true

  publish-to-private-pypi:
    name: Publish to Private PyPI
    needs: build-and-test
    if: needs.build-and-test.outputs.should-publish-private == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Publish to Private PyPI
        env:
          UV_PUBLISH_USERNAME: ${% raw %}{{ secrets.PYPI_SERVER_USERNAME }}{% endraw %}
          UV_PUBLISH_PASSWORD: ${% raw %}{{ secrets.PYPI_SERVER_PASSWORD }}{% endraw %}
        run: |
          uv publish \
            --publish-url {{cookiecutter.private_pypi_url | replace('/simple/', '/') }} \
            --username $UV_PUBLISH_USERNAME \
            --password $UV_PUBLISH_PASSWORD

  create-github-release:
    name: Create GitHub Release
    needs: [build-and-test, publish-to-public-pypi, publish-to-private-pypi]
    if: always() && needs.build-and-test.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 用于创建 GitHub Release
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.whl
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${% raw %}{{ secrets.GITHUB_TOKEN }}{% endraw %}
