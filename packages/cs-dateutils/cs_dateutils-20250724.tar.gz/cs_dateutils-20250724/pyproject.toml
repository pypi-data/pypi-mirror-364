[project]
name = "cs-dateutils"
description = "A few conveniences to do with dates and times."
authors = [
    { name = "Cameron Simpson", email = "cs@cskk.id.au" },
]
keywords = [
    "date",
    "time",
    "datetime",
    "python",
    "python3",
]
dependencies = []
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
version = "20250724"

[project.license]
text = "GNU General Public License v3 or later (GPLv3+)"

[project.urls]
"Monorepo Hg/Mercurial Mirror" = "https://hg.sr.ht/~cameron-simpson/css"
"Monorepo Git Mirror" = "https://github.com/cameron-simpson/css"
"MonoRepo Commits" = "https://bitbucket.org/cameron_simpson/css/commits/branch/main"
Source = "https://github.com/cameron-simpson/css/blob/main/lib/python/cs/dateutils.py"

[project.readme]
text = """
A few conveniences to do with dates and times.

*Latest release 20250724*:
* unixtime2datetime: default tz now UTC.
* Some doc updates.

There are some other PyPI modules providing richer date handling
than the stdlib `datetime` module.
This module mostly contains conveniences used in my other code;
you're welcome to it, but it does not pretend to be large or complete.

Short summary:
* `datetime2unixtime`: Convert a timezone aware `datetime` to a UNIX timestamp. *WARNING*: a naive datetime is assumed to be in UTC.
* `isodate`: Return a date in ISO8601 YYYY-MM-DD format, or YYYYMMDD if not `dashed`.
* `localdate2unixtime`: Convert a localtime `date` into a UNIX timestamp.
* `tzinfoHHMM`: tzinfo class based on +HHMM / -HHMM strings.
* `unixtime2datetime`: Convert a a UNIX timestamp to a `datetime` in the timezone `tz`. *Note*: the default timezone is UTC, not the local timezone.
* `UNIXTimeMixin`: A mixin for classes with a `.unixtime` attribute, a `float` storing a UNIX timestamp.

Module contents:
- <a name=\"datetime2unixtime\"></a>`datetime2unixtime(dt)`: Convert a timezone aware `datetime` to a UNIX timestamp.
  *WARNING*: a naive datetime is assumed to be in UTC.
- <a name=\"isodate\"></a>`isodate(when=None, dashed=True)`: Return a date in ISO8601 YYYY-MM-DD format, or YYYYMMDD if not `dashed`.

  Modern Pythons have a `datetime.isoformat` method, you should use that.
- <a name=\"localdate2unixtime\"></a>`localdate2unixtime(d)`: Convert a localtime `date` into a UNIX timestamp.
- <a name=\"tzinfoHHMM\"></a>`class tzinfoHHMM(datetime.tzinfo)`: tzinfo class based on +HHMM / -HHMM strings.
- <a name=\"unixtime2datetime\"></a>`unixtime2datetime(unixtime, *, tz: datetime.tzinfo = datetime.timezone.utc)`: Convert a a UNIX timestamp to a `datetime` in the timezone `tz`.
  *Note*: the default timezone is UTC, not the local timezone.
- <a name=\"UNIXTimeMixin\"></a>`class UNIXTimeMixin`: A mixin for classes with a `.unixtime` attribute,
  a `float` storing a UNIX timestamp.

*`UNIXTimeMixin.as_datetime(self, tz: datetime.tzinfo = datetime.timezone.utc)`*:
Return `self.unixtime` as a `datetime`
with the timezone `tz` (default `UTC`).

*`UNIXTimeMixin.datetime`*:
The `unixtime` as a UTC `datetime`.

# Release Log



*Release 20250724*:
* unixtime2datetime: default tz now UTC.
* Some doc updates.

*Release 20230210*:
* Drop Python 2 support.
* Make timezones mandatory where previously they were assumed.

*Release 20210306*:
Initial release, used by cs.sqltags."""
content-type = "text/markdown"

[build-system]
build-backend = "flit_core.buildapi"
requires = [
    "flit_core >=3.2,<4",
]

[tool.flit.module]
name = "cs.dateutils"
