#!/usr/bin/env python
"""
Plotting script generated by ChatGPT, with some minor modifications
for aesthetics.
"""

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import FancyBboxPatch

# Model sizes in billions
sizes = np.array([1.3, 2.7, 6.7, 13.0])

# Updated load times (seconds) on H100
hf_full = np.array([3.10, 7.07, 10.79, 26.20])
fh_full = np.array([0.61, 1.09, 2.44, 5.83])

hf_quant = np.array([3.20, 3.58, 8.07, 18.35])   # HF on-the-fly 8-bit
fh_quant = np.array([0.64, 1.13, 2.30, 5.13])    # fasthug on-the-fly 8-bit

hf_pre = np.array([2.40, 6.16, 14.14, 35.50])     # HF pre-quantized
fh_pre = np.array([0.49, 0.70, 1.50, 3.09])      # fasthug pre-quantized

# 1) Line plot of absolute load times
plt.figure(figsize=(6, 4))
colors = {
    'full': '#1f77b4',   # blue
    'quant': '#ff7f0e',  # orange
    'pre': '#9467bd'     # purple
}

# Full-precision
plt.plot(sizes, hf_full,   'o:', label='HuggingFace Full-precision', color=colors['full'])
plt.plot(sizes, fh_full,   'o-', label='fasthug Full-precision', color=colors['full'])

# On-the-fly 8-bit
plt.plot(sizes, hf_quant,  's:', label='HuggingFace On-the-fly 8-bit', color=colors['quant'])
plt.plot(sizes, fh_quant,  's-', label='fasthug On-the-fly 8-bit', color=colors['quant'])

# Pre-quantized
plt.plot(sizes, hf_pre,    '^:', label='HuggingFace Pre-quantized 8-bit', color=colors['pre'])
plt.plot(sizes, fh_pre,    '^-', label='fasthug Pre-quantized 8-bit', color=colors['pre'])

plt.xscale('log')
plt.xlabel('Model size (billion parameters)')
plt.ylabel('Load time (seconds)')
plt.title('Load Times vs Model Size on H100\n(Dotted=HuggingFace, Solid=fasthug)')
plt.xticks(sizes, ['1.3 B', '2.7 B', '6.7 B', '13 B'])
plt.legend(loc='upper left')
plt.grid(True, linestyle='--', linewidth=0.5)
plt.tight_layout()
# plt.show()
plt.savefig('absolute.jpg')

# 2) Speedup bar chart with spacing, rounded corners, and text labels
speed_full  = hf_full  / fh_full
speed_quant = hf_quant / fh_quant
speed_pre   = hf_pre   / fh_pre

bar_width = 0.3  # narrower bars to add spacing
x = np.arange(len(sizes))

fig, ax = plt.subplots(figsize=(6, 4))
offsets = [-bar_width, 0, bar_width]
labels = ['Full-precision', 'On-the-fly 8-bit', 'Pre-quantized 8-bit']
speeds = [speed_full, speed_quant, speed_pre]
colors_list = [colors['full'], colors['quant'], colors['pre']]

for offset, speed, label, color in zip(offsets, speeds, labels, colors_list):
    bars = ax.bar(x + offset, speed, width=bar_width, label=label, color=color)
    # Round top corners and add text labels
    for rect, val in zip(bars, speed):
        x0, y0 = rect.get_x(), rect.get_y()
        w, h = rect.get_width(), rect.get_height()
        rect.remove()  # remove the original rectangle
        # Draw a rounded rectangle patch
        fancy = FancyBboxPatch(
            (x0, y0), w, h,
            boxstyle="round,pad=0",
            linewidth=0,
            facecolor=color
        )
        ax.add_patch(fancy)
        # Add speedup text above each bar
        ax.text(x0 + w/2, h + 0.1, f"{val:.1f}Ã—", ha='center', va='bottom')

ax.set_xlabel('Model size (billion parameters)')
ax.set_ylabel('Speedup (HF load time / fasthug load time)')
ax.set_title('Model Load Time Speedup of fasthug vs HuggingFace on H100')
ax.set_xticks(x)
ax.set_xticklabels(['1.3 B', '2.7 B', '6.7 B', '13 B'])
ax.legend()
ax.grid(axis='y', linestyle='--', linewidth=0.5)
plt.tight_layout()
# plt.show()
plt.savefig('speedup.jpg')