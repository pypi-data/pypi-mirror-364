
import datetime
from typing import Any

from pcgw_api.utils import parse_list, parse_value, parse_support_enum, Support

class API:
    def __init__(self, j):
        self.direct3d_versions: list[str] = parse_list(j, "Direct3D versions", ",", str)
        self.directdraw_versions: list[str] = parse_list(j, "DirectDraw versions", ",", str)
        self.wing: Support = parse_support_enum(j, "WinG")
        self.opengl_versions: list[str] = parse_list(j, "OpenGL versions", ",", str)
        self.glide_versions: list[str] = parse_list(j, "Glide versions", ",", str)
        self.software_renderer: Support = parse_support_enum(j, "Software renderer")
        self.mantle_support: Support = parse_support_enum(j, "Mantle support")
        self.metal_support: Support = parse_support_enum(j, "Metal support")
        self.vulkan_versions: list[str] = parse_list(j, "Vulkan versions", ",", str)
        self.dos_video_modes: list[str] = parse_list(j, "DOS video modes", ",", str)
        self.windows_16bit_executable: Support = parse_support_enum(j, "Windows 16bit executable")
        self.windows_32bit_executable: Support = parse_support_enum(j, "Windows 32bit executable")
        self.windows_64bit_executable: str|None = j.get("Windows 64bit executable")
        self.windows_arm_app: Support = parse_support_enum(j, "Windows ARM app")
        self.mac_os_x_powerpc_app: str|None = j.get("Mac OS X PowerPC app")
        self.macos_intel_32bit_app: Support = parse_support_enum(j, "macOS Intel 32bit app")
        self.macos_intel_64bit_app: Support = parse_support_enum(j, "macOS Intel 64bit app")
        self.macos_arm_app: Support = parse_support_enum(j, "macOS ARM app")
        self.linux_powerpc_app: Support = parse_support_enum(j, "Linux PowerPC app")
        self.linux_32bit_executable: Support = parse_support_enum(j, "Linux 32bit executable")
        self.linux_64bit_executable: str|None = j.get("Linux 64bit executable")
        self.linux_arm_app: Support = parse_support_enum(j, "Linux ARM app")
        self.linux_68k_app: Support = parse_support_enum(j, "Linux 68k app")
        self.mac_os_68k_app: Support = parse_support_enum(j, "Mac OS 68K app")
        self.mac_os_powerpc_app: Support = parse_support_enum(j, "Mac OS PowerPC app")

class Audio:
    def __init__(self, j):
        self.separate_volume_controls: Support = parse_support_enum(j, "Separate volume controls")
        self.surround_sound: Support = parse_support_enum(j, "Surround sound")
        self.subtitles: Support = parse_support_enum(j, "Subtitles")
        self.closed_captions: Support = parse_support_enum(j, "Closed captions")
        self.mute_on_focus_lost: Support = parse_support_enum(j, "Mute on focus lost")
        self.eax_support: Support = parse_support_enum(j, "EAX support")
        self.royalty_free_audio: Support = parse_support_enum(j, "Royalty free audio")
        self.red_book_cd_audio: Support = parse_support_enum(j, "Red Book CD audio")
        self.general_midi_audio: Support = parse_support_enum(j, "General MIDI audio")

class Availability:
    def __init__(self, j):
        self.available_from: list[str] = parse_list(j, "Available from", ",", str)
        self.available_from_historically: list[str] = parse_list(j, "Available from historically", ",", str)
        self.uses_drm: list[str] = parse_list(j, "Uses DRM", ",", str)
        self.removed_drm: list[str] = parse_list(j, "Removed DRM", ",", str)
        self.retail_drm: list[str] = parse_list(j, "Retail DRM", ",", str)
        self.retail_keys: list[str] = parse_list(j, "Retail keys", ",", str)
        self.developer_website_drm: list[str] = parse_list(j, "Developer website DRM", ",", str)
        self.developer_website_keys: list[str] = parse_list(j, "Developer website keys", ",", str)
        self.publisher_website_drm: list[str] = parse_list(j, "Publisher website DRM", ",", str)
        self.publisher_website_keys: list[str] = parse_list(j, "Publisher website keys", ",", str)
        self.official_website_drm: list[str] = parse_list(j, "Official website DRM", ",", str)
        self.official_website_keys: list[str] = parse_list(j, "Official website keys", ",", str)
        self.amazon_us_drm: list[str] = parse_list(j, "Amazon US DRM", ",", str)
        self.amazon_us_keys: list[str] = parse_list(j, "Amazon US keys", ",", str)
        self.amazon_uk_drm: list[str] = parse_list(j, "Amazon UK DRM", ",", str)
        self.amazon_uk_keys: list[str] = parse_list(j, "Amazon UK keys", ",", str)
        self.battlenet_drm: list[str] = parse_list(j, "Battlenet DRM", ",", str)
        self.battlenet_keys: list[str] = parse_list(j, "Battlenet keys", ",", str)
        self.bethesdanet_drm: list[str] = parse_list(j, "Bethesdanet DRM", ",", str)
        self.bethesdanet_keys: list[str] = parse_list(j, "Bethesdanet keys", ",", str)
        self.discord_drm: list[str] = parse_list(j, "Discord DRM", ",", str)
        self.discord_keys: list[str] = parse_list(j, "Discord keys", ",", str)
        self.ea_app_drm: list[str] = parse_list(j, "EA app DRM", ",", str)
        self.ea_app_keys: list[str] = parse_list(j, "EA app keys", ",", str)
        self.epic_games_store_drm: list[str] = parse_list(j, "Epic Games Store DRM", ",", str)
        self.epic_games_store_keys: list[str] = parse_list(j, "Epic Games Store keys", ",", str)
        self.gamersgate_drm: list[str] = parse_list(j, "GamersGate DRM", ",", str)
        self.gamersgate_keys: list[str] = parse_list(j, "GamersGate keys", ",", str)
        self.gamesplanet_drm: list[str] = parse_list(j, "Gamesplanet DRM", ",", str)
        self.gamesplanet_keys: list[str] = parse_list(j, "Gamesplanet keys", ",", str)
        self.gogcom_drm: list[str] = parse_list(j, "GOGcom DRM", ",", str)
        self.gogcom_keys: list[str] = parse_list(j, "GOGcom keys", ",", str)
        self.green_man_gaming_drm: list[str] = parse_list(j, "Green Man Gaming DRM", ",", str)
        self.green_man_gaming_keys: list[str] = parse_list(j, "Green Man Gaming keys", ",", str)
        self.humble_store_drm: list[str] = parse_list(j, "Humble Store DRM", ",", str)
        self.humble_store_keys: list[str] = parse_list(j, "Humble Store keys", ",", str)
        self.itchio_drm: list[str] = parse_list(j, "itchio DRM", ",", str)
        self.itchio_keys: list[str] = parse_list(j, "itchio keys", ",", str)
        self.mac_app_store_drm: list[str] = parse_list(j, "Mac App Store DRM", ",", str)
        self.mac_app_store_keys: list[str] = parse_list(j, "Mac App Store keys", ",", str)
        self.meta_store_drm: list[str] = parse_list(j, "Meta Store DRM", ",", str)
        self.meta_store_keys: list[str] = parse_list(j, "Meta Store keys", ",", str)
        self.microsoft_store_drm: list[str] = parse_list(j, "Microsoft Store DRM", ",", str)
        self.microsoft_store_keys: list[str] = parse_list(j, "Microsoft Store keys", ",", str)
        self.steam_drm: list[str] = parse_list(j, "Steam DRM", ",", str)
        self.steam_keys: list[str] = parse_list(j, "Steam keys", ",", str)
        self.twitch_drm: list[str] = parse_list(j, "Twitch DRM", ",", str)
        self.twitch_keys: list[str] = parse_list(j, "Twitch keys", ",", str)
        self.ubisoft_store_drm: list[str] = parse_list(j, "Ubisoft Store DRM", ",", str)
        self.ubisoft_store_keys: list[str] = parse_list(j, "Ubisoft Store keys", ",", str)
        self.viveport_drm: list[str] = parse_list(j, "Viveport DRM", ",", str)
        self.viveport_keys: list[str] = parse_list(j, "Viveport keys", ",", str)
        self.zoom_platform_drm: list[str] = parse_list(j, "Zoom Platform DRM", ",", str)
        self.zoom_platform_keys: list[str] = parse_list(j, "Zoom Platform keys", ",", str)
        self.apple_arcade: Support = parse_support_enum(j, "Apple Arcade")
        self.ea_play: Support = parse_support_enum(j, "EA Play")
        self.ea_play_pro: Support = parse_support_enum(j, "EA Play Pro")
        self.ea_play_steam: Support = parse_support_enum(j, "EA Play Steam")
        self.ea_play_epic: Support = parse_support_enum(j, "EA Play Epic")
        self.ubisoft_plus: Support = parse_support_enum(j, "Ubisoft Plus")
        self.xbox_play_anywhere: Support = parse_support_enum(j, "Xbox Play Anywhere")
        self.xbox_game_pass: Support = parse_support_enum(j, "Xbox Game Pass")
        self.gfwl_type: str|None = j.get("GFWL type")
        self.gfwl_zdpp: Support = parse_support_enum(j, "GFWL ZDPP")
        self.gfwl_local_profile: Support = parse_support_enum(j, "GFWL local profile")

class Cloud:
    def __init__(self, j):
        self.discord: Support = parse_support_enum(j, "Discord")
        self.epic_games_launcher: Support = parse_support_enum(j, "Epic Games Launcher")
        self.gog_galaxy: Support = parse_support_enum(j, "GOG Galaxy")
        self.ea_app: Support = parse_support_enum(j, "EA app")
        self.onedrive: Support = parse_support_enum(j, "OneDrive")
        self.steam: Support = parse_support_enum(j, "Steam")
        self.ubisoft_connect: Support = parse_support_enum(j, "Ubisoft Connect")
        self.xbox: Support = parse_support_enum(j, "Xbox")

class Infobox_game:
    def __init__(self, j):
        self.cover: str|None = j.get("Cover")
        self.cover_url: str|None = j.get("Cover URL")
        self.developers: list[str] = parse_list(j, "Developers", ",", str)
        self.porters_pc_booter: list[str] = parse_list(j, "Porters PC booter", ",", str)
        self.porters_dos: list[str] = parse_list(j, "Porters DOS", ",", str)
        self.porters_windows_3x: list[str] = parse_list(j, "Porters Windows 3x", ",", str)
        self.porters_windows: list[str] = parse_list(j, "Porters Windows", ",", str)
        self.porters_mac_os: list[str] = parse_list(j, "Porters Mac OS", ",", str)
        self.porters_os_x: list[str] = parse_list(j, "Porters OS X", ",", str)
        self.porters_linux: list[str] = parse_list(j, "Porters Linux", ",", str)
        self.publishers: list[str] = parse_list(j, "Publishers", ",", str)
        self.engines: list[str] = parse_list(j, "Engines", ",", str)
        self.available_on: list[str] = parse_list(j, "Available on", ",", str)
        self.released: list[datetime.datetime] = parse_list(j, "Released", ";", datetime.datetime.fromisoformat)
        self.released_pc_booter: datetime.datetime|None = parse_value(j, "Released PC booter", datetime.datetime.fromisoformat)
        self.released_dos: datetime.datetime|None = parse_value(j, "Released DOS", datetime.datetime.fromisoformat)
        self.released_windows_3x: datetime.datetime|None = parse_value(j, "Released Windows 3x", datetime.datetime.fromisoformat)
        self.released_windows: datetime.datetime|None = parse_value(j, "Released Windows", datetime.datetime.fromisoformat)
        self.released_mac_os: datetime.datetime|None = parse_value(j, "Released Mac OS", datetime.datetime.fromisoformat)
        self.released_os_x: datetime.datetime|None = parse_value(j, "Released OS X", datetime.datetime.fromisoformat)
        self.released_linux: datetime.datetime|None = parse_value(j, "Released Linux", datetime.datetime.fromisoformat)
        self.wrappers: list[str] = parse_list(j, "Wrappers", ",", str)
        self.wrappers_windows_3x: list[str] = parse_list(j, "Wrappers Windows 3x", ",", str)
        self.wrappers_windows: list[str] = parse_list(j, "Wrappers Windows", ",", str)
        self.wrappers_os_x: list[str] = parse_list(j, "Wrappers OS X", ",", str)
        self.wrappers_linux: list[str] = parse_list(j, "Wrappers Linux", ",", str)
        self.monetization: list[str] = parse_list(j, "Monetization", ",", str)
        self.microtransactions: list[str] = parse_list(j, "Microtransactions", ",", str)
        self.modes: list[str] = parse_list(j, "Modes", ",", str)
        self.pacing: list[str] = parse_list(j, "Pacing", ",", str)
        self.perspectives: list[str] = parse_list(j, "Perspectives", ",", str)
        self.controls: list[str] = parse_list(j, "Controls", ",", str)
        self.genres: list[str] = parse_list(j, "Genres", ",", str)
        self.sports: list[str] = parse_list(j, "Sports", ",", str)
        self.vehicles: list[str] = parse_list(j, "Vehicles", ",", str)
        self.art_styles: list[str] = parse_list(j, "Art styles", ",", str)
        self.themes: list[str] = parse_list(j, "Themes", ",", str)
        self.series: list[str] = parse_list(j, "Series", ",", str)
        self.steam_appid: list[str] = parse_list(j, "Steam AppID", ",", str)
        self.gogcom_id: list[str] = parse_list(j, "GOGcom ID", ",", str)
        self.strategywiki: str|None = j.get("StrategyWiki")
        self.wikipedia: str|None = j.get("Wikipedia")
        self.license: str|None = j.get("License")

class Infobox_game_engine:
    def __init__(self, j):
        self.engine: str|None = j.get("Engine")
        self.build: str|None = j.get("Build")

class Input:
    def __init__(self, j):
        self.key_remapping: Support = parse_support_enum(j, "Key remapping")
        self.mouse_acceleration: Support = parse_support_enum(j, "Mouse acceleration")
        self.mouse_sensitivity: Support = parse_support_enum(j, "Mouse sensitivity")
        self.mouse_input_in_menus: Support = parse_support_enum(j, "Mouse input in menus")
        self.keyboard_and_mouse_prompts: Support = parse_support_enum(j, "Keyboard and mouse prompts")
        self.mouse_y_axis_inversion: Support = parse_support_enum(j, "Mouse Y axis inversion")
        self.touchscreen: Support = parse_support_enum(j, "Touchscreen")
        self.controller_support: Support = parse_support_enum(j, "Controller support")
        self.full_controller_support: Support = parse_support_enum(j, "Full controller support")
        self.controller_support_level: Support = parse_support_enum(j, "Controller support level")
        self.controller_remapping: Support = parse_support_enum(j, "Controller remapping")
        self.controller_sensitivity: Support = parse_support_enum(j, "Controller sensitivity")
        self.controller_y_axis_inversion: Support = parse_support_enum(j, "Controller Y axis inversion")
        self.xinput_controller_support: Support = parse_support_enum(j, "XInput controller support")
        self.xbox_prompts: Support = parse_support_enum(j, "Xbox prompts")
        self.xbox_one_impulse_triggers: Support = parse_support_enum(j, "Xbox One Impulse Triggers")
        self.playstation_controller_support: Support = parse_support_enum(j, "Playstation controller support")
        self.playstation_prompts: Support = parse_support_enum(j, "Playstation prompts")
        self.playstation_motion_sensors: Support = parse_support_enum(j, "Playstation motion sensors")
        self.playstation_motion_sensors_modes: list[str] = parse_list(j, "Playstation motion sensors modes", ",", str)
        self.playstation_light_bar_support: str|None = j.get("Playstation light bar support")
        self.dualsense_adaptive_trigger_support: Support = parse_support_enum(j, "DualSense adaptive trigger support")
        self.dualsense_haptic_feedback_support: Support = parse_support_enum(j, "DualSense haptic feedback support")
        self.playstation_controller_models: list[str] = parse_list(j, "PlayStation controller models", ",", str)
        self.playstation_connection_modes: list[str] = parse_list(j, "Playstation connection modes", ",", str)
        self.tracked_motion_controllers: Support = parse_support_enum(j, "Tracked motion controllers")
        self.tracked_motion_controller_prompts: Support = parse_support_enum(j, "Tracked motion controller prompts")
        self.other_controller_support: Support = parse_support_enum(j, "Other controller support")
        self.other_button_prompts: list[str] = parse_list(j, "Other button prompts", ",", str)
        self.controller_hotplugging: Support = parse_support_enum(j, "Controller hotplugging")
        self.input_prompt_override: Support = parse_support_enum(j, "Input prompt override")
        self.controller_haptic_feedback: Support = parse_support_enum(j, "Controller haptic feedback")
        self.simultaneous_input: Support = parse_support_enum(j, "Simultaneous input")
        self.steam_input_api_support: Support = parse_support_enum(j, "Steam Input API support")
        self.steam_hook_input: Support = parse_support_enum(j, "Steam hook input")
        self.steam_input_prompts: Support = parse_support_enum(j, "Steam Input prompts")
        self.steam_input_prompts_icons: list[str] = parse_list(j, "Steam Input prompts icons", ",", str)
        self.steam_input_prompts_styles: list[str] = parse_list(j, "Steam Input prompts styles", ",", str)
        self.steam_controller_prompts: Support = parse_support_enum(j, "Steam Controller prompts")
        self.steam_deck_prompts: Support = parse_support_enum(j, "Steam Deck prompts")
        self.steam_input_motion_sensors: Support = parse_support_enum(j, "Steam Input motion sensors")
        self.steam_input_motion_sensors_modes: list[str] = parse_list(j, "Steam Input motion sensors modes", ",", str)
        self.steam_input_presets: Support = parse_support_enum(j, "Steam Input presets")
        self.steam_input_mouse_cursor_detection: Support = parse_support_enum(j, "Steam Input mouse cursor detection")

class L10n:
    def __init__(self, j):
        self.language: str|None = j.get("Language")
        self.status: str|None = j.get("Status")
        self.interface: Support = parse_support_enum(j, "Interface")
        self.audio: Support = parse_support_enum(j, "Audio")
        self.subtitles: Support = parse_support_enum(j, "Subtitles")
        self.notes: str|None = j.get("Notes")

class Middleware:
    def __init__(self, j):
        self.physics: list[str] = parse_list(j, "Physics", ",", str)
        self.audio: list[str] = parse_list(j, "Audio", ",", str)
        self.interface: list[str] = parse_list(j, "Interface", ",", str)
        self.input: list[str] = parse_list(j, "Input", ",", str)
        self.cutscenes: list[str] = parse_list(j, "Cutscenes", ",", str)
        self.multiplayer: list[str] = parse_list(j, "Multiplayer", ",", str)
        self.anticheat: list[str] = parse_list(j, "Anticheat", ",", str)

class Multiplayer:
    def __init__(self, j):
        self.local: Support = parse_support_enum(j, "Local")
        self.local_players: int|None = parse_value(j, "Local players", int)
        self.local_modes: list[str] = parse_list(j, "Local modes", ",", str)
        self.lan: Support = parse_support_enum(j, "LAN")
        self.lan_players: int|None = parse_value(j, "LAN players", int)
        self.lan_modes: list[str] = parse_list(j, "LAN modes", ",", str)
        self.online: Support = parse_support_enum(j, "Online")
        self.online_players: int|None = parse_value(j, "Online players", int)
        self.online_modes: list[str] = parse_list(j, "Online modes", ",", str)
        self.asynchronous: Support = parse_support_enum(j, "Asynchronous")
        self.crossplay: Support = parse_support_enum(j, "Crossplay")
        self.crossplay_platforms: list[str] = parse_list(j, "Crossplay platforms", ",", str)

class Tags:
    def __init__(self, j):
        self.stub: Support = parse_support_enum(j, "Stub")
        self.cleanup: Support = parse_support_enum(j, "Cleanup")
        self.top: str|None = j.get("Top")
        self.warnings: str|None = j.get("Warnings")
        self.gamespy: Support = parse_support_enum(j, "GameSpy")
        self.always_online: Support = parse_support_enum(j, "Always online")
        self.available_digitally: Support = parse_support_enum(j, "Available digitally")
        self.config_data: Support = parse_support_enum(j, "Config data")
        self.save_data: Support = parse_support_enum(j, "Save data")
        self.tickcross_unknown: str|None = j.get("Tickcross unknown")
        self.settings_screenshots: Support = parse_support_enum(j, "Settings screenshots")
        self.video_screenshots: Support = parse_support_enum(j, "Video screenshots")
        self.input_screenshots: Support = parse_support_enum(j, "Input screenshots")
        self.audio_screenshots: Support = parse_support_enum(j, "Audio screenshots")
        self.network_screenshots: Support = parse_support_enum(j, "Network screenshots")
        self.vr_screenshots: Support = parse_support_enum(j, "VR screenshots")

class VR_support:
    def __init__(self, j):
        self.native_3d: Support = parse_support_enum(j, "Native 3D")
        self.nvidia_3d_vision: Support = parse_support_enum(j, "Nvidia 3D Vision")
        self.vorpx: Support = parse_support_enum(j, "vorpX")
        self.vorpx_modes: list[str] = parse_list(j, "vorpX modes", ",", str)
        self.vr_only: Support = parse_support_enum(j, "VR only")
        self.openxr: Support = parse_support_enum(j, "OpenXR")
        self.steamvr: Support = parse_support_enum(j, "SteamVR")
        self.oculusvr: Support = parse_support_enum(j, "OculusVR")
        self.windows_mixed_reality: Support = parse_support_enum(j, "Windows Mixed Reality")
        self.osvr: Support = parse_support_enum(j, "OSVR")
        self.forte_vfx1: Support = parse_support_enum(j, "Forte VFX1")
        self.keyboard_mouse: Support = parse_support_enum(j, "Keyboard mouse")
        self.body_tracking: Support = parse_support_enum(j, "Body tracking")
        self.hand_tracking: Support = parse_support_enum(j, "Hand tracking")
        self.face_tracking: Support = parse_support_enum(j, "Face tracking")
        self.eye_tracking: Support = parse_support_enum(j, "Eye tracking")
        self.tobii_eye_tracking: Support = parse_support_enum(j, "Tobii Eye Tracking")
        self.trackir: Support = parse_support_enum(j, "TrackIR")
        self.novint_falcon: Support = parse_support_enum(j, "Novint Falcon")
        self.play_area_seated: Support = parse_support_enum(j, "Play area seated")
        self.play_area_standing: Support = parse_support_enum(j, "Play area standing")
        self.play_area_room_scale: Support = parse_support_enum(j, "Play area room scale")

class Video:
    def __init__(self, j):
        self.wsgf_link: str|None = j.get("WSGF Link")
        self.widescreen_wsgf_award: str|None = j.get("Widescreen WSGF award")
        self.multimonitor_wsgf_award: str|None = j.get("Multimonitor WSGF award")
        self.ultrawidescreen_wsgf_award: str|None = j.get("Ultrawidescreen WSGF award")
        self.widescreen_resolution: Support = parse_support_enum(j, "Widescreen resolution")
        self.multimonitor: Support = parse_support_enum(j, "Multimonitor")
        self.ultrawidescreen: Support = parse_support_enum(j, "Ultrawidescreen")
        self.field_of_view: Support = parse_support_enum(j, "Field of view")
        self.windowed: Support = parse_support_enum(j, "Windowed")
        self.borderless_fullscreen_windowed: Support = parse_support_enum(j, "Borderless fullscreen windowed")
        self.anisotropic_filtering: Support = parse_support_enum(j, "Anisotropic filtering")
        self.antialiasing: Support = parse_support_enum(j, "Antialiasing")
        self.upscaling: list[str] = parse_list(j, "Upscaling", ",", str)
        self.vsync: Support = parse_support_enum(j, "Vsync")
        self.hdr: Support = parse_support_enum(j, "HDR")
        self.ray_tracing: Support = parse_support_enum(j, "Ray tracing")
        self.color_blind: Support = parse_support_enum(j, "Color blind")

class XDG:
    def __init__(self, j):
        self.supported: Support = parse_support_enum(j, "Supported")
