// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// from extra_includes_first
#include <rev/REVLibError.h>

// wrapped header

#include <rev/SparkBase.h>

// from extra_includes
#include <rev/SparkLowLevel.h>
#include <rev/config/SparkBaseConfig.h>

#include <trampolines/rev__spark__SparkLowLevel.hpp>

namespace rev::spark {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_SparkBase :
  rev::spark::PyTrampolineCfg_SparkLowLevel<
  CfgBase
  >
{
  using Base = rev::spark::SparkBase;
  using override_base_Set_d = rev::spark::SparkBase;
  using override_base_SetVoltage_Tvolt_t = rev::spark::SparkBase;
  using override_base_KGet_v = rev::spark::SparkBase;
  using override_base_SetInverted_b = rev::spark::SparkBase;
  using override_base_KGetInverted_v = rev::spark::SparkBase;
  using override_base_Disable_v = rev::spark::SparkBase;
  using override_base_StopMotor_v = rev::spark::SparkBase;
  using override_base_Configure_RTSparkBaseConfig_TResetMode_TPersistMode = rev::spark::SparkBase;
  using override_base_ConfigureAsync_RTSparkBaseConfig_TResetMode_TPersistMode = rev::spark::SparkBase;
  using override_base_GetAbsoluteEncoder_v = rev::spark::SparkBase;
  using override_base_GetForwardLimitSwitch_v = rev::spark::SparkBase;
  using override_base_GetReverseLimitSwitch_v = rev::spark::SparkBase;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_SparkBase =
  rev::spark::PyTrampoline_SparkLowLevel<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_SparkBase : PyTrampolineBase_SparkBase<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_SparkBase<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_SparkBase;
  using Faults [[maybe_unused]] = typename rev::spark::SparkBase::Faults;
  using Warnings [[maybe_unused]] = typename rev::spark::SparkBase::Warnings;
  using IdleMode [[maybe_unused]] = typename rev::spark::SparkBase::IdleMode;
  using SoftLimitDirection [[maybe_unused]] = typename rev::spark::SparkBase::SoftLimitDirection;
  using ResetMode [[maybe_unused]] = typename rev::spark::SparkBase::ResetMode;
  using PersistMode [[maybe_unused]] = typename rev::spark::SparkBase::PersistMode;
  using MotorType = rev::spark::SparkLowLevel::MotorType;
  using SparkModel = rev::spark::SparkLowLevel::SparkModel;

  #ifdef SWGEN_ENABLE_rev__spark__SparkBase_PROTECTED_CONSTRUCTORS
    PyTrampoline_SparkBase(int busID, int deviceID, MotorType type, SparkModel model) :
      PyTrampolineBase_SparkBase<PyTrampolineBase, PyTrampolineCfg>(busID, deviceID, type, model)
    {}
  #endif

  #ifndef SWGEN_DISABLE_Set_d
    void Set(double speed) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Set_d;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "set", speed);
      return CxxCallBase::Set(std::move(speed));
    }
  #endif

  #ifndef SWGEN_DISABLE_SetVoltage_Tvolt_t
    void SetVoltage(units::volt_t output) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_SetVoltage_Tvolt_t;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "setVoltage", output);
      return CxxCallBase::SetVoltage(std::move(output));
    }
  #endif

  #ifndef SWGEN_DISABLE_KGet_v
    double Get() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGet_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
        "get", );
      return CxxCallBase::Get();
    }
  #endif

  #ifndef SWGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_SetInverted_b;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "setInverted", isInverted);
      return CxxCallBase::SetInverted(std::move(isInverted));
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetInverted_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
        "getInverted", );
      return CxxCallBase::GetInverted();
    }
  #endif

  #ifndef SWGEN_DISABLE_Disable_v
    void Disable() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Disable_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "disable", );
      return CxxCallBase::Disable();
    }
  #endif

  #ifndef SWGEN_DISABLE_StopMotor_v
    void StopMotor() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_StopMotor_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "stopMotor", );
      return CxxCallBase::StopMotor();
    }
  #endif

  #ifndef SWGEN_DISABLE_Configure_RTSparkBaseConfig_TResetMode_TPersistMode
    REVLibError Configure(SparkBaseConfig& config, ResetMode resetMode, PersistMode persistMode) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Configure_RTSparkBaseConfig_TResetMode_TPersistMode;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
        "configure", config, resetMode, persistMode);
      return CxxCallBase::Configure(std::forward<decltype(config)>(config), std::move(resetMode), std::move(persistMode));
    }
  #endif

  #ifndef SWGEN_DISABLE_ConfigureAsync_RTSparkBaseConfig_TResetMode_TPersistMode
    REVLibError ConfigureAsync(SparkBaseConfig& config, ResetMode resetMode, PersistMode persistMode) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_ConfigureAsync_RTSparkBaseConfig_TResetMode_TPersistMode;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
        "configureAsync", config, resetMode, persistMode);
      return CxxCallBase::ConfigureAsync(std::forward<decltype(config)>(config), std::move(resetMode), std::move(persistMode));
    }
  #endif

  #ifndef SWGEN_DISABLE_GetAbsoluteEncoder_v
    SparkAbsoluteEncoder& GetAbsoluteEncoder() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetAbsoluteEncoder_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(SparkAbsoluteEncoder&), LookupBase,
        "getAbsoluteEncoder", );
      return CxxCallBase::GetAbsoluteEncoder();
    }
  #endif

  #ifndef SWGEN_DISABLE_GetForwardLimitSwitch_v
    SparkLimitSwitch& GetForwardLimitSwitch() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetForwardLimitSwitch_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(SparkLimitSwitch&), LookupBase,
        "getForwardLimitSwitch", );
      return CxxCallBase::GetForwardLimitSwitch();
    }
  #endif

  #ifndef SWGEN_DISABLE_GetReverseLimitSwitch_v
    SparkLimitSwitch& GetReverseLimitSwitch() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetReverseLimitSwitch_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(SparkLimitSwitch&), LookupBase,
        "getReverseLimitSwitch", );
      return CxxCallBase::GetReverseLimitSwitch();
    }
  #endif

  #ifndef SWGEN_DISABLE_GetEncoderEvenIfAlreadyCreated_v
    #ifndef SWGEN_UDISABLE_rev__spark__SparkBase_GetEncoderEvenIfAlreadyCreated
      using rev::spark::SparkBase::GetEncoderEvenIfAlreadyCreated;
      #define SWGEN_UDISABLE_rev__spark__SparkBase_GetEncoderEvenIfAlreadyCreated
    #endif
  #endif

  #ifndef SWGEN_DISABLE_GetMotorInterface_v
    #ifndef SWGEN_UDISABLE_rev__spark__SparkBase_GetMotorInterface
      using rev::spark::SparkBase::GetMotorInterface;
      #define SWGEN_UDISABLE_rev__spark__SparkBase_GetMotorInterface
    #endif
  #endif

  #ifndef SWGEN_DISABLE_GetSparkModel_v
    #ifndef SWGEN_UDISABLE_rev__spark__SparkBase_GetSparkModel
      using rev::spark::SparkBase::GetSparkModel;
      #define SWGEN_UDISABLE_rev__spark__SparkBase_GetSparkModel
    #endif
  #endif
};

}; // namespace rev::spark
