// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <rev/SparkAnalogSensor.h>

#include <trampolines/rev__AnalogInput.hpp>

namespace rev::spark {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_SparkAnalogSensor :
  rev::PyTrampolineCfg_AnalogInput<
  CfgBase
  >
{
  using Base = rev::spark::SparkAnalogSensor;
  using override_base_KGetVoltage_v = rev::spark::SparkAnalogSensor;
  using override_base_KGetPosition_v = rev::spark::SparkAnalogSensor;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_SparkAnalogSensor =
  rev::PyTrampoline_AnalogInput<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_SparkAnalogSensor : PyTrampolineBase_SparkAnalogSensor<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_SparkAnalogSensor<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_SparkAnalogSensor;

  #ifndef SWGEN_DISABLE_KGetVoltage_v
    double GetVoltage() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetVoltage_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
        "getVoltage", );
      return CxxCallBase::GetVoltage();
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetPosition_v
    double GetPosition() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPosition_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
        "getPosition", );
      return CxxCallBase::GetPosition();
    }
  #endif
};

}; // namespace rev::spark
