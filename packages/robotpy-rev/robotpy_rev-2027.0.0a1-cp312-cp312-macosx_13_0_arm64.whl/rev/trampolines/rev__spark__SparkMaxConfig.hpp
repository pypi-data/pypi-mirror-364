// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <rev/config/SparkMaxConfig.h>

// from extra_includes
#include <sparkbaseconfig_apply.h>

#include <trampolines/rev__spark__SparkBaseConfig.hpp>

namespace rev::spark {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_SparkMaxConfig :
  rev::spark::PyTrampolineCfg_SparkBaseConfig<
  CfgBase
  >
{
  using Base = rev::spark::SparkMaxConfig;
  using override_base_Flatten_v = rev::spark::SparkMaxConfig;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_SparkMaxConfig =
  rev::spark::PyTrampoline_SparkBaseConfig<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_SparkMaxConfig : PyTrampolineBase_SparkMaxConfig<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_SparkMaxConfig<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_SparkMaxConfig;
  using DataPortConfig [[maybe_unused]] = typename rev::spark::SparkMaxConfig::DataPortConfig;

  #ifndef SWGEN_DISABLE_Flatten_v
    std::string Flatten() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Flatten_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(std::string), LookupBase,
        "flatten", );
      return CxxCallBase::Flatten();
    }
  #endif
};

}; // namespace rev::spark
