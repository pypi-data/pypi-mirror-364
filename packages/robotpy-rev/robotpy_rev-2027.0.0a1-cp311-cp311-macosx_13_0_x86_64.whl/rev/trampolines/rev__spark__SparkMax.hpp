// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// from extra_includes_first
#include <rev/REVLibError.h>
#include <rev/SparkLowLevel.h>

// wrapped header

#include <rev/SparkMax.h>

#include <trampolines/rev__spark__SparkBase.hpp>

namespace rev::spark {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_SparkMax :
  rev::spark::PyTrampolineCfg_SparkBase<
  CfgBase
  >
{
  using Base = rev::spark::SparkMax;
  using override_base_Configure_RTSparkBaseConfig_TResetMode_TPersistMode = rev::spark::SparkMax;
  using override_base_GetAbsoluteEncoder_v = rev::spark::SparkMax;
  using override_base_GetForwardLimitSwitch_v = rev::spark::SparkMax;
  using override_base_GetReverseLimitSwitch_v = rev::spark::SparkMax;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_SparkMax =
  rev::spark::PyTrampoline_SparkBase<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_SparkMax : PyTrampolineBase_SparkMax<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_SparkMax<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_SparkMax;
  using MotorType = rev::spark::SparkLowLevel::MotorType;
  using PersistMode = rev::spark::SparkBase::PersistMode;
  using ResetMode = rev::spark::SparkBase::ResetMode;

  #ifndef SWGEN_DISABLE_Configure_RTSparkBaseConfig_TResetMode_TPersistMode
    REVLibError Configure(SparkBaseConfig& config, ResetMode resetMode, PersistMode persistMode) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Configure_RTSparkBaseConfig_TResetMode_TPersistMode;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
        "configure", config, resetMode, persistMode);
      return CxxCallBase::Configure(std::forward<decltype(config)>(config), std::move(resetMode), std::move(persistMode));
    }
  #endif

  #ifndef SWGEN_DISABLE_GetAbsoluteEncoder_v
    SparkAbsoluteEncoder& GetAbsoluteEncoder() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetAbsoluteEncoder_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(SparkAbsoluteEncoder&), LookupBase,
        "getAbsoluteEncoder", );
      return CxxCallBase::GetAbsoluteEncoder();
    }
  #endif

  #ifndef SWGEN_DISABLE_GetForwardLimitSwitch_v
    SparkLimitSwitch& GetForwardLimitSwitch() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetForwardLimitSwitch_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(SparkLimitSwitch&), LookupBase,
        "getForwardLimitSwitch", );
      return CxxCallBase::GetForwardLimitSwitch();
    }
  #endif

  #ifndef SWGEN_DISABLE_GetReverseLimitSwitch_v
    SparkLimitSwitch& GetReverseLimitSwitch() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetReverseLimitSwitch_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(SparkLimitSwitch&), LookupBase,
        "getReverseLimitSwitch", );
      return CxxCallBase::GetReverseLimitSwitch();
    }
  #endif
};

}; // namespace rev::spark
