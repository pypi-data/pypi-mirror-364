// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// from extra_includes_first
#include <rev/REVLibError.h>

// wrapped header

#include <rev/RelativeEncoder.h>

namespace rev {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_RelativeEncoder : CfgBase
{
  using Base = rev::RelativeEncoder;
  using override_base_KGetPosition_v = rev::RelativeEncoder;
  using override_base_KGetVelocity_v = rev::RelativeEncoder;
  using override_base_SetPosition_d = rev::RelativeEncoder;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_RelativeEncoder : PyTrampolineBase {
  using PyTrampolineBase::PyTrampolineBase;

  #ifndef SWGEN_DISABLE_KGetPosition_v
    double GetPosition() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(RelativeEncoder, PYBIND11_TYPE(double), LookupBase,
        "getPosition", GetPosition, );
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetVelocity_v
    double GetVelocity() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(RelativeEncoder, PYBIND11_TYPE(double), LookupBase,
        "getVelocity", GetVelocity, );
    }
  #endif

  #ifndef SWGEN_DISABLE_SetPosition_d
    REVLibError SetPosition(double position) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(RelativeEncoder, PYBIND11_TYPE(REVLibError), LookupBase,
        "setPosition", SetPosition, position);
    }
  #endif
};

}; // namespace rev
