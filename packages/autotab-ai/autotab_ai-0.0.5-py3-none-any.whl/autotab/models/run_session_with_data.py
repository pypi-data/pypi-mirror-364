# coding: utf-8

"""
    Autotab API

    AI that does your repetitive work end to end, with superhuman reliability.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from autotab.models.environment import Environment
from autotab.models.run_session_state import RunSessionState
from typing import Optional, Set
from typing_extensions import Self

class RunSessionWithData(BaseModel):
    """
    RunSessionWithData
    """ # noqa: E501
    id: StrictStr
    skill_id: StrictStr
    owner: StrictStr
    created_at: datetime
    environment: Optional[Environment]
    start_time: datetime
    end_time: Optional[datetime] = None
    state: Optional[RunSessionState] = None
    inputs: Optional[Dict[str, Any]] = None
    data: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "skill_id", "owner", "created_at", "environment", "start_time", "end_time", "state", "inputs", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunSessionWithData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if environment (nullable) is None
        # and model_fields_set contains the field
        if self.environment is None and "environment" in self.model_fields_set:
            _dict['environment'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if inputs (nullable) is None
        # and model_fields_set contains the field
        if self.inputs is None and "inputs" in self.model_fields_set:
            _dict['inputs'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunSessionWithData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "skill_id": obj.get("skill_id"),
            "owner": obj.get("owner"),
            "created_at": obj.get("created_at"),
            "environment": obj.get("environment"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "state": obj.get("state"),
            "inputs": obj.get("inputs"),
            "data": obj.get("data")
        })
        return _obj


