###########################################################################
# This file defines the build process for fsleyes-props, as hosted at:
#
#    https://git.fmrib.ox.ac.uk/fsl/fsleyes/props
#
# The build pipeline comprises the following stages:
#
#    1. test:   Unit tests.
#
#    2. style:  Check coding style
#
#    3. doc:    Building and uploading API documentation using GitLab
#               Pages.
#
#    4. build:  Building source and wheel distributions.
#
#    5. deploy: Uploading the build outputs to pypi.
#
# Custom docker images are used for several jobs - these images are
# available at:
#
#    https://hub.docker.com/u/pauldmccarthy/
#
# The test and style stages are executed on all branches.
#
# The doc, build and deploy stages are executed on tags, and the deploy
# stage must be manually instantiated.
###########################################################################


stages:
 - test
 - style
 - doc
 - build
 - deploy


###############################################################################
# A number of variables must be set for the jobs to work. The following
# variables are implicitly defined in any gitlab CI job:
#
#   - CI_PROJECT_PATH    - gitlab namespace/project
#   - CI_COMMIT_REF_NAME - branch name, provided by gitlab
#   - CI_COMMIT_TAG      - present if build is running on a tag
#
# These variables must be explicitly set as "secret" variables:
#
#   - TWINE_USERNAME:                - Username to use when uploading to pypi
#
#   - TWINE_PASSWORD:                - Password to use when uploading to pypi
#
#   - TWINE_REPOSITORY_URL:          - Pypi repository to upload to
###############################################################################


variables:
  UPSTREAM_PROJECT:     "fsl/fsleyes/props"
  UPSTREAM_URL:         "git@git.fmrib.ox.ac.uk"


####################################
# These anchors are used to restrict
# when and where jobs are executed.
####################################


.only_releases: &only_releases
  only:
    - tags@fsl/fsleyes/props


.except_releases: &except_releases
  except:
    - tags


############
# Test stage
############


.test: &test_template

  # Releases are just tags on a release
  # branch, so we don't need to test them.
  <<: *except_releases

  tags:
    - docker

  script:
    - bash ./.ci/test_template.sh


test:3.10:
  stage: test
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3
  <<: *test_template


test:3.11:
  stage: test
  image: pauldmccarthy/fsleyes-py311-wxpy4-gtk3
  <<: *test_template

test:3.12:
  stage: test
  image: pauldmccarthy/fsleyes-py312-wxpy4-gtk3
  <<: *test_template

test:3.13:
  stage: test
  image: pauldmccarthy/fsleyes-py313-wxpy4-gtk3
  <<: *test_template


test:build-pypi-dist:
  stage: test
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3
  <<: *except_releases

  tags:
    - docker

  script:
   - bash ./.ci/build_pypi_dist.sh


#############
# Style stage
#############


style:
  stage: style
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3
  <<: *test_template
  variables:
    TEST_STYLE:  "true"


###########
# Doc stage
###########

pages:
  <<: *only_releases

  tags:
   - docker

  stage: doc
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3

  script:
    - bash ./.ci/build_doc.sh
  artifacts:
    paths:
      - public


#############
# Build stage
#############


build-pypi-dist:
  <<: *only_releases

  stage: build
  image: pauldmccarthy/fsleyes-py310-wxpy4-gtk3

  tags:
    - docker

  script:
   - bash ./.ci/build_pypi_dist.sh
   - bash ./.ci/check_version.sh

  artifacts:
    expire_in: 1 day
    paths:
      - dist/*


##############
# Deploy stage
##############


deploy-pypi:
  <<: *only_releases
  stage: deploy
  when:  manual
  image: python:3.10

  tags:
    - docker

  dependencies:
    - build-pypi-dist

  script:
    - bash ./.ci/deploy_pypi.sh
