# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .condition import Condition
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class AccessRule(UniversalBaseModel):
    description: typing.Optional[str] = None
    priority: typing.Optional[int] = None
    container: typing.Optional[str] = None
    transform: typing.Optional[str] = None
    conditions: typing.Optional[typing.List[Condition]] = None
    permissions: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
