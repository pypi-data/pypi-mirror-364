"""
CLI - Agent Orchestrator
Interface de linha de comando principal
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional

import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

from ..core.engine import OrchestratorEngine, EngineConfig
from ..utils.logger import logger
from ..auth.login_manager import LoginManager
from ..models.user import User

console = Console()


@click.group()
@click.version_option(version="1.0.0")
@click.option("--verbose", "-v", is_flag=True, help="Modo verboso")
@click.option("--log-level", default="INFO", help="N√≠vel de log")
def cli(verbose: bool, log_level: str):
    """
    üöÄ Agent Orchestrator - Orquestrador de Agentes de IA
    
    Transforma backlogs em sprints detalhadas e executa tasks
    usando agentes Claude Code e Gemini CLI.
    
    Exemplos:
        agent_orchestrator analyze-backlog backlog.md
        agent_orchestrator generate-sprint backlog.md --points 20
        agent_orchestrator execute-task TASK-001
    """
    if verbose:
        logger.setLevel("DEBUG")
    else:
        logger.setLevel(log_level)


@cli.command()
@click.argument("username")
@click.password_option()
def login(username: str, password: str):
    """
    Realiza o login do usu√°rio
    """
    login_manager = LoginManager()
    user = login_manager.login(username, password)
    if user:
        console.print(f"‚úÖ [green]Login bem-sucedido para o usu√°rio: {username}[/green]")
    else:
        console.print(f"‚ùå [red]Falha no login. Verifique suas credenciais.[/red]")

@cli.command()
@click.argument("username")
@click.password_option()
def register(username: str, password: str):
    """
    Registra um novo usu√°rio
    """
    login_manager = LoginManager()
    user = User(username=username, password=password)
    if login_manager.register(user):
        console.print(f"‚úÖ [green]Usu√°rio registrado com sucesso: {username}[/green]")
    else:
        console.print(f"‚ùå [red]O usu√°rio j√° existe.[/red]")


@cli.command()
@click.argument("file_path", type=click.Path(exists=True, path_type=Path))
@click.option("--output", "-o", type=click.Path(), help="Arquivo de sa√≠da")
def analyze_backlog(file_path: Path, output: Optional[Path]):
    """
    Analisa um arquivo de backlog em markdown
    
    FILE_PATH: Caminho para o arquivo de backlog (.md)
    """
    console.print(f"üîç [bold blue]Analisando backlog:[/bold blue] {file_path}")
    
    async def run_analysis():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Analisar backlog
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Analisando backlog...", total=None)
                
                backlog = await engine.analyze_backlog(file_path)
                
                progress.update(task, description="Backlog analisado com sucesso!")
            
            # Exibir resultados
            display_backlog_analysis(backlog)
            
            # Exportar se solicitado
            if output:
                export_backlog_analysis(backlog, output)
                console.print(f"‚úÖ [green]Resultados exportados para:[/green] {output}")
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro na an√°lise:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_analysis())


@cli.command()
@click.argument("file_path", type=click.Path(exists=True, path_type=Path))
@click.option("--points", "-p", default=20, help="Pontos m√°ximos do sprint")
@click.option("--priority", "-P", default="P1", help="Prioridade m√≠nima")
@click.option("--output", "-o", type=click.Path(), help="Arquivo de sa√≠da")
def generate_sprint(file_path: Path, points: int, priority: str, output: Optional[Path]):
    """
    Gera um sprint baseado no backlog
    
    FILE_PATH: Caminho para o arquivo de backlog (.md)
    """
    console.print(f"üèÉ [bold blue]Gerando sprint:[/bold blue] {points} pontos, prioridade {priority}")
    
    async def run_generation():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Analisar backlog
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Analisando backlog...", total=None)
                backlog = await engine.analyze_backlog(file_path)
                progress.update(task, description="Gerando sprint...")
                
                sprint = await engine.generate_sprint(backlog, points, priority)
                progress.update(task, description="Sprint gerado com sucesso!")
            
            # Exibir resultados
            display_sprint_generation(sprint)
            
            # Exportar se solicitado
            if output:
                export_sprint(sprint, output)
                console.print(f"‚úÖ [green]Sprint exportado para:[/green] {output}")
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro na gera√ß√£o:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_generation())


@cli.command()
@click.argument("task_id")
@click.option("--agent", "-a", default="claude", help="Tipo de agente (claude/gemini/auto)")
@click.option("--sprint", "-s", help="ID do sprint para contexto")
def execute_task(task_id: str, agent: str, sprint: Optional[str]):
    """
    Executa uma task espec√≠fica
    
    TASK_ID: ID da task a ser executada
    """
    console.print(f"‚ö° [bold blue]Executando task:[/bold blue] {task_id}")
    
    async def run_execution():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Buscar sprint se fornecido
            sprint_obj = None
            if sprint:
                console.print(f"üîç [yellow]Carregando sprint:[/yellow] {sprint}")
                sprint_obj = await engine.storage.load_sprint(sprint)
                if not sprint_obj:
                    console.print(f"‚ùå [red]Sprint {sprint} n√£o encontrado[/red]")
                    sys.exit(1)
            
            # Criar task baseada no contexto
            from ..models.task import Task
            
            if sprint_obj:
                # Buscar user story no sprint
                user_story = None
                for story in sprint_obj.user_stories:
                    if story.id == task_id:
                        user_story = story
                        break
                
                if user_story:
                    task = Task(
                        id=task_id,
                        title=user_story.title,
                        description=user_story.description,
                        user_story_id=user_story.id,
                        agent_type=agent,
                        priority=user_story.priority,
                        complexity="high" if user_story.story_points > 8 else "medium"
                    )
                else:
                    # Task n√£o encontrada no sprint, criar gen√©rica
                    task = Task(
                        id=task_id,
                        title=f"Task {task_id}",
                        description=f"Descri√ß√£o da task {task_id}",
                        user_story_id=task_id,
                        agent_type=agent
                    )
            else:
                # Criar task gen√©rica
                task = Task(
                    id=task_id,
                    title=f"Task {task_id}",
                    description=f"Descri√ß√£o da task {task_id}",
                    user_story_id="US-001",
                    agent_type=agent
                )
            
            # Executar task
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task_progress = progress.add_task("Executando task...", total=None)
                
                result = await engine.execute_task(task_id)
                
                progress.update(task_progress, description="Task executada!")
            
            # Exibir resultados
            display_task_execution(task, result)
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro na execu√ß√£o:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_execution())


@cli.command()
def list_sprints():
    """
    Lista todos os sprints salvos
    """
    console.print("üìã [bold blue]Listando sprints salvos...[/bold blue]")
    
    async def run_listing():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Carregar sprints
            sprints = await engine.storage.list_sprints()
            
            if not sprints:
                console.print("‚ÑπÔ∏è [yellow]Nenhum sprint encontrado[/yellow]")
                console.print("üí° [blue]Use 'agent_orchestrator generate-sprint' para criar um sprint[/blue]")
                return
            
            # Exibir sprints
            table = Table(title="Sprints Salvos")
            table.add_column("ID", style="cyan")
            table.add_column("Nome", style="green")
            table.add_column("Status", style="yellow")
            table.add_column("Pontos", style="magenta")
            table.add_column("Stories", style="blue")
            table.add_column("Data In√≠cio", style="white")
            table.add_column("Data Fim", style="white")
            
            for sprint in sprints:
                status_color = {
                    "planned": "yellow",
                    "in_progress": "blue", 
                    "completed": "green",
                    "cancelled": "red"
                }.get(sprint.status, "white")
                
                table.add_row(
                    sprint.id,
                    sprint.name,
                    f"[{status_color}]{sprint.status}[/{status_color}]",
                    str(sprint.max_points),
                    str(len(sprint.user_stories)),
                    sprint.start_date.strftime("%Y-%m-%d"),
                    sprint.end_date.strftime("%Y-%m-%d")
                )
            
            console.print(table)
            
            # Estat√≠sticas
            stats = await engine.storage.get_sprint_stats()
            console.print(f"\nüìä [bold]Estat√≠sticas:[/bold]")
            console.print(f"   Total de sprints: {stats['total_sprints']}")
            console.print(f"   Completados: {stats['completed_sprints']}")
            console.print(f"   Em progresso: {stats['in_progress_sprints']}")
            console.print(f"   Planejados: {stats['planned_sprints']}")
            console.print(f"   Total de pontos: {stats['total_points']}")
            console.print(f"   Velocidade m√©dia: {stats['average_velocity']:.1f} pontos/dia")
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro ao listar sprints:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_listing())


@cli.command()
@click.argument("sprint_id")
@click.option("--force", "-f", is_flag=True, help="For√ßar dele√ß√£o sem confirma√ß√£o")
def delete_sprint(sprint_id: str, force: bool):
    """
    Deleta um sprint salvo
    
    SPRINT_ID: ID do sprint a ser deletado
    """
    console.print(f"üóëÔ∏è [bold red]Deletando sprint:[/bold red] {sprint_id}")
    
    async def run_deletion():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Verificar se sprint existe
            sprint = await engine.storage.load_sprint(sprint_id)
            if not sprint:
                console.print(f"‚ùå [red]Sprint {sprint_id} n√£o encontrado[/red]")
                sys.exit(1)
            
            # Confirmar dele√ß√£o
            if not force:
                confirm = console.input(f"‚ö†Ô∏è [yellow]Tem certeza que deseja deletar o sprint {sprint_id}? (y/N):[/yellow] ")
                if confirm.lower() not in ['y', 'yes', 'sim']:
                    console.print("‚ùå [red]Opera√ß√£o cancelada[/red]")
                    return
            
            # Deletar sprint
            success = await engine.storage.delete_sprint(sprint_id)
            
            if success:
                console.print(f"‚úÖ [green]Sprint {sprint_id} deletado com sucesso[/green]")
            else:
                console.print(f"‚ùå [red]Erro ao deletar sprint {sprint_id}[/red]")
                sys.exit(1)
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro ao deletar sprint:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_deletion())


@cli.command()
def test_agents():
    """
    Testa a conex√£o e funcionamento dos agentes
    """
    console.print("üß™ [bold blue]Testando agentes...[/bold blue]")
    
    async def run_test():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Testar agentes
            console.print("\nüîç Testando Claude Code...")
            claude_agent = engine.orchestrator.agent_factory.get_agent("claude")
            claude_ok = await claude_agent.test_connection()
            
            if claude_ok:
                console.print("‚úÖ [green]Claude Code: OK[/green]")
            else:
                console.print("‚ùå [red]Claude Code: FALHOU[/red]")
            
            console.print("\nüîç Testando Gemini CLI...")
            gemini_agent = engine.orchestrator.agent_factory.get_agent("gemini")
            gemini_ok = await gemini_agent.test_connection()
            
            if gemini_ok:
                console.print("‚úÖ [green]Gemini CLI: OK[/green]")
            else:
                console.print("‚ùå [red]Gemini CLI: FALHOU[/red]")
            
            # Mostrar capacidades
            console.print("\nüìä [bold]Capacidades dos Agentes:[/bold]")
            capabilities = engine.orchestrator.get_agent_capabilities()
            
            for agent_type, caps in capabilities.items():
                console.print(f"\nü§ñ [cyan]{caps.name}[/cyan]")
                console.print(f"   Tipo: {caps.type}")
                console.print(f"   Velocidade: {caps.execution_speed}")
                console.print(f"   Complexidade: {caps.complexity_threshold}+ pontos")
                console.print(f"   Custo: ${caps.cost_per_token:.6f}/token")
                console.print(f"   Max Tokens: {caps.max_tokens}")
                
                if caps.personas:
                    console.print(f"   Personas: {', '.join(caps.personas)}")
                
                if caps.mcp_servers:
                    console.print(f"   MCP Servers: {', '.join(caps.mcp_servers)}")
            
            # Resumo
            console.print(f"\nüìà [bold]Resumo:[/bold]")
            console.print(f"   Claude Code: {'‚úÖ' if claude_ok else '‚ùå'}")
            console.print(f"   Gemini CLI: {'‚úÖ' if gemini_ok else '‚ùå'}")
            
            if claude_ok and gemini_ok:
                console.print("\nüéâ [green]Todos os agentes est√£o funcionando![/green]")
            else:
                console.print("\n‚ö†Ô∏è [yellow]Alguns agentes falharam. Verifique a configura√ß√£o.[/yellow]")
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro no teste:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_test())


@cli.command()
@click.argument("sprint_id")
@click.option("--agent", "-a", default="claude", help="Tipo de agente (claude/gemini/auto)")
@click.option("--rollback/--no-rollback", default=True, help="Habilitar rollback em caso de falha")
@click.option("--notify/--no-notify", default=True, help="Notificar progresso durante execu√ß√£o")
def execute_sprint(sprint_id: str, agent: str, rollback: bool, notify: bool):
    """
    Executa todas as tasks de um sprint
    
    SPRINT_ID: ID do sprint a ser executado
    """
    console.print(f"üèÉ [bold blue]Executando sprint:[/bold blue] {sprint_id}")
    console.print(f"üìä [yellow]Configura√ß√£o:[/yellow] Agente={agent}, Rollback={rollback}, Notificar={notify}")
    
    async def run_execution():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Buscar sprint no storage
            console.print(f"üîç [yellow]Buscando sprint:[/yellow] {sprint_id}")
            
            sprint = await engine.storage.load_sprint(sprint_id)
            
            if not sprint:
                console.print(f"‚ùå [red]Sprint {sprint_id} n√£o encontrado[/red]")
                console.print("üí° [blue]Dica: Use 'agent_orchestrator generate-sprint' para criar um sprint[/blue]")
                sys.exit(1)
            
            # Executar sprint com configura√ß√µes avan√ßadas
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Executando sprint...", total=None)
                
                results = await engine.sprint_executor.execute_sprint(
                    sprint, agent, rollback, notify
                )
                
                progress.update(task, description="Sprint executado!")
            
            # Exibir resultados
            display_sprint_execution(sprint, results)
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro na execu√ß√£o:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_execution())


@cli.command()
def stats():
    """Exibe estat√≠sticas de execu√ß√£o"""
    console.print("üìä [bold blue]Estat√≠sticas de Execu√ß√£o[/bold blue]")
    
    async def run_stats():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Obter estat√≠sticas
            stats = engine.get_execution_stats()
            sprint_stats = engine.sprint_executor.get_execution_statistics()
            
            # Exibir resultados
            display_execution_stats(stats, sprint_stats)
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro ao obter estat√≠sticas:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_stats())


@cli.command()
@click.argument("project_type")
@click.argument("project_path", type=click.Path())
@click.option("--validate", "-v", is_flag=True, help="Validar template antes de criar")
def create_project(project_type: str, project_path: Path, validate: bool):
    """Cria estrutura de projeto baseada em template"""
    console.print(f"üèóÔ∏è [bold blue]Criando projeto:[/bold blue] {project_type}")
    
    try:
        from ..templates.project_templates import ProjectTemplateManager, ProjectType
        
        # Configurar template manager
        template_manager = ProjectTemplateManager()
        
        # Validar tipo de projeto
        try:
            project_type_enum = ProjectType(project_type)
        except ValueError:
            console.print(f"‚ùå [red]Tipo de projeto inv√°lido:[/red] {project_type}")
            console.print(f"üí° [blue]Tipos dispon√≠veis:[/blue] {', '.join(t.value for t in ProjectType)}")
            sys.exit(1)
        
        # Validar template se solicitado
        if validate:
            template = template_manager.get_template(project_type_enum)
            if template:
                errors = template_manager.validate_template(template)
                if errors:
                    console.print(f"‚ùå [red]Template inv√°lido:[/red]")
                    for error in errors:
                        console.print(f"  - {error}")
                    sys.exit(1)
                else:
                    console.print("‚úÖ [green]Template v√°lido[/green]")
        
        # Criar estrutura do projeto
        success = template_manager.create_project_structure(project_type_enum, project_path)
        
        if success:
            console.print(f"‚úÖ [green]Projeto criado com sucesso:[/green] {project_path}")
            console.print(f"üìÅ [blue]Estrutura criada em:[/blue] {project_path}")
        else:
            console.print(f"‚ùå [red]Erro ao criar projeto[/red]")
            sys.exit(1)
            
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao criar projeto:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
def list_templates():
    """Lista templates de projeto dispon√≠veis"""
    console.print("üìã [bold blue]Templates de Projeto Dispon√≠veis[/bold blue]")
    
    try:
        from ..templates.project_templates import ProjectTemplateManager, ProjectType
        
        template_manager = ProjectTemplateManager()
        templates = template_manager.get_all_templates()
        
        table = Table(title="üìã Templates Dispon√≠veis")
        table.add_column("Tipo", style="cyan")
        table.add_column("Nome", style="white")
        table.add_column("Descri√ß√£o", style="green")
        table.add_column("Depend√™ncias", style="yellow")
        
        for project_type, template in templates.items():
            deps = ", ".join(template.dependencies[:3])
            if len(template.dependencies) > 3:
                deps += f" (+{len(template.dependencies) - 3} mais)"
            
            table.add_row(
                project_type.value,
                template.name,
                template.description[:60] + "..." if len(template.description) > 60 else template.description,
                deps
            )
        
        console.print(table)
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao listar templates:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
@click.argument("backlog_file", type=click.Path(exists=True, path_type=Path))
@click.option("--points", "-p", default=20, help="Pontos m√°ximos por sprint")
@click.option("--agent", "-a", default="claude", help="Tipo de agente a usar")
@click.option("--rollback/--no-rollback", default=True, help="Habilitar rollback em caso de falha")
@click.option("--pause-on-failure/--no-pause", default=True, help="Pausar em caso de falha")
@click.option("--estimate-time/--no-estimate", default=True, help="Estimar tempo de conclus√£o")
def execute_backlog(backlog_file: Path, points: int, agent: str, rollback: bool, 
                   pause_on_failure: bool, estimate_time: bool):
    """Executa backlog completo organizando em sprints"""
    console.print(f"üìã [bold blue]Executando backlog:[/bold blue] {backlog_file}")
    console.print(f"üìä [yellow]Configura√ß√£o:[/yellow] {points} pontos/sprint, Agente={agent}, Rollback={rollback}, Pausar={pause_on_failure}")
    
    async def run_execution():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Analisar backlog
            console.print(f"üîç [yellow]Analisando backlog:[/yellow] {backlog_file}")
            backlog = await engine.analyze_backlog(backlog_file)
            
            if not backlog.user_stories:
                console.print(f"‚ùå [red]Backlog n√£o cont√©m user stories[/red]")
                sys.exit(1)
            
            # Executar backlog completo
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Executando backlog...", total=None)
                
                result = await engine.backlog_executor.execute_backlog(
                    backlog, points, agent, rollback, pause_on_failure, estimate_time
                )
                
                progress.update(task, description="Backlog executado!")
            
            # Exibir resultados
            display_backlog_execution(backlog, result)
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro na execu√ß√£o:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_execution())


@cli.command()
def show_config():
    """Exibe configura√ß√£o atual"""
    console.print("‚öôÔ∏è [bold blue]Configura√ß√£o Atual[/bold blue]")
    
    try:
        from ..config.advanced_config import ConfigManager
        
        config_manager = ConfigManager()
        config = config_manager.get_config()
        summary = config_manager.get_config_summary()
        
        # Resumo da configura√ß√£o
        table = Table(title="üìä Resumo da Configura√ß√£o")
        table.add_column("Se√ß√£o", style="cyan")
        table.add_column("Status", style="green")
        table.add_column("Detalhes", style="white")
        
        # Agentes
        agents_status = "‚úÖ Configurado" if summary["agents_configured"]["claude"] or summary["agents_configured"]["gemini"] else "‚ùå N√£o configurado"
        agents_details = f"Claude: {'‚úÖ' if summary['agents_configured']['claude'] else '‚ùå'}, Gemini: {'‚úÖ' if summary['agents_configured']['gemini'] else '‚ùå'}"
        table.add_row("Agentes", agents_status, agents_details)
        
        # Integra√ß√µes
        integrations_count = sum(summary["integrations_configured"].values())
        integrations_status = f"‚úÖ {integrations_count} configuradas" if integrations_count > 0 else "‚ùå Nenhuma configurada"
        integrations_details = ", ".join([k for k, v in summary["integrations_configured"].items() if v])
        table.add_row("Integra√ß√µes", integrations_status, integrations_details or "Nenhuma")
        
        # Performance
        perf_details = f"Tasks: {summary['performance']['max_concurrent_tasks']}, Timeout: {summary['performance']['task_timeout']}s"
        table.add_row("Performance", "‚úÖ Configurado", perf_details)
        
        # Logging
        log_details = f"N√≠vel: {summary['logging']['level']}, JSON: {'‚úÖ' if summary['logging']['json_format'] else '‚ùå'}"
        table.add_row("Logging", "‚úÖ Configurado", log_details)
        
        console.print(table)
        
        # Estrat√©gia de reload
        reload_strategy = config.reload_strategy.value
        console.print(f"üîÑ [yellow]Estrat√©gia de Reload:[/yellow] {reload_strategy}")
        
        # Arquivo de configura√ß√£o
        console.print(f"üìÅ [yellow]Arquivo:[/yellow] {config.config_file}")
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao exibir configura√ß√£o:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
@click.argument("key")
@click.argument("value")
def set_config(key: str, value: str):
    """Define valor de configura√ß√£o"""
    console.print(f"‚öôÔ∏è [bold blue]Definindo configura√ß√£o:[/bold blue] {key} = {value}")
    
    try:
        from ..config.advanced_config import ConfigManager
        
        config_manager = ConfigManager()
        
        # Converter valor se necess√°rio
        if value.lower() in ["true", "false"]:
            value = value.lower() == "true"
        elif value.isdigit():
            value = int(value)
        elif value.replace(".", "").isdigit():
            value = float(value)
        
        # Atualizar configura√ß√£o
        config_manager.update_config({key: value})
        
        console.print(f"‚úÖ [green]Configura√ß√£o atualizada:[/green] {key} = {value}")
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao atualizar configura√ß√£o:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
@click.option("--format", "-f", default="yaml", 
              type=click.Choice(["yaml", "json"]),
              help="Formato de exporta√ß√£o")
@click.option("--output", "-o", type=click.Path(), help="Arquivo de sa√≠da")
def export_config(format: str, output: Optional[Path]):
    """Exporta configura√ß√£o atual"""
    console.print(f"üì§ [bold blue]Exportando configura√ß√£o:[/bold blue] {format}")
    
    try:
        from ..config.advanced_config import ConfigManager
        
        config_manager = ConfigManager()
        config_data = config_manager.export_config(format)
        
        if output:
            with open(output, 'w') as f:
                f.write(config_data)
            console.print(f"‚úÖ [green]Configura√ß√£o exportada:[/green] {output}")
        else:
            console.print(config_data)
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao exportar configura√ß√£o:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
@click.argument("config_file", type=click.Path(exists=True, path_type=Path))
def import_config(config_file: Path):
    """Importa configura√ß√£o de arquivo"""
    console.print(f"üì• [bold blue]Importando configura√ß√£o:[/bold blue] {config_file}")
    
    try:
        from ..config.advanced_config import ConfigManager
        
        config_manager = ConfigManager()
        
        with open(config_file, 'r') as f:
            config_data = f.read()
        
        format = "yaml" if config_file.suffix in [".yaml", ".yml"] else "json"
        config_manager.import_config(config_data, format)
        
        console.print(f"‚úÖ [green]Configura√ß√£o importada:[/green] {config_file}")
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao importar configura√ß√£o:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
@click.option("--simple", "-s", is_flag=True, help="Modo simples sem live updates")
@click.option("--components", "-c", multiple=True, 
              type=click.Choice(["overview", "executions", "config", "logs", "performance"]),
              help="Componentes a exibir")
def dashboard(simple: bool, components: tuple):
    """Inicia dashboard de status em tempo real"""
    console.print("üìä [bold blue]Iniciando Dashboard[/bold blue]")
    
    try:
        # Configurar engine
        config = EngineConfig(log_level="INFO")
        engine = OrchestratorEngine(config)
        
        # Criar dashboard
        from ..dashboard.status_dashboard import create_dashboard, DashboardComponent
        dashboard = create_dashboard(engine)
        
        # Converter componentes
        dashboard_components = []
        if components:
            for comp in components:
                if comp == "overview":
                    dashboard_components.append(DashboardComponent.OVERVIEW)
                elif comp == "executions":
                    dashboard_components.append(DashboardComponent.EXECUTIONS)
                elif comp == "config":
                    dashboard_components.append(DashboardComponent.CONFIG)
                elif comp == "logs":
                    dashboard_components.append(DashboardComponent.LOGS)
                elif comp == "performance":
                    dashboard_components.append(DashboardComponent.PERFORMANCE)
        
        if simple:
            console.print("üìä [yellow]Modo simples ativado[/yellow]")
            dashboard.show_simple_dashboard()
        else:
            console.print("üìä [yellow]Modo live ativado[/yellow]")
            dashboard.start_dashboard(dashboard_components)
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro no dashboard:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
def validate_config():
    """Valida configura√ß√£o atual"""
    console.print("üîç [bold blue]Validando configura√ß√£o[/bold blue]")
    
    try:
        from ..config.advanced_config import ConfigManager
        
        config_manager = ConfigManager()
        errors = config_manager.validate_config()
        
        if errors:
            console.print(f"‚ùå [red]Configura√ß√£o inv√°lida:[/red] {len(errors)} erros encontrados")
            for error in errors:
                console.print(f"  - {error}")
            sys.exit(1)
        else:
            console.print("‚úÖ [green]Configura√ß√£o v√°lida[/green]")
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao validar configura√ß√£o:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
def test_integrations():
    """Testa conex√µes das integra√ß√µes externas"""
    console.print("üîó [bold blue]Testando Integra√ß√µes Externas[/bold blue]")
    
    async def run_test():
        try:
            from ..integrations.integration_manager import IntegrationManager
            from ..config.advanced_config import ConfigManager
            
            # Carregar configura√ß√£o
            config_manager = ConfigManager()
            config = config_manager.get_config()
            
            # Criar gerenciador de integra√ß√µes
            integration_manager = IntegrationManager()
            
            # Registrar integra√ß√µes baseado na configura√ß√£o
            integrations_configured = 0
            
            # GitHub
            if config.integrations.github_token:
                if integration_manager.register_github(
                    config.integrations.github_token,
                    "seu-usuario",  # Seria configur√°vel
                    "seu-repo"      # Seria configur√°vel
                ):
                    integrations_configured += 1
            
            # Jira
            if config.integrations.jira_url and config.integrations.jira_username:
                if integration_manager.register_jira(
                    config.integrations.jira_url,
                    config.integrations.jira_username,
                    config.integrations.jira_password or "",
                    "PROJ"  # Seria configur√°vel
                ):
                    integrations_configured += 1
            
            # Slack
            if config.integrations.slack_webhook:
                if integration_manager.register_slack(
                    config.integrations.slack_webhook
                ):
                    integrations_configured += 1
            
            if integrations_configured == 0:
                console.print("‚ö†Ô∏è [yellow]Nenhuma integra√ß√£o configurada[/yellow]")
                console.print("Configure as integra√ß√µes no arquivo config.yaml")
                return
            
            # Testar conex√µes
            console.print(f"üîó [blue]Testando {integrations_configured} integra√ß√£o(√µes)...[/blue]")
            results = await integration_manager.test_all_connections()
            
            # Exibir resultados
            integration_manager.display_integration_status()
            
            # Resumo
            successful = sum(1 for connected in results.values() if connected)
            console.print(f"\nüìä [bold]Resumo:[/bold] {successful}/{len(results)} integra√ß√µes conectadas")
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro ao testar integra√ß√µes:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_test())


@cli.command()
@click.argument("integration_type", type=click.Choice(["github", "jira", "slack"]))
@click.argument("config_value")
def configure_integration(integration_type: str, config_value: str):
    """Configura integra√ß√£o externa"""
    console.print(f"‚öôÔ∏è [bold blue]Configurando Integra√ß√£o: {integration_type.upper()}[/bold blue]")
    
    try:
        from ..config.advanced_config import ConfigManager
        
        config_manager = ConfigManager()
        config = config_manager.get_config()
        
        if integration_type == "github":
            # config_value seria o token
            config.integrations.github_token = config_value
            console.print("‚úÖ [green]Token do GitHub configurado[/green]")
            
        elif integration_type == "jira":
            # config_value seria a URL
            config.integrations.jira_url = config_value
            console.print("‚úÖ [green]URL do Jira configurada[/green]")
            
        elif integration_type == "slack":
            # config_value seria o webhook
            config.integrations.slack_webhook = config_value
            console.print("‚úÖ [green]Webhook do Slack configurado[/green]")
        
        # Salvar configura√ß√£o
        config_manager.save_config(config)
        console.print("üíæ [blue]Configura√ß√£o salva[/blue]")
        
    except Exception as e:
        console.print(f"‚ùå [red]Erro ao configurar integra√ß√£o:[/red] {str(e)}")
        sys.exit(1)


@cli.command()
@click.option("--skip-permissions", is_flag=True, default=True, help="Ativar skip permissions para Claude")
@click.option("--yolo-mode", is_flag=True, default=True, help="Ativar yolo mode para Gemini")
def configure_agents(skip_permissions: bool, yolo_mode: bool):
    """
    Configura op√ß√µes dos agentes de IA
    
    Op√ß√µes:
        --skip-permissions: Ativa --dangerously-skip-permissions para Claude Code
        --yolo-mode: Ativa --yolo para Gemini CLI
    """
    console.print("üîß [bold blue]Configurando agentes...[/bold blue]")
    
    async def run_configuration():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Configurar agentes
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Configurando agentes...", total=None)
                
                # Configurar Claude
                if skip_permissions:
                    engine.agent_factory.configure_claude_skip_permissions(True)
                    console.print("‚úÖ [green]Claude skip permissions ativado[/green]")
                else:
                    engine.agent_factory.configure_claude_skip_permissions(False)
                    console.print("‚ö†Ô∏è [yellow]Claude skip permissions desativado[/yellow]")
                
                # Configurar Gemini
                if yolo_mode:
                    engine.agent_factory.configure_gemini_yolo_mode(True)
                    console.print("‚úÖ [green]Gemini yolo mode ativado[/green]")
                else:
                    engine.agent_factory.configure_gemini_yolo_mode(False)
                    console.print("‚ö†Ô∏è [yellow]Gemini yolo mode desativado[/yellow]")
                
                progress.update(task, description="Agentes configurados!")
            
            console.print("üéâ [bold green]Configura√ß√£o conclu√≠da![/bold green]")
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro na configura√ß√£o:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_configuration())


@cli.command()
def agent_status():
    """
    Mostra status dos agentes e suas configura√ß√µes
    """
    console.print("ü§ñ [bold blue]Status dos Agentes...[/bold blue]")
    
    async def run_status():
        try:
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Obter status dos agentes
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Verificando agentes...", total=None)
                
                # Testar Claude
                claude_agent = engine.agent_factory.get_agent("claude")
                claude_status = await claude_agent.test_connection()
                
                # Testar Gemini
                gemini_agent = engine.agent_factory.get_agent("gemini")
                gemini_status = await gemini_agent.test_connection()
                
                progress.update(task, description="Status verificado!")
            
            # Exibir status
            display_agent_status(claude_status, gemini_status)
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro ao verificar status:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_status())


@cli.command()
@click.argument("sprint_id")
@click.option("--format", "-f", default="markdown", 
              type=click.Choice(["markdown", "json", "html", "csv"]),
              help="Formato do relat√≥rio")
@click.option("--output", "-o", type=click.Path(), help="Arquivo de sa√≠da")
def generate_report(sprint_id: str, format: str, output: Optional[Path]):
    """Gera relat√≥rio de progresso do sprint"""
    console.print(f"üìä [bold blue]Gerando relat√≥rio:[/bold blue] {sprint_id}")
    
    async def run_report():
        try:
            from ..reporting.progress_reporter import ProgressReporter, ReportFormat
            
            # Configurar engine
            config = EngineConfig(log_level="INFO")
            engine = OrchestratorEngine(config)
            
            # Buscar sprint
            sprint = await engine.storage.load_sprint(sprint_id)
            
            if not sprint:
                console.print(f"‚ùå [red]Sprint {sprint_id} n√£o encontrado[/red]")
                sys.exit(1)
            
            # Configurar reporter
            reporter = ProgressReporter()
            
            # Gerar relat√≥rio
            report_format = ReportFormat(format)
            report_path = reporter.generate_sprint_report(
                sprint, [], report_format  # Lista vazia de resultados por enquanto
            )
            
            # Mover para local especificado se necess√°rio
            if output:
                import shutil
                shutil.move(str(report_path), str(output))
                report_path = output
            
            console.print(f"‚úÖ [green]Relat√≥rio gerado:[/green] {report_path}")
            
        except Exception as e:
            console.print(f"‚ùå [red]Erro ao gerar relat√≥rio:[/red] {str(e)}")
            sys.exit(1)
    
    asyncio.run(run_report())


def display_backlog_analysis(backlog):
    """Exibe an√°lise do backlog"""
    table = Table(title=f"üìã An√°lise do Backlog: {backlog.title}")
    table.add_column("M√©trica", style="cyan")
    table.add_column("Valor", style="green")
    
    table.add_row("Total de Stories", str(len(backlog.user_stories)))
    table.add_row("Total de Pontos", str(backlog.total_points))
    table.add_row("Prioridade M√©dia", backlog.user_stories[0].priority if backlog.user_stories else "N/A")
    
    console.print(table)
    
    # Tabela de stories
    if backlog.user_stories:
        stories_table = Table(title="üìù User Stories")
        stories_table.add_column("ID", style="cyan")
        stories_table.add_column("T√≠tulo", style="white")
        stories_table.add_column("Pontos", style="green")
        stories_table.add_column("Prioridade", style="yellow")
        
        for story in backlog.user_stories:
            stories_table.add_row(
                story.id,
                story.title[:50] + "..." if len(story.title) > 50 else story.title,
                str(story.story_points),
                story.priority
            )
        
        console.print(stories_table)


def display_sprint_generation(sprint):
    """Exibe gera√ß√£o do sprint"""
    table = Table(title=f"üèÉ Sprint Gerado: {sprint.id}")
    table.add_column("M√©trica", style="cyan")
    table.add_column("Valor", style="green")
    
    table.add_row("ID", sprint.id)
    table.add_row("Nome", sprint.name)
    table.add_row("Stories", str(len(sprint.user_stories)))
    table.add_row("Pontos", str(sum(s.story_points for s in sprint.user_stories)))
    table.add_row("Status", sprint.status)
    
    console.print(table)


def display_task_execution(task, result):
    """Exibe resultado da execu√ß√£o da task"""
    status = "‚úÖ Sucesso" if result.success else "‚ùå Falha"
    color = "green" if result.success else "red"
    
    panel = Panel(
        f"[bold]{status}[/bold]\n"
        f"Task: {task.id} - {task.title}\n"
        f"Agente: {result.agent_used}\n"
        f"Tempo: {result.execution_time:.2f}s\n"
        f"Mensagem: {result.message}",
        title=f"‚ö° Resultado da Execu√ß√£o: {task.id}",
        border_style=color
    )
    
    console.print(panel)


def display_sprint_execution(sprint, results):
    """Exibe resultado da execu√ß√£o do sprint"""
    console.print(f"üèÉ [bold blue]Sprint Executado:[/bold blue] {sprint.id}")
    
    # Estat√≠sticas do sprint
    stats_table = Table(title="üìä Estat√≠sticas do Sprint")
    stats_table.add_column("M√©trica", style="cyan")
    stats_table.add_column("Valor", style="green")
    
    total_tasks = len(results)
    successful_tasks = len([r for r in results if r.success])
    total_time = sum(r.execution_time for r in results)
    
    stats_table.add_row("Total de Tasks", str(total_tasks))
    stats_table.add_row("Tasks Bem-sucedidas", str(successful_tasks))
    stats_table.add_row("Taxa de Sucesso", f"{(successful_tasks/total_tasks*100):.1f}%" if total_tasks > 0 else "0%")
    stats_table.add_row("Tempo Total", f"{total_time:.2f}s")
    
    console.print(stats_table)
    
    # Detalhes das tasks
    if results:
        tasks_table = Table(title="‚ö° Detalhes das Tasks")
        tasks_table.add_column("Status", style="cyan")
        tasks_table.add_column("Agente", style="yellow")
        tasks_table.add_column("Tempo", style="green")
        tasks_table.add_column("Mensagem", style="white")
        
        for result in results:
            status = "‚úÖ" if result.success else "‚ùå"
            tasks_table.add_row(
                status,
                result.agent_used,
                f"{result.execution_time:.2f}s",
                result.message[:50] + "..." if len(result.message) > 50 else result.message
            )
        
        console.print(tasks_table)


def display_backlog_execution(backlog, result):
    """Exibe resultados da execu√ß√£o do backlog"""
    console.print(f"\nüìã [bold blue]Resultados da Execu√ß√£o do Backlog[/bold blue]")
    
    # Resumo
    table = Table(title="üìä Resumo da Execu√ß√£o")
    table.add_column("M√©trica", style="cyan")
    table.add_column("Valor", style="green")
    
    table.add_row("Status", result["status"])
    table.add_row("Total de Sprints", str(result["total_sprints"]))
    table.add_row("Sprints Conclu√≠dos", str(result["completed_sprints"]))
    table.add_row("Sprints Falharam", str(result["failed_sprints"]))
    table.add_row("Total de Tasks", str(result["total_tasks"]))
    table.add_row("Tasks Conclu√≠das", str(result["completed_tasks"]))
    table.add_row("Tasks Falharam", str(result["failed_tasks"]))
    table.add_row("Tempo de Execu√ß√£o", f"{result['execution_time']:.2f}s")
    
    console.print(table)
    
    # Detalhes dos sprints
    if result["sprints"]:
        sprints_table = Table(title="üèÉ Detalhes dos Sprints")
        sprints_table.add_column("Sprint", style="cyan")
        sprints_table.add_column("Status", style="white")
        sprints_table.add_column("Tasks", style="green")
        sprints_table.add_column("Tempo", style="yellow")
        
        for sprint_result in result["sprints"]:
            status = "‚úÖ Sucesso" if sprint_result["success"] else "‚ùå Falha"
            sprints_table.add_row(
                sprint_result["sprint_id"],
                status,
                f"{sprint_result['completed_tasks']}/{sprint_result['total_tasks']}",
                f"{sprint_result['execution_time']:.2f}s"
            )
        
        console.print(sprints_table)


def display_execution_stats(stats, sprint_stats=None):
    """Exibe estat√≠sticas de execu√ß√£o"""
    table = Table(title="üìä Estat√≠sticas de Execu√ß√£o")
    table.add_column("M√©trica", style="cyan")
    table.add_column("Valor", style="green")
    
    table.add_row("Total de Execu√ß√µes", str(stats.get("total_executions", 0)))
    table.add_row("Execu√ß√µes Bem-sucedidas", str(stats.get("successful_executions", 0)))
    table.add_row("Taxa de Sucesso", f"{stats.get('success_rate', 0):.1f}%")
    table.add_row("Tempo M√©dio", f"{stats.get('average_execution_time', 0):.2f}s")
    
    console.print(table)
    
    # Estat√≠sticas por agente
    if stats.get("agent_usage"):
        agent_table = Table(title="ü§ñ Uso por Agente")
        agent_table.add_column("Agente", style="cyan")
        agent_table.add_column("Execu√ß√µes", style="green")
        
        for agent, count in stats["agent_usage"].items():
            agent_table.add_row(agent, str(count))
        
        console.print(agent_table)
    
    # Estat√≠sticas de sprint se dispon√≠veis
    if sprint_stats:
        sprint_table = Table(title="üèÉ Estat√≠sticas de Sprint")
        sprint_table.add_column("M√©trica", style="cyan")
        sprint_table.add_column("Valor", style="green")
        
        sprint_table.add_row("Total de Sprints", str(sprint_stats.get("total_executions", 0)))
        sprint_table.add_row("Sprints Conclu√≠dos", str(sprint_stats.get("completed_executions", 0)))
        sprint_table.add_row("Sprints Falharam", str(sprint_stats.get("failed_executions", 0)))
        sprint_table.add_row("Taxa de Sucesso Sprint", f"{sprint_stats.get('success_rate', 0):.1f}%")
        sprint_table.add_row("Total de Tasks", str(sprint_stats.get("total_tasks", 0)))
        sprint_table.add_row("Tasks Conclu√≠das", str(sprint_stats.get("completed_tasks", 0)))
        sprint_table.add_row("Taxa de Sucesso Tasks", f"{sprint_stats.get('task_success_rate', 0):.1f}%")
        
        console.print(sprint_table)


def export_backlog_analysis(backlog, output_path: Path):
    """Exporta an√°lise do backlog"""
    import json
    
    data = {
        "backlog_id": backlog.id,
        "title": backlog.title,
        "description": backlog.description,
        "total_stories": len(backlog.user_stories),
        "total_points": backlog.total_points,
        "user_stories": [
            {
                "id": story.id,
                "title": story.title,
                "description": story.description,
                "story_points": story.story_points,
                "priority": story.priority,
                "dependencies": story.dependencies
            }
            for story in backlog.user_stories
        ]
    }
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def export_sprint(sprint, output_path: Path):
    """Exporta sprint"""
    import json
    
    data = {
        "sprint_id": sprint.id,
        "name": sprint.name,
        "description": sprint.description,
        "max_points": sprint.max_points,
        "status": sprint.status,
        "tasks": [
            {
                "id": task.id,
                "title": task.title,
                "description": task.description,
                "story_points": task.story_points,
                "priority": task.priority,
                "status": task.status
            }
            for task in sprint.tasks
        ]
    }
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def display_agent_status(claude_status: bool, gemini_status: bool):
    """Exibe status dos agentes"""
    table = Table(title="ü§ñ Status dos Agentes")
    table.add_column("Agente", style="cyan", no_wrap=True)
    table.add_column("Status", style="green")
    table.add_column("Configura√ß√£o", style="yellow")
    
    # Claude
    claude_icon = "‚úÖ" if claude_status else "‚ùå"
    claude_status_text = "Conectado" if claude_status else "Desconectado"
    claude_config = "skip_permissions=True" if claude_status else "skip_permissions=False"
    
    table.add_row(
        "Claude Code",
        f"{claude_icon} {claude_status_text}",
        claude_config
    )
    
    # Gemini
    gemini_icon = "‚úÖ" if gemini_status else "‚ùå"
    gemini_status_text = "Conectado" if gemini_status else "Desconectado"
    gemini_config = "yolo_mode=True" if gemini_status else "yolo_mode=False"
    
    table.add_row(
        "Gemini CLI",
        f"{gemini_icon} {gemini_status_text}",
        gemini_config
    )
    
    console.print(table)
    
    # Resumo
    total_agents = 2
    connected_agents = sum([claude_status, gemini_status])
    
    console.print(f"\nüìä [bold]Resumo:[/bold] {connected_agents}/{total_agents} agentes conectados")
    
    if connected_agents == 0:
        console.print("‚ö†Ô∏è [yellow]Nenhum agente conectado. Configure os agentes primeiro.[/yellow]")
    elif connected_agents == total_agents:
        console.print("üéâ [green]Todos os agentes est√£o funcionando![/green]")
    else:
        console.print("‚ö†Ô∏è [yellow]Alguns agentes n√£o est√£o conectados.[/yellow]")


def main():
    """Entry point do CLI"""
    cli()

if __name__ == "__main__":
    main() 