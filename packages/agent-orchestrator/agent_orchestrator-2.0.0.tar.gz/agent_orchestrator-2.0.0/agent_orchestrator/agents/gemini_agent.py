"""
Gemini Agent - Agent Orchestrator
Integra√ß√£o com Gemini CLI para execu√ß√£o r√°pida de tarefas
"""

import asyncio
import subprocess
import json
import re
import time
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime

from ..models.task import Task, TaskResult
from ..utils.logger import logger


@dataclass
class GeminiConfig:
    """Configura√ß√£o do agente Gemini"""
    api_key: Optional[str] = None  # N√ÉO USAR - deixar Gemini usar auth padr√£o
    retry_attempts: int = 2
    max_tokens: int = 2000
    temperature: float = 0.2
    model: str = "gemini-2.5-pro"  # Modelo padr√£o do Gemini CLI
    mcp_servers: List[str] = None
    
    def __post_init__(self):
        if self.mcp_servers is None:
            self.mcp_servers = [
                "filesystem",
                "git",
                "github",
                "terminal"
            ]


class GeminiAgent:
    """Agente Gemini CLI para execu√ß√£o r√°pida de tarefas"""
    
    def __init__(self, config: Optional[GeminiConfig] = None):
        self.config = config or GeminiConfig()
        self.logger = logger
        self._validate_installation()
        self._setup_environment()
    
    def _validate_installation(self):
        """Valida se Gemini CLI est√° instalado"""
        try:
            result = subprocess.run(
                ["gemini", "--version"],
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                self.logger.info("‚úÖ Gemini CLI encontrado")
            else:
                raise RuntimeError("Gemini CLI n√£o est√° funcionando")
        except FileNotFoundError:
            raise RuntimeError(
                "Gemini CLI n√£o encontrado. "
                "Instale com: npm install -g @google/gemini-cli"
            )
    
    def _setup_environment(self):
        """Configura ambiente para Gemini CLI"""
        # N√ÉO carregar API key - usar autentica√ß√£o padr√£o do Gemini CLI
        self.logger.info(
            "‚úÖ Gemini CLI configurado com autentica√ß√£o padr√£o"
        )
        
        # Verificar MCP servers
        self._validate_mcp_servers()
    
    def _get_api_key_from_env(self) -> Optional[str]:
        """DEPRECATED: N√£o usar API key - deixar Gemini CLI usar sua autentica√ß√£o padr√£o"""
        return None
    
    def _validate_mcp_servers(self):
        """Valida se MCP servers est√£o dispon√≠veis"""
        try:
            # Testar comando b√°sico
            result = subprocess.run(
                ["gemini", "teste"],
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                self.logger.info("‚úÖ Gemini CLI configurado")
            else:
                self.logger.warning("‚ö†Ô∏è Gemini CLI pode n√£o estar configurado corretamente")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erro ao validar Gemini CLI: {str(e)}")
    
    async def execute_task(self, task: Task, context: Dict[str, Any] = None) -> TaskResult:
        """
        Executa uma task usando Gemini CLI
        
        Args:
            task: Task a ser executada
            context: Contexto adicional da task
            
        Returns:
            TaskResult: Resultado da execu√ß√£o
        """
        start_time = time.time()
        self.logger.info(f"ü§ñ Gemini executando task: {task.id}")
        
        try:
            # Criar prompt otimizado para Gemini
            prompt = self._create_prompt(task, context)
            
            # Executar com Gemini
            result = await self._execute_with_gemini(prompt)
            
            execution_time = time.time() - start_time
            
            # Processar resultado
            task_result = self._process_result(result, task, execution_time)
            
            self.logger.info(f"‚úÖ Gemini completou task {task.id} em {execution_time:.2f}s")
            return task_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            self.logger.error(f"‚ùå Erro na execu√ß√£o da task {task.id}: {str(e)}")
            
            return TaskResult(
                success=False,
                message=f"Erro na execu√ß√£o: {str(e)}",
                error=str(e),
                execution_time=execution_time,
                agent_used="gemini"
            )
    
    def _create_prompt(self, task: Task, context: Optional[Dict[str, Any]] = None) -> str:
        """Cria prompt otimizado para Gemini"""
        prompt = f"""
Voc√™ √© um desenvolvedor experiente usando Gemini para implementar uma tarefa rapidamente.

=== TAREFA ===
ID: {task.id}
T√≠tulo: {task.title}
Descri√ß√£o: {task.description}
Prioridade: {task.priority}
Complexidade: {task.complexity}

=== CRIT√âRIOS DE ACEITE ===
"""
        
        # Adicionar crit√©rios de aceite
        if hasattr(task, 'acceptance_criteria') and task.acceptance_criteria:
            for i, criteria in enumerate(task.acceptance_criteria, 1):
                prompt += f"{i}. {criteria}\n"
        else:
            prompt += "Implementar funcionalidade conforme especifica√ß√£o\n"
        
        # Adicionar contexto se dispon√≠vel
        if context:
            prompt += f"\n=== CONTEXTO ADICIONAL ===\n"
            for key, value in context.items():
                prompt += f"{key}: {value}\n"
        
        prompt += """

=== INSTRU√á√ïES ===
1. Analise a tarefa rapidamente
2. Implemente a funcionalidade de forma eficiente
3. Use MCP servers quando apropriado (filesystem, git, terminal)
4. Foque na implementa√ß√£o pr√°tica
5. Valide que os crit√©rios foram atendidos

=== RESULTADO ESPERADO ===
- Implementa√ß√£o funcional
- C√≥digo limpo e eficiente
- Crit√©rios de aceite atendidos

Execute esta tarefa agora de forma r√°pida e eficiente.
"""
        
        return prompt
    
    async def _execute_with_gemini(self, prompt: str) -> Dict[str, Any]:
        """Executa comando com Gemini CLI"""
        # Construir comando usando a sintaxe correta do Gemini CLI
        gemini_command = ["gemini", "--prompt", prompt]
        
        # N√ÉO adicionar --yolo pois n√£o √© uma flag v√°lida
        # Deixar o Gemini usar suas configura√ß√µes padr√£o
        
        self.logger.info(f"ü§ñ Executando com modelo padr√£o do Gemini CLI")
        
        # Executar comando
        process = await asyncio.create_subprocess_exec(
            *gemini_command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=Path.cwd()
        )
        
        try:
            stdout, stderr = await process.communicate()
            
            return {
                "success": process.returncode == 0,
                "stdout": stdout.decode('utf-8'),
                "stderr": stderr.decode('utf-8'),
                "return_code": process.returncode,
                "model": "gemini-2.5-pro"  # Modelo padr√£o do CLI
            }
            
        except Exception as e:
            process.kill()
            raise Exception(f"Erro na execu√ß√£o do Gemini: {str(e)}")
    
    def _process_result(self, result: Dict[str, Any], task: Task, execution_time: float) -> TaskResult:
        """Processa resultado da execu√ß√£o"""
        if result["success"]:
            # Extrair informa√ß√µes √∫teis do output
            output = result["stdout"]
            
            # Detectar arquivos criados/modificados
            files_created = self._extract_files_created(output)
            
            # Detectar c√≥digo gerado
            code_generated = self._detect_code_generation(output)
            
            # Detectar uso de MCP servers
            mcp_usage = self._detect_mcp_usage(output)
            
            return TaskResult(
                success=True,
                message=f"Task executada com sucesso usando modelo {result['model']}",
                data={
                    "files_created": files_created,
                    "code_generated": code_generated,
                    "mcp_usage": mcp_usage,
                    "model_used": result["model"],
                    "output_length": len(output)
                },
                execution_time=execution_time,
                agent_used="gemini"
            )
        else:
            return TaskResult(
                success=False,
                message=f"Gemini falhou com c√≥digo {result['return_code']}",
                error=result["stderr"],
                execution_time=execution_time,
                agent_used="gemini"
            )
    
    def _extract_files_created(self, output: str) -> List[str]:
        """Extrai arquivos criados do output"""
        files = []
        
        # Padr√µes para detectar arquivos criados
        patterns = [
            r"criado arquivo:?\s*([^\n]+)",
            r"criando:?\s*([^\n]+)",
            r"arquivo:?\s*([^\n]+\.(py|js|ts|java|cpp|h|md|txt|json|yaml|yml))",
            r"```([^\n]+\.(py|js|ts|java|cpp|h|md|txt|json|yaml|yml))"
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, output, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    files.append(match[0])
                else:
                    files.append(match)
        
        return list(set(files))  # Remove duplicatas
    
    def _detect_code_generation(self, output: str) -> bool:
        """Detecta se c√≥digo foi gerado"""
        code_indicators = [
            "```python", "```javascript", "```typescript", "```java",
            "```cpp", "```c", "```go", "```rust", "```php",
            "def ", "function ", "class ", "public ", "private ",
            "import ", "export ", "require(", "from "
        ]
        
        return any(indicator in output for indicator in code_indicators)
    
    def _detect_mcp_usage(self, output: str) -> List[str]:
        """Detecta uso de MCP servers"""
        mcp_servers_used = []
        
        for server in self.config.mcp_servers:
            if server in output.lower():
                mcp_servers_used.append(server)
        
        return mcp_servers_used
    
    async def test_connection(self) -> bool:
        """Testa conex√£o com Gemini CLI"""
        try:
            result = await self._execute_with_gemini(
                "Responda apenas 'OK' se estiver funcionando."
            )
            return result["success"]
        except Exception as e:
            self.logger.error(f"‚ùå Erro no teste de conex√£o: {str(e)}")
            return False
    
    def get_capabilities(self) -> Dict[str, Any]:
        """Retorna capacidades do agente"""
        return {
            "name": "Gemini CLI",
            "type": "fast_tasks",
            "model": self.config.model,
            "retry_attempts": self.config.retry_attempts,
            "max_tokens": self.config.max_tokens,
            "temperature": self.config.temperature,
            "mcp_servers": self.config.mcp_servers
        }
    
    async def get_usage_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas de uso"""
        # Por enquanto, retorna dados b√°sicos
        # TODO: Implementar tracking real de uso
        return {
            "total_executions": 0,
            "successful_executions": 0,
            "failed_executions": 0,
            "average_execution_time": 0.0,
            "models_used": {},
            "mcp_usage": {}
        } 