"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.edb.v1.edb_messages_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _Closure:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ClosureEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Closure.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    OPEN_ENDED: Closure.ValueType = ...  # 0
    ENDS_CLOSED: Closure.ValueType = ...  # 1
    FILLED_CLOSED: Closure.ValueType = ...  # 2
    UNDEFINED_CLOSURE: Closure.ValueType = ...  # -1
class Closure(_Closure, metaclass=_ClosureEnumTypeWrapper):
    pass

OPEN_ENDED: Closure.ValueType = ...  # 0
ENDS_CLOSED: Closure.ValueType = ...  # 1
FILLED_CLOSED: Closure.ValueType = ...  # 2
UNDEFINED_CLOSURE: Closure.ValueType = ...  # -1
global___Closure = Closure


class ClosureMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CLOSURE_TYPE_FIELD_NUMBER: builtins.int
    closure_type: global___Closure.ValueType = ...
    def __init__(self,
        *,
        closure_type : global___Closure.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["closure_type",b"closure_type"]) -> None: ...
global___ClosureMessage = ClosureMessage

class SetClosureMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    CLOSURE_TYPE_FIELD_NUMBER: builtins.int
    @property
    def target(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    @property
    def closure_type(self) -> global___ClosureMessage: ...
    def __init__(self,
        *,
        target : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        closure_type : typing.Optional[global___ClosureMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["closure_type",b"closure_type","target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["closure_type",b"closure_type","target",b"target"]) -> None: ...
global___SetClosureMessage = SetClosureMessage
