"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.edb.v1.edb_messages_pb2
import ansys.api.edb.v1.io_manager_pb2
import google.protobuf.empty_pb2
import google.protobuf.wrappers_pb2
import grpc
import typing

class IOManagerServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    FlushBuffer: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.io_manager_pb2.BufferMessage,
        ansys.api.edb.v1.io_manager_pb2.ResolvedFuturesMessage] = ...
    """Flushes buffered data from to client to the server"""

    FlushBufferStream: grpc.StreamStreamMultiCallable[
        ansys.api.edb.v1.io_manager_pb2.BufferMessage,
        ansys.api.edb.v1.io_manager_pb2.ResolvedFuturesMessage] = ...

    RefreshCache: grpc.UnaryUnaryMultiCallable[
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage,
        ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage] = ...
    """Refreshes the cache of the provided edb objs"""

    EnableCache: grpc.UnaryUnaryMultiCallable[
        google.protobuf.wrappers_pb2.BoolValue,
        google.protobuf.empty_pb2.Empty] = ...
    """Enables/Disables cache"""


class IOManagerServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def FlushBuffer(self,
        request: ansys.api.edb.v1.io_manager_pb2.BufferMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.io_manager_pb2.ResolvedFuturesMessage:
        """Flushes buffered data from to client to the server"""
        pass

    @abc.abstractmethod
    def FlushBufferStream(self,
        request: typing.Iterator[ansys.api.edb.v1.io_manager_pb2.BufferMessage],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.edb.v1.io_manager_pb2.ResolvedFuturesMessage]: ...

    @abc.abstractmethod
    def RefreshCache(self,
        request: ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage,
        context: grpc.ServicerContext,
    ) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjCollectionMessage:
        """Refreshes the cache of the provided edb objs"""
        pass

    @abc.abstractmethod
    def EnableCache(self,
        request: google.protobuf.wrappers_pb2.BoolValue,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Enables/Disables cache"""
        pass


def add_IOManagerServiceServicer_to_server(servicer: IOManagerServiceServicer, server: grpc.Server) -> None: ...
