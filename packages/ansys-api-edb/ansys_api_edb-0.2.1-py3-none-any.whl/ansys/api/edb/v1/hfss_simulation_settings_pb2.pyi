"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.edb.v1.edb_messages_pb2
import ansys.api.edb.v1.simulation_setup_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class _BasisFunctionOrder:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _BasisFunctionOrderEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_BasisFunctionOrder.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    ZERO_ORDER: BasisFunctionOrder.ValueType = ...  # 0
    FIRST_ORDER: BasisFunctionOrder.ValueType = ...  # 1
    SECOND_ORDER: BasisFunctionOrder.ValueType = ...  # 2
    MIXED_ORDER: BasisFunctionOrder.ValueType = ...  # 3
class BasisFunctionOrder(_BasisFunctionOrder, metaclass=_BasisFunctionOrderEnumTypeWrapper):
    pass

ZERO_ORDER: BasisFunctionOrder.ValueType = ...  # 0
FIRST_ORDER: BasisFunctionOrder.ValueType = ...  # 1
SECOND_ORDER: BasisFunctionOrder.ValueType = ...  # 2
MIXED_ORDER: BasisFunctionOrder.ValueType = ...  # 3
global___BasisFunctionOrder = BasisFunctionOrder


class _SolverType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _SolverTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SolverType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    AUTO_SOLVER: SolverType.ValueType = ...  # 0
    DIRECT_SOLVER: SolverType.ValueType = ...  # 1
    ITERATIVE_SOLVER: SolverType.ValueType = ...  # 2
    NUM_SOLVER_TYPES: SolverType.ValueType = ...  # 3
class SolverType(_SolverType, metaclass=_SolverTypeEnumTypeWrapper):
    pass

AUTO_SOLVER: SolverType.ValueType = ...  # 0
DIRECT_SOLVER: SolverType.ValueType = ...  # 1
ITERATIVE_SOLVER: SolverType.ValueType = ...  # 2
NUM_SOLVER_TYPES: SolverType.ValueType = ...  # 3
global___SolverType = SolverType


class _AdaptType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _AdaptTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AdaptType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    SINGLE: AdaptType.ValueType = ...  # 0
    MULTI_FREQUENCIES: AdaptType.ValueType = ...  # 1
    BROADBAND: AdaptType.ValueType = ...  # 2
    NUM_ADAPT_TYPE: AdaptType.ValueType = ...  # 3
class AdaptType(_AdaptType, metaclass=_AdaptTypeEnumTypeWrapper):
    pass

SINGLE: AdaptType.ValueType = ...  # 0
MULTI_FREQUENCIES: AdaptType.ValueType = ...  # 1
BROADBAND: AdaptType.ValueType = ...  # 2
NUM_ADAPT_TYPE: AdaptType.ValueType = ...  # 3
global___AdaptType = AdaptType


class AdaptTypeMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADAPT_TYPE_FIELD_NUMBER: builtins.int
    adapt_type: global___AdaptType.ValueType = ...
    def __init__(self,
        *,
        adapt_type : global___AdaptType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["adapt_type",b"adapt_type"]) -> None: ...
global___AdaptTypeMessage = AdaptTypeMessage

class AdaptTypePropertyMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    ADAPT_TYPE_FIELD_NUMBER: builtins.int
    @property
    def target(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    adapt_type: global___AdaptType.ValueType = ...
    def __init__(self,
        *,
        target : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        adapt_type : global___AdaptType.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adapt_type",b"adapt_type","target",b"target"]) -> None: ...
global___AdaptTypePropertyMessage = AdaptTypePropertyMessage

class AdaptiveFrequencyDataMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADAPTIVE_FREQUENCY_FIELD_NUMBER: builtins.int
    MAX_DELTA_FIELD_NUMBER: builtins.int
    adaptive_frequency: typing.Text = ...
    max_delta: typing.Text = ...
    def __init__(self,
        *,
        adaptive_frequency : typing.Text = ...,
        max_delta : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","max_delta",b"max_delta"]) -> None: ...
global___AdaptiveFrequencyDataMessage = AdaptiveFrequencyDataMessage

class MatrixConvergenceDataMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ALL_ARE_CONSTANT_FIELD_NUMBER: builtins.int
    ALL_DIAG_ARE_CONSTANT_FIELD_NUMBER: builtins.int
    ALL_OFF_DIAG_ARE_CONSTANT_FIELD_NUMBER: builtins.int
    MAG_MIN_THREASHOLD_FIELD_NUMBER: builtins.int
    ENTRIES_FIELD_NUMBER: builtins.int
    all_are_constant: builtins.bool = ...
    all_diag_are_constant: builtins.bool = ...
    all_off_diag_are_constant: builtins.bool = ...
    mag_min_threashold: builtins.float = ...
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ansys.api.edb.v1.simulation_setup_pb2.MatrixConvergenceEntryMessage]: ...
    def __init__(self,
        *,
        all_are_constant : builtins.bool = ...,
        all_diag_are_constant : builtins.bool = ...,
        all_off_diag_are_constant : builtins.bool = ...,
        mag_min_threashold : builtins.float = ...,
        entries : typing.Optional[typing.Iterable[ansys.api.edb.v1.simulation_setup_pb2.MatrixConvergenceEntryMessage]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["all_are_constant",b"all_are_constant","all_diag_are_constant",b"all_diag_are_constant","all_off_diag_are_constant",b"all_off_diag_are_constant","entries",b"entries","mag_min_threashold",b"mag_min_threashold"]) -> None: ...
global___MatrixConvergenceDataMessage = MatrixConvergenceDataMessage

class SingleFrequencyAdaptiveSolutionMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADAPTIVE_FREQUENCY_FIELD_NUMBER: builtins.int
    MAX_PASSES_FIELD_NUMBER: builtins.int
    MATRIX_CONV_DATA_FIELD_NUMBER: builtins.int
    USE_MATRIX_CONV_DATA_FIELD_NUMBER: builtins.int
    @property
    def adaptive_frequency(self) -> global___AdaptiveFrequencyDataMessage: ...
    max_passes: builtins.int = ...
    @property
    def matrix_conv_data(self) -> global___MatrixConvergenceDataMessage: ...
    use_matrix_conv_data: builtins.bool = ...
    def __init__(self,
        *,
        adaptive_frequency : typing.Optional[global___AdaptiveFrequencyDataMessage] = ...,
        max_passes : builtins.int = ...,
        matrix_conv_data : typing.Optional[global___MatrixConvergenceDataMessage] = ...,
        use_matrix_conv_data : builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","matrix_conv_data",b"matrix_conv_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","matrix_conv_data",b"matrix_conv_data","max_passes",b"max_passes","use_matrix_conv_data",b"use_matrix_conv_data"]) -> None: ...
global___SingleFrequencyAdaptiveSolutionMessage = SingleFrequencyAdaptiveSolutionMessage

class SingleFrequencyAdaptiveSolutionPropertyMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    ADAPTIVE_FREQUENCY_FIELD_NUMBER: builtins.int
    @property
    def target(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    @property
    def adaptive_frequency(self) -> global___SingleFrequencyAdaptiveSolutionMessage: ...
    def __init__(self,
        *,
        target : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        adaptive_frequency : typing.Optional[global___SingleFrequencyAdaptiveSolutionMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","target",b"target"]) -> None: ...
global___SingleFrequencyAdaptiveSolutionPropertyMessage = SingleFrequencyAdaptiveSolutionPropertyMessage

class AdaptiveMultiFrequencyDataMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class OutputVariablesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ADAPTIVE_FREQUENCY_FIELD_NUMBER: builtins.int
    OUTPUT_VARIABLES_FIELD_NUMBER: builtins.int
    @property
    def adaptive_frequency(self) -> global___AdaptiveFrequencyDataMessage: ...
    @property
    def output_variables(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
    def __init__(self,
        *,
        adaptive_frequency : typing.Optional[global___AdaptiveFrequencyDataMessage] = ...,
        output_variables : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","output_variables",b"output_variables"]) -> None: ...
global___AdaptiveMultiFrequencyDataMessage = AdaptiveMultiFrequencyDataMessage

class MultiFrequencyAdaptiveSolutionMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADAPTIVE_FREQUENCIES_FIELD_NUMBER: builtins.int
    MAX_PASSES_FIELD_NUMBER: builtins.int
    @property
    def adaptive_frequencies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AdaptiveMultiFrequencyDataMessage]: ...
    max_passes: builtins.int = ...
    def __init__(self,
        *,
        adaptive_frequencies : typing.Optional[typing.Iterable[global___AdaptiveMultiFrequencyDataMessage]] = ...,
        max_passes : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptive_frequencies",b"adaptive_frequencies","max_passes",b"max_passes"]) -> None: ...
global___MultiFrequencyAdaptiveSolutionMessage = MultiFrequencyAdaptiveSolutionMessage

class MultiFrequencyAdaptiveSolutionPropertyMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    ADAPTIVE_FREQUENCY_FIELD_NUMBER: builtins.int
    @property
    def target(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    @property
    def adaptive_frequency(self) -> global___MultiFrequencyAdaptiveSolutionMessage: ...
    def __init__(self,
        *,
        target : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        adaptive_frequency : typing.Optional[global___MultiFrequencyAdaptiveSolutionMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","target",b"target"]) -> None: ...
global___MultiFrequencyAdaptiveSolutionPropertyMessage = MultiFrequencyAdaptiveSolutionPropertyMessage

class BroadbandFrequencyAdaptiveSolutionMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MAX_DELTA_FIELD_NUMBER: builtins.int
    MAX_PASSES_FIELD_NUMBER: builtins.int
    LOW_FREQUENCY_FIELD_NUMBER: builtins.int
    HIGH_FREQUENCY_FIELD_NUMBER: builtins.int
    max_delta: typing.Text = ...
    max_passes: builtins.int = ...
    low_frequency: typing.Text = ...
    high_frequency: typing.Text = ...
    def __init__(self,
        *,
        max_delta : typing.Text = ...,
        max_passes : builtins.int = ...,
        low_frequency : typing.Text = ...,
        high_frequency : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["high_frequency",b"high_frequency","low_frequency",b"low_frequency","max_delta",b"max_delta","max_passes",b"max_passes"]) -> None: ...
global___BroadbandFrequencyAdaptiveSolutionMessage = BroadbandFrequencyAdaptiveSolutionMessage

class BroadbandFrequencyAdaptiveSolutionPropertyMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    ADAPTIVE_FREQUENCY_FIELD_NUMBER: builtins.int
    @property
    def target(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    @property
    def adaptive_frequency(self) -> global___BroadbandFrequencyAdaptiveSolutionMessage: ...
    def __init__(self,
        *,
        target : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        adaptive_frequency : typing.Optional[global___BroadbandFrequencyAdaptiveSolutionMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adaptive_frequency",b"adaptive_frequency","target",b"target"]) -> None: ...
global___BroadbandFrequencyAdaptiveSolutionPropertyMessage = BroadbandFrequencyAdaptiveSolutionPropertyMessage

class BasisFunctionOrderMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BASIS_FUNCTION_ORDER_FIELD_NUMBER: builtins.int
    basis_function_order: global___BasisFunctionOrder.ValueType = ...
    def __init__(self,
        *,
        basis_function_order : global___BasisFunctionOrder.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["basis_function_order",b"basis_function_order"]) -> None: ...
global___BasisFunctionOrderMessage = BasisFunctionOrderMessage

class BasisFunctionOrderPropertyMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    BASIS_FUNCTION_ORDER_FIELD_NUMBER: builtins.int
    @property
    def target(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    basis_function_order: global___BasisFunctionOrder.ValueType = ...
    def __init__(self,
        *,
        target : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        basis_function_order : global___BasisFunctionOrder.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["basis_function_order",b"basis_function_order","target",b"target"]) -> None: ...
global___BasisFunctionOrderPropertyMessage = BasisFunctionOrderPropertyMessage

class SolverTypeMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SOLVER_TYPE_FIELD_NUMBER: builtins.int
    solver_type: global___SolverType.ValueType = ...
    def __init__(self,
        *,
        solver_type : global___SolverType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["solver_type",b"solver_type"]) -> None: ...
global___SolverTypeMessage = SolverTypeMessage

class SolverTypePropertyMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TARGET_FIELD_NUMBER: builtins.int
    SOLVER_TYPE_FIELD_NUMBER: builtins.int
    @property
    def target(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    solver_type: global___SolverType.ValueType = ...
    def __init__(self,
        *,
        target : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        solver_type : global___SolverType.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["target",b"target"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["solver_type",b"solver_type","target",b"target"]) -> None: ...
global___SolverTypePropertyMessage = SolverTypePropertyMessage
