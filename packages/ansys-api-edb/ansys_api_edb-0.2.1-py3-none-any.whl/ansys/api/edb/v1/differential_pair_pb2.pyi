"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import ansys.api.edb.v1.edb_messages_pb2
import ansys.api.edb.v1.refs_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DifferentialPairCreationMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    LAYOUT_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    POSITIVE_NET_FIELD_NUMBER: builtins.int
    NEGATIVE_NET_FIELD_NUMBER: builtins.int
    @property
    def layout(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    name: typing.Text = ...
    @property
    def positive_net(self) -> ansys.api.edb.v1.refs_pb2.NetRefMessage: ...
    @property
    def negative_net(self) -> ansys.api.edb.v1.refs_pb2.NetRefMessage: ...
    def __init__(self,
        *,
        layout : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        name : typing.Text = ...,
        positive_net : typing.Optional[ansys.api.edb.v1.refs_pb2.NetRefMessage] = ...,
        negative_net : typing.Optional[ansys.api.edb.v1.refs_pb2.NetRefMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["layout",b"layout","negative_net",b"negative_net","positive_net",b"positive_net"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["layout",b"layout","name",b"name","negative_net",b"negative_net","positive_net",b"positive_net"]) -> None: ...
global___DifferentialPairCreationMessage = DifferentialPairCreationMessage

class DifferentialPairNetRefsMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DP_FIELD_NUMBER: builtins.int
    POSITIVE_NET_FIELD_NUMBER: builtins.int
    NEGATIVE_NET_FIELD_NUMBER: builtins.int
    @property
    def dp(self) -> ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage: ...
    @property
    def positive_net(self) -> ansys.api.edb.v1.refs_pb2.NetRefMessage: ...
    @property
    def negative_net(self) -> ansys.api.edb.v1.refs_pb2.NetRefMessage: ...
    def __init__(self,
        *,
        dp : typing.Optional[ansys.api.edb.v1.edb_messages_pb2.EDBObjMessage] = ...,
        positive_net : typing.Optional[ansys.api.edb.v1.refs_pb2.NetRefMessage] = ...,
        negative_net : typing.Optional[ansys.api.edb.v1.refs_pb2.NetRefMessage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dp",b"dp","negative_net",b"negative_net","positive_net",b"positive_net"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dp",b"dp","negative_net",b"negative_net","positive_net",b"positive_net"]) -> None: ...
global___DifferentialPairNetRefsMessage = DifferentialPairNetRefsMessage
