Metadata-Version: 2.4
Name: py-config-ai
Version: 1.0.0
Summary: AI-powered configuration file generator for developers with natural language processing and context-aware generation
Author-email: Sherin Joseph Roy <sherin.joseph2217@gmail.com>
Maintainer-email: Sherin Joseph Roy <sherin.joseph2217@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/Sherin-SEF-AI/py-config-ai
Project-URL: Documentation, https://sherin-sef-ai.github.io/
Project-URL: Repository, https://github.com/Sherin-SEF-AI/py-config-ai.git
Project-URL: Bug Tracker, https://github.com/Sherin-SEF-AI/py-config-ai/issues
Project-URL: Source Code, https://github.com/Sherin-SEF-AI/py-config-ai
Project-URL: Download, https://pypi.org/project/py-config-ai/#files
Project-URL: Changelog, https://github.com/Sherin-SEF-AI/py-config-ai/blob/main/CHANGELOG.md
Keywords: ai,configuration,generator,developer-tools,automation,autonomous-systems,robotics,natural-language,context-aware
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Utilities
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: User Interfaces
Classifier: Topic :: System :: Systems Administration
Classifier: Environment :: Console
Classifier: Framework :: Pytest
Classifier: Typing :: Typed
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer>=0.9.0
Requires-Dist: rich>=13.0.0
Requires-Dist: halo>=0.0.31
Requires-Dist: keyring>=23.0.0
Requires-Dist: openai>=1.0.0
Requires-Dist: anthropic>=0.7.0
Requires-Dist: google-generativeai>=0.3.0
Requires-Dist: groq>=0.4.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: toml>=0.10.2
Requires-Dist: jsonschema>=4.17.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Requires-Dist: build>=1.0.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Provides-Extra: lint
Requires-Dist: black>=23.0.0; extra == "lint"
Requires-Dist: isort>=5.12.0; extra == "lint"
Requires-Dist: flake8>=6.0.0; extra == "lint"
Requires-Dist: mypy>=1.0.0; extra == "lint"
Requires-Dist: ruff>=0.1.0; extra == "lint"
Provides-Extra: docs
Requires-Dist: sphinx>=6.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.2.0; extra == "docs"
Requires-Dist: myst-parser>=1.0.0; extra == "docs"
Dynamic: license-file

# py-config-ai

[![PyPI version](https://badge.fury.io/py/py-config-ai.svg)](https://badge.fury.io/py/py-config-ai)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

üß† **AI-powered configuration file generator for developers**

**Author:** [Sherin Joseph Roy](https://sherin-sef-ai.github.io/)  
**GitHub:** [https://github.com/Sherin-SEF-AI/py-config-ai](https://github.com/Sherin-SEF-AI/py-config-ai.git)  
**Email:** sherin.joseph2217@gmail.com

Generate configuration files like `.prettierrc`, `.eslintrc`, `pyproject.toml`, `black`, `ruff`, `flake8`, and more using AI providers (OpenAI, Claude, Gemini, Groq). Simply describe your preferences in natural language and let AI create the perfect configuration for your project.

## ‚ú® Features

- ü§ñ **Multiple AI Providers**: Support for OpenAI, Anthropic Claude, Google Gemini, and Groq
- üîê **Secure Key Management**: Encrypted storage of API keys using keyring
- üìù **Rich CLI Interface**: Beautiful, interactive command-line interface with Rich
- üéØ **Smart Presets**: Pre-built configurations for common project types (FastAPI, Django, React, etc.)
- üîß **Extensive Config Support**: 15+ configuration types including Python, JavaScript, Docker, and more
- üí¨ **Natural Language**: Describe your needs in plain English
- üé® **Interactive Mode**: Guided setup with prompts and previews
- üß™ **Connection Testing**: Verify your AI provider setup

## üöÄ Quick Start

### 1. Install the package
```bash
pip install py-config-ai
```

### 2. Add your API key
```bash
py-config-ai add-key groq your-api-key-here
```

### 3. Generate configurations using natural language!

**Simple natural language commands:**
```bash
# Generate a Python formatter config
py-config-ai create "I want to format Python code with 88 character line length"

# Create a React prettier config
py-config-ai create "Generate a prettier config for a React project with 2 spaces"

# Create a Docker setup
py-config-ai create "Create a dockerfile for a Python FastAPI application"

# Generate a gitignore
py-config-ai create "Create a gitignore file for a Python project with virtual environments"
```

**Interactive guided mode:**
```bash
py-config-ai generate --interactive
```

**Traditional command-line mode:**
```bash
py-config-ai generate --type black --description "100 character line length with strict formatting"
```

## ‚ú® Key Features

### üß† Natural Language Integration
- **Describe what you want in plain English** - no need to know exact config names
- **Smart configuration type detection** - automatically identifies the right config type
- **Conversational interface** - guided prompts with helpful examples
- **Context-aware generation** - understands your project structure

### üìÅ Automatic File Management
- **Smart file naming** - automatically saves with correct extensions
- **No more copy-paste** - files are saved directly to disk
- **Ready to edit** - open files immediately in your preferred editor
- **Proper file extensions** - `.toml`, `.json`, `.conf`, etc.

### üîç Context-Aware Generation
- **Project structure analysis** - understands your codebase layout
- **Framework detection** - recognizes Django, Flask, React, Next.js, etc.
- **File type counting** - knows how many Python, JS, TS files you have
- **Existing config detection** - builds upon your current setup
- **Directory-aware patterns** - includes relevant exclusions and includes

### üîß Multiple AI Providers
- **OpenAI** (GPT-4, GPT-3.5-turbo)
- **Anthropic Claude** (Claude-3-Sonnet, Claude-3-Haiku)
- **Google Gemini** (Gemini-1.5-Pro)
- **Groq** (Llama3-8b-8192)

### üõ°Ô∏è Security & Quality
- **Secure API key storage** using keyring with fallback
- **Input validation** for all user inputs
- **Comprehensive error handling**
- **Type hints** throughout the codebase

## üìã Supported Configuration Types

### Python
- `pyproject.toml` - Python project configuration (PEP 518)
- `black` - Code formatter
- `isort` - Import sorter
- `ruff` - Fast linter and formatter
- `flake8` - Style guide enforcement
- `pylint` - Static code analysis
- `mypy` - Static type checker

### JavaScript/TypeScript
- `.prettierrc` - Code formatter
- `.eslintrc` - Linter
- `tsconfig.json` - TypeScript compiler

### Other
- `markdownlint.json` - Markdown linter
- `stylelint` - CSS/SCSS linter
- `dockerfile` - Docker container
- `.env` - Environment variables
- `docker-compose.yml` - Multi-container setup
- `nginx.conf` - Web server
- `gitignore` - Git ignore patterns

## üéØ Available Presets

- **fastapi** - FastAPI web application with modern Python tooling
- **django** - Django web application with comprehensive tooling
- **react** - React application with modern JavaScript tooling
- **node** - Node.js application with modern JavaScript tooling
- **python-library** - Python library with comprehensive development tooling

## üõ†Ô∏è CLI Commands

### Natural Language Generation

```bash
# Simple natural language commands
py-config-ai create "I want to format Python code with 88 character line length"
py-config-ai create "Generate a prettier config for a React project"
py-config-ai create "Create a dockerfile for a Python FastAPI application"

# With custom output file
py-config-ai create "Generate an ESLint config" --output .eslintrc.json

# With context (analyzes your project structure)
py-config-ai create "Create a gitignore for a Python project" --context .
py-config-ai create "Generate pyproject.toml for this package" --context .
py-config-ai create "Create Docker setup for this FastAPI app" --context .
```

### Traditional Generation

```bash
# Interactive mode
py-config-ai generate --interactive

# Generate specific config
py-config-ai generate --type black --description "100 char line length, strict formatting"

# Use preset
py-config-ai generate --preset fastapi

# With context
py-config-ai generate --type .eslintrc --context ./src --description "React project with TypeScript"

# Show preview before saving
py-config-ai generate --type .prettierrc --preview --output .prettierrc.json
```

### API Key Management

```bash
# Add API key
py-config-ai add-key openai
py-config-ai add-key anthropic
py-config-ai add-key gemini
py-config-ai add-key groq

# List configured keys
py-config-ai list-keys

# Remove key
py-config-ai remove-key openai
```

### Information Commands

```bash
# List supported config types
py-config-ai list

# List available presets
py-config-ai presets

# Test provider connection
py-config-ai test --provider openai
```

## üîß Configuration Examples

### Black Configuration
```bash
py-config-ai generate --type black --description "Use 100 character line length, target Python 3.9+, and exclude tests directory"
```

### ESLint Configuration
```bash
py-config-ai generate --type .eslintrc --description "React project with TypeScript, use Airbnb style guide, and allow console.log in development"
```

### Dockerfile
```bash
py-config-ai generate --type dockerfile --description "Python 3.11 slim image for FastAPI app, expose port 8000, use uvicorn"
```

## üèóÔ∏è Project Structure

```
py-config-ai/
‚îú‚îÄ‚îÄ src/py_config_ai/
‚îÇ   ‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ generator.py      # Main configuration generator
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ key_manager.py    # Secure API key management
‚îÇ   ‚îú‚îÄ‚îÄ providers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base.py          # Abstract provider interface
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ openai_provider.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ anthropic_provider.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ gemini_provider.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ groq_provider.py
‚îÇ   ‚îú‚îÄ‚îÄ configs/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config_types.py  # Supported configuration types
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ presets.py       # Pre-built configurations
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ file_utils.py    # File operations
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validation.py    # Input validation
‚îÇ   ‚îú‚îÄ‚îÄ templates/           # Configuration templates
‚îÇ   ‚îî‚îÄ‚îÄ cli.py              # Command-line interface
‚îú‚îÄ‚îÄ tests/                  # Test suite
‚îú‚îÄ‚îÄ docs/                   # Documentation
‚îî‚îÄ‚îÄ pyproject.toml         # Package configuration
```

## üîí Security

- API keys are stored securely using the `keyring` library
- Fallback to encrypted local storage if keyring is unavailable
- No keys are logged or transmitted unnecessarily
- Input validation for all user-provided data

## üß™ Testing

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run with coverage
pytest --cov=py_config_ai

# Run linting
black src/
isort src/
flake8 src/
mypy src/
```

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Setup

```bash
# Clone the repository
git clone https://github.com/your-username/py-config-ai.git
cd py-config-ai

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install in development mode
pip install -e ".[dev]"

# Install pre-commit hooks
pre-commit install
```

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

## üë®‚Äçüíª Author

**Sherin Joseph Roy** - Startup Founder & Hardware/IoT Enthusiast

- üåê **Website:** [https://sherin-sef-ai.github.io/](https://sherin-sef-ai.github.io/)
- üìß **Email:** sherin.joseph2217@gmail.com
- üêô **GitHub:** [https://github.com/Sherin-SEF-AI](https://github.com/Sherin-SEF-AI)
- üîó **LinkedIn:** [Sherin Joseph Roy](https://www.linkedin.com/in/sherin-joseph-roy/)

### About the Author

Sherin is a startup founder and hardware/IoT enthusiast passionate about building innovative solutions that bridge the gap between hardware and software. With expertise in autonomous systems, robotics, and AI, Sherin has developed multiple open-source packages on PyPI and is focused on creating intelligent machines that think and act independently.

**Specializations:**
- Autonomous Systems & Self-Driving Vehicles
- Robotics & Computer Vision
- IoT & Embedded Systems
- Hardware Design & Development
- AI/ML & Machine Learning
- Cybersecurity & Ethical Hacking

## üôè Acknowledgments

- [Typer](https://typer.tiangolo.com/) for the beautiful CLI framework
- [Rich](https://rich.readthedocs.io/) for the stunning terminal output
- [Halo](https://github.com/manrajgrover/halo) for the loading spinners
- All the AI providers for their amazing APIs

## üìû Support

- üìß Email: support@pyconfigai.com
- üêõ Issues: [GitHub Issues](https://github.com/py-config-ai/py-config-ai/issues)
- üìñ Documentation: [Read the Docs](https://py-config-ai.readthedocs.io/)

---

**Made with ‚ù§Ô∏è for developers who want to focus on code, not configuration.** 
