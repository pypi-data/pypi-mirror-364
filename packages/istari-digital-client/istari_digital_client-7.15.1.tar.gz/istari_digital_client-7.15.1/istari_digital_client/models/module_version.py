# coding: utf-8

"""
    File Service v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from istari_digital_client.models.function import Function
from istari_digital_client.models.module_author import ModuleAuthor
from istari_digital_client.models.module_version_status import ModuleVersionStatus
from typing import Optional, Set
from typing_extensions import Self

class ModuleVersion(BaseModel):
    """
    ModuleVersion
    """ # noqa: E501
    id: StrictStr
    created: datetime
    module_version: StrictStr
    check_sum: StrictStr
    agent_version: StrictStr
    module_id: StrictStr
    status: ModuleVersionStatus
    module_display_name: Optional[StrictStr] = None
    tool_display_name: Optional[StrictStr] = None
    tool_versions: Optional[List[StrictStr]] = None
    operating_systems: Optional[List[StrictStr]] = None
    authors: Optional[List[ModuleAuthor]] = None
    functions: Optional[Dict[str, List[Function]]] = None
    __properties: ClassVar[List[str]] = ["id", "created", "module_version", "check_sum", "agent_version", "module_id", "status", "module_display_name", "tool_display_name", "tool_versions", "operating_systems", "authors", "functions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModuleVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in authors (list)
        _items = []
        if self.authors:
            for _item_authors in self.authors:
                if _item_authors:
                    _items.append(_item_authors.to_dict())
            _dict['authors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in functions (dict of array)
        _field_dict_of_array = {}
        if self.functions:
            for _key_functions in self.functions:
                if self.functions[_key_functions] is not None:
                    _field_dict_of_array[_key_functions] = [
                        _item.to_dict() for _item in self.functions[_key_functions]
                    ]
            _dict['functions'] = _field_dict_of_array
        # set to None if module_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.module_display_name is None and "module_display_name" in self.model_fields_set:
            _dict['module_display_name'] = None

        # set to None if tool_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.tool_display_name is None and "tool_display_name" in self.model_fields_set:
            _dict['tool_display_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModuleVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created": obj.get("created"),
            "module_version": obj.get("module_version"),
            "check_sum": obj.get("check_sum"),
            "agent_version": obj.get("agent_version"),
            "module_id": obj.get("module_id"),
            "status": ModuleVersionStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "module_display_name": obj.get("module_display_name"),
            "tool_display_name": obj.get("tool_display_name"),
            "tool_versions": obj.get("tool_versions"),
            "operating_systems": obj.get("operating_systems"),
            "authors": [ModuleAuthor.from_dict(_item) for _item in obj["authors"]] if obj.get("authors") is not None else None,
            "functions": dict(
                (_k,
                        [Function.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("functions", {}).items()
            )
        })
        return _obj
