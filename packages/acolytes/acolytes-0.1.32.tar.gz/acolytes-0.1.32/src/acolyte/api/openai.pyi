from fastapi import APIRouter
from fastapi.responses import StreamingResponse
from pydantic import BaseModel, field_validator
from typing import List, Optional, Union, Dict, Any, Tuple, AsyncIterator

router: APIRouter

class ChatMessage(BaseModel):
    role: str
    content: str

    @field_validator("role")
    @classmethod
    def validate_role(cls, v: str) -> str: ...
    @field_validator("content")
    @classmethod
    def validate_content(cls, v: str) -> str: ...

class EditorSelection(BaseModel):
    file: str
    content: str
    range: Tuple[int, int]

    @field_validator("range")
    @classmethod
    def validate_range(cls, v: Tuple[int, int]) -> Tuple[int, int]: ...

class EditorContext(BaseModel):
    selection: Optional[EditorSelection] = None
    current_file_path: Optional[str] = None
    open_tabs: Optional[List[str]] = None

class ChatCompletionRequest(BaseModel):
    model: str = ...
    messages: List[ChatMessage]
    temperature: float = ...
    max_tokens: Optional[int] = ...
    stream: bool = ...
    debug: bool = ...
    explain_rag: bool = ...
    session_id: Optional[str] = ...
    editor_context: Optional[EditorContext] = None

    @field_validator("messages")
    @classmethod
    def validate_messages(cls, v: List[ChatMessage]) -> List[ChatMessage]: ...
    @field_validator("stream")
    @classmethod
    def validate_stream(cls, v: bool) -> bool: ...

class EmbeddingsRequest(BaseModel):
    input: Union[str, List[str]]
    model: str = ...
    encoding_format: str = ...

    @field_validator("input")
    @classmethod
    def validate_input(cls, v: Union[str, List[str]]) -> Union[str, List[str]]: ...
    @field_validator("encoding_format")
    @classmethod
    def validate_encoding_format(cls, v: str) -> str: ...

async def _stream_response_adapter(
    stream_iterator: AsyncIterator[str], request_model: str, request_id: str
) -> AsyncIterator[str]: ...
async def chat_completions(
    request: ChatCompletionRequest, x_request_id: Optional[str] = ...
) -> Union[Dict[str, Any], StreamingResponse]: ...
async def list_models() -> Dict[str, Any]: ...
async def create_embeddings(
    request: EmbeddingsRequest, x_request_id: Optional[str] = ...
) -> Dict[str, Any]: ...
def _generate_unique_session_id() -> str: ...
