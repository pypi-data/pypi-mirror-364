from typing import List, Tuple, Optional, Any, TYPE_CHECKING
from acolyte.core.secure_config import Settings
from acolyte.embeddings.types import RerankerMetricsSummary, MetricsProvider
from acolyte.models.chunk import Chunk

if TYPE_CHECKING:
    pass

class CrossEncoderReranker:
    config: Settings
    model_name: str
    metrics: Optional[MetricsProvider]
    def __init__(
        self, model_name: Optional[str] = ..., metrics: Optional[MetricsProvider] = ...
    ) -> None: ...
    @property
    def torch(self) -> Any: ...
    @property
    def transformers(self) -> Any: ...
    @property
    def device(self) -> Any: ...  # Actually returns torch.device
    def rerank(
        self, query: str, candidates: List[str], top_k: int = ..., return_scores: bool = ...
    ) -> List[Tuple[str, float]]: ...
    def rerank_chunks(
        self, query: str, chunks: List[Chunk], top_k: int = ...
    ) -> List[Tuple[Chunk, float]]: ...
    def get_metrics_summary(self) -> RerankerMetricsSummary: ...
