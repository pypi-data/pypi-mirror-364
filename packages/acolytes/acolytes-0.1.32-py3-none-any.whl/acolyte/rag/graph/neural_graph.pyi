from typing import Dict, Any, List, Optional

class NeuralGraph:
    def __init__(self) -> None: ...
    async def add_node(
        self, node_type: str, path: str, name: str, metadata: Optional[Dict[str, Any]] = ...
    ) -> str: ...
    async def add_nodes_batch(
        self, nodes: List[tuple[str, str, str, Optional[Dict[str, Any]]]]
    ) -> List[str]: ...
    async def add_edge_deferred(
        self,
        source: str,
        target: str,
        relation: str,
        discovered_by: str = ...,
        metadata: Optional[Dict[str, Any]] = ...,
    ) -> None: ...
    async def flush_edges(self) -> None: ...
    async def add_edge(
        self,
        source: str,
        target: str,
        relation: str,
        discovered_by: str = ...,
        metadata: Optional[Dict[str, Any]] = ...,
    ) -> None: ...
    async def strengthen_edge(
        self, source: str, target: str, relation: str, delta: float = ...
    ) -> None: ...
    async def find_related(
        self, node: str, max_distance: int = ..., min_strength: float = ...
    ) -> List[Dict[str, Any]]: ...
    async def predict_impact(self, changed_node: str) -> Dict[str, Any]: ...
