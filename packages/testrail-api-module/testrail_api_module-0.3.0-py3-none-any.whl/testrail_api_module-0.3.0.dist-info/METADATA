Metadata-Version: 2.4
Name: testrail_api_module
Version: 0.3.0
Summary: A simple wrapper for the TestRail API
Author-email: Matt Troutman <github@trtmn.com>, Christian Thompson <example@example.com>
License: MIT License
        
        Copyright (c) 2025 Matt Troutman
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/trtmn/testrail_api_module
Project-URL: Docs, https://trtmn.github.io/testrail_api_module/
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.32.0
Provides-Extra: dev
Requires-Dist: pdoc>=14.0.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: bump-my-version>=1.0.0; extra == "dev"
Requires-Dist: rich>=13.0.0; extra == "dev"
Requires-Dist: click>=8.0.0; extra == "dev"
Requires-Dist: wheel>=0.40.0; extra == "dev"
Requires-Dist: build>=1.0.0; extra == "dev"
Requires-Dist: toml>=0.10.0; extra == "dev"
Requires-Dist: python-dotenv>=1.0.0; extra == "dev"
Requires-Dist: twine>=6.0.0; extra == "dev"
Dynamic: license-file

# testrail_api_module

[![PyPI - Version](https://img.shields.io/pypi/v/testrail-api-module?label=Latest%20Version)](https://pypi.org/project/testrail-api-module/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/testrail-api-module?color=brightgreen)](https://pypi.org/project/testrail-api-module/)
[![GitHub Source](https://img.shields.io/badge/github-source-blue?logo=github)](https://github.com/trtmn/testrail-api-module/)
[![PyPI Stats](https://img.shields.io/badge/%F0%9F%93%96%20Stats-%20%F0%9F%94%97-blue)](https://pypistats.org/packages/testrail-api-module/)

A comprehensive Python wrapper for the TestRail API that provides easy access to all
TestRail functionalities.

## Features

- Full coverage of TestRail API endpoints
- Type hints for better IDE support
- Easy-to-use interface
- Comprehensive error handling
- Support for both API key and password authentication

## Installation

### For Consumers

```bash
# Install the package with runtime dependencies only
pip install testrail-api-module
```

### For Developers

```bash
# Clone the repository
git clone https://github.com/trtmn/testrail-api-module.git
cd testrail-api-module

# Create virtual environment
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

# Install development dependencies using pip-tools
pip-compile --extra dev | pip-sync

# Alternative: Install in development mode with all dev dependencies
pip install -e .[dev]
```

## Quick Start

```python
from testrail_api_module import TestRailAPI

# Initialize the API client
api = TestRailAPI(
    base_url='https://your-instance.testrail.io',
    username='your-username',
    api_key='your-api-key'  # or use password='your-password'
)

# Get a list of projects
projects = api.projects.get_projects()

# Create a new test case
new_case = api.cases.add_case(
    section_id=123,
    title='Test Login Functionality',
    type_id=1,  # Functional test
    priority_id=3,  # Medium priority
    estimate='30m',  # 30 minutes
    refs='JIRA-123'
)

# Add a test result
api.results.add_result(
    run_id=456,
    case_id=789,
    status_id=1,  # Passed
    comment='Test executed successfully',
    elapsed='15m',  # Actual time taken
    version='1.0.0'
)
```

## Common Use Cases

### Managing Test Cases

```python
# Get all test cases in a project
cases = api.cases.get_cases(project_id=1)

# Update a test case
api.cases.update_case(
    case_id=123,
    title='Updated Test Case Title',
    type_id=2,  # Performance test
    priority_id=1  # Critical priority
)

# Delete a test case
api.cases.delete_case(case_id=123)
```

### Working with Test Runs

```python
# Create a new test run
new_run = api.runs.add_run(
    project_id=1,
    name='Sprint 1 Regression',
    description='Full regression test suite',
    suite_id=2,
    milestone_id=3,
    include_all=True
)

# Get test run results
results = api.runs.get_run_stats(run_id=new_run['id'])

# Close a test run
api.runs.close_run(run_id=new_run['id'])
```

### Managing Attachments

```python
# Add an attachment to a test case
api.attachments.add_attachment(
    entity_type='case',
    entity_id=123,
    file_path='path/to/screenshot.png',
    description='Screenshot of the error'
)

# Get attachments for a test case
attachments = api.attachments.get_attachments(
    entity_type='case',
    entity_id=123
)
```

### Working with BDD Scenarios

```python
# Import a BDD scenario
api.bdd.add_bdd(
    section_id=123,
    feature_file='path/to/feature/file.feature',
    description='Login feature tests'
)

# Export a BDD scenario
scenario = api.bdd.get_bdd(case_id=456)
```

## Error Handling

The module includes comprehensive error handling. Here's an example:

```python
try:
    result = api.cases.get_case(case_id=999999)
except Exception as e:
    print(f"Error accessing test case: {e}")
```

## Documentation

For complete documentation, visit our
[documentation site](https://trtmn.github.io/testrail-api-module/).

## Dependency Management

This project uses modern Python packaging with `pyproject.toml` for dependency
management.

### For Developers

- **Development dependencies**: Use `pip install -e .[dev]` for all development
  tools
- **Automatic resolution**: pip handles all dependency resolution

### Files

- `pyproject.toml` - Package configuration and dependency specifications

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for
details.

## Authors

- Matt Troutman
- Christian Thompson

## Support

If you encounter any issues or have questions, please
[open an issue](https://github.com/trtmn/testrail_api_module/issues/new) on
GitHub.
