type alias Meter: double where {_ >= 0.0};
type alias Second: double where {_ >= 0.0};

plugin type SmacPlanner2D {
    optional param tolerance: Meter = 0.125;
    optional param downsample_costmap: bool = false;
    optional param downsampling_factor: int where {_ >= 0} = 1;
    optional param allow_unknown: bool = true;
    optional param max_iterations: int where {_ >= 0 or _ == -1} = 1000000;
    optional param max_on_approach_iterations: int where {_ >= 0} = 1000;
    optional param terminal_checking_interval: int where {_ >= 0} = 5000;
    optional param max_planning_time: Second = 2.0;
    optional param cost_travel_multiplier: double = 2.0;
    optional param use_final_approach_orientation: bool = false;
    # Smoother params are missing
}

plugin type SmacPlannerHybrid {
    optional param tolerance: Meter = 0.125;
    optional param downsample_costmap: bool = false;
    optional param downsampling_factor: int where {_ >= 0} = 1;
    optional param allow_unknown: bool = true;
    optional param max_iterations: int where {_ >= 0 or _ == -1} = 1000000;
    optional param max_on_approach_iterations: int where {_ >= 0} = 1000;
    optional param terminal_checking_interval: int where {_ >= 0} = 5000;
    optional param max_planning_time: Second = 2.0;
    optional param analytic_expansion_max_length: Meter = 3.0;
    optional param analytic_expansion_max_cost: double = 200.0;
    optional param analytic_expansion_max_cost_override: bool = false;
    optional param motion_model_for_search: Enum[DUBIN, REEDS_SHEPP] = DUBIN;
    optional param angle_quantization_bins: int where {_ % 2 >= 0} = 8;
    optional param minimum_turning_radius: Meter = 0.4;
    optional param reverse_penalty: double = 2.0;
    optional param change_penalty: double = 0.0;
    optional param non_straight_penalty: double = 1.20;
    optional param cost_penalty: double = 2.0;
    optional param retrospective_penalty: double where {_ >= 0.0 and _ <= 1.0} = 0.015;
    optional param lookup_table_size: Meter = 20.0;
    optional param debug_visualizations: bool = false;
    optional param cache_obstacle_heuristic: bool = false;
    optional param allow_primitive_interpolation: bool = false;
    optional param downsample_obstacle_heuristic: bool = true;
    optional param use_quadratic_cost_penalty: bool = false;
    optional param smooth_path: bool = true;
    optional param goal_heading_mode: Enum[DEFAULT, BIDIRECTIONAL, ALL_DIRECTION] = DEFAULT;
    optional param coarse_search_resolution: string = "4"; # This should be an int....
    optional param allow_parameter_qos_overrides: bool = true;
} where {
    exists(reverse_penalty) -> motion_model_for_search == REEDS_SHEPP;
    exists(coarse_search_resolution) -> goal_heading_mode == ALL_DIRECTION;
    allow_primitive_interpolation -> exists(angle_quantization_bins);
}
