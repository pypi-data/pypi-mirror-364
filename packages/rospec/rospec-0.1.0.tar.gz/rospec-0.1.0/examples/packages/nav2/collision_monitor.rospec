type alias Distro: OrderedEnum[DiamondBlack, Electrict, Fuerte, Groovy, Hydro, Indigo, Jade, Kinetic, Lunar, Melodic, Noetic, Jazzy];
type alias Second: double where {_ >= 0};

node type collision_monitor_type {
    optional context distribution: Distro where {_ >= Jazzy} = Jazzy;

    optional param base_frame_id: string = "base_footprint";
    optional param odom_frame_id: string = "odom";
    optional param cmd_vel_in_topic: string = "cmd_vel_smoothed";
    optional param cmd_vel_out_topic: string = "cmd_vel";
    optional param state_topic: string = "";
    optional param transform_tolerance: double where {_ >= 0} = 0.1;
    optional param source_timeout: double where {_ >= 0} = 2.0;
    optional param base_shift_correction: bool = true;
    optional param stop_pub_timeout: double where {_ >= 0} = 1.0;
    optional param polygons: Plugin[] = [];
    optional param observation_sources: string[] = [];
    optional param use_realtime_priority: bool = false;
    optional param enable_stamped_cmd_vel: bool = false;

    # TODO: the type of this state connection
    # publishes to content(state_topic): ?? if {exists(state_topic)};
}

plugin type polygon_type {
    param type: Enum[Polygon, Circle];
    param points: string[]; # TODO: dependency
    param polygon_sub_topic: string; # TODO: dependency

    param action_type: Enum[Stop, Slowdown, Limit, Approach];

    optional param footprint_topic: string = "local_costmap/published_footprint";
    optional param polygon_subscribe_transient_local: bool = false;
    optional param radius: double where {_ >= 0} = 0.0;
    optional param min_points: int = 4;
    optional param slowdown_ratio: double where {_ >= 0} = 0.5;
    optional param linear_limit: double where {_ >= 0} = 0.5;
    optional param angular_limit: double where {_ >= 0} = 0.5;
    optional param time_before_collision: Second = 2.0;
    optional param simulation_time_step: double where {_ >= 0} = 0.1;
    optional param visualize: bool = false;
    optional param polygon_pub_topic: string = "";
    optional param enabled: bool = true;
} where {
    exists(radius) -> type == Circle;
    exists(slowdown_ratio) -> action_type == Slowdown;
    exists(linear_limit) or exists(angular_limit) -> action_type == Limit;
    exists(simulation_time_step) -> action_type == Approach;
    exists(polygon_pub_topic) -> visualize;
    exists(polygon_sub_topic) -> (action_type == Stop or action_type == Slowdown or action_type == Limit);
}

plugin type velocity_polygon_type {
    param type: Enum[Polygon, Circle];
    param points: string[]; # TODO: dependency
    param polygon_sub_topic: string; # TODO: dependency

    param action_type: Enum[Stop, Slowdown, Limit, Approach];

    optional param footprint_topic: string = "local_costmap/published_footprint";
    optional param polygon_subscribe_transient_local: bool = false;
    optional param radius: double where {_ >= 0} = 0.0;
    optional param min_points: int = 4;
    optional param slowdown_ratio: double where {_ >= 0} = 0.5;
    optional param linear_limit: double where {_ >= 0} = 0.5;
    optional param angular_limit: double where {_ >= 0} = 0.5;
    optional param time_before_collision: Second = 2.0;
    optional param simulation_time_step: double where {_ >= 0} = 0.1;
    optional param visualize: bool = false;
    optional param polygon_pub_topic: string = "";
    optional param enabled: bool = true;

    # Velocity Polygon specific parameters
    optional param holonomic: bool = false;
    optional param velocity_polygons: Plugin[] = [];

} where {
    exists(radius) -> type == Circle;
    exists(slowdown_ratio) -> action_type == Slowdown;
    exists(linear_limit) or exists(angular_limit) -> action_type == Limit;
    exists(simulation_time_step) -> action_type == Approach;
    exists(polygon_pub_topic) -> visualize;
    exists(polygon_sub_topic) -> (action_type == Stop or action_type == Slowdown or action_type == Limit);
    # TODO: We need a way to iterate over the velocity_polygons plugins
    # to check if the direction_start/end exists when holonomic
}

plugin type sub_velocity_polygon_type {
    param points: string[];
    param linear_min: double where {_ >= 0};
    param linear_max: double where {_ >= 0};
    param theta_min: double;
    param theta_max: double;
    optional param direction_start_angle: double = -3.14156;
    optional param direction_end_angle: double = 3.14156;
} where {
    linear_min < linear_max;
    theta_min < theta_max;
}

plugin type observation_sources {
    optional param type: Enum[Scan, Pointcloud, Range, Polygon] = Scan;
    optional param topic: string = "scan";
    optional param min_height: double where {_ >= 0} = 0.05;
    optional param max_height: double where {_ >= 0} = 0.5;
    optional param obstacles_angle: double = 0.01745;
    optional param sampling_distance: double = 0.1;
    optional param enabled: bool = true;
    optional param source_timeout: double where {_ >= 0} = 2.0;
    optional param bond_heartbeat_period: double = 0.1;
    optional param allow_parameter_qos_overrides: bool = true;
} where {
    min_height <= max_height;

    exists(min_height) -> type == Pointcloud;
    exists(max_height) -> type == Pointcloud;
    exists(obstacle_angle) -> type == Range;
    exists(sampling_distance) -> type == Polygon;
}
