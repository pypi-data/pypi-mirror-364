"""
Django settings for {{ project_name }} project.

Generated by 'django-str startproject' using django-structurator-{{django_structurator_version}} tool.

For more information on this file, see
https://docs.djangoproject.com/en/{{ django_docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ django_docs_version }}/ref/settings/
"""

from pathlib import Path
import os
{% if env == 'django-environ' %}import environ{% elif env == 'python-dotenv' %}from dotenv import load_dotenv{% endif %}
{% if use_logger %}import logging{% endif %}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # point to config/ folder
TEMPLATE_DIR = os.path.join(BASE_DIR.parent, 'templates')
STATIC_DIR = os.path.join(BASE_DIR.parent, 'static')
MEDIA_DIR = os.path.join(BASE_DIR.parent, 'media')

{% if env == 'django-environ' %}env = environ.Env()
environ.Env.read_env(env_file = os.path.join(BASE_DIR, '.env'))
{% elif env == 'python-dotenv' %}
load_dotenv(os.path.join(BASE_DIR, '.env'))
{% endif %}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ django_docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = {% if env != 'no_env' %}os.getenv("SECRET_KEY"){% else %}"{{secret_key}}"{% endif %}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = str(os.getenv("ALLOWED_HOSTS")).split(",")


# Application definition

INSTALLED_APPS = [
    {% if use_jazzmin %}'jazzmin',{% endif %}
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    {% if use_celery %}'django_celery_results',{% endif %}
    {% if use_drf %}'rest_framework',{% endif %}
    {% if use_cors %}'corsheaders',{% endif %}
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    {% if use_cors %}'corsheaders.middleware.CorsMiddleware',{% endif %}
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # {% verbatim %}{{ MEDIA_URL }}{% endverbatim %}
                # 'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/{{ django_docs_version }}/ref/settings/#databases

{% if database == 'postgresql' %}DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': {% if env != 'no_env' %}os.getenv("DB_NAME"){% else %}""{% endif %},
        'USER': {% if env != 'no_env' %}os.getenv("DB_USER"){% else %}""{% endif %},
        'PASSWORD': {% if env != 'no_env' %}os.getenv("DB_PASSWORD"){% else %}""{% endif %},
        'HOST': {% if env != 'no_env' %}os.getenv("DB_HOST"){% else %}""{% endif %},
        'PORT': {% if env != 'no_env' %}os.getenv("DB_PORT"){% else %}""{% endif %},
    }
}{% elif database == 'mysql' %}DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': {% if env != 'no_env' %}os.getenv("DB_NAME"){% else %}""{% endif %},
        'USER': {% if env != 'no_env' %}os.getenv("DB_USER"){% else %}""{% endif %},
        'PASSWORD': {% if env != 'no_env' %}os.getenv("DB_PASSWORD"){% else %}""{% endif %},
        'HOST': {% if env != 'no_env' %}os.getenv("DB_HOST"){% else %}""{% endif %},
        'PORT': {% if env != 'no_env' %}os.getenv("DB_PORT"){% else %}""{% endif %},
    }
}{% else %}DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR.parent.parent, 'local_db', 'db.sqlite3'),
    }
}{% endif %}

{% if use_redis %}CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}{% endif %}

# Password validation
# https://docs.djangoproject.com/en/{{ django_docs_version }}/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS':{
            'min_length' : 8,
        },
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

{% if use_password_hashers %}PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]{% endif %}

# AUTH_USER_MODEL = "AppName.ModelName"

# Internationalization
# https://docs.djangoproject.com/en/{{ django_docs_version }}/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC' # India: Asia/Kolkata

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ django_docs_version }}/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [STATIC_DIR,]

MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/{{ django_docs_version }}/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

{% if use_smtp_email %}# Email SMTP Configurations
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = {% if env != 'no_env' %}os.getenv("EMAIL_HOST_USER"){% else %}""{% endif %}
EMAIL_HOST_PASSWORD = {% if env != 'no_env' %}os.getenv("EMAIL_HOST_PASSWORD"){% else %}""{% endif %}{% endif %}

{% if use_celery %}# Celery Configuration Options
CELERY_TIMEZONE = "UTC"
CELERY_BROKER_URL =  "redis://127.0.0.1:6379"
# django-celery-results
CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_EXTENDED = True
CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'{% endif %}


{% if use_logger %}# Django Logger Configurations
class LevelFilter(logging.Filter):
    """
    Filter logs by an exact level match (not >= like default behavior).
    """
    def __init__(self, level):
        super().__init__()
        self.level = logging._checkLevel(level)

    def filter(self, record):
        return record.levelno == self.level

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {pathname}.{funcName}:{lineno} {message}',
            'style': '{',
        },
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        }
    },
    
    'filters': {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        'debug_filter': {
            '()': LevelFilter,
            'level': logging.DEBUG,
        },
        'info_filter': {
            '()': LevelFilter,
            'level': logging.INFO,
        },
        'warning_filter': {
            '()': LevelFilter,
            'level': logging.WARNING,
        },
        'error_filter': {
            '()': LevelFilter,
            'level': logging.ERROR,
        },
        'critical_filter': {
            '()': LevelFilter,
            'level': logging.CRITICAL,
        },
    },
    
    'handlers': {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        'debug_file': {
            'level': 'DEBUG',
            'filters': ['debug_filter', 'require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR.parent.parent, 'logs', 'debug.log'),
            'formatter': 'verbose',
        },
        'info_file': {
            'level': 'INFO',
            'filters': ['info_filter'],
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR.parent.parent, 'logs', 'info.log'),
            'formatter': 'verbose',
        },
        'warning_file': {
            'level': 'WARNING',
            'filters': ['warning_filter'],
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR.parent.parent, 'logs', 'warning.log'),
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'filters': ['error_filter'],
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR.parent.parent, 'logs', 'error.log'),
            'formatter': 'verbose',
        },
        'critical_file': {
            'level': 'CRITICAL',
            'filters': ['critical_filter'],
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR.parent.parent, 'logs', 'critical.log'),
            'formatter': 'verbose',
        },  
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
    },
    
    # 📦 Loggers
    'loggers': {
        'django': {
            'handlers': [
                'console',
                'info_file',
                'warning_file',
                'error_file',
                'critical_file',
                'mail_admins',
            ],
            'level': 'INFO',
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        # 'LOGGER_NAME': {
        #     'handlers': [
        #         'debug_file',
        #         'info_file',
        #         'warning_file',
        #         'error_file',
        #         'critical_file',
        #         'mail_admins',
        #     ],
        #     'level': 'DEBUG', <- Minimum Level
        #     'propagate': False,
        # },
    },
}{% endif %}


{% if use_jazzmin %}# django-jazzmin configurations
JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "{{ project_name|title }} Admin",

    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "{{ project_name|title }}",

    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "{{ project_name|title }}",

    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "images/favicon.ico",

    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo": "images/favicon.ico",

    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark":"images/favicon.ico",

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-square",

    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": "images/favicon.ico",

    # Welcome text on the login screen
    "welcome_sign": "Welcome to the {{ project_name|title }} Admin",

    # Copyright on the footer
    "copyright": "{{ project_name|title }} Pvt Ltd",

    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you dont need to use a list, you can use a simple string 
    "search_model": [],

    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    # "user_avatar": 'profile_image',

    ############
    # Top Menu #
    ############

    # Links to put along the top menu
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home",  "url": "admin:index"},

        # external url that opens in a new window (Permissions can be added)
        # {"name": "View Site", "url": "main:home", "new_window": False},
    ],

    #############
    # User Menu #
    #############

    # Additional links to include in the user menu on the top right ("app" url type is not allowed)
    "usermenu_links": [
    #     {"model": "auth.user"}
    ],

    #############
    # Side Menu #
    #############

    # Whether to display the side menu
    "show_sidebar": True,

    # Whether to aut expand the menu
    "navigation_expanded": True,

    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": [],

    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],

    # List of apps (and/or models) to base side menu ordering off of (does not need to contain all apps/models)
    "order_with_respect_to": [],

    # Custom links to append to app groups, keyed on app name
    "custom_links": {},

    # Custom icons for side menu apps/models See https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2
    # for the full list of 5.13.0 free icon classes
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
    },
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",

    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": True,

    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": None,
    "custom_js": None,
    # Whether to link font from fonts.googleapis.com (use custom_css to supply font otherwise)
    "use_google_fonts_cdn": True,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": True,

    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
    "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
    # Add a language dropdown into the admin
    # "language_chooser": True,
}
JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": False,
    "accent": "accent-primary",
    "navbar": "navbar-white navbar-light",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "lux",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-outline-primary",
        "secondary": "btn-outline-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    },
    "actions_sticky_top": True
}{% endif %}
