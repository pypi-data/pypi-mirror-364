# https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-build-backend
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "vortex_cli"
version = "4.19.1"
description = "Vortex CLI"
requires-python = ">=3.10"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
keywords = ["vortex", "cli", "puakma", "tornado"]
dependencies = [
    "httpx==0.24.1",
    "tabulate==0.9.0",
    "watchfiles==0.19.0"
]
authors = [
    { name = "Jordan Amos", email = "jordan.amos@gmail.com" }
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only"
]

[project.entry-points."console_scripts"]
vortex = "vortex.__main__:main"

[tool.setuptools.package-data]
vortex = ["lib/puakma-6.0.40.jar", "docs/Blackbook.pdf"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tests.*", "testing.*"]
disallow_untyped_defs = false

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.

# E = pycodestyle https://docs.astral.sh/ruff/rules/#error-e
# F = pyflakes https://docs.astral.sh/ruff/rules/#pyflakes-f
# UP = pyupgrade https://docs.astral.sh/ruff/rules/#pyupgrade-up
# A = flake8 builtins https://docs.astral.sh/ruff/rules/#flake8-builtins-a
# B = flake8 bugbear https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
# I = isort https://docs.astral.sh/ruff/rules/#isort-i
select = ["E4", "E7", "E9", "F" ,"UP", "A", "B", "I"]

# UP031 Use format specifiers instead of percent format
ignore = ["UP031"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]
