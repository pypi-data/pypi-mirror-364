[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[project]
name = "geff"
description = "Reference implementation of the Graph Exchange File Format"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT License" }
dynamic = ['version']
dependencies = [
    "typer",
    "zarr>2,<4",
    "pydantic>=2",
    "numcodecs<0.16", # TODO: remove pin once the 16 release is stable
    "networkx",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.optional-dependencies]
spatial-graph = ["spatial-graph"]
ctc = ["dask", "scikit-image", "tifffile", "imagecodecs"]
rx = ["rustworkx>=0.16.0"]
trackmate_xml = ["lxml"]

[dependency-groups]
test = ["pytest>=8.3.4", "pytest-cov>=6.2"]
dev = [
    { include-group = "test" },
    "mypy",
    "pre-commit",
    "ruff",
    "ipython",
    "types-PyYAML",
    "spatial-graph",
    "rustworkx",
    # ctc stuff:
    "dask",
    "scikit-image",
    "tifffile",
    "imagecodecs",
    # trackmate_xml stuff
    "lxml",
]
docs = [
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-api-autonav",
    "mkdocs-include-markdown-plugin",
    "mike",
    "json-schema-for-humans",
    "typing-extensions",              # Required for json-schema-for-humans
    "ruff",                           # to format the source code signatures
]
bench = [
    { include-group = "test" },
    "pytest-benchmark",
    "tabulate",
    "pandas",
    "typer",
    "rustworkx",
]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64", "osx-64"]

[tool.pixi.pypi-dependencies]
geff = { path = ".", editable = true }

[tool.pixi.dependencies]
python = "3.12.*"

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
build = { features = ["build"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
bench = { features = ["dev", "bench"], solve-group = "default" }

[tool.pixi.tasks]
update-json = "python scripts/export_json_schema.py"

[tool.pixi.feature.dev.tasks]
test = "coverage run -m pytest"
test-cov = "coverage run -m pytest && coverage xml && coverage report --show-missing"
benchmark = { cmd = "pytest tests/bench.py" }

[tool.pixi.feature.bench.tasks]
benchmark = "pytest tests/bench.py"

[tool.pixi.feature.build.pypi-dependencies]
build = "*"

[tool.pixi.feature.build.tasks]
build = "python -m build"

[tool.pixi.feature.docs.tasks]
preview-docs = {cmd = "mkdocs serve"}

[project.urls]
repository = "https://github.com/live-image-tracking-tools/geff"
homepage = "https://github.com/live-image-tracking-tools/geff"

# https://docs.astral.sh/ruff/rules/
[tool.ruff]
line-length = 100
target-version = "py310"
fix = true

[tool.ruff.lint]
extend-select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TID",  # tidy imports
    "TC",   # type checking
    "D102", # undocumented public method
    "D103", # undocumented public function
    "D300", # enforces triple double quotes on docstrings
    "D414", # empty/missing docstring section
    "D417", # undocumented parameter
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # unused imports in init files
"tests/*.py" = ["D"]
"scripts/*.py" = ["D"]

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["tests"]
filterwarnings = [
    "error",
    "ignore:'cgi' is deprecated and slated for removal in Python 3.13",
    # if needed, add global ignores here, for example:
    # "ignore:Some message:SomeCategory",
]


# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
# strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

# # module specific overrides
# [[tool.mypy.overrides]]
# module = ["numpy.*",]
# ignore_errors = true


# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "raise NotImplementedError()",
    "pass",
]
[tool.coverage.run]
source = ["src/geff"]
omit = ["*/__init__.py"]

[tool.typos.default]
extend-ignore-identifiers-re = ["(?i)ome"]

# https://github.com/mgedmin/check-manifest#configuration
# [tool.check-manifest]
# ignore = [
#     ".github_changelog_generator",
#     ".pre-commit-config.yaml",
#     ".ruff_cache/**/*",
#     "tests/**/*",
# ]

[project.scripts]
ctc2geff = "geff.interops.ctc:app"
geff = "geff._cli:app"