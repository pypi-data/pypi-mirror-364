[tool.poetry]
name = "dataset-cat"
version = "0.0.6"
description = "A tool for fetching and organizing anime datasets for training."
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/your-repo/dataset-cat"
repository = "https://github.com/your-repo/dataset-cat"
keywords = ["anime", "dataset", "fetcher", "training"]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
gradio = ">=4.44.0"
gallery-dl = "*"
Pillow = "*"
opencv-python = "*"
googletrans = "4.0.2"
httpx = { version = ">=0.27.2,<1.0", extras = ["http2"] }
pydantic = ">=2.0.0"
fastapi = ">=0.100.0"

[tool.poetry.scripts]
dataset-cat-webui = "dataset_cat.webui:launch_webui"
lint = "dataset_cat.scripts.lint_runner:main"
format = "dataset_cat.scripts.format_runner:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dev-dependencies]
pytest = "*"
pytest-mock = "*"
black = "*"
isort = "*"
flake8 = "*"
mypy = "*"
pre-commit = "*"
ruff = "*" # Add ruff

# Black configuration
[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \\.git
    | \\.hg
    | \\.mypy_cache
    | \\.tox
    | \\.venv
    | \\.eggs
    | buck-out
    | build
    | dist
    | waifuc
)/'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
extend_skip_glob = ["waifuc/**"] # Skip files in waifuc directory

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["waifuc/.*"] # Exclude waifuc directory from type checking

# Ignore missing imports for external libraries
[[tool.mypy.overrides]]
module = [
    "waifuc.*",
    "gallery_dl.*",
    "gradio.*",
    "cv2.*"
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
# Enable Pyflakes and pycodestyle errors by default.
# E402: module level import not at top of file (handled by isort)
# E501: line too long (handled by black)
# E701: multiple statements on one line (colon)
# E704: multiple statements on one line (def)
# W503: line break before binary operator (conflicts with black)
# E203: whitespace before ':' (conflicts with black)
ignore = ["E402", "E501", "E701", "E704", "W503", "E203"]
select = ["E", "F", "W", "C90", "I"] # Standard: Pyflakes, pycodestyle, McCabe, isort
line-length = 120
target-version = "py38"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "waifuc" # Added waifuc
]

[tool.ruff.lint]
# Add specific rules or configurations if needed
# For example, to be compatible with black
# See https://beta.ruff.rs/docs/faq/#how-do-i-use-ruff-with-black
# Most of this is handled by the `ignore` list above for default black compatibility

[tool.ruff.format]
# If you want to use ruff for formatting eventually, configure it here.
# For now, we are still using black and isort for formatting.
# quote-style = "double"
# indent-style = "space"
# skip-magic-trailing-comma = false
# line-ending = "auto"
