#
# Copyright 2025 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-engine-info.json
#
# Do not edit this file manually!
#

from delphixpy.v1_11_41.web.objects.TypedObject import TypedObject
from delphixpy.v1_11_41 import common

class __Undef:
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

class EngineInfo(TypedObject):
    """
    *(extends* :py:class:`v1_11_41.web.vo.TypedObject` *)* Engine info.
    """
    def __init__(self, undef_enabled=True):
        super().__init__()
        self._type = ("EngineInfo", True)
        self._domain0_pool_guid = (self.__undef__, True)
        self._uuid = (self.__undef__, True)
        self._installation_time = (self.__undef__, True)
        self._version = (self.__undef__, True)
        self._hostname = (self.__undef__, True)


    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super().from_dict(data, dirty, undef_enabled)
        obj._domain0_pool_guid = (data.get("domain0PoolGUID", obj.__undef__), dirty)
        if obj._domain0_pool_guid[0] is not None and obj._domain0_pool_guid[0] is not obj.__undef__:
            assert isinstance(obj._domain0_pool_guid[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._domain0_pool_guid[0], type(obj._domain0_pool_guid[0])))
            common.validate_format(obj._domain0_pool_guid[0], "None", None, None)
        obj._uuid = (data.get("uuid", obj.__undef__), dirty)
        if obj._uuid[0] is not None and obj._uuid[0] is not obj.__undef__:
            assert isinstance(obj._uuid[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._uuid[0], type(obj._uuid[0])))
            common.validate_format(obj._uuid[0], "None", None, None)
        obj._installation_time = (data.get("installationTime", obj.__undef__), dirty)
        if obj._installation_time[0] is not None and obj._installation_time[0] is not obj.__undef__:
            assert isinstance(obj._installation_time[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._installation_time[0], type(obj._installation_time[0])))
            common.validate_format(obj._installation_time[0], "date", None, None)
        obj._version = (data.get("version", obj.__undef__), dirty)
        if obj._version[0] is not None and obj._version[0] is not obj.__undef__:
            assert isinstance(obj._version[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._version[0], type(obj._version[0])))
            common.validate_format(obj._version[0], "None", None, None)
        obj._hostname = (data.get("hostname", obj.__undef__), dirty)
        if obj._hostname[0] is not None and obj._hostname[0] is not obj.__undef__:
            assert isinstance(obj._hostname[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._hostname[0], type(obj._hostname[0])))
            common.validate_format(obj._hostname[0], "None", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super().to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "domain0_pool_guid" == "type" or (self.domain0_pool_guid is not self.__undef__ and (not (dirty and not self._domain0_pool_guid[1]))):
            dct["domain0PoolGUID"] = dictify(self.domain0_pool_guid)
        if dirty and "domain0PoolGUID" in dct:
            del dct["domain0PoolGUID"]
        if "uuid" == "type" or (self.uuid is not self.__undef__ and (not (dirty and not self._uuid[1]))):
            dct["uuid"] = dictify(self.uuid)
        if dirty and "uuid" in dct:
            del dct["uuid"]
        if "installation_time" == "type" or (self.installation_time is not self.__undef__ and (not (dirty and not self._installation_time[1]))):
            dct["installationTime"] = dictify(self.installation_time)
        if dirty and "installationTime" in dct:
            del dct["installationTime"]
        if "version" == "type" or (self.version is not self.__undef__ and (not (dirty and not self._version[1]))):
            dct["version"] = dictify(self.version)
        if dirty and "version" in dct:
            del dct["version"]
        if "hostname" == "type" or (self.hostname is not self.__undef__ and (not (dirty and not self._hostname[1]))):
            dct["hostname"] = dictify(self.hostname)
        if dirty and "hostname" in dct:
            del dct["hostname"]
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._domain0_pool_guid = (self._domain0_pool_guid[0], True)
        self._uuid = (self._uuid[0], True)
        self._installation_time = (self._installation_time[0], True)
        self._version = (self._version[0], True)
        self._hostname = (self._hostname[0], True)

    def is_dirty(self):
        return any([self._domain0_pool_guid[1], self._uuid[1], self._installation_time[1], self._version[1], self._hostname[1]])

    def is_dirty_list(self, prop_name, private_var):
        if isinstance(prop_name, list) and prop_name and hasattr(prop_name[0], 'type'):
            for item in prop_name:
                if isinstance(item, list):
                    if self.is_dirty_list(item) or item.is_dirty():
                        return True
                elif item.is_dirty():
                    return True
        else:
            return private_var[1]
        return False

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, EngineInfo):
            return False
        return super().__eq__(other) and \
               self.domain0_pool_guid == other.domain0_pool_guid and \
               self.uuid == other.uuid and \
               self.installation_time == other.installation_time and \
               self.version == other.version and \
               self.hostname == other.hostname

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return hash((
            super().__hash__(),
            self.domain0_pool_guid,
            self.uuid,
            self.installation_time,
            self.version,
            self.hostname,
        ))

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def domain0_pool_guid(self):
        """
        GUID of DOMAIN0 Pool.

        :rtype: ``str``
        """
        return self._domain0_pool_guid[0]

    @property
    def uuid(self):
        """
        The UUID for this Delphix Engine.

        :rtype: ``str``
        """
        return self._uuid[0]

    @property
    def installation_time(self):
        """
        The date and time that the Delphix Engine was installed.

        :rtype: ``str``
        """
        return self._installation_time[0]

    @property
    def version(self):
        """
        Delphix version of the current system software.

        :rtype: ``str``
        """
        return self._version[0]

    @property
    def hostname(self):
        """
        Delphix hostname.

        :rtype: ``str``
        """
        return self._hostname[0]

