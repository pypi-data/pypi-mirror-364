#
# Copyright 2025 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-ase-host-environment-parameters.json
#
# Do not edit this file manually!
#

from delphixpy.v1_11_41.web.objects.TypedObject import TypedObject
from delphixpy.v1_11_41 import factory
from delphixpy.v1_11_41 import common

class __Undef:
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

class ASEHostEnvironmentParameters(TypedObject):
    """
    *(extends* :py:class:`v1_11_41.web.vo.TypedObject` *)* SAP ASE host
    environment parameters.
    """
    def __init__(self, undef_enabled=True):
        super().__init__()
        self._type = ("ASEHostEnvironmentParameters", True)
        self._db_user = (self.__undef__, True)
        self._credentials = (self.__undef__, True)
        self._enable_tls = (self.__undef__, True)
        self._skip_server_certificate_validation = (self.__undef__, True)


    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super().from_dict(data, dirty, undef_enabled)
        obj._db_user = (data.get("dbUser", obj.__undef__), dirty)
        if obj._db_user[0] is not None and obj._db_user[0] is not obj.__undef__:
            assert isinstance(obj._db_user[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._db_user[0], type(obj._db_user[0])))
            common.validate_format(obj._db_user[0], "None", None, 256)
        if "credentials" in data and data["credentials"] is not None:
            obj._credentials = (factory.create_object(data["credentials"], "Credential"), dirty)
            factory.validate_type(obj._credentials[0], "Credential")
        else:
            obj._credentials = (obj.__undef__, dirty)
        obj._enable_tls = (data.get("enableTls", obj.__undef__), dirty)
        if obj._enable_tls[0] is not None and obj._enable_tls[0] is not obj.__undef__:
            assert isinstance(obj._enable_tls[0], bool), ("Expected one of ['boolean'], but got %s of type %s" % (obj._enable_tls[0], type(obj._enable_tls[0])))
            common.validate_format(obj._enable_tls[0], "None", None, None)
        obj._skip_server_certificate_validation = (data.get("skipServerCertificateValidation", obj.__undef__), dirty)
        if obj._skip_server_certificate_validation[0] is not None and obj._skip_server_certificate_validation[0] is not obj.__undef__:
            assert isinstance(obj._skip_server_certificate_validation[0], bool), ("Expected one of ['boolean'], but got %s of type %s" % (obj._skip_server_certificate_validation[0], type(obj._skip_server_certificate_validation[0])))
            common.validate_format(obj._skip_server_certificate_validation[0], "None", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super().to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "db_user" == "type" or (self.db_user is not self.__undef__ and (not (dirty and not self._db_user[1]) or self.is_dirty_list(self.db_user, self._db_user) or belongs_to_parent)):
            dct["dbUser"] = dictify(self.db_user)
        if "credentials" == "type" or (self.credentials is not self.__undef__ and (not (dirty and not self._credentials[1]) or self.is_dirty_list(self.credentials, self._credentials) or belongs_to_parent)):
            dct["credentials"] = dictify(self.credentials, prop_is_list_or_vo=True)
        if "enable_tls" == "type" or (self.enable_tls is not self.__undef__ and (not (dirty and not self._enable_tls[1]) or self.is_dirty_list(self.enable_tls, self._enable_tls) or belongs_to_parent)):
            dct["enableTls"] = dictify(self.enable_tls)
        if "skip_server_certificate_validation" == "type" or (self.skip_server_certificate_validation is not self.__undef__ and (not (dirty and not self._skip_server_certificate_validation[1]) or self.is_dirty_list(self.skip_server_certificate_validation, self._skip_server_certificate_validation) or belongs_to_parent)):
            dct["skipServerCertificateValidation"] = dictify(self.skip_server_certificate_validation)
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._db_user = (self._db_user[0], True)
        self._credentials = (self._credentials[0], True)
        self._enable_tls = (self._enable_tls[0], True)
        self._skip_server_certificate_validation = (self._skip_server_certificate_validation[0], True)

    def is_dirty(self):
        return any([self._db_user[1], self._credentials[1], self._enable_tls[1], self._skip_server_certificate_validation[1]])

    def is_dirty_list(self, prop_name, private_var):
        if isinstance(prop_name, list) and prop_name and hasattr(prop_name[0], 'type'):
            for item in prop_name:
                if isinstance(item, list):
                    if self.is_dirty_list(item) or item.is_dirty():
                        return True
                elif item.is_dirty():
                    return True
        else:
            return private_var[1]
        return False

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, ASEHostEnvironmentParameters):
            return False
        return super().__eq__(other) and \
               self.db_user == other.db_user and \
               self.credentials == other.credentials and \
               self.enable_tls == other.enable_tls and \
               self.skip_server_certificate_validation == other.skip_server_certificate_validation

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return id(self)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def db_user(self):
        """
        The username of the database user.

        :rtype: ``str``
        """
        return self._db_user[0]

    @db_user.setter
    def db_user(self, value):
        self._db_user = (value, True)

    @property
    def credentials(self):
        """
        The credentials of the database user.

        :rtype: :py:class:`v1_11_41.web.vo.Credential`
        """
        return self._credentials[0]

    @credentials.setter
    def credentials(self, value):
        self._credentials = (value, True)

    @property
    def enable_tls(self):
        """
        True if you want to discover the SAP ASE instances configured with
        TLS/SSL.

        :rtype: ``bool``
        """
        return self._enable_tls[0]

    @enable_tls.setter
    def enable_tls(self, value):
        self._enable_tls = (value, True)

    @property
    def skip_server_certificate_validation(self):
        """
        Setting it to true will skip the server certificate validation during
        the SSL handshake. Only set it if you do not want to add the required
        certificate into the Delphix Engine truststore but still want to use
        the TLS/SSL-enabled database connection. This is not recommended for a
        production environment as it is less secure.

        :rtype: ``bool``
        """
        return self._skip_server_certificate_validation[0]

    @skip_server_certificate_validation.setter
    def skip_server_certificate_validation(self, value):
        self._skip_server_certificate_validation = (value, True)

