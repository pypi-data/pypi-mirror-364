#
# Copyright 2025 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-mssql-db-file-state.json
#
# Do not edit this file manually!
#

from delphixpy.v1_11_41.web.objects.TypedObject import TypedObject
from delphixpy.v1_11_41 import common

class __Undef:
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

class MSSqlDbFileState(TypedObject):
    """
    *(extends* :py:class:`v1_11_41.web.vo.TypedObject` *)* MSSql database file
    state information.
    """
    def __init__(self, undef_enabled=True):
        super().__init__()
        self._type = ("MSSqlDbFileState", True)
        self._support_provision_without_backup = (self.__undef__, True)
        self._ag_replica_sync_status = (self.__undef__, True)
        self._last_hardened_lsn = (self.__undef__, True)


    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super().from_dict(data, dirty, undef_enabled)
        obj._support_provision_without_backup = (data.get("supportProvisionWithoutBackup", obj.__undef__), dirty)
        if obj._support_provision_without_backup[0] is not None and obj._support_provision_without_backup[0] is not obj.__undef__:
            assert isinstance(obj._support_provision_without_backup[0], bool), ("Expected one of ['boolean'], but got %s of type %s" % (obj._support_provision_without_backup[0], type(obj._support_provision_without_backup[0])))
            common.validate_format(obj._support_provision_without_backup[0], "None", None, None)
        obj._ag_replica_sync_status = (data.get("agReplicaSyncStatus", obj.__undef__), dirty)
        if obj._ag_replica_sync_status[0] is not None and obj._ag_replica_sync_status[0] is not obj.__undef__:
            assert isinstance(obj._ag_replica_sync_status[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._ag_replica_sync_status[0], type(obj._ag_replica_sync_status[0])))
            assert obj._ag_replica_sync_status[0] in ['SYNCHRONIZED', 'SYNCHRONIZING', 'NOT SYNCHRONIZING', 'REVERTING', 'INITIALIZING', 'OTHER'], "Expected enum ['SYNCHRONIZED', 'SYNCHRONIZING', 'NOT SYNCHRONIZING', 'REVERTING', 'INITIALIZING', 'OTHER'] but got %s" % obj._ag_replica_sync_status[0]
            common.validate_format(obj._ag_replica_sync_status[0], "None", None, None)
        obj._last_hardened_lsn = (data.get("lastHardenedLsn", obj.__undef__), dirty)
        if obj._last_hardened_lsn[0] is not None and obj._last_hardened_lsn[0] is not obj.__undef__:
            assert isinstance(obj._last_hardened_lsn[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._last_hardened_lsn[0], type(obj._last_hardened_lsn[0])))
            common.validate_format(obj._last_hardened_lsn[0], "None", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super().to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "support_provision_without_backup" == "type" or (self.support_provision_without_backup is not self.__undef__ and (not (dirty and not self._support_provision_without_backup[1]))):
            dct["supportProvisionWithoutBackup"] = dictify(self.support_provision_without_backup)
        if dirty and "supportProvisionWithoutBackup" in dct:
            del dct["supportProvisionWithoutBackup"]
        if "ag_replica_sync_status" == "type" or (self.ag_replica_sync_status is not self.__undef__ and (not (dirty and not self._ag_replica_sync_status[1]))):
            dct["agReplicaSyncStatus"] = dictify(self.ag_replica_sync_status)
        if dirty and "agReplicaSyncStatus" in dct:
            del dct["agReplicaSyncStatus"]
        if "last_hardened_lsn" == "type" or (self.last_hardened_lsn is not self.__undef__ and (not (dirty and not self._last_hardened_lsn[1]))):
            dct["lastHardenedLsn"] = dictify(self.last_hardened_lsn)
        if dirty and "lastHardenedLsn" in dct:
            del dct["lastHardenedLsn"]
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._support_provision_without_backup = (self._support_provision_without_backup[0], True)
        self._ag_replica_sync_status = (self._ag_replica_sync_status[0], True)
        self._last_hardened_lsn = (self._last_hardened_lsn[0], True)

    def is_dirty(self):
        return any([self._support_provision_without_backup[1], self._ag_replica_sync_status[1], self._last_hardened_lsn[1]])

    def is_dirty_list(self, prop_name, private_var):
        if isinstance(prop_name, list) and prop_name and hasattr(prop_name[0], 'type'):
            for item in prop_name:
                if isinstance(item, list):
                    if self.is_dirty_list(item) or item.is_dirty():
                        return True
                elif item.is_dirty():
                    return True
        else:
            return private_var[1]
        return False

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, MSSqlDbFileState):
            return False
        return super().__eq__(other) and \
               self.support_provision_without_backup == other.support_provision_without_backup and \
               self.ag_replica_sync_status == other.ag_replica_sync_status and \
               self.last_hardened_lsn == other.last_hardened_lsn

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return hash((
            super().__hash__(),
            self.support_provision_without_backup,
            self.ag_replica_sync_status,
            self.last_hardened_lsn,
        ))

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def support_provision_without_backup(self):
        """
        Indicates whether the database file can be used to provision without
        taking backups.

        :rtype: ``bool``
        """
        return self._support_provision_without_backup[0]

    @property
    def ag_replica_sync_status(self):
        """
        Indicates the data-movement state of the participating AG nodes.
        *(permitted values: SYNCHRONIZED, SYNCHRONIZING, NOT SYNCHRONIZING,
        REVERTING, INITIALIZING, OTHER)*

        :rtype: ``str``
        """
        return self._ag_replica_sync_status[0]

    @property
    def last_hardened_lsn(self):
        """
        Indicates the start of the next block past the blocks that are already
        on disk. So any LSN less than the value of last_hardened_lsn is on
        disk.

        :rtype: ``str``
        """
        return self._last_hardened_lsn[0]

