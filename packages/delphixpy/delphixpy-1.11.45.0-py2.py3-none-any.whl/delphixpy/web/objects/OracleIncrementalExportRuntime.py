#
# Copyright 2025 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-oracle-incremental-export-runtime.json
#
# Do not edit this file manually!
#

from delphixpy.web.objects.TypedObject import TypedObject
from delphixpy import common

class __Undef:
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

class OracleIncrementalExportRuntime(TypedObject):
    """
    *(extends* :py:class:`delphixpy.web.vo.TypedObject` *)* Oracle database
    incremental Export runtime statistics.
    """
    def __init__(self, undef_enabled=True):
        super().__init__()
        self._type = ("OracleIncrementalExportRuntime", True)
        self._current_source_checkpoint_scn = (self.__undef__, True)
        self._current_target_checkpoint_scn = (self.__undef__, True)
        self._incremental_export_status = (self.__undef__, True)
        self._switchover_status = (self.__undef__, True)
        self._backup_worker_status = (self.__undef__, True)
        self._restore_worker_status = (self.__undef__, True)
        self._total_backups_attempted = (self.__undef__, True)
        self._total_successful_backups = (self.__undef__, True)
        self._total_backups_applied = (self.__undef__, True)
        self._failed_backup = (self.__undef__, True)
        self._failed_restore = (self.__undef__, True)
        self._max_recoverable_scn = (self.__undef__, True)


    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super().from_dict(data, dirty, undef_enabled)
        obj._current_source_checkpoint_scn = (data.get("currentSourceCheckpointScn", obj.__undef__), dirty)
        if obj._current_source_checkpoint_scn[0] is not None and obj._current_source_checkpoint_scn[0] is not obj.__undef__:
            assert isinstance(obj._current_source_checkpoint_scn[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._current_source_checkpoint_scn[0], type(obj._current_source_checkpoint_scn[0])))
            common.validate_format(obj._current_source_checkpoint_scn[0], "None", None, None)
        obj._current_target_checkpoint_scn = (data.get("currentTargetCheckpointScn", obj.__undef__), dirty)
        if obj._current_target_checkpoint_scn[0] is not None and obj._current_target_checkpoint_scn[0] is not obj.__undef__:
            assert isinstance(obj._current_target_checkpoint_scn[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._current_target_checkpoint_scn[0], type(obj._current_target_checkpoint_scn[0])))
            common.validate_format(obj._current_target_checkpoint_scn[0], "None", None, None)
        obj._incremental_export_status = (data.get("incrementalExportStatus", obj.__undef__), dirty)
        if obj._incremental_export_status[0] is not None and obj._incremental_export_status[0] is not obj.__undef__:
            assert isinstance(obj._incremental_export_status[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._incremental_export_status[0], type(obj._incremental_export_status[0])))
            common.validate_format(obj._incremental_export_status[0], "None", None, None)
        obj._switchover_status = (data.get("switchoverStatus", obj.__undef__), dirty)
        if obj._switchover_status[0] is not None and obj._switchover_status[0] is not obj.__undef__:
            assert isinstance(obj._switchover_status[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._switchover_status[0], type(obj._switchover_status[0])))
            common.validate_format(obj._switchover_status[0], "None", None, None)
        obj._backup_worker_status = (data.get("backupWorkerStatus", obj.__undef__), dirty)
        if obj._backup_worker_status[0] is not None and obj._backup_worker_status[0] is not obj.__undef__:
            assert isinstance(obj._backup_worker_status[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._backup_worker_status[0], type(obj._backup_worker_status[0])))
            common.validate_format(obj._backup_worker_status[0], "None", None, None)
        obj._restore_worker_status = (data.get("restoreWorkerStatus", obj.__undef__), dirty)
        if obj._restore_worker_status[0] is not None and obj._restore_worker_status[0] is not obj.__undef__:
            assert isinstance(obj._restore_worker_status[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._restore_worker_status[0], type(obj._restore_worker_status[0])))
            common.validate_format(obj._restore_worker_status[0], "None", None, None)
        obj._total_backups_attempted = (data.get("totalBackupsAttempted", obj.__undef__), dirty)
        if obj._total_backups_attempted[0] is not None and obj._total_backups_attempted[0] is not obj.__undef__:
            assert isinstance(obj._total_backups_attempted[0], int), ("Expected one of ['integer'], but got %s of type %s" % (obj._total_backups_attempted[0], type(obj._total_backups_attempted[0])))
            common.validate_format(obj._total_backups_attempted[0], "None", None, None)
        obj._total_successful_backups = (data.get("totalSuccessfulBackups", obj.__undef__), dirty)
        if obj._total_successful_backups[0] is not None and obj._total_successful_backups[0] is not obj.__undef__:
            assert isinstance(obj._total_successful_backups[0], int), ("Expected one of ['integer'], but got %s of type %s" % (obj._total_successful_backups[0], type(obj._total_successful_backups[0])))
            common.validate_format(obj._total_successful_backups[0], "None", None, None)
        obj._total_backups_applied = (data.get("totalBackupsApplied", obj.__undef__), dirty)
        if obj._total_backups_applied[0] is not None and obj._total_backups_applied[0] is not obj.__undef__:
            assert isinstance(obj._total_backups_applied[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._total_backups_applied[0], type(obj._total_backups_applied[0])))
            common.validate_format(obj._total_backups_applied[0], "None", None, None)
        obj._failed_backup = (data.get("failedBackup", obj.__undef__), dirty)
        if obj._failed_backup[0] is not None and obj._failed_backup[0] is not obj.__undef__:
            assert isinstance(obj._failed_backup[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._failed_backup[0], type(obj._failed_backup[0])))
            common.validate_format(obj._failed_backup[0], "None", None, None)
        obj._failed_restore = (data.get("failedRestore", obj.__undef__), dirty)
        if obj._failed_restore[0] is not None and obj._failed_restore[0] is not obj.__undef__:
            assert isinstance(obj._failed_restore[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._failed_restore[0], type(obj._failed_restore[0])))
            common.validate_format(obj._failed_restore[0], "None", None, None)
        obj._max_recoverable_scn = (data.get("maxRecoverableScn", obj.__undef__), dirty)
        if obj._max_recoverable_scn[0] is not None and obj._max_recoverable_scn[0] is not obj.__undef__:
            assert isinstance(obj._max_recoverable_scn[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._max_recoverable_scn[0], type(obj._max_recoverable_scn[0])))
            common.validate_format(obj._max_recoverable_scn[0], "None", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super().to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "current_source_checkpoint_scn" == "type" or (self.current_source_checkpoint_scn is not self.__undef__ and (not (dirty and not self._current_source_checkpoint_scn[1]))):
            dct["currentSourceCheckpointScn"] = dictify(self.current_source_checkpoint_scn)
        if "current_target_checkpoint_scn" == "type" or (self.current_target_checkpoint_scn is not self.__undef__ and (not (dirty and not self._current_target_checkpoint_scn[1]))):
            dct["currentTargetCheckpointScn"] = dictify(self.current_target_checkpoint_scn)
        if "incremental_export_status" == "type" or (self.incremental_export_status is not self.__undef__ and (not (dirty and not self._incremental_export_status[1]))):
            dct["incrementalExportStatus"] = dictify(self.incremental_export_status)
        if "switchover_status" == "type" or (self.switchover_status is not self.__undef__ and (not (dirty and not self._switchover_status[1]))):
            dct["switchoverStatus"] = dictify(self.switchover_status)
        if "backup_worker_status" == "type" or (self.backup_worker_status is not self.__undef__ and (not (dirty and not self._backup_worker_status[1]))):
            dct["backupWorkerStatus"] = dictify(self.backup_worker_status)
        if "restore_worker_status" == "type" or (self.restore_worker_status is not self.__undef__ and (not (dirty and not self._restore_worker_status[1]))):
            dct["restoreWorkerStatus"] = dictify(self.restore_worker_status)
        if "total_backups_attempted" == "type" or (self.total_backups_attempted is not self.__undef__ and (not (dirty and not self._total_backups_attempted[1]))):
            dct["totalBackupsAttempted"] = dictify(self.total_backups_attempted)
        if "total_successful_backups" == "type" or (self.total_successful_backups is not self.__undef__ and (not (dirty and not self._total_successful_backups[1]))):
            dct["totalSuccessfulBackups"] = dictify(self.total_successful_backups)
        if "total_backups_applied" == "type" or (self.total_backups_applied is not self.__undef__ and (not (dirty and not self._total_backups_applied[1]))):
            dct["totalBackupsApplied"] = dictify(self.total_backups_applied)
        if "failed_backup" == "type" or (self.failed_backup is not self.__undef__ and (not (dirty and not self._failed_backup[1]))):
            dct["failedBackup"] = dictify(self.failed_backup)
        if "failed_restore" == "type" or (self.failed_restore is not self.__undef__ and (not (dirty and not self._failed_restore[1]))):
            dct["failedRestore"] = dictify(self.failed_restore)
        if "max_recoverable_scn" == "type" or (self.max_recoverable_scn is not self.__undef__ and (not (dirty and not self._max_recoverable_scn[1]))):
            dct["maxRecoverableScn"] = dictify(self.max_recoverable_scn)
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._current_source_checkpoint_scn = (self._current_source_checkpoint_scn[0], True)
        self._current_target_checkpoint_scn = (self._current_target_checkpoint_scn[0], True)
        self._incremental_export_status = (self._incremental_export_status[0], True)
        self._switchover_status = (self._switchover_status[0], True)
        self._backup_worker_status = (self._backup_worker_status[0], True)
        self._restore_worker_status = (self._restore_worker_status[0], True)
        self._total_backups_attempted = (self._total_backups_attempted[0], True)
        self._total_successful_backups = (self._total_successful_backups[0], True)
        self._total_backups_applied = (self._total_backups_applied[0], True)
        self._failed_backup = (self._failed_backup[0], True)
        self._failed_restore = (self._failed_restore[0], True)
        self._max_recoverable_scn = (self._max_recoverable_scn[0], True)

    def is_dirty(self):
        return any([self._current_source_checkpoint_scn[1], self._current_target_checkpoint_scn[1], self._incremental_export_status[1], self._switchover_status[1], self._backup_worker_status[1], self._restore_worker_status[1], self._total_backups_attempted[1], self._total_successful_backups[1], self._total_backups_applied[1], self._failed_backup[1], self._failed_restore[1], self._max_recoverable_scn[1]])

    def is_dirty_list(self, prop_name, private_var):
        if isinstance(prop_name, list) and prop_name and hasattr(prop_name[0], 'type'):
            for item in prop_name:
                if isinstance(item, list):
                    if self.is_dirty_list(item) or item.is_dirty():
                        return True
                elif item.is_dirty():
                    return True
        else:
            return private_var[1]
        return False

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, OracleIncrementalExportRuntime):
            return False
        return super().__eq__(other) and \
               self.current_source_checkpoint_scn == other.current_source_checkpoint_scn and \
               self.current_target_checkpoint_scn == other.current_target_checkpoint_scn and \
               self.incremental_export_status == other.incremental_export_status and \
               self.switchover_status == other.switchover_status and \
               self.backup_worker_status == other.backup_worker_status and \
               self.restore_worker_status == other.restore_worker_status and \
               self.total_backups_attempted == other.total_backups_attempted and \
               self.total_successful_backups == other.total_successful_backups and \
               self.total_backups_applied == other.total_backups_applied and \
               self.failed_backup == other.failed_backup and \
               self.failed_restore == other.failed_restore and \
               self.max_recoverable_scn == other.max_recoverable_scn

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return id(self)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def current_source_checkpoint_scn(self):
        """
        Current checkpoint SCN of the source DB.

        :rtype: ``str``
        """
        return self._current_source_checkpoint_scn[0]

    @current_source_checkpoint_scn.setter
    def current_source_checkpoint_scn(self, value):
        self._current_source_checkpoint_scn = (value, True)

    @property
    def current_target_checkpoint_scn(self):
        """
        SCN upto which target database has been restored.

        :rtype: ``str``
        """
        return self._current_target_checkpoint_scn[0]

    @current_target_checkpoint_scn.setter
    def current_target_checkpoint_scn(self, value):
        self._current_target_checkpoint_scn = (value, True)

    @property
    def incremental_export_status(self):
        """
        Status of the incremental export.

        :rtype: ``str``
        """
        return self._incremental_export_status[0]

    @incremental_export_status.setter
    def incremental_export_status(self, value):
        self._incremental_export_status = (value, True)

    @property
    def switchover_status(self):
        """
        Status of the switchover operation.

        :rtype: ``str``
        """
        return self._switchover_status[0]

    @switchover_status.setter
    def switchover_status(self, value):
        self._switchover_status = (value, True)

    @property
    def backup_worker_status(self):
        """
        Incremental backup worker status.

        :rtype: ``str``
        """
        return self._backup_worker_status[0]

    @backup_worker_status.setter
    def backup_worker_status(self, value):
        self._backup_worker_status = (value, True)

    @property
    def restore_worker_status(self):
        """
        Incremental restore worker status.

        :rtype: ``str``
        """
        return self._restore_worker_status[0]

    @restore_worker_status.setter
    def restore_worker_status(self, value):
        self._restore_worker_status = (value, True)

    @property
    def total_backups_attempted(self):
        """
        Total number of incremental backups attempted.

        :rtype: ``int``
        """
        return self._total_backups_attempted[0]

    @total_backups_attempted.setter
    def total_backups_attempted(self, value):
        self._total_backups_attempted = (value, True)

    @property
    def total_successful_backups(self):
        """
        Number of incremental backups taken successfully.

        :rtype: ``int``
        """
        return self._total_successful_backups[0]

    @total_successful_backups.setter
    def total_successful_backups(self, value):
        self._total_successful_backups = (value, True)

    @property
    def total_backups_applied(self):
        """
        Number of incremental backups successfully restored.

        :rtype: ``str``
        """
        return self._total_backups_applied[0]

    @total_backups_applied.setter
    def total_backups_applied(self, value):
        self._total_backups_applied = (value, True)

    @property
    def failed_backup(self):
        """
        Most recent failed backup.

        :rtype: ``str``
        """
        return self._failed_backup[0]

    @failed_backup.setter
    def failed_backup(self, value):
        self._failed_backup = (value, True)

    @property
    def failed_restore(self):
        """
        Most recent failed restore.

        :rtype: ``str``
        """
        return self._failed_restore[0]

    @failed_restore.setter
    def failed_restore(self, value):
        self._failed_restore = (value, True)

    @property
    def max_recoverable_scn(self):
        """
        SCN upto which the target can be recovered with the available backups.

        :rtype: ``str``
        """
        return self._max_recoverable_scn[0]

    @max_recoverable_scn.setter
    def max_recoverable_scn(self, value):
        self._max_recoverable_scn = (value, True)

