#
# Copyright 2025 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-oracle-incremental-export-parameters.json
#
# Do not edit this file manually!
#

from delphixpy.web.objects.IncrementalExportParameters import IncrementalExportParameters
from delphixpy import common

class __Undef:
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

class OracleIncrementalExportParameters(IncrementalExportParameters):
    """
    *(extends* :py:class:`delphixpy.web.vo.IncrementalExportParameters` *)* The
    parameters for the Incremental export of Oracle dataset.
    """
    def __init__(self, undef_enabled=True):
        super().__init__()
        self._type = ("OracleIncrementalExportParameters", True)
        self._rman_channels_for_incremental_backup = (self.__undef__, True)
        self._rman_files_per_set_for_incremental_backup = (self.__undef__, True)
        self._rman_file_section_size_in_gb_for_incremental_backup = (self.__undef__, True)


    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super().from_dict(data, dirty, undef_enabled)
        obj._rman_channels_for_incremental_backup = (data.get("rmanChannelsForIncrementalBackup", obj.__undef__), dirty)
        if obj._rman_channels_for_incremental_backup[0] is not None and obj._rman_channels_for_incremental_backup[0] is not obj.__undef__:
            assert isinstance(obj._rman_channels_for_incremental_backup[0], int), ("Expected one of ['integer'], but got %s of type %s" % (obj._rman_channels_for_incremental_backup[0], type(obj._rman_channels_for_incremental_backup[0])))
            common.validate_format(obj._rman_channels_for_incremental_backup[0], "None", None, None)
        obj._rman_files_per_set_for_incremental_backup = (data.get("rmanFilesPerSetForIncrementalBackup", obj.__undef__), dirty)
        if obj._rman_files_per_set_for_incremental_backup[0] is not None and obj._rman_files_per_set_for_incremental_backup[0] is not obj.__undef__:
            assert isinstance(obj._rman_files_per_set_for_incremental_backup[0], int), ("Expected one of ['integer'], but got %s of type %s" % (obj._rman_files_per_set_for_incremental_backup[0], type(obj._rman_files_per_set_for_incremental_backup[0])))
            common.validate_format(obj._rman_files_per_set_for_incremental_backup[0], "None", None, None)
        obj._rman_file_section_size_in_gb_for_incremental_backup = (data.get("rmanFileSectionSizeInGbForIncrementalBackup", obj.__undef__), dirty)
        if obj._rman_file_section_size_in_gb_for_incremental_backup[0] is not None and obj._rman_file_section_size_in_gb_for_incremental_backup[0] is not obj.__undef__:
            assert isinstance(obj._rman_file_section_size_in_gb_for_incremental_backup[0], int), ("Expected one of ['integer'], but got %s of type %s" % (obj._rman_file_section_size_in_gb_for_incremental_backup[0], type(obj._rman_file_section_size_in_gb_for_incremental_backup[0])))
            common.validate_format(obj._rman_file_section_size_in_gb_for_incremental_backup[0], "None", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super().to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "rman_channels_for_incremental_backup" == "type" or (self.rman_channels_for_incremental_backup is not self.__undef__ and (not (dirty and not self._rman_channels_for_incremental_backup[1]) or self.is_dirty_list(self.rman_channels_for_incremental_backup, self._rman_channels_for_incremental_backup) or belongs_to_parent)):
            dct["rmanChannelsForIncrementalBackup"] = dictify(self.rman_channels_for_incremental_backup)
        elif belongs_to_parent and self.rman_channels_for_incremental_backup is self.__undef__:
            dct["rmanChannelsForIncrementalBackup"] = 8
        if "rman_files_per_set_for_incremental_backup" == "type" or (self.rman_files_per_set_for_incremental_backup is not self.__undef__ and (not (dirty and not self._rman_files_per_set_for_incremental_backup[1]) or self.is_dirty_list(self.rman_files_per_set_for_incremental_backup, self._rman_files_per_set_for_incremental_backup) or belongs_to_parent)):
            dct["rmanFilesPerSetForIncrementalBackup"] = dictify(self.rman_files_per_set_for_incremental_backup)
        elif belongs_to_parent and self.rman_files_per_set_for_incremental_backup is self.__undef__:
            dct["rmanFilesPerSetForIncrementalBackup"] = 5
        if "rman_file_section_size_in_gb_for_incremental_backup" == "type" or (self.rman_file_section_size_in_gb_for_incremental_backup is not self.__undef__ and (not (dirty and not self._rman_file_section_size_in_gb_for_incremental_backup[1]) or self.is_dirty_list(self.rman_file_section_size_in_gb_for_incremental_backup, self._rman_file_section_size_in_gb_for_incremental_backup) or belongs_to_parent)):
            dct["rmanFileSectionSizeInGbForIncrementalBackup"] = dictify(self.rman_file_section_size_in_gb_for_incremental_backup)
        elif belongs_to_parent and self.rman_file_section_size_in_gb_for_incremental_backup is self.__undef__:
            dct["rmanFileSectionSizeInGbForIncrementalBackup"] = 0
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._rman_channels_for_incremental_backup = (self._rman_channels_for_incremental_backup[0], True)
        self._rman_files_per_set_for_incremental_backup = (self._rman_files_per_set_for_incremental_backup[0], True)
        self._rman_file_section_size_in_gb_for_incremental_backup = (self._rman_file_section_size_in_gb_for_incremental_backup[0], True)

    def is_dirty(self):
        return any([self._rman_channels_for_incremental_backup[1], self._rman_files_per_set_for_incremental_backup[1], self._rman_file_section_size_in_gb_for_incremental_backup[1]])

    def is_dirty_list(self, prop_name, private_var):
        if isinstance(prop_name, list) and prop_name and hasattr(prop_name[0], 'type'):
            for item in prop_name:
                if isinstance(item, list):
                    if self.is_dirty_list(item) or item.is_dirty():
                        return True
                elif item.is_dirty():
                    return True
        else:
            return private_var[1]
        return False

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, OracleIncrementalExportParameters):
            return False
        return super().__eq__(other) and \
               self.rman_channels_for_incremental_backup == other.rman_channels_for_incremental_backup and \
               self.rman_files_per_set_for_incremental_backup == other.rman_files_per_set_for_incremental_backup and \
               self.rman_file_section_size_in_gb_for_incremental_backup == other.rman_file_section_size_in_gb_for_incremental_backup

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return id(self)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def rman_channels_for_incremental_backup(self):
        """
        *(default value: 8)* Number of data streams to connect to the database
        for incremental backup.

        :rtype: ``int``
        """
        return self._rman_channels_for_incremental_backup[0]

    @rman_channels_for_incremental_backup.setter
    def rman_channels_for_incremental_backup(self, value):
        self._rman_channels_for_incremental_backup = (value, True)

    @property
    def rman_files_per_set_for_incremental_backup(self):
        """
        *(default value: 5)* Number of data files to include in each RMAN
        backup set for incremental backup.

        :rtype: ``int``
        """
        return self._rman_files_per_set_for_incremental_backup[0]

    @rman_files_per_set_for_incremental_backup.setter
    def rman_files_per_set_for_incremental_backup(self, value):
        self._rman_files_per_set_for_incremental_backup = (value, True)

    @property
    def rman_file_section_size_in_gb_for_incremental_backup(self):
        """
        Number of GigaBytes in which RMAN will break large files to back them
        up in parallel for incremental backup.

        :rtype: ``int``
        """
        return self._rman_file_section_size_in_gb_for_incremental_backup[0]

    @rman_file_section_size_in_gb_for_incremental_backup.setter
    def rman_file_section_size_in_gb_for_incremental_backup(self, value):
        self._rman_file_section_size_in_gb_for_incremental_backup = (value, True)

