#
# Copyright 2025 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-mssql-incremental-export-backup-worker-runtime.json
#
# Do not edit this file manually!
#

from delphixpy.web.objects.IncrementalExportBackupWorkerRuntime import IncrementalExportBackupWorkerRuntime
from delphixpy import common

class __Undef:
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

class MSSqlIncrementalExportBackupWorkerRuntime(IncrementalExportBackupWorkerRuntime):
    """
    *(extends*
    :py:class:`delphixpy.web.vo.IncrementalExportBackupWorkerRuntime` *)*
    Runtime properties for Incremental export backup workers for MSSQL
    databases.
    """
    def __init__(self, undef_enabled=True):
        super().__init__()
        self._type = ("MSSqlIncrementalExportBackupWorkerRuntime", True)
        self._backup_worker_state = (self.__undef__, True)
        self._last_update_timestamp = (self.__undef__, True)
        self._total_number_of_backups_taken = (self.__undef__, True)
        self._last_backup_time = (self.__undef__, True)
        self._last_backup_set_uuid = (self.__undef__, True)
        self._status = (self.__undef__, True)
        self._response = (self.__undef__, True)
        self._pending_action = (self.__undef__, True)


    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super().from_dict(data, dirty, undef_enabled)
        obj._backup_worker_state = (data.get("backupWorkerState", obj.__undef__), dirty)
        if obj._backup_worker_state[0] is not None and obj._backup_worker_state[0] is not obj.__undef__:
            assert isinstance(obj._backup_worker_state[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._backup_worker_state[0], type(obj._backup_worker_state[0])))
            assert obj._backup_worker_state[0] in ['ACTIVE', 'INACTIVE', 'FAULTED', 'UNKNOWN'], "Expected enum ['ACTIVE', 'INACTIVE', 'FAULTED', 'UNKNOWN'] but got %s" % obj._backup_worker_state[0]
            common.validate_format(obj._backup_worker_state[0], "None", None, None)
        obj._last_update_timestamp = (data.get("lastUpdateTimestamp", obj.__undef__), dirty)
        if obj._last_update_timestamp[0] is not None and obj._last_update_timestamp[0] is not obj.__undef__:
            assert isinstance(obj._last_update_timestamp[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._last_update_timestamp[0], type(obj._last_update_timestamp[0])))
            common.validate_format(obj._last_update_timestamp[0], "None", None, None)
        obj._total_number_of_backups_taken = (data.get("totalNumberOfBackupsTaken", obj.__undef__), dirty)
        if obj._total_number_of_backups_taken[0] is not None and obj._total_number_of_backups_taken[0] is not obj.__undef__:
            assert isinstance(obj._total_number_of_backups_taken[0], int), ("Expected one of ['integer'], but got %s of type %s" % (obj._total_number_of_backups_taken[0], type(obj._total_number_of_backups_taken[0])))
            common.validate_format(obj._total_number_of_backups_taken[0], "None", None, None)
        obj._last_backup_time = (data.get("lastBackupTime", obj.__undef__), dirty)
        if obj._last_backup_time[0] is not None and obj._last_backup_time[0] is not obj.__undef__:
            assert isinstance(obj._last_backup_time[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._last_backup_time[0], type(obj._last_backup_time[0])))
            common.validate_format(obj._last_backup_time[0], "None", None, None)
        obj._last_backup_set_uuid = (data.get("lastBackupSetUUID", obj.__undef__), dirty)
        if obj._last_backup_set_uuid[0] is not None and obj._last_backup_set_uuid[0] is not obj.__undef__:
            assert isinstance(obj._last_backup_set_uuid[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._last_backup_set_uuid[0], type(obj._last_backup_set_uuid[0])))
            common.validate_format(obj._last_backup_set_uuid[0], "None", None, None)
        obj._status = (data.get("status", obj.__undef__), dirty)
        if obj._status[0] is not None and obj._status[0] is not obj.__undef__:
            assert isinstance(obj._status[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._status[0], type(obj._status[0])))
            common.validate_format(obj._status[0], "None", None, None)
        obj._response = (data.get("response", obj.__undef__), dirty)
        if obj._response[0] is not None and obj._response[0] is not obj.__undef__:
            assert isinstance(obj._response[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._response[0], type(obj._response[0])))
            common.validate_format(obj._response[0], "None", None, None)
        obj._pending_action = (data.get("pendingAction", obj.__undef__), dirty)
        if obj._pending_action[0] is not None and obj._pending_action[0] is not obj.__undef__:
            assert isinstance(obj._pending_action[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._pending_action[0], type(obj._pending_action[0])))
            common.validate_format(obj._pending_action[0], "None", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super().to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "backup_worker_state" == "type" or (self.backup_worker_state is not self.__undef__ and (not (dirty and not self._backup_worker_state[1]))):
            dct["backupWorkerState"] = dictify(self.backup_worker_state)
        if "last_update_timestamp" == "type" or (self.last_update_timestamp is not self.__undef__ and (not (dirty and not self._last_update_timestamp[1]))):
            dct["lastUpdateTimestamp"] = dictify(self.last_update_timestamp)
        if "total_number_of_backups_taken" == "type" or (self.total_number_of_backups_taken is not self.__undef__ and (not (dirty and not self._total_number_of_backups_taken[1]))):
            dct["totalNumberOfBackupsTaken"] = dictify(self.total_number_of_backups_taken)
        if "last_backup_time" == "type" or (self.last_backup_time is not self.__undef__ and (not (dirty and not self._last_backup_time[1]))):
            dct["lastBackupTime"] = dictify(self.last_backup_time)
        if "last_backup_set_uuid" == "type" or (self.last_backup_set_uuid is not self.__undef__ and (not (dirty and not self._last_backup_set_uuid[1]))):
            dct["lastBackupSetUUID"] = dictify(self.last_backup_set_uuid)
        if "status" == "type" or (self.status is not self.__undef__ and (not (dirty and not self._status[1]))):
            dct["status"] = dictify(self.status)
        if "response" == "type" or (self.response is not self.__undef__ and (not (dirty and not self._response[1]))):
            dct["response"] = dictify(self.response)
        if "pending_action" == "type" or (self.pending_action is not self.__undef__ and (not (dirty and not self._pending_action[1]))):
            dct["pendingAction"] = dictify(self.pending_action)
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._backup_worker_state = (self._backup_worker_state[0], True)
        self._last_update_timestamp = (self._last_update_timestamp[0], True)
        self._total_number_of_backups_taken = (self._total_number_of_backups_taken[0], True)
        self._last_backup_time = (self._last_backup_time[0], True)
        self._last_backup_set_uuid = (self._last_backup_set_uuid[0], True)
        self._status = (self._status[0], True)
        self._response = (self._response[0], True)
        self._pending_action = (self._pending_action[0], True)

    def is_dirty(self):
        return any([self._backup_worker_state[1], self._last_update_timestamp[1], self._total_number_of_backups_taken[1], self._last_backup_time[1], self._last_backup_set_uuid[1], self._status[1], self._response[1], self._pending_action[1]])

    def is_dirty_list(self, prop_name, private_var):
        if isinstance(prop_name, list) and prop_name and hasattr(prop_name[0], 'type'):
            for item in prop_name:
                if isinstance(item, list):
                    if self.is_dirty_list(item) or item.is_dirty():
                        return True
                elif item.is_dirty():
                    return True
        else:
            return private_var[1]
        return False

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, MSSqlIncrementalExportBackupWorkerRuntime):
            return False
        return super().__eq__(other) and \
               self.backup_worker_state == other.backup_worker_state and \
               self.last_update_timestamp == other.last_update_timestamp and \
               self.total_number_of_backups_taken == other.total_number_of_backups_taken and \
               self.last_backup_time == other.last_backup_time and \
               self.last_backup_set_uuid == other.last_backup_set_uuid and \
               self.status == other.status and \
               self.response == other.response and \
               self.pending_action == other.pending_action

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return id(self)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def backup_worker_state(self):
        """
        Indicates the current state of the backup worker. *(permitted values:
        ACTIVE, INACTIVE, FAULTED, UNKNOWN)*

        :rtype: ``str``
        """
        return self._backup_worker_state[0]

    @backup_worker_state.setter
    def backup_worker_state(self, value):
        self._backup_worker_state = (value, True)

    @property
    def last_update_timestamp(self):
        """
        Timestamp of the last update to the status.

        :rtype: ``str``
        """
        return self._last_update_timestamp[0]

    @last_update_timestamp.setter
    def last_update_timestamp(self, value):
        self._last_update_timestamp = (value, True)

    @property
    def total_number_of_backups_taken(self):
        """
        Total number of backups the backup worker has taken.

        :rtype: ``int``
        """
        return self._total_number_of_backups_taken[0]

    @total_number_of_backups_taken.setter
    def total_number_of_backups_taken(self, value):
        self._total_number_of_backups_taken = (value, True)

    @property
    def last_backup_time(self):
        """
        Timestamp of the last backup completed by the backup worker.

        :rtype: ``str``
        """
        return self._last_backup_time[0]

    @last_backup_time.setter
    def last_backup_time(self, value):
        self._last_backup_time = (value, True)

    @property
    def last_backup_set_uuid(self):
        """
        UUID of the database backup that was taken by the backup worker.

        :rtype: ``str``
        """
        return self._last_backup_set_uuid[0]

    @last_backup_set_uuid.setter
    def last_backup_set_uuid(self, value):
        self._last_backup_set_uuid = (value, True)

    @property
    def status(self):
        """
        The status of the backup worker run.

        :rtype: ``str``
        """
        return self._status[0]

    @status.setter
    def status(self, value):
        self._status = (value, True)

    @property
    def response(self):
        """
        Response taken based on the status of the backup worker run.

        :rtype: ``str``
        """
        return self._response[0]

    @response.setter
    def response(self, value):
        self._response = (value, True)

    @property
    def pending_action(self):
        """
        User action required to resolve any error that the backup worker run
        encountered.

        :rtype: ``str``
        """
        return self._pending_action[0]

    @pending_action.setter
    def pending_action(self, value):
        self._pending_action = (value, True)

