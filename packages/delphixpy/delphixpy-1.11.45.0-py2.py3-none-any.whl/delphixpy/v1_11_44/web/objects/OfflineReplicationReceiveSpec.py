#
# Copyright 2025 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-offline-replication-receive-spec.json
#
# Do not edit this file manually!
#

from delphixpy.v1_11_44.web.objects.UserObject import UserObject
from delphixpy.v1_11_44 import common

class __Undef:
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

class OfflineReplicationReceiveSpec(UserObject):
    """
    *(extends* :py:class:`v1_11_44.web.vo.UserObject` *)* Offline Replication
    Receive setup.
    """
    def __init__(self, undef_enabled=True):
        super().__init__()
        self._type = ("OfflineReplicationReceiveSpec", True)
        self._description = (self.__undef__, True)
        self._nfs_share = (self.__undef__, True)
        self._tag = (self.__undef__, True)
        self._automatic_replication = (self.__undef__, True)
        self._schedule = (self.__undef__, True)


    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super().from_dict(data, dirty, undef_enabled)
        obj._description = (data.get("description", obj.__undef__), dirty)
        if obj._description[0] is not None and obj._description[0] is not obj.__undef__:
            assert isinstance(obj._description[0], str), ("Expected one of ['string', 'null'], but got %s of type %s" % (obj._description[0], type(obj._description[0])))
            common.validate_format(obj._description[0], "None", None, 4096)
        obj._nfs_share = (data.get("nfsShare", obj.__undef__), dirty)
        if obj._nfs_share[0] is not None and obj._nfs_share[0] is not obj.__undef__:
            assert isinstance(obj._nfs_share[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._nfs_share[0], type(obj._nfs_share[0])))
            common.validate_format(obj._nfs_share[0], "None", 3, 4096)
        obj._tag = (data.get("tag", obj.__undef__), dirty)
        if obj._tag[0] is not None and obj._tag[0] is not obj.__undef__:
            assert isinstance(obj._tag[0], str), ("Expected one of ['string'], but got %s of type %s" % (obj._tag[0], type(obj._tag[0])))
            common.validate_format(obj._tag[0], "None", 1, 256)
        obj._automatic_replication = (data.get("automaticReplication", obj.__undef__), dirty)
        if obj._automatic_replication[0] is not None and obj._automatic_replication[0] is not obj.__undef__:
            assert isinstance(obj._automatic_replication[0], bool), ("Expected one of ['boolean'], but got %s of type %s" % (obj._automatic_replication[0], type(obj._automatic_replication[0])))
            common.validate_format(obj._automatic_replication[0], "None", None, None)
        obj._schedule = (data.get("schedule", obj.__undef__), dirty)
        if obj._schedule[0] is not None and obj._schedule[0] is not obj.__undef__:
            assert isinstance(obj._schedule[0], str), ("Expected one of ['string', 'null'], but got %s of type %s" % (obj._schedule[0], type(obj._schedule[0])))
            common.validate_format(obj._schedule[0], "None", 1, 256)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super().to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "description" == "type" or (self.description is not self.__undef__ and (not (dirty and not self._description[1]) or self.is_dirty_list(self.description, self._description) or belongs_to_parent)):
            dct["description"] = dictify(self.description)
        if "nfs_share" == "type" or (self.nfs_share is not self.__undef__ and (not (dirty and not self._nfs_share[1]) or self.is_dirty_list(self.nfs_share, self._nfs_share) or belongs_to_parent)):
            dct["nfsShare"] = dictify(self.nfs_share)
        if "tag" == "type" or (self.tag is not self.__undef__ and (not (dirty and not self._tag[1]) or self.is_dirty_list(self.tag, self._tag) or belongs_to_parent)):
            dct["tag"] = dictify(self.tag)
        if "automatic_replication" == "type" or (self.automatic_replication is not self.__undef__ and (not (dirty and not self._automatic_replication[1]) or self.is_dirty_list(self.automatic_replication, self._automatic_replication) or belongs_to_parent)):
            dct["automaticReplication"] = dictify(self.automatic_replication)
        elif belongs_to_parent and self.automatic_replication is self.__undef__:
            dct["automaticReplication"] = False
        if "schedule" == "type" or (self.schedule is not self.__undef__ and (not (dirty and not self._schedule[1]) or self.is_dirty_list(self.schedule, self._schedule) or belongs_to_parent)):
            dct["schedule"] = dictify(self.schedule)
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._description = (self._description[0], True)
        self._nfs_share = (self._nfs_share[0], True)
        self._tag = (self._tag[0], True)
        self._automatic_replication = (self._automatic_replication[0], True)
        self._schedule = (self._schedule[0], True)

    def is_dirty(self):
        return any([self._description[1], self._nfs_share[1], self._tag[1], self._automatic_replication[1], self._schedule[1]])

    def is_dirty_list(self, prop_name, private_var):
        if isinstance(prop_name, list) and prop_name and hasattr(prop_name[0], 'type'):
            for item in prop_name:
                if isinstance(item, list):
                    if self.is_dirty_list(item) or item.is_dirty():
                        return True
                elif item.is_dirty():
                    return True
        else:
            return private_var[1]
        return False

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, OfflineReplicationReceiveSpec):
            return False
        return super().__eq__(other) and \
               self.description == other.description and \
               self.nfs_share == other.nfs_share and \
               self.tag == other.tag and \
               self.automatic_replication == other.automatic_replication and \
               self.schedule == other.schedule

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return id(self)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def description(self):
        """
        Description of this replication spec.

        :rtype: ``str`` *or* ``null``
        """
        return self._description[0]

    @description.setter
    def description(self, value):
        self._description = (value, True)

    @property
    def nfs_share(self):
        """
        NFS Share for offline replication data transfer.

        :rtype: ``str``
        """
        return self._nfs_share[0]

    @nfs_share.setter
    def nfs_share(self, value):
        self._nfs_share = (value, True)

    @property
    def tag(self):
        """
        Globally unique identifier for this replication spec. This tag should
        correspond to an identical tag of an offline replication send spec.

        :rtype: ``str``
        """
        return self._tag[0]

    @tag.setter
    def tag(self, value):
        self._tag = (value, True)

    @property
    def automatic_replication(self):
        """
        Indication whether the replication spec schedule is enabled or not.

        :rtype: ``bool``
        """
        return self._automatic_replication[0]

    @automatic_replication.setter
    def automatic_replication(self, value):
        self._automatic_replication = (value, True)

    @property
    def schedule(self):
        """
        Replication schedule in the form of a quartz-formatted string.

        :rtype: ``str`` *or* ``null``
        """
        return self._schedule[0]

    @schedule.setter
    def schedule(self, value):
        self._schedule = (value, True)

