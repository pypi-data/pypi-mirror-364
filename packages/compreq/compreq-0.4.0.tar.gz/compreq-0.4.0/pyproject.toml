[project]
name = "compreq"
requires-python = "<4,>=3.10"
version = "0.4.0"
description = "A library for dynamically computing Python requirements, to keep them up-to-date."
authors = [
    { name = "Jesper Nielsen", email = "jespernielsen1982+compreq@gmail.com" }
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/jesnie/compreq"
repository = "https://github.com/jesnie/compreq"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Typing :: Typed",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "beautifulsoup4<5,>=4.11.0",
    "packaging<26,>=24.1",
    "pip<26,>=24.1",
    "python-dateutil<3,>=2.7.0",
    "requests<3,>=2.30.0",
    "tomlkit<0.14,>=0.11.0",
    "typing-extensions<5,>=4.12.0",
    "virtualenv<21,>=20.26.0",
]

[dependency-groups]
dev = [
    "mypy<1.18,>=1.17",
    "pytest<8.5,>=8.4",
    "pytest-asyncio<1.2,>=1.1",
    "ruff<0.12.6,>=0.12.5",
    "taskipy<1.15,>=1.14",
    "types-beautifulsoup4<5,>=4.10",
    "types-python-dateutil<3,>=0.1.0",
    "types-requests<3,>=2.30",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
  "ARG",  # Unused arguments...
  "ARG002",  # Unused method argument: `context`
  "C901",  # `get_lazy_release_set` is too complex
  "COM812",  # Not recommended with formatting
  "D",  # DocStrings
  "E501",  # Line too long
  "EM101",  # Exception must not use a string literal, assign to variable first
  "EM102",  # Exception must not use an f-string literal, assign to variable first
  "FBT",  # Boolean value in call
  "PLR0912",  # Too many branches
  "PLR0913",  # Too many arguments in function definition (7 > 5)
  "PLR0915",  # Too many statements (62 > 50)
  "PLR2004",  # Magic value used in comparison, consider replacing `2` with a constant variable
  "PLW0603",  # Using the global statement to update `_enabled` is discouraged
  "PLW2901",  # `for` loop variable `name` overwritten by assignment target
  "PT006",  # Wrong type passed to first argument of `pytest.mark.parametrize`; expected `tuple`
  "PT011",  # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
  "PT013",  # Incorrect import of `pytest`; use `import pytest` instead
  "PT018",  # Assertion should be broken down into multiple parts
  "PTH123",  # `open()` should be replaced by `Path.open()`
  "PYI025",  # Use `from collections.abc import Set as AbstractSet` to avoid confusion with the `set` builtin
  "RET505",  # Unnecessary `else` after `return` statement
  "S101",  # Use of `assert` detected
  "S610",  # Use of Django `extra` can lead to SQL injection vulnerabilities
  "SIM114",  # Combine `if` branches using logical `or` operator
  "SLF001",  # Private member accessed: `_path`
  "T201",  # `print` found
  "TC001",  # Move application import `compreq.contexts.DistributionContext` into a type-checking block
  "TC002",  # Move third-party import `packaging.version.Version` into a type-checking block
  "TC003",  # Move standard library import `collections.abc.Iterator` into a type-checking block
  "TRY003",  # Avoid specifying long messages outside the exception class
  "TRY301",  # Abstract `raise` to an inner functio
  "UP015",  # Unnecessary modes
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "DTZ001",  # `datetime.datetime()` called without a `tzinfo` argument
]

[tool.mypy]
python_version = "3.10"
show_error_codes = true
# First we turn on *all the checks*, and then we turn off those that are too annoying.
strict = true
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "_pytest.*",
    "exceptiongroup.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.taskipy.tasks]
ruff_fmt = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ruff format XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    ruff format compreq tests set_version.py requirements.py
"""
ruff_fmt_check = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ruff format XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    ruff format --check compreq tests set_version.py requirements.py
"""
ruff_lint = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ruff lint XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    ruff check --fix-only compreq tests set_version.py requirements.py
"""
ruff_lint_check = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ruff lint XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    ruff check compreq tests set_version.py requirements.py
"""
mypy = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX mypy XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    mypy compreq tests set_version.py requirements.py
"""
pytest = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX pytest XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    pytest tests
"""

format = "task ruff_fmt && task ruff_lint"
format_check = "task ruff_fmt_check"
lint = "task format_check && task mypy && task ruff_lint_check"
test = "task lint && task pytest"
format_and_lint = "task format && task lint"
format_and_test = "task format && task test"
