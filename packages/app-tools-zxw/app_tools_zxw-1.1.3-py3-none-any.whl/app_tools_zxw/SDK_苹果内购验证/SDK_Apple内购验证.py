from app_tools_zxw.SDK_苹果内购验证 import responseModel订阅, responseModel非订阅
import asyncio
import datetime
import time
import itunesiap

url_production = "https://buy.itunes.apple.com/verifyReceipt"
url_sandbox = "https://sandbox.itunes.apple.com/verifyReceipt"
共享密钥 = "d30f0080cbba428892fd494d6fa8b855"  # 为非自动订阅式购买必传

错误码 = {
    0: "成功",
    21000: "App Store无法读取你提供的JSON数据",
    21002: "收据数据不符合格式",
    21003: "收据无法被验证",
    21004: "你提供的共享密钥和账户的共享密钥不一致",
    21005: "收据服务器当前不可用",
    21006: "收据是有效的，但订阅服务已经过期。当收到这个信息时，解码后的收据信息也包含在返回内容中",
    21007: "收据信息是测试用（sandbox），但却被发送到产品环境中验证",
    21008: "收据信息是产品环境中使用，但却被发送到测试环境中验证"
}


async def check购买(recipt, is订阅=True):
    try:
        response = await itunesiap.aioverify(recipt, password=共享密钥,
                                             env=itunesiap.env.review)
        resDict = response.__dict__["_"]
        if is订阅:
            resPYD = responseModel订阅.response_data(**resDict)
        else:
            resPYD = responseModel非订阅.response_data(**resDict)
        return [True, resPYD]

    except itunesiap.exc.InvalidReceipt as e:
        tmp = e.__dict__["_"]
        if tmp.get("status", None) is not None:
            res = 错误码.get(tmp["status"], tmp["status"])
        else:
            res = str(e)
        return [False, res]


async def 非订阅校验(recipt, transaction_id) -> bool:
    # 服务器请求
    res = await check购买(recipt, is订阅=False)
    if res[0] is False:
        return False
    else:
        appleRes = res[1]

    # 校验返回值
    is购买 = False
    for item in appleRes.receipt.in_app:
        if item.transaction_id == transaction_id:
            is购买 = True
            break
    return is购买


async def 订阅校验(appleRes: responseModel订阅.response_data, transaction_id) -> float:
    # 校验订阅是否到期
    now = time.time() * 1000
    订阅到期时间 = now - 2 * 60 * 60 * 1000

    # # 1. 先查latest_receipt_info
    print("先查latest_receipt_info")
    for item in appleRes.latest_receipt_info:
        if item.original_transaction_id == transaction_id:
            # print("id相等：", item.expires_date, " --- ", datetime.datetime.fromtimestamp(item.expires_date_ms / 1000))
            if item.expires_date_ms > 订阅到期时间:
                print("此条记录为未过期记录，", datetime.datetime.fromtimestamp(item.expires_date_ms / 1000))
                订阅到期时间 = item.expires_date_ms

    if 订阅到期时间 > now:
        return 订阅到期时间 / 1000

    # # 2.latest_receipt_info不存在时,查询in_app
    print("latest_receipt_info不存在时,查询in_app")
    for item in appleRes.receipt.in_app:
        if item.original_transaction_id == transaction_id:
            # print("id相等：", item.expires_date, " --- ", datetime.datetime.fromtimestamp(item.expires_date_ms / 1000))
            if item.expires_date_ms > 订阅到期时间:
                print("此条记录为未过期记录，", datetime.datetime.fromtimestamp(item.expires_date_ms / 1000))
                订阅到期时间 = item.expires_date_ms

    return 订阅到期时间 / 1000


if __name__ == '__main__':
    recipt = ""
    transaction_id = "1000000694853763"
    originalTransactionIdentifierIOS = "1000000694851733"


    async def tmp():
        rex = await check购买(recipt,is订阅=True)
        rs = await 订阅校验(rex[1], originalTransactionIdentifierIOS)
        x = datetime.datetime.fromtimestamp(rs)
        print(x)


    loop = asyncio.get_event_loop()
    loop.run_until_complete(tmp())
