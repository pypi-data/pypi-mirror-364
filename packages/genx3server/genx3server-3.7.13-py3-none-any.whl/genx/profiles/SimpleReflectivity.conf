[solver]
km = 0.6
kr =  0.6
use pop mult = False
pop mult = 3
pop size = 50
use max generations = False
max generations = 500
max generation mult = 6
use start guess = True
use boundaries = False
sleep time = 0.5
max log elements = 100000
use parallel processing = False
parallel processes = 2
parallel chunksize = 25
use autosave = False
save all evals = False
autosave interval = 10
create trial = best_1_bin
errorbar level = 1.05
allowed fom discrepancy = 1e-10
ignore fom nan = True
ignore fom inf = True
figure of merit = log
limit fit range = False
fit xmin = 0.0
fit xmax = 5.0

[data commands]
names = A Example;Default;Simulation;Sustematic Errors
x commands = x+33;x;arange(0.01, 6, 0.01);x
y commands = y/1e5;y;arange(0.01, 6, 0.01)*0;y
e commands = e/2.;e;arange(0.01, 6, 0.01)*0;rms(e, fpe(1.0, 0.02), 0.01*dydx())

[data handling]
toggle show = True
data loader = auto

[parameters]
registred classes = Layer;Stack;Sample;Instrument;UserVars;Surface;Bulk
set func = set

[plugins]
loaded plugins = SimpleReflectivity;SimpleLayer

[data plot]
zoom = False
autoscale = True
y scale = log
x scale = lin

[fom plot]
zoom = False
autoscale = True
y scale = lin
x scale = lin

[pars plot]
zoom = False
autoscale = True
y scale = lin
x scale = lin

[fom scan plot]
zoom = False
autoscale = True
y scale = lin
x scale = lin

[sample plot]
zoom = False
autoscale = True
y scale = lin
x scale = lin
data derived color = False
show single model = False
legend outside = False
show imag = False

[startup]
show profiles = True
script = 	['from numpy import *',
    'import models.spec_nx as model',
    'from models.utils import UserVars, fp, fw, bc, bw',
    '',
    '# BEGIN Instrument DO NOT CHANGE',
    'from models.utils import create_fp, create_fw',
    "inst = model.Instrument(probe='neutron', wavelength=1.54, coords='q', I0=1, res=0, restype='no conv', respoints=11, resintrange=3, beamw=0.1, footype='no corr', samplelen=10, incangle=0.0, pol='uu', Ibkg=0, tthoff=0.0,)",
    'inst_fp = create_fp(inst.wavelength); inst_fw = create_fw(inst.wavelength)',
    'fp.set_wavelength(inst.wavelength); fw.set_wavelength(inst.wavelength)',
    '# END Instrument',
    '',
    '# BEGIN Sample DO NOT CHANGE',
    'Amb = model.Layer(f=0j, b=0.0, dens=0.1, magn=0.0, d=0, sigma=0, xs_ai=0.0, magn_ang=0.0)',
    'Surface_Layer = model.Layer(f=fp.Fe*2+fp.O*2, b=bc.Fe*2+bc.O*2, dens=0.022027078484556067, magn=0.0, d=20.0, sigma=5.0, xs_ai=0.0, magn_ang=0.0)',
    'Layer_1 = model.Layer(f=fp.Fe*1, b=bc.Fe*1, dens=0.08491299349128338, magn=0.0, d=100.0, sigma=5.0, xs_ai=0.0, magn_ang=0.0)',
    'Interface_Layer = model.Layer(f=fp.Si*1+fp.O*2, b=bc.Si*1+bc.O*2, dens=0.048859138835669884, magn=0.0, d=20.0, sigma=5.0, xs_ai=0.0, magn_ang=0.0)',
    '',
    'Sub = model.Layer(f=fp.Si*1, b=bc.Si*1, dens=0.04995982812477898, magn=0.0, d=0, sigma=5.0, xs_ai=0.0, magn_ang=0.0)',
    '',
    'Top = model.Stack(Layers=[Surface_Layer ], Repetitions = 1)',
    '',
    'ML = model.Stack(Layers=[Layer_1 ], Repetitions = 1)',
    '',
    'Bot = model.Stack(Layers=[Interface_Layer ], Repetitions = 1)',
    '',
    'sample = model.Sample(Stacks = [Bot, ML, Top], Ambient = Amb, Substrate = Sub)',
    '# END Sample',
    '',
    '# BEGIN Parameters DO NOT CHANGE',
    'cp = UserVars()',
    '# END Parameters',
    '',
    'SLD = []',
    'def Sim(data):',
    '    I = []',
    '    SLD[:] = []',
    '    # BEGIN Dataset 0 DO NOT CHANGE',
    '    d = data[0]',
    '    I.append(sample.SimSpecular(d.x, inst))',
    '    if _sim: SLD.append(sample.SimSLD(None, None, inst))',
    '    # END Dataset 0',
    '    return I']

