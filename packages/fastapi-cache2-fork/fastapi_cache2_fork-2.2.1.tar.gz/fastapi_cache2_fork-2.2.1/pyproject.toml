[project]
name = "fastapi-cache2-fork"
version = "2.2.1"
description = "Cache for FastAPI. An opinionated fork of fastapi-cache library that uses msgspec for json encoding/decoding where possible"
authors = [
    { name = "long2ice", email = "long2ice@gmail.com" },
    { name = "Yolley", email = "comingreal@gmail.com" },
]
requires-python = "~=3.12"
readme = "README.md"
license = "Apache-2.0"
keywords = [
    "fastapi",
    "cache",
    "caching",
]
dependencies = [
    "fastapi",
    "msgspec>=0,<1",
    "pydantic>=2.5.2,<3",
]
packages = [{ include = "fastapi_cache" }]

[project.optional-dependencies]
redis = ["redis>=5,<7"]
memcache = ["aiomcache>=0,<1"]
dynamodb = ["aiobotocore>=2.13.1,<3"]
all = [
    "redis>=5,<7",
    "aiomcache>=0,<1",
    "aiobotocore>=2.13.1,<3",
]

[project.urls]
Homepage = "https://github.com/Yolley/fastapi-cache"
Repository = "https://github.com/Yolley/fastapi-cache.git"
Documentation = "https://github.com/Yolley/fastapi-cache"

[dependency-groups]
dev = [
    "asgi-lifespan",
    "anyio",
    "coverage>=6.5,<8.0",
    "httpx",
    "pendulum>=3.0.0,<4",
    "pytest",
    "requests",
    "tox>=4.11.3,<5",
    "uvicorn",
    "tox-uv>=1.25.0",
    "git-cliff>=2.8.0",
]
linting = [
    "mypy>=1.5.1,<2",
    "pyright>=1.1.306,<2",
    "ruff>=0.11.7,<1",
    "types-aiobotocore[dynamodb]>=2.7.0,<3",
    "types-redis>=4.6.0.10,<5",
]
console = [
    "ipython>=9.0.0"
]

[tool.uv]
default-groups = [
    "dev",
    "linting",
]

[tool.hatch.build.targets.sdist]
include = [
    "fastapi_cache",
    "LICENSE",
    "README.md",
]

[tool.hatch.build.targets.wheel]
include = [
    "fastapi_cache",
    "LICENSE",
    "README.md",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
files = ["."]
python_version = "3.12"
# equivalent of --strict
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = "examples.*.main"
ignore_errors = true

[tool.pyright]
strict = ["fastapi_cache", "tests"]
pythonVersion = "3.12"

[tool.pytest.ini_options]
addopts = "-p no:warnings"

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    "E", # pycodestyle errors
    "F", # pyflakes
    "FLY", # flynt
    "FURB", # refurb
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "N", # pep8-naming
    "PERF", # perflint
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "RUF", # ruff-specific-rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "TC", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]
ignore = ["E501", "ASYNC109"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["fastapi_cache", "tests"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.field_validator"]

[tool.git-cliff.changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
This project uses [git-cliff](https://git-cliff.org/).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = true
skip_tags = "0\\.\\d+\\.\\d+"
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
  { message = "^style", group = "<!-- 5 -->üé® Styling" },
  { message = "^test", group = "<!-- 6 -->üß™ Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(changelog\\)", skip = true },
  { message = "^Merge", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
  { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
  { message = ".*", group = "<!-- 10 -->üíº Other" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
