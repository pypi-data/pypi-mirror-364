[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "mlflow_polylog"
version = "0.0.1"
description = "A polymorphic model logging utility for MLflow that enables seamless logging of machine learning models from various libraries without requiring explicit type specification or installation of all supported frameworks. It dynamically detects installed libraries and maps model types to the appropriate MLflow logging functions."
authors = [
    {name = "Barkov Mikhail", email = "mik.bar@tutamail.com"},
]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    'mlflow>=2.13.0',
    'importlib-metadata; python_version>="3.10"',
]

[project.optional-dependencies]
tests = [
    "pytest==8.3.4", 
    "pytest-lazy-fixtures==1.1.2",
    # Optional ML libraries for testing
    "catboost",
    "lightgbm", 
    "xgboost",
    "scikit-learn",
]
lint = [
    "ruff==0.11.13",
    "flake8==7.2.0",
    "wemake-python-styleguide==1.1.0",
    "flake8-pyproject==1.2.3",
]
typing = [
    "mypy==1.15.0",
]

[tool.setuptools.packages.find]
include = [ "mlflow_polylog" ]

[tool.ruff]
preview = true
fix = true
target-version = "py310"
line-length = 90

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # mccabe complexity checker
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
external = [ "WPS" ]

flake8-import-conventions.banned-from = [ "ast" ]
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"defaults.py" = ["PLC0415", "PLR0912", "C901"]
"type_mapping.py" = ["TRY"]

[tool.flake8]
max-line-length = 90
per-file-ignores = [
  "mlflow_polylog/type_mapping.py:WPS110",
  "mlflow_polylog/__init__.py:WPS412",
  "mlflow_polylog/defaults.py:WPS201,WPS231,WPS301,WPS473",
]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict = true
local_partial_types = true
warn_unreachable = true
warn_return_any = false
disallow_subclassing_any = false

disable_error_code = ["attr-defined"]

enable_error_code = [
  "truthy-bool",
  "truthy-iterable",
  "redundant-expr",
  "unused-awaitable",
  "possibly-undefined",
  "redundant-self",
  "unimported-reveal",
  "deprecated",
]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
]
