{
  "hash": "98f441622c09cb2923454ac922648b08",
  "result": {
    "markdown": "---\nengine: knitr\n---\n\n\n\n\n# GEV responses\n\nIn this tutorial, we illustrate how to set up a distributional regression model with the generalized extreme value distribution as a response distribution. First, we simulate some data in R:\n\n- The location parameter ($\\mu$) is a function of an intercept and a non-linear covariate effect.\n- The scale parameter ($\\sigma$) is a function of an intercept and a linear effect and uses a log-link.\n- The shape or concentration parameter ($\\xi$) is a function of an intercept and a linear effect.\n\nAfter simulating the data, we can configure the model with a single call to the `rliesel::liesel()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rliesel)\nlibrary(VGAM)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: stats4\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: splines\n```\n:::\n\n```{.r .cell-code}\nset.seed(13)\n\nn <- 1000\n\nx0 <- runif(n)\nx1 <- runif(n)\nx2 <- runif(n)\n\ny <- rgev(\n  n,\n  location = 0 + sin(2 * pi * x0),\n  scale = exp(-3 + x1),\n  shape = 0.1 + x2\n)\n\nplot(y)\n```\n\n::: {.cell-output-display}\n![](03-gev_files/figure-commonmark/model-1.png)\n:::\n\n```{.r .cell-code}\nmodel <- liesel(\n  response = y,\n  distribution = \"GeneralizedExtremeValue\",\n  predictors = list(\n    loc = predictor(~ s(x0)),\n    scale = predictor(~ x1, inverse_link = \"Exp\"),\n    concentration = predictor(~ x2)\n  )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nResponse 'y' found in environment, but not data, using environment.\n```\n:::\n:::\n\n\nNow, we can continue in Python and use the `lsl.dist_reg_mcmc()` function to set up a sampling algorithm with IWLS kernels for the regression coefficients ($\\boldsymbol{\\beta}$) and a Gibbs kernel for the smoothing parameter ($\\tau^2$) of the spline.\n\nThe support of the GEV distribution changes with the parameter values (compare [Wikipedia](https://en.wikipedia.org/wiki/Generalized_extreme_value_distribution)). To ensure that the initial parameters support the observed data we set $xi = 0.1$ and disable jittering of the variance and regression parameters.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport liesel.model as lsl\nimport jax.numpy as jnp\n\nmodel = r.model\n\n# concentration == 0.0 seems to break the sampler\nmodel.vars[\"concentration_p0_beta\"].value = jnp.array([0.1, 0.0])\n\nbuilder = lsl.dist_reg_mcmc(model, seed=42, num_chains=4, apply_jitter=False)\nbuilder.set_duration(warmup_duration=1000, posterior_duration=1000)\n\nengine = builder.build()\nengine.sample_all_epochs()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  0%|                                                  | 0/3 [00:00<?, ?chunk/s]\n 33%|##############                            | 1/3 [00:05<00:11,  5.90s/chunk]\n100%|##########################################| 3/3 [00:05<00:00,  1.97s/chunk]\n\n  0%|                                                  | 0/1 [00:00<?, ?chunk/s]\n100%|########################################| 1/1 [00:00<00:00, 1700.16chunk/s]\n\n  0%|                                                  | 0/2 [00:00<?, ?chunk/s]\n100%|########################################| 2/2 [00:00<00:00, 1605.17chunk/s]\n\n  0%|                                                  | 0/4 [00:00<?, ?chunk/s]\n100%|########################################| 4/4 [00:00<00:00, 1729.43chunk/s]\n\n  0%|                                                  | 0/8 [00:00<?, ?chunk/s]\n100%|#########################################| 8/8 [00:00<00:00, 398.16chunk/s]\n\n  0%|                                                 | 0/20 [00:00<?, ?chunk/s]\n 65%|#########################3             | 13/20 [00:00<00:00, 114.00chunk/s]\n100%|########################################| 20/20 [00:00<00:00, 81.89chunk/s]\n\n  0%|                                                  | 0/2 [00:00<?, ?chunk/s]\n100%|########################################| 2/2 [00:00<00:00, 1942.26chunk/s]\n\n  0%|                                                 | 0/40 [00:00<?, ?chunk/s]\n 32%|############6                          | 13/40 [00:00<00:00, 114.44chunk/s]\n 62%|#########################               | 25/40 [00:00<00:00, 69.80chunk/s]\n 82%|#################################       | 33/40 [00:00<00:00, 63.21chunk/s]\n100%|########################################| 40/40 [00:00<00:00, 60.08chunk/s]\n100%|########################################| 40/40 [00:00<00:00, 65.07chunk/s]\n```\n:::\n:::\n\n\nSome tabular summary statistics of the posterior samples:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport liesel.goose as gs\n\nresults = engine.get_results()\ngs.Summary(results)\n```\n\n::: {.cell-output-display}\n<p><strong>Parameter summary:</strong></p>\n<table border=\"0\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>kernel</th>\n      <th>mean</th>\n      <th>sd</th>\n      <th>q_0.05</th>\n      <th>q_0.5</th>\n      <th>q_0.95</th>\n      <th>sample_size</th>\n      <th>ess_bulk</th>\n      <th>ess_tail</th>\n      <th>rhat</th>\n    </tr>\n    <tr>\n      <th>parameter</th>\n      <th>index</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">concentration_p0_beta</th>\n      <th>(0,)</th>\n      <td>kernel_00</td>\n      <td>0.104</td>\n      <td>0.054</td>\n      <td>0.016</td>\n      <td>0.103</td>\n      <td>0.193</td>\n      <td>4000</td>\n      <td>372.271</td>\n      <td>988.761</td>\n      <td>1.004</td>\n    </tr>\n    <tr>\n      <th>(1,)</th>\n      <td>kernel_00</td>\n      <td>0.964</td>\n      <td>0.099</td>\n      <td>0.796</td>\n      <td>0.967</td>\n      <td>1.121</td>\n      <td>4000</td>\n      <td>207.805</td>\n      <td>645.642</td>\n      <td>1.010</td>\n    </tr>\n    <tr>\n      <th rowspan=\"9\" valign=\"top\">loc_np0_beta</th>\n      <th>(0,)</th>\n      <td>kernel_03</td>\n      <td>0.469</td>\n      <td>0.207</td>\n      <td>0.121</td>\n      <td>0.469</td>\n      <td>0.807</td>\n      <td>4000</td>\n      <td>54.068</td>\n      <td>156.325</td>\n      <td>1.067</td>\n    </tr>\n    <tr>\n      <th>(1,)</th>\n      <td>kernel_03</td>\n      <td>-0.147</td>\n      <td>0.129</td>\n      <td>-0.358</td>\n      <td>-0.149</td>\n      <td>0.067</td>\n      <td>4000</td>\n      <td>51.923</td>\n      <td>105.754</td>\n      <td>1.081</td>\n    </tr>\n    <tr>\n      <th>(2,)</th>\n      <td>kernel_03</td>\n      <td>0.473</td>\n      <td>0.139</td>\n      <td>0.241</td>\n      <td>0.472</td>\n      <td>0.696</td>\n      <td>4000</td>\n      <td>85.108</td>\n      <td>129.521</td>\n      <td>1.037</td>\n    </tr>\n    <tr>\n      <th>(3,)</th>\n      <td>kernel_03</td>\n      <td>-0.008</td>\n      <td>0.073</td>\n      <td>-0.132</td>\n      <td>-0.005</td>\n      <td>0.113</td>\n      <td>4000</td>\n      <td>61.796</td>\n      <td>168.336</td>\n      <td>1.093</td>\n    </tr>\n    <tr>\n      <th>(4,)</th>\n      <td>kernel_03</td>\n      <td>0.472</td>\n      <td>0.070</td>\n      <td>0.362</td>\n      <td>0.470</td>\n      <td>0.589</td>\n      <td>4000</td>\n      <td>64.460</td>\n      <td>135.078</td>\n      <td>1.074</td>\n    </tr>\n    <tr>\n      <th>(5,)</th>\n      <td>kernel_03</td>\n      <td>0.458</td>\n      <td>0.031</td>\n      <td>0.412</td>\n      <td>0.457</td>\n      <td>0.512</td>\n      <td>4000</td>\n      <td>87.095</td>\n      <td>127.444</td>\n      <td>1.023</td>\n    </tr>\n    <tr>\n      <th>(6,)</th>\n      <td>kernel_03</td>\n      <td>-5.911</td>\n      <td>0.031</td>\n      <td>-5.964</td>\n      <td>-5.913</td>\n      <td>-5.862</td>\n      <td>4000</td>\n      <td>75.689</td>\n      <td>136.909</td>\n      <td>1.069</td>\n    </tr>\n    <tr>\n      <th>(7,)</th>\n      <td>kernel_03</td>\n      <td>0.375</td>\n      <td>0.069</td>\n      <td>0.253</td>\n      <td>0.375</td>\n      <td>0.488</td>\n      <td>4000</td>\n      <td>87.037</td>\n      <td>169.840</td>\n      <td>1.040</td>\n    </tr>\n    <tr>\n      <th>(8,)</th>\n      <td>kernel_03</td>\n      <td>-1.794</td>\n      <td>0.026</td>\n      <td>-1.837</td>\n      <td>-1.794</td>\n      <td>-1.753</td>\n      <td>4000</td>\n      <td>87.187</td>\n      <td>160.277</td>\n      <td>1.059</td>\n    </tr>\n    <tr>\n      <th>loc_np0_tau2</th>\n      <th>()</th>\n      <td>kernel_02</td>\n      <td>5.967</td>\n      <td>4.374</td>\n      <td>2.276</td>\n      <td>4.946</td>\n      <td>12.862</td>\n      <td>4000</td>\n      <td>3610.352</td>\n      <td>3848.888</td>\n      <td>1.001</td>\n    </tr>\n    <tr>\n      <th>loc_p0_beta</th>\n      <th>(0,)</th>\n      <td>kernel_04</td>\n      <td>-0.027</td>\n      <td>0.002</td>\n      <td>-0.031</td>\n      <td>-0.027</td>\n      <td>-0.023</td>\n      <td>4000</td>\n      <td>90.065</td>\n      <td>390.131</td>\n      <td>1.050</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">scale_p0_beta</th>\n      <th>(0,)</th>\n      <td>kernel_01</td>\n      <td>-3.093</td>\n      <td>0.059</td>\n      <td>-3.190</td>\n      <td>-3.090</td>\n      <td>-2.999</td>\n      <td>4000</td>\n      <td>151.457</td>\n      <td>348.065</td>\n      <td>1.057</td>\n    </tr>\n    <tr>\n      <th>(1,)</th>\n      <td>kernel_01</td>\n      <td>1.197</td>\n      <td>0.081</td>\n      <td>1.067</td>\n      <td>1.196</td>\n      <td>1.332</td>\n      <td>4000</td>\n      <td>246.643</td>\n      <td>530.955</td>\n      <td>1.038</td>\n    </tr>\n  </tbody>\n</table>\n<p><strong>Error summary:</strong></p>\n<table border=\"0\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>relative</th>\n    </tr>\n    <tr>\n      <th>kernel</th>\n      <th>error_code</th>\n      <th>error_msg</th>\n      <th>phase</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">kernel_00</th>\n      <th rowspan=\"2\" valign=\"top\">90</th>\n      <th rowspan=\"2\" valign=\"top\">nan acceptance prob</th>\n      <th>warmup</th>\n      <td>69</td>\n      <td>0.017</td>\n    </tr>\n    <tr>\n      <th>posterior</th>\n      <td>1</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">kernel_01</th>\n      <th rowspan=\"2\" valign=\"top\">90</th>\n      <th rowspan=\"2\" valign=\"top\">nan acceptance prob</th>\n      <th>warmup</th>\n      <td>32</td>\n      <td>0.008</td>\n    </tr>\n    <tr>\n      <th>posterior</th>\n      <td>0</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">kernel_03</th>\n      <th rowspan=\"2\" valign=\"top\">90</th>\n      <th rowspan=\"2\" valign=\"top\">nan acceptance prob</th>\n      <th>warmup</th>\n      <td>25</td>\n      <td>0.006</td>\n    </tr>\n    <tr>\n      <th>posterior</th>\n      <td>0</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">kernel_04</th>\n      <th rowspan=\"2\" valign=\"top\">90</th>\n      <th rowspan=\"2\" valign=\"top\">nan acceptance prob</th>\n      <th>warmup</th>\n      <td>23</td>\n      <td>0.006</td>\n    </tr>\n    <tr>\n      <th>posterior</th>\n      <td>0</td>\n      <td>0.000</td>\n    </tr>\n  </tbody>\n</table>\n:::\n:::\n\n\nAnd the corresponding trace plots:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig = gs.plot_trace(results, \"loc_p0_beta\")\n```\n\n::: {.cell-output-display}\n![](03-gev_files/figure-commonmark/traces-1.png)\n:::\n\n```{.python .cell-code}\nfig = gs.plot_trace(results, \"loc_np0_tau2\")\n```\n\n::: {.cell-output-display}\n![](03-gev_files/figure-commonmark/traces-2.png)\n:::\n\n```{.python .cell-code}\nfig = gs.plot_trace(results, \"loc_np0_beta\")\n```\n\n::: {.cell-output-display}\n![](03-gev_files/figure-commonmark/traces-3.png)\n:::\n\n```{.python .cell-code}\nfig = gs.plot_trace(results, \"scale_p0_beta\")\n```\n\n::: {.cell-output-display}\n![](03-gev_files/figure-commonmark/traces-4.png)\n:::\n\n```{.python .cell-code}\nfig = gs.plot_trace(results, \"concentration_p0_beta\")\n```\n\n::: {.cell-output-display}\n![](03-gev_files/figure-commonmark/traces-5.png)\n:::\n:::\n\n\nWe need to reset the index of the summary data frame before we can transfer it to R.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsummary = gs.Summary(results).to_dataframe().reset_index()\n```\n:::\n\n\nAfter transferring the summary data frame to R, we can process it with packages like dplyr and ggplot2. Here is a visualization of the estimated spline vs. the true function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(reticulate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'reticulate' was built under R version 4.4.1\n```\n:::\n\n```{.r .cell-code}\nsummary <- py$summary\n\nbeta <- summary %>%\n  filter(variable == \"loc_np0_beta\") %>%\n  group_by(var_index) %>%\n  summarize(mean = mean(mean)) %>%\n  ungroup()\n\nbeta <- beta$mean\nX <- py_to_r(model$vars[\"loc_np0_X\"]$value)\nestimate <- X %*% beta\n\ntrue <- sin(2 * pi * x0)\n\nggplot(data.frame(x0 = x0, estimate = estimate, true = true)) +\n  geom_line(aes(x0, estimate), color = palette()[2]) +\n  geom_line(aes(x0, true), color = palette()[4]) +\n  ggtitle(\"Estimated spline (red) vs. true function (blue)\") +\n  ylab(\"f\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-gev_files/figure-commonmark/spline-11.png)\n:::\n:::\n",
    "supporting": [
      "03-gev_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}