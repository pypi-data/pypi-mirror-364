# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from netpicker_client.models.job_read import JobRead

class TestJobRead(unittest.TestCase):
    """JobRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobRead:
        """Test JobRead
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobRead`
        """
        model = JobRead()
        if include_optional:
            return JobRead(
                crontab = netpicker_client.models.crontab.Crontab(
                    minute = '*', 
                    hour = '*', 
                    day_of_week = '*', 
                    day_of_month = '*', 
                    month_of_year = '*', ),
                interval = netpicker_client.models.interval.Interval(
                    every = 56, 
                    period = 'days', ),
                name = '',
                task = '',
                description = '',
                one_off = True,
                date_changed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                headers = {
                    'key' : ''
                    },
                args = [
                    null
                    ],
                kwargs = netpicker_client.models.kwargs.Kwargs(),
                queue = '',
                exchange = '',
                routing_key = '',
                expires = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                enabled = True,
                author = '',
                last_run_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                total_run_count = 56
            )
        else:
            return JobRead(
                name = '',
                task = '',
        )
        """

    def testJobRead(self):
        """Test JobRead"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
