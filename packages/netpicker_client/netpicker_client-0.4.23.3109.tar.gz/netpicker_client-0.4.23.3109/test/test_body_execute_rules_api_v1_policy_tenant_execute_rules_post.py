# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from netpicker_client.models.body_execute_rules_api_v1_policy_tenant_execute_rules_post import BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost

class TestBodyExecuteRulesApiV1PolicyTenantExecuteRulesPost(unittest.TestCase):
    """BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost:
        """Test BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost`
        """
        model = BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost()
        if include_optional:
            return BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost(
                devices = [
                    ''
                    ],
                policies = [
                    ''
                    ],
                rules = [
                    ''
                    ],
                tags = [
                    ''
                    ]
            )
        else:
            return BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost(
        )
        """

    def testBodyExecuteRulesApiV1PolicyTenantExecuteRulesPost(self):
        """Test BodyExecuteRulesApiV1PolicyTenantExecuteRulesPost"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
