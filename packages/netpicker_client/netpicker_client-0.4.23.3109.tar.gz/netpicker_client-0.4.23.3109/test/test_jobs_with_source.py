# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from netpicker_client.models.jobs_with_source import JobsWithSource

class TestJobsWithSource(unittest.TestCase):
    """JobsWithSource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobsWithSource:
        """Test JobsWithSource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobsWithSource`
        """
        model = JobsWithSource()
        if include_optional:
            return JobsWithSource(
                jobs = [
                    netpicker_client.models.job.Job(
                        id = '__init__/E/m_uufVPIPFhB9JcGRYnua_cdyyvLY8IzLpul91GcWjTkp6JIZDm7w0v1d_fVofvLFSjsmJnZAs0FmNI7kw9gsnYv3_8jSQL653YHp/tS9pb0ziLqFde9fYgAwdpfxa30zSi/CV5ODVavUrirVe5ba8KnjrgFdCDKF0BrF7V4D_0WnrjASmauGxv82lSsDjPv/TvLHTESHLVJR9yOYhYoFdb_pHptfJ5pvMYHuMk0kwwP3jcNFFkJauX/uaEi6ackMaS3kwA0zmvqSnN0dar1AWaIDRz1UlU5b53Km/__init__/N/__init__/OP9H1e6qA_5XNXovZ74Hk7ixUd6OxSV36mRZd7WCMSHkR6IA0GI3v6iVaNR7iJK08auxETS0lJ/q/__init__/__init__/w/iL/__init__/OY3ymNWZtZsGCx9PyxaC_86cBidE_7lvrMRxekSdyiKGjhDbF_unWYUqW4WQ0EQRpzZ0cAXhE2h75ANeBFE/__init__/NAdihOlM2ZQP2/__init__/L/__init__/__init__/__init__/k/q/__init__/A8sAPOQ_w0IOQtWfykpnotNQL5Bqhv8WjUoCOn2oMGXSpTx0dyd3clZh_BHiVmEUQC6iWY2lhmZ8Hh3J4pU3TEuv77tyx/_7SRusXVzrZ3JaluGKfz9_wx7ZHDOhRDndWdR9_qh9oAGu40luX2QzrlptgJbC8lNjnRYKdim1/_e11bYZQI374Q3Rk1MHzR0R6b9qpfA11PQrK8OsYeu1TeIiDlor9kKwuADRe2tUxXk4HoxqPb_NYxVr/K/j/__init__/__init__/__init__/h/__init__/__init__/__init__/mAChVSH2p2vLQLFsaka4pE4hYN26R0MRVPofGZU7/ZDgvUgEaBqbLuZurrEjUEDxuIecLtov7lNDwqpHvG21ByOzlBCXLOYeGooP96mEfQdkQvuNQ5VJtSxglYsbfmOlR6dxg36oCZ/U/__init__/U/WK2TcRkpdPGoKb59WqkgZONd8MrEcZLHedGP1ICfJ92yvAH0E87TONcZ1VQQQdJ33mSwO9gYCHHpA3k64h2LFc8ag1akAFUa7/__init__/__init__/__init__/H36Kc5ZD4rYJMhaa7Kcc5hzBqllBDNA42AwHio5p55PGkHlQpgOlbtK_T1BaXAY4DIj0n3h/__init__/__init__/p/__init__/__init__/__init__/y/__init__/K/__init__/__init__/n/K/__init__/o7I9/__init__/__init__.py::U', 
                        name = 'MXzyCBw3_uufVPIPFhB9JcGRYnua_cdyyvLY8IzLpul91GcWjTkp6JIZDm7w0v1d_fV.j.OjsmJnZAs0FmNI7kw9gsnYv3.s.E.d53YHp9_ohS9pb0ziLqFde9fYgAwdpfxa30zSi3iBxV5ODVavUrirVe5ba8KnjrgFdCDKF0BrF7V4D_0WnrjASmauGxv82lS._Pv7NeuvLHTE.S.L.U.ZYhYoFdb_pHptfJ5pvMYHuMk0kwwP3jcNFFkJauX6BpOaEi6ackMaS3kwA0zmvqSnN0dar1AWaIDRz1UlU5b53Kml5QKYNbWNP.s.pqA_5XNXovZ74Hk7ixUd6OxSV36mRZd7WCMSHkR6IA0GI3v6iVaNR7iJK08auxETS0lJJfhhwAbQ4YhsLpU7ZkY3ymN.p.SCx9PyxaC_86cBidE_7lvrMRxekSdyiKGjhDbF_unWYUqW4WQ0EQRpzZ0cAXhE2h75ANeBFEz78OHAdihOlM2ZQP2.m.L.asS1.UwaOzc8sAPOQ_w0IOQtWfykpnotNQL5Bqhv8WjUoCOn2oMGXSpTx0dyd3clZh_B.K.dUQC6iWY2lhmZ8Hh3J4pU3TEuv77tyxFCpY7SRusXVzrZ3JaluGKfz9_wx7ZHDOhRDndWdR9_qh9oAGu40luX2Qzrlptg.n.uNjn.Udim198V5e11bYZQI374Q3Rk1MHzR0R6b9qpfA11PQrK8OsYeu1TeIiDlor9kKwuADRe2tUxXk4HoxqPb_NYxVrV_.y.j.QxDFFHZs6O_AChVSH2p2vLQLFsaka4pE4hYN26R0MRVPofGZU7wb5PDgvUgEaBqb.X.prEjUEDxuIecLtov7lNDwqpHvG21ByOzlBCXLOYeGooP96mEfQdkQvuNQ5V.D.j.l.ZfmOlR6dxg36oCZTBKIApQ3BsvK2TcRkpdPGoK.FWqkgZONd8MrEcZLH.KP1ICfJ92yvAH0E87TONcZ1VQQQdJ33mSwO9gYCHHpA3k64h2LFc8ag1akAFUa7MnQl45W36Kc5ZD4r.X.Ma7Kcc5hzBqllBDNA42AwHio5p55PGkHlQpgOlbtK_T1BaXAY.jj0n3hyRBC9TQpfjus2nUCQUKQb0Ij1MrcW7I971Spwn9zHMfibGlBi.u.vV9Ze63iRcOh2YhyJjV6O1a67m3POQDsy3yKF3NRIAWtj4dXmCM.CKauSy6wVhHt8xO_oXfeAKHrar4_eISc5dTsd1SJlR2ZVo42fHPwi2Yfgvhhe5KQH6FZ.oTsI4ic_ps6aYdx00UZsSSHn9p0R3tAufNWk1H4MDSBkD3NIHjMeGEDhWzm2sl0Cu6nIVQW4KcTMMtzIg.A14hy4cgJtmozEAjT.xmElRzmeuNjs5cmyIkc8PcLpa6_kmYLJhuXXM2QC9KRGJnBlVihvJSLXmd85vWOWouVVq8lr24iz.q.w.n.c8e_S5diuCp23rqicd0pP2cprL7e_Q0b2TuJnPT3bQzpMsFcEgAKPefT3JLDCg_k_O2WN6iisDNqqv_KfRbUm1l9UqVvWWZRz.hpUG4ZGunKjn8AryY87dGbVfrRdDhDsNYdWYhYLXhL8aLxfM_NHW2t6_MTwChDCeTp4g2XqnxGLUNlmqM6kZE1E0Rl_nER.mDfGrfdXwElC6yxH3_sOwVUxQepQEck1NIjx2.dkthueuy_wJZKGD0EQYpEz.l.vT_AlTP4Gm2Bw0wm5asErqk9Bq.bIodCjVHpLUy9xuO5U.owydnv72DM70Na66v0Lci5bQbLvnn5PO2zEx1SF6Ox0DnHmqOOhRRuNKZkjplP4RdquAZ43YmkUws2aUWGTrY.rc4_lfh7ZwbP0wd72ok7dk', 
                        definition = '', 
                        platform = [
                            ''
                            ], 
                        tags = [
                            ''
                            ], 
                        device_tags = [
                            ''
                            ], 
                        signature = netpicker_client.models.job_signature.JobSignature(
                            params = [
                                netpicker_client.models.job_param.JobParam(
                                    name = '', 
                                    has_default = True, 
                                    kind = 56, 
                                    annotated = netpicker_client.models.annotated_param.AnnotatedParam(
                                        annotation = '', 
                                        isclass = True, ), )
                                ], 
                            returns = netpicker_client.models.annotated_param.AnnotatedParam(
                                annotation = '', 
                                isclass = True, ), ), 
                        range = netpicker_client.models.line_range.LineRange(
                            start = 56, 
                            end = 56, ), 
                        is_simple = True, )
                    ],
                sources = {
                    'key' : ''
                    }
            )
        else:
            return JobsWithSource(
        )
        """

    def testJobsWithSource(self):
        """Test JobsWithSource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
