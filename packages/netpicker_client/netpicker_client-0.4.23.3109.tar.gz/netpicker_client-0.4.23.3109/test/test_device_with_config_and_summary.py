# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from netpicker_client.models.device_with_config_and_summary import DeviceWithConfigAndSummary

class TestDeviceWithConfigAndSummary(unittest.TestCase):
    """DeviceWithConfigAndSummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceWithConfigAndSummary:
        """Test DeviceWithConfigAndSummary
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceWithConfigAndSummary`
        """
        model = DeviceWithConfigAndSummary()
        if include_optional:
            return DeviceWithConfigAndSummary(
                id = '',
                tenant_id = 56,
                ipaddress = 'jUR,rZ#UM/?R,Fp^l6$ARjbhJk C>i H\'qT\\{<?\'es#)#iK.YM{Rag2/!KB!k@5oXh.:Ts\";mGL,i&z5[P@M\"lzfB+Y,Twzfu~N^z\"mfqecVU{SmA{QA<Y8XX0<}J;Krm9W\'g~?)DvDDLE7-\'(u+-7Tfp&\\`F+7-?{%@=iEPLVY*a@A[b_6cfy~~0GcD_@b4Y=U?otJ(e#=I@b(lK%|5-Ido{f(x#mYtedHbSAWry*4gA\\01',
                port = 56,
                name = '',
                platform = 'AqXzyCBw3_uufVPIPFhB9JcGRYnua',
                vault = '',
                tags = [
                    ''
                    ],
                exclude = True,
                licensed = True,
                firmware = '',
                report = netpicker_client.models.compliance_report.ComplianceReport(
                    initiated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalized = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    is_compliant = True, 
                    summary = {
                        'key' : 56
                        }, 
                    log = [
                        netpicker_client.models.compliance_log.ComplianceLog(
                            outcome = 'SUCCESS', 
                            rule_name = '', 
                            rule_id = '', 
                            exec_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            exec_ns = 56, 
                            commit = '', 
                            excinfo = netpicker_client.models.exc_info.ExcInfo(
                                message = '', 
                                tb = netpicker_client.models.traceback.Traceback(
                                    path = '', 
                                    lineno = 56, 
                                    relline = 56, 
                                    lines = [
                                        ''
                                        ], ), ), 
                            passinfo = netpicker_client.models.pass_info.PassInfo(
                                passed = [
                                    netpicker_client.models.pass_assert.PassAssert(
                                        lineno = 56, 
                                        original = '', 
                                        explanation = '', )
                                    ], ), 
                            cli_log = [
                                netpicker_client.models.cli_log.CliLog(
                                    tenant = '', 
                                    ipaddress = '', 
                                    commands = [
                                        netpicker_client.models.cli_row.CliRow(
                                            command = null, 
                                            response = '', )
                                        ], )
                                ], 
                            policy = '', )
                        ], ),
                agent_id = '',
                os_version = '',
                last_config = netpicker_client.models.device_config_base.DeviceConfigBase(
                    id = '', 
                    device_id = '', 
                    upload_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    upload_agent = '', 
                    file_size = 56, 
                    digest = '', 
                    commit = '', 
                    data = netpicker_client.models.config_data.ConfigData(
                        commands = {
                            'key' : ''
                            }, 
                        variables = {
                            'key' : ''
                            }, ), 
                    readout_error = '', 
                    os_version = '', 
                    initiator = '', 
                    extras = {
                        'key' : netpicker_client.models.configuration_info.ConfigurationInfo(
                            file_size = 56, 
                            digest = '', )
                        }, ),
                compliance = 'SUCCESS',
                summary = {
                    'key' : 56
                    }
            )
        else:
            return DeviceWithConfigAndSummary(
                id = '',
                ipaddress = 'jUR,rZ#UM/?R,Fp^l6$ARjbhJk C>i H\'qT\\{<?\'es#)#iK.YM{Rag2/!KB!k@5oXh.:Ts\";mGL,i&z5[P@M\"lzfB+Y,Twzfu~N^z\"mfqecVU{SmA{QA<Y8XX0<}J;Krm9W\'g~?)DvDDLE7-\'(u+-7Tfp&\\`F+7-?{%@=iEPLVY*a@A[b_6cfy~~0GcD_@b4Y=U?otJ(e#=I@b(lK%|5-Ido{f(x#mYtedHbSAWry*4gA\\01',
                platform = 'AqXzyCBw3_uufVPIPFhB9JcGRYnua',
                licensed = True,
        )
        """

    def testDeviceWithConfigAndSummary(self):
        """Test DeviceWithConfigAndSummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
