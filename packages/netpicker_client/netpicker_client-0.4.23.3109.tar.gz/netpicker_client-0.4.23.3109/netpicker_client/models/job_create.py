# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.crontab import Crontab
from netpicker_client.models.interval import Interval
from typing import Optional, Set
from typing_extensions import Self

class JobCreate(BaseModel):
    """
    JobCreate
    """ # noqa: E501
    crontab: Optional[Crontab] = None
    interval: Optional[Interval] = None
    name: StrictStr
    task: StrictStr
    description: Optional[StrictStr] = None
    one_off: Optional[StrictBool] = False
    date_changed: Optional[datetime] = None
    headers: Optional[Dict[str, StrictStr]] = None
    args: Optional[List[Any]] = None
    kwargs: Optional[Dict[str, Any]] = None
    queue: Optional[StrictStr] = None
    exchange: Optional[StrictStr] = None
    routing_key: Optional[StrictStr] = None
    expires: Optional[datetime] = None
    enabled: Optional[StrictBool] = False
    author: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["crontab", "interval", "name", "task", "description", "one_off", "date_changed", "headers", "args", "kwargs", "queue", "exchange", "routing_key", "expires", "enabled", "author"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crontab
        if self.crontab:
            _dict['crontab'] = self.crontab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interval
        if self.interval:
            _dict['interval'] = self.interval.to_dict()
        # set to None if crontab (nullable) is None
        # and model_fields_set contains the field
        if self.crontab is None and "crontab" in self.model_fields_set:
            _dict['crontab'] = None

        # set to None if interval (nullable) is None
        # and model_fields_set contains the field
        if self.interval is None and "interval" in self.model_fields_set:
            _dict['interval'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if date_changed (nullable) is None
        # and model_fields_set contains the field
        if self.date_changed is None and "date_changed" in self.model_fields_set:
            _dict['date_changed'] = None

        # set to None if queue (nullable) is None
        # and model_fields_set contains the field
        if self.queue is None and "queue" in self.model_fields_set:
            _dict['queue'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if routing_key (nullable) is None
        # and model_fields_set contains the field
        if self.routing_key is None and "routing_key" in self.model_fields_set:
            _dict['routing_key'] = None

        # set to None if expires (nullable) is None
        # and model_fields_set contains the field
        if self.expires is None and "expires" in self.model_fields_set:
            _dict['expires'] = None

        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crontab": Crontab.from_dict(obj["crontab"]) if obj.get("crontab") is not None else None,
            "interval": Interval.from_dict(obj["interval"]) if obj.get("interval") is not None else None,
            "name": obj.get("name"),
            "task": obj.get("task"),
            "description": obj.get("description"),
            "one_off": obj.get("one_off") if obj.get("one_off") is not None else False,
            "date_changed": obj.get("date_changed"),
            "headers": obj.get("headers"),
            "args": obj.get("args"),
            "kwargs": obj.get("kwargs"),
            "queue": obj.get("queue"),
            "exchange": obj.get("exchange"),
            "routing_key": obj.get("routing_key"),
            "expires": obj.get("expires"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "author": obj.get("author")
        })
        return _obj


