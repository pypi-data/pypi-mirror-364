# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.agent_reply import AgentReply
from typing import Optional, Set
from typing_extensions import Self

class AgentCmd(BaseModel):
    """
    AgentCmd
    """ # noqa: E501
    id: StrictStr
    agent_id: Optional[StrictStr] = None
    priority: Optional[StrictInt] = -1
    created: Optional[datetime] = None
    scheduled: Optional[datetime] = None
    submitted: Optional[datetime] = None
    finished: Optional[datetime] = None
    result: Optional[AgentReply] = None
    command: Dict[str, Any]
    callback: Optional[StrictStr] = None
    callback_kwargs: Optional[Dict[str, Any]] = None
    tenant: StrictStr
    __properties: ClassVar[List[str]] = ["id", "agent_id", "priority", "created", "scheduled", "submitted", "finished", "result", "command", "callback", "callback_kwargs", "tenant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentCmd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # set to None if agent_id (nullable) is None
        # and model_fields_set contains the field
        if self.agent_id is None and "agent_id" in self.model_fields_set:
            _dict['agent_id'] = None

        # set to None if submitted (nullable) is None
        # and model_fields_set contains the field
        if self.submitted is None and "submitted" in self.model_fields_set:
            _dict['submitted'] = None

        # set to None if finished (nullable) is None
        # and model_fields_set contains the field
        if self.finished is None and "finished" in self.model_fields_set:
            _dict['finished'] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        # set to None if callback (nullable) is None
        # and model_fields_set contains the field
        if self.callback is None and "callback" in self.model_fields_set:
            _dict['callback'] = None

        # set to None if callback_kwargs (nullable) is None
        # and model_fields_set contains the field
        if self.callback_kwargs is None and "callback_kwargs" in self.model_fields_set:
            _dict['callback_kwargs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentCmd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "agent_id": obj.get("agent_id"),
            "priority": obj.get("priority") if obj.get("priority") is not None else -1,
            "created": obj.get("created"),
            "scheduled": obj.get("scheduled"),
            "submitted": obj.get("submitted"),
            "finished": obj.get("finished"),
            "result": AgentReply.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "command": obj.get("command"),
            "callback": obj.get("callback"),
            "callback_kwargs": obj.get("callback_kwargs"),
            "tenant": obj.get("tenant")
        })
        return _obj


