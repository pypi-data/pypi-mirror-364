# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.config_data import ConfigData
from netpicker_client.models.configuration_info import ConfigurationInfo
from typing import Optional, Set
from typing_extensions import Self

class BackupInfo(BaseModel):
    """
    BackupInfo
    """ # noqa: E501
    id: StrictStr
    device_id: StrictStr
    upload_date: Optional[datetime] = None
    upload_agent: Optional[StrictStr] = None
    file_size: Optional[StrictInt] = 0
    digest: Optional[StrictStr] = None
    commit: Optional[StrictStr] = None
    data: Optional[ConfigData] = None
    readout_error: Optional[StrictStr] = None
    os_version: Optional[StrictStr] = None
    initiator: Optional[StrictStr] = None
    extras: Optional[Dict[str, ConfigurationInfo]] = None
    ipaddress: StrictStr
    name: Optional[StrictStr] = None
    platform: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    summary: Optional[Dict[str, StrictInt]]
    __properties: ClassVar[List[str]] = ["id", "device_id", "upload_date", "upload_agent", "file_size", "digest", "commit", "data", "readout_error", "os_version", "initiator", "extras", "ipaddress", "name", "platform", "tags", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in extras (dict)
        _field_dict = {}
        if self.extras:
            for _key in self.extras:
                if self.extras[_key]:
                    _field_dict[_key] = self.extras[_key].to_dict()
            _dict['extras'] = _field_dict
        # set to None if upload_agent (nullable) is None
        # and model_fields_set contains the field
        if self.upload_agent is None and "upload_agent" in self.model_fields_set:
            _dict['upload_agent'] = None

        # set to None if digest (nullable) is None
        # and model_fields_set contains the field
        if self.digest is None and "digest" in self.model_fields_set:
            _dict['digest'] = None

        # set to None if commit (nullable) is None
        # and model_fields_set contains the field
        if self.commit is None and "commit" in self.model_fields_set:
            _dict['commit'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if readout_error (nullable) is None
        # and model_fields_set contains the field
        if self.readout_error is None and "readout_error" in self.model_fields_set:
            _dict['readout_error'] = None

        # set to None if os_version (nullable) is None
        # and model_fields_set contains the field
        if self.os_version is None and "os_version" in self.model_fields_set:
            _dict['os_version'] = None

        # set to None if initiator (nullable) is None
        # and model_fields_set contains the field
        if self.initiator is None and "initiator" in self.model_fields_set:
            _dict['initiator'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if summary (nullable) is None
        # and model_fields_set contains the field
        if self.summary is None and "summary" in self.model_fields_set:
            _dict['summary'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "device_id": obj.get("device_id"),
            "upload_date": obj.get("upload_date"),
            "upload_agent": obj.get("upload_agent"),
            "file_size": obj.get("file_size") if obj.get("file_size") is not None else 0,
            "digest": obj.get("digest"),
            "commit": obj.get("commit"),
            "data": ConfigData.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "readout_error": obj.get("readout_error"),
            "os_version": obj.get("os_version"),
            "initiator": obj.get("initiator"),
            "extras": dict(
                (_k, ConfigurationInfo.from_dict(_v))
                for _k, _v in obj["extras"].items()
            )
            if obj.get("extras") is not None
            else None,
            "ipaddress": obj.get("ipaddress"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "tags": obj.get("tags"),
            "summary": obj.get("summary")
        })
        return _obj


