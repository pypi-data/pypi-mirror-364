# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.job_status import JobStatus
from typing import Optional, Set
from typing_extensions import Self

class JobExecLogReport(BaseModel):
    """
    JobExecLogReport
    """ # noqa: E501
    id: StrictStr
    job_name: StrictStr
    job_id: Optional[StrictStr] = None
    initiator: Optional[StrictStr]
    variables: Optional[Dict[str, Any]]
    return_value: Optional[Any] = None
    exec_at: Optional[datetime] = None
    exec_ns: Optional[StrictInt] = None
    log: Optional[StrictStr] = None
    ipaddress: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    status: Optional[JobStatus] = None
    created: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "job_name", "job_id", "initiator", "variables", "return_value", "exec_at", "exec_ns", "log", "ipaddress", "name", "status", "created"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobExecLogReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if job_id (nullable) is None
        # and model_fields_set contains the field
        if self.job_id is None and "job_id" in self.model_fields_set:
            _dict['job_id'] = None

        # set to None if initiator (nullable) is None
        # and model_fields_set contains the field
        if self.initiator is None and "initiator" in self.model_fields_set:
            _dict['initiator'] = None

        # set to None if variables (nullable) is None
        # and model_fields_set contains the field
        if self.variables is None and "variables" in self.model_fields_set:
            _dict['variables'] = None

        # set to None if return_value (nullable) is None
        # and model_fields_set contains the field
        if self.return_value is None and "return_value" in self.model_fields_set:
            _dict['return_value'] = None

        # set to None if exec_at (nullable) is None
        # and model_fields_set contains the field
        if self.exec_at is None and "exec_at" in self.model_fields_set:
            _dict['exec_at'] = None

        # set to None if exec_ns (nullable) is None
        # and model_fields_set contains the field
        if self.exec_ns is None and "exec_ns" in self.model_fields_set:
            _dict['exec_ns'] = None

        # set to None if log (nullable) is None
        # and model_fields_set contains the field
        if self.log is None and "log" in self.model_fields_set:
            _dict['log'] = None

        # set to None if ipaddress (nullable) is None
        # and model_fields_set contains the field
        if self.ipaddress is None and "ipaddress" in self.model_fields_set:
            _dict['ipaddress'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobExecLogReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "job_name": obj.get("job_name"),
            "job_id": obj.get("job_id"),
            "initiator": obj.get("initiator"),
            "variables": obj.get("variables"),
            "return_value": obj.get("return_value"),
            "exec_at": obj.get("exec_at"),
            "exec_ns": obj.get("exec_ns"),
            "log": obj.get("log"),
            "ipaddress": obj.get("ipaddress"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "created": obj.get("created")
        })
        return _obj


