# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from netpicker_client.models.compliance_report_output import ComplianceReportOutput
from netpicker_client.models.outcome import Outcome
from typing import Optional, Set
from typing_extensions import Self

class DeviceWithSummary(BaseModel):
    """
    DeviceWithSummary
    """ # noqa: E501
    id: StrictStr
    tenant_id: Optional[StrictInt] = None
    ipaddress: Annotated[str, Field(min_length=2, strict=True, max_length=254)]
    port: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    platform: Optional[Annotated[str, Field(strict=True)]]
    vault: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    exclude: Optional[StrictBool] = False
    licensed: Optional[StrictBool]
    firmware: Optional[StrictStr] = None
    report: Optional[ComplianceReportOutput] = None
    agent_id: Optional[StrictStr] = None
    os_version: Optional[StrictStr] = None
    compliance: Optional[Outcome] = None
    summary: Optional[Dict[str, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "tenant_id", "ipaddress", "port", "name", "platform", "vault", "tags", "exclude", "licensed", "firmware", "report", "agent_id", "os_version", "compliance", "summary"]

    @field_validator('ipaddress')
    def ipaddress_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{2,255}$", value):
            raise ValueError(r"must validate the regular expression /^.{2,255}$/")
        return value

    @field_validator('platform')
    def platform_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z]\w*$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]\w*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceWithSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of report
        if self.report:
            _dict['report'] = self.report.to_dict()
        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if vault (nullable) is None
        # and model_fields_set contains the field
        if self.vault is None and "vault" in self.model_fields_set:
            _dict['vault'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if licensed (nullable) is None
        # and model_fields_set contains the field
        if self.licensed is None and "licensed" in self.model_fields_set:
            _dict['licensed'] = None

        # set to None if firmware (nullable) is None
        # and model_fields_set contains the field
        if self.firmware is None and "firmware" in self.model_fields_set:
            _dict['firmware'] = None

        # set to None if report (nullable) is None
        # and model_fields_set contains the field
        if self.report is None and "report" in self.model_fields_set:
            _dict['report'] = None

        # set to None if agent_id (nullable) is None
        # and model_fields_set contains the field
        if self.agent_id is None and "agent_id" in self.model_fields_set:
            _dict['agent_id'] = None

        # set to None if os_version (nullable) is None
        # and model_fields_set contains the field
        if self.os_version is None and "os_version" in self.model_fields_set:
            _dict['os_version'] = None

        # set to None if compliance (nullable) is None
        # and model_fields_set contains the field
        if self.compliance is None and "compliance" in self.model_fields_set:
            _dict['compliance'] = None

        # set to None if summary (nullable) is None
        # and model_fields_set contains the field
        if self.summary is None and "summary" in self.model_fields_set:
            _dict['summary'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceWithSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "tenant_id": obj.get("tenant_id"),
            "ipaddress": obj.get("ipaddress"),
            "port": obj.get("port"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "vault": obj.get("vault"),
            "tags": obj.get("tags"),
            "exclude": obj.get("exclude") if obj.get("exclude") is not None else False,
            "licensed": obj.get("licensed"),
            "firmware": obj.get("firmware"),
            "report": ComplianceReportOutput.from_dict(obj["report"]) if obj.get("report") is not None else None,
            "agent_id": obj.get("agent_id"),
            "os_version": obj.get("os_version"),
            "compliance": obj.get("compliance"),
            "summary": obj.get("summary")
        })
        return _obj


