# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.code_snippet import CodeSnippet
from netpicker_client.models.device_tags import DeviceTags
from netpicker_client.models.rule_exec_stat import RuleExecStat
from netpicker_client.models.severity import Severity
from netpicker_client.models.simple_rule import SimpleRule
from typing import Optional, Set
from typing_extensions import Self

class RuleInput(BaseModel):
    """
    RuleInput
    """ # noqa: E501
    name: StrictStr
    description: Optional[StrictStr] = None
    ruleset: Optional[StrictStr] = 'default'
    stats: Optional[List[RuleExecStat]] = None
    platform: Optional[List[StrictStr]] = None
    severity: Optional[Severity] = None
    commands: Optional[Dict[str, StrictStr]] = None
    device_tags: Optional[DeviceTags] = None
    simplified: Optional[SimpleRule] = None
    definition: Optional[CodeSnippet] = None
    author: Optional[StrictStr] = None
    changed: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["name", "description", "ruleset", "stats", "platform", "severity", "commands", "device_tags", "simplified", "definition", "author", "changed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stats (list)
        _items = []
        if self.stats:
            for _item in self.stats:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stats'] = _items
        # override the default output from pydantic by calling `to_dict()` of device_tags
        if self.device_tags:
            _dict['device_tags'] = self.device_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simplified
        if self.simplified:
            _dict['simplified'] = self.simplified.to_dict()
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if stats (nullable) is None
        # and model_fields_set contains the field
        if self.stats is None and "stats" in self.model_fields_set:
            _dict['stats'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if commands (nullable) is None
        # and model_fields_set contains the field
        if self.commands is None and "commands" in self.model_fields_set:
            _dict['commands'] = None

        # set to None if device_tags (nullable) is None
        # and model_fields_set contains the field
        if self.device_tags is None and "device_tags" in self.model_fields_set:
            _dict['device_tags'] = None

        # set to None if simplified (nullable) is None
        # and model_fields_set contains the field
        if self.simplified is None and "simplified" in self.model_fields_set:
            _dict['simplified'] = None

        # set to None if definition (nullable) is None
        # and model_fields_set contains the field
        if self.definition is None and "definition" in self.model_fields_set:
            _dict['definition'] = None

        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if changed (nullable) is None
        # and model_fields_set contains the field
        if self.changed is None and "changed" in self.model_fields_set:
            _dict['changed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "ruleset": obj.get("ruleset") if obj.get("ruleset") is not None else 'default',
            "stats": [RuleExecStat.from_dict(_item) for _item in obj["stats"]] if obj.get("stats") is not None else None,
            "platform": obj.get("platform"),
            "severity": obj.get("severity"),
            "commands": obj.get("commands"),
            "device_tags": DeviceTags.from_dict(obj["device_tags"]) if obj.get("device_tags") is not None else None,
            "simplified": SimpleRule.from_dict(obj["simplified"]) if obj.get("simplified") is not None else None,
            "definition": CodeSnippet.from_dict(obj["definition"]) if obj.get("definition") is not None else None,
            "author": obj.get("author"),
            "changed": obj.get("changed")
        })
        return _obj


