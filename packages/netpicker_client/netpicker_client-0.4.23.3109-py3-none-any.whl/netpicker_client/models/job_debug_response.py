# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.cli_log import CliLog
from netpicker_client.models.cli_response import CliResponse
from netpicker_client.models.exc_info import ExcInfo
from netpicker_client.models.job_status import JobStatus
from netpicker_client.models.print_info import PrintInfo
from typing import Optional, Set
from typing_extensions import Self

class JobDebugResponse(BaseModel):
    """
    JobDebugResponse
    """ # noqa: E501
    nodeid: Optional[StrictStr] = None
    exec_at: Optional[datetime] = None
    exec_ns: Optional[StrictInt] = 0
    excinfo: Optional[ExcInfo] = None
    return_value: Optional[Any] = None
    prints: Optional[List[PrintInfo]] = None
    cli_log: Optional[List[CliLog]] = None
    logs: Optional[StrictStr] = None
    status: Optional[JobStatus] = None
    cli_response: Optional[CliResponse] = None
    __properties: ClassVar[List[str]] = ["nodeid", "exec_at", "exec_ns", "excinfo", "return_value", "prints", "cli_log", "logs", "status", "cli_response"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobDebugResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of excinfo
        if self.excinfo:
            _dict['excinfo'] = self.excinfo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in prints (list)
        _items = []
        if self.prints:
            for _item in self.prints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cli_log (list)
        _items = []
        if self.cli_log:
            for _item in self.cli_log:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cli_log'] = _items
        # override the default output from pydantic by calling `to_dict()` of cli_response
        if self.cli_response:
            _dict['cli_response'] = self.cli_response.to_dict()
        # set to None if nodeid (nullable) is None
        # and model_fields_set contains the field
        if self.nodeid is None and "nodeid" in self.model_fields_set:
            _dict['nodeid'] = None

        # set to None if exec_at (nullable) is None
        # and model_fields_set contains the field
        if self.exec_at is None and "exec_at" in self.model_fields_set:
            _dict['exec_at'] = None

        # set to None if excinfo (nullable) is None
        # and model_fields_set contains the field
        if self.excinfo is None and "excinfo" in self.model_fields_set:
            _dict['excinfo'] = None

        # set to None if return_value (nullable) is None
        # and model_fields_set contains the field
        if self.return_value is None and "return_value" in self.model_fields_set:
            _dict['return_value'] = None

        # set to None if prints (nullable) is None
        # and model_fields_set contains the field
        if self.prints is None and "prints" in self.model_fields_set:
            _dict['prints'] = None

        # set to None if cli_log (nullable) is None
        # and model_fields_set contains the field
        if self.cli_log is None and "cli_log" in self.model_fields_set:
            _dict['cli_log'] = None

        # set to None if logs (nullable) is None
        # and model_fields_set contains the field
        if self.logs is None and "logs" in self.model_fields_set:
            _dict['logs'] = None

        # set to None if cli_response (nullable) is None
        # and model_fields_set contains the field
        if self.cli_response is None and "cli_response" in self.model_fields_set:
            _dict['cli_response'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobDebugResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nodeid": obj.get("nodeid"),
            "exec_at": obj.get("exec_at"),
            "exec_ns": obj.get("exec_ns") if obj.get("exec_ns") is not None else 0,
            "excinfo": ExcInfo.from_dict(obj["excinfo"]) if obj.get("excinfo") is not None else None,
            "return_value": obj.get("return_value"),
            "prints": [PrintInfo.from_dict(_item) for _item in obj["prints"]] if obj.get("prints") is not None else None,
            "cli_log": [CliLog.from_dict(_item) for _item in obj["cli_log"]] if obj.get("cli_log") is not None else None,
            "logs": obj.get("logs"),
            "status": obj.get("status"),
            "cli_response": CliResponse.from_dict(obj["cli_response"]) if obj.get("cli_response") is not None else None
        })
        return _obj


