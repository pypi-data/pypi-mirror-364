# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserUpdate(BaseModel):
    """
    UserUpdate
    """ # noqa: E501
    scopes: Optional[List[StrictStr]] = None
    tenants: Optional[List[StrictStr]] = None
    is_machine: Optional[StrictBool] = None
    password: Optional[StrictStr] = None
    is_superuser: Optional[StrictBool] = None
    email: Optional[StrictStr] = None
    is_verified: Optional[StrictBool] = None
    external_id: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["scopes", "tenants", "is_machine", "password", "is_superuser", "email", "is_verified", "external_id", "is_active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is_machine (nullable) is None
        # and model_fields_set contains the field
        if self.is_machine is None and "is_machine" in self.model_fields_set:
            _dict['is_machine'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if is_superuser (nullable) is None
        # and model_fields_set contains the field
        if self.is_superuser is None and "is_superuser" in self.model_fields_set:
            _dict['is_superuser'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if is_verified (nullable) is None
        # and model_fields_set contains the field
        if self.is_verified is None and "is_verified" in self.model_fields_set:
            _dict['is_verified'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['is_active'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scopes": obj.get("scopes"),
            "tenants": obj.get("tenants"),
            "is_machine": obj.get("is_machine"),
            "password": obj.get("password"),
            "is_superuser": obj.get("is_superuser"),
            "email": obj.get("email"),
            "is_verified": obj.get("is_verified"),
            "external_id": obj.get("external_id"),
            "is_active": obj.get("is_active")
        })
        return _obj


