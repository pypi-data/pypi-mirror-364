# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.crontab import Crontab
from typing import Optional, Set
from typing_extensions import Self

class BodyStoreQjobApiV1AutomationTenantQueuePost(BaseModel):
    """
    BodyStoreQjobApiV1AutomationTenantQueuePost
    """ # noqa: E501
    name: StrictStr
    branch: Optional[StrictStr] = None
    sources: Optional[Dict[str, StrictStr]] = None
    variables: Optional[Dict[str, Any]] = None
    devices: Optional[List[StrictStr]] = None
    tags: Optional[List[StrictStr]] = None
    execron: Optional[Crontab] = None
    expires: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["name", "branch", "sources", "variables", "devices", "tags", "execron", "expires"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BodyStoreQjobApiV1AutomationTenantQueuePost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execron
        if self.execron:
            _dict['execron'] = self.execron.to_dict()
        # set to None if branch (nullable) is None
        # and model_fields_set contains the field
        if self.branch is None and "branch" in self.model_fields_set:
            _dict['branch'] = None

        # set to None if sources (nullable) is None
        # and model_fields_set contains the field
        if self.sources is None and "sources" in self.model_fields_set:
            _dict['sources'] = None

        # set to None if variables (nullable) is None
        # and model_fields_set contains the field
        if self.variables is None and "variables" in self.model_fields_set:
            _dict['variables'] = None

        # set to None if devices (nullable) is None
        # and model_fields_set contains the field
        if self.devices is None and "devices" in self.model_fields_set:
            _dict['devices'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if execron (nullable) is None
        # and model_fields_set contains the field
        if self.execron is None and "execron" in self.model_fields_set:
            _dict['execron'] = None

        # set to None if expires (nullable) is None
        # and model_fields_set contains the field
        if self.expires is None and "expires" in self.model_fields_set:
            _dict['expires'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BodyStoreQjobApiV1AutomationTenantQueuePost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "branch": obj.get("branch"),
            "sources": obj.get("sources"),
            "variables": obj.get("variables"),
            "devices": obj.get("devices"),
            "tags": obj.get("tags"),
            "execron": Crontab.from_dict(obj["execron"]) if obj.get("execron") is not None else None,
            "expires": obj.get("expires")
        })
        return _obj


