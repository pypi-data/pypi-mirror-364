# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from netpicker_client.models.cli_log import CliLog
from netpicker_client.models.exc_info import ExcInfo
from netpicker_client.models.outcome import Outcome
from netpicker_client.models.pass_info import PassInfo
from typing import Optional, Set
from typing_extensions import Self

class TestReportLog(BaseModel):
    """
    TestReportLog
    """ # noqa: E501
    outcome: Outcome
    rule_name: Optional[StrictStr]
    rule_id: Optional[StrictStr]
    exec_at: datetime
    exec_ns: StrictInt
    commit: Optional[StrictStr]
    excinfo: Optional[ExcInfo] = None
    passinfo: Optional[PassInfo] = None
    cli_log: Optional[List[CliLog]] = None
    __properties: ClassVar[List[str]] = ["outcome", "rule_name", "rule_id", "exec_at", "exec_ns", "commit", "excinfo", "passinfo", "cli_log"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestReportLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of excinfo
        if self.excinfo:
            _dict['excinfo'] = self.excinfo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of passinfo
        if self.passinfo:
            _dict['passinfo'] = self.passinfo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cli_log (list)
        _items = []
        if self.cli_log:
            for _item in self.cli_log:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cli_log'] = _items
        # set to None if rule_name (nullable) is None
        # and model_fields_set contains the field
        if self.rule_name is None and "rule_name" in self.model_fields_set:
            _dict['rule_name'] = None

        # set to None if rule_id (nullable) is None
        # and model_fields_set contains the field
        if self.rule_id is None and "rule_id" in self.model_fields_set:
            _dict['rule_id'] = None

        # set to None if commit (nullable) is None
        # and model_fields_set contains the field
        if self.commit is None and "commit" in self.model_fields_set:
            _dict['commit'] = None

        # set to None if excinfo (nullable) is None
        # and model_fields_set contains the field
        if self.excinfo is None and "excinfo" in self.model_fields_set:
            _dict['excinfo'] = None

        # set to None if passinfo (nullable) is None
        # and model_fields_set contains the field
        if self.passinfo is None and "passinfo" in self.model_fields_set:
            _dict['passinfo'] = None

        # set to None if cli_log (nullable) is None
        # and model_fields_set contains the field
        if self.cli_log is None and "cli_log" in self.model_fields_set:
            _dict['cli_log'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestReportLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outcome": obj.get("outcome"),
            "rule_name": obj.get("rule_name"),
            "rule_id": obj.get("rule_id"),
            "exec_at": obj.get("exec_at"),
            "exec_ns": obj.get("exec_ns"),
            "commit": obj.get("commit"),
            "excinfo": ExcInfo.from_dict(obj["excinfo"]) if obj.get("excinfo") is not None else None,
            "passinfo": PassInfo.from_dict(obj["passinfo"]) if obj.get("passinfo") is not None else None,
            "cli_log": [CliLog.from_dict(_item) for _item in obj["cli_log"]] if obj.get("cli_log") is not None else None
        })
        return _obj


