# coding: utf-8

"""
    Netpicker API (Celery 5.5.3)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.23.3109
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from netpicker_client.models.job_signature import JobSignature
from netpicker_client.models.line_range import LineRange
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Job
    """ # noqa: E501
    id: Optional[Annotated[str, Field(strict=True)]] = None
    name: Optional[Annotated[str, Field(strict=True)]] = None
    definition: Optional[StrictStr] = None
    platform: Optional[List[StrictStr]] = None
    tags: Optional[List[StrictStr]] = None
    device_tags: Optional[List[StrictStr]] = None
    signature: Optional[JobSignature] = None
    range: Optional[LineRange] = None
    is_simple: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["id", "name", "definition", "platform", "tags", "device_tags", "signature", "range", "is_simple"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([A-Za-z_]\w*?|__init__)(\/([A-Za-z_]\w*?|__init__))*?\.py::[A-Za-z_]\w*?$", value):
            raise ValueError(r"must validate the regular expression /^([A-Za-z_]\w*?|__init__)(\/([A-Za-z_]\w*?|__init__))*?\.py::[A-Za-z_]\w*?$/")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z_]\w*?(\.[A-Za-z_]\w*?)*$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z_]\w*?(\.[A-Za-z_]\w*?)*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of signature
        if self.signature:
            _dict['signature'] = self.signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if definition (nullable) is None
        # and model_fields_set contains the field
        if self.definition is None and "definition" in self.model_fields_set:
            _dict['definition'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if device_tags (nullable) is None
        # and model_fields_set contains the field
        if self.device_tags is None and "device_tags" in self.model_fields_set:
            _dict['device_tags'] = None

        # set to None if signature (nullable) is None
        # and model_fields_set contains the field
        if self.signature is None and "signature" in self.model_fields_set:
            _dict['signature'] = None

        # set to None if range (nullable) is None
        # and model_fields_set contains the field
        if self.range is None and "range" in self.model_fields_set:
            _dict['range'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "definition": obj.get("definition"),
            "platform": obj.get("platform"),
            "tags": obj.get("tags"),
            "device_tags": obj.get("device_tags"),
            "signature": JobSignature.from_dict(obj["signature"]) if obj.get("signature") is not None else None,
            "range": LineRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "is_simple": obj.get("is_simple") if obj.get("is_simple") is not None else False
        })
        return _obj


