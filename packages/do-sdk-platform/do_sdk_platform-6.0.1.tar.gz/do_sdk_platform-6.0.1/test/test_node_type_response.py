# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.node_type_response import NodeTypeResponse

class TestNodeTypeResponse(unittest.TestCase):
    """NodeTypeResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NodeTypeResponse:
        """Test NodeTypeResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NodeTypeResponse`
        """
        model = NodeTypeResponse()
        if include_optional:
            return NodeTypeResponse(
                id = '',
                name = '',
                summary = '',
                entry_points = [
                    do_sdk_platform.models.entry_point_reference_object.EntryPointReferenceObject(
                        id = '', 
                        name = '', 
                        port = 1.337, 
                        protocol = '', 
                        is_exposed = True, )
                    ],
                image_location = '',
                home_data_location = '',
                fixed_resources = True,
                shared_drive_required = True,
                notebooks = [
                    do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                        id = '', 
                        version = '', 
                        other_item_version = '', 
                        variant_tags = [
                            ''
                            ], )
                    ],
                operating_system = do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                    id = '', 
                    version = '', 
                    other_item_version = '', 
                    variant_tags = [
                        ''
                        ], ),
                applications = [
                    do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                        id = '', 
                        version = '', 
                        other_item_version = '', 
                        variant_tags = [
                            ''
                            ], )
                    ],
                requirements = do_sdk_platform.models.requirements_object.RequirementsObject(
                    hardware = null, )
            )
        else:
            return NodeTypeResponse(
                id = '',
                name = '',
                summary = '',
                entry_points = [
                    do_sdk_platform.models.entry_point_reference_object.EntryPointReferenceObject(
                        id = '', 
                        name = '', 
                        port = 1.337, 
                        protocol = '', 
                        is_exposed = True, )
                    ],
                image_location = '',
                home_data_location = '',
                fixed_resources = True,
                shared_drive_required = True,
                notebooks = [
                    do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                        id = '', 
                        version = '', 
                        other_item_version = '', 
                        variant_tags = [
                            ''
                            ], )
                    ],
                operating_system = do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                    id = '', 
                    version = '', 
                    other_item_version = '', 
                    variant_tags = [
                        ''
                        ], ),
                applications = [
                    do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                        id = '', 
                        version = '', 
                        other_item_version = '', 
                        variant_tags = [
                            ''
                            ], )
                    ],
                requirements = do_sdk_platform.models.requirements_object.RequirementsObject(
                    hardware = null, ),
        )
        """

    def testNodeTypeResponse(self):
        """Test NodeTypeResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
