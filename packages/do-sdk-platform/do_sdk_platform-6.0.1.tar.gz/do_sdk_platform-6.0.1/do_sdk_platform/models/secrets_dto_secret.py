# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from do_sdk_platform.models.aws_value_dto import AwsValueDto
from do_sdk_platform.models.configuration_value_dto import ConfigurationValueDto
from do_sdk_platform.models.environment_value_dto import EnvironmentValueDto
from do_sdk_platform.models.git_value_dto import GitValueDto
from do_sdk_platform.models.gpg_value_dto import GPGValueDto
from do_sdk_platform.models.secret_configuration_value_dto import SecretConfigurationValueDto
from do_sdk_platform.models.secret_environment_value_dto import SecretEnvironmentValueDto
from do_sdk_platform.models.ssh_value_dto import SshValueDto
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SECRETSDTOSECRET_ONE_OF_SCHEMAS = ["AwsValueDto", "ConfigurationValueDto", "EnvironmentValueDto", "GPGValueDto", "GitValueDto", "SecretConfigurationValueDto", "SecretEnvironmentValueDto", "SshValueDto"]

class SecretsDtoSecret(BaseModel):
    """
    A secret object matching one of the supported secret types.
    """
    # data type: SecretConfigurationValueDto
    oneof_schema_1_validator: Optional[SecretConfigurationValueDto] = None
    # data type: SecretEnvironmentValueDto
    oneof_schema_2_validator: Optional[SecretEnvironmentValueDto] = None
    # data type: SshValueDto
    oneof_schema_3_validator: Optional[SshValueDto] = None
    # data type: GPGValueDto
    oneof_schema_4_validator: Optional[GPGValueDto] = None
    # data type: GitValueDto
    oneof_schema_5_validator: Optional[GitValueDto] = None
    # data type: EnvironmentValueDto
    oneof_schema_6_validator: Optional[EnvironmentValueDto] = None
    # data type: ConfigurationValueDto
    oneof_schema_7_validator: Optional[ConfigurationValueDto] = None
    # data type: AwsValueDto
    oneof_schema_8_validator: Optional[AwsValueDto] = None
    actual_instance: Optional[Union[AwsValueDto, ConfigurationValueDto, EnvironmentValueDto, GPGValueDto, GitValueDto, SecretConfigurationValueDto, SecretEnvironmentValueDto, SshValueDto]] = None
    one_of_schemas: Set[str] = { "AwsValueDto", "ConfigurationValueDto", "EnvironmentValueDto", "GPGValueDto", "GitValueDto", "SecretConfigurationValueDto", "SecretEnvironmentValueDto", "SshValueDto" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SecretsDtoSecret.model_construct()
        error_messages = []
        match = 0
        # validate data type: SecretConfigurationValueDto
        if not isinstance(v, SecretConfigurationValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SecretConfigurationValueDto`")
        else:
            match += 1
        # validate data type: SecretEnvironmentValueDto
        if not isinstance(v, SecretEnvironmentValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SecretEnvironmentValueDto`")
        else:
            match += 1
        # validate data type: SshValueDto
        if not isinstance(v, SshValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SshValueDto`")
        else:
            match += 1
        # validate data type: GPGValueDto
        if not isinstance(v, GPGValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GPGValueDto`")
        else:
            match += 1
        # validate data type: GitValueDto
        if not isinstance(v, GitValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GitValueDto`")
        else:
            match += 1
        # validate data type: EnvironmentValueDto
        if not isinstance(v, EnvironmentValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EnvironmentValueDto`")
        else:
            match += 1
        # validate data type: ConfigurationValueDto
        if not isinstance(v, ConfigurationValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ConfigurationValueDto`")
        else:
            match += 1
        # validate data type: AwsValueDto
        if not isinstance(v, AwsValueDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AwsValueDto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SecretsDtoSecret with oneOf schemas: AwsValueDto, ConfigurationValueDto, EnvironmentValueDto, GPGValueDto, GitValueDto, SecretConfigurationValueDto, SecretEnvironmentValueDto, SshValueDto. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SecretsDtoSecret with oneOf schemas: AwsValueDto, ConfigurationValueDto, EnvironmentValueDto, GPGValueDto, GitValueDto, SecretConfigurationValueDto, SecretEnvironmentValueDto, SshValueDto. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SecretConfigurationValueDto
        try:
            instance.actual_instance = SecretConfigurationValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SecretEnvironmentValueDto
        try:
            instance.actual_instance = SecretEnvironmentValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SshValueDto
        try:
            instance.actual_instance = SshValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GPGValueDto
        try:
            instance.actual_instance = GPGValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GitValueDto
        try:
            instance.actual_instance = GitValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EnvironmentValueDto
        try:
            instance.actual_instance = EnvironmentValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ConfigurationValueDto
        try:
            instance.actual_instance = ConfigurationValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AwsValueDto
        try:
            instance.actual_instance = AwsValueDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SecretsDtoSecret with oneOf schemas: AwsValueDto, ConfigurationValueDto, EnvironmentValueDto, GPGValueDto, GitValueDto, SecretConfigurationValueDto, SecretEnvironmentValueDto, SshValueDto. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SecretsDtoSecret with oneOf schemas: AwsValueDto, ConfigurationValueDto, EnvironmentValueDto, GPGValueDto, GitValueDto, SecretConfigurationValueDto, SecretEnvironmentValueDto, SshValueDto. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AwsValueDto, ConfigurationValueDto, EnvironmentValueDto, GPGValueDto, GitValueDto, SecretConfigurationValueDto, SecretEnvironmentValueDto, SshValueDto]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


