# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from do_sdk_platform.models.catalog_item_reference_object import CatalogItemReferenceObject
from do_sdk_platform.models.entry_point_reference_object import EntryPointReferenceObject
from do_sdk_platform.models.requirements_object import RequirementsObject
from typing import Optional, Set
from typing_extensions import Self

class NodeTypeResponse(BaseModel):
    """
    NodeTypeResponse
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    summary: StrictStr
    entry_points: List[EntryPointReferenceObject] = Field(alias="entryPoints")
    image_location: StrictStr = Field(alias="imageLocation")
    home_data_location: StrictStr = Field(alias="homeDataLocation")
    fixed_resources: StrictBool = Field(alias="fixedResources")
    shared_drive_required: StrictBool = Field(alias="sharedDriveRequired")
    notebooks: List[CatalogItemReferenceObject]
    operating_system: CatalogItemReferenceObject = Field(description="The description of the blueprint", alias="operatingSystem")
    applications: List[CatalogItemReferenceObject] = Field(description="The description of the blueprint")
    requirements: RequirementsObject = Field(description="The minimum requirements for the blueprint")
    __properties: ClassVar[List[str]] = ["id", "name", "summary", "entryPoints", "imageLocation", "homeDataLocation", "fixedResources", "sharedDriveRequired", "notebooks", "operatingSystem", "applications", "requirements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeTypeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entry_points (list)
        _items = []
        if self.entry_points:
            for _item_entry_points in self.entry_points:
                if _item_entry_points:
                    _items.append(_item_entry_points.to_dict())
            _dict['entryPoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notebooks (list)
        _items = []
        if self.notebooks:
            for _item_notebooks in self.notebooks:
                if _item_notebooks:
                    _items.append(_item_notebooks.to_dict())
            _dict['notebooks'] = _items
        # override the default output from pydantic by calling `to_dict()` of operating_system
        if self.operating_system:
            _dict['operatingSystem'] = self.operating_system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in applications (list)
        _items = []
        if self.applications:
            for _item_applications in self.applications:
                if _item_applications:
                    _items.append(_item_applications.to_dict())
            _dict['applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of requirements
        if self.requirements:
            _dict['requirements'] = self.requirements.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeTypeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "summary": obj.get("summary"),
            "entryPoints": [EntryPointReferenceObject.from_dict(_item) for _item in obj["entryPoints"]] if obj.get("entryPoints") is not None else None,
            "imageLocation": obj.get("imageLocation"),
            "homeDataLocation": obj.get("homeDataLocation"),
            "fixedResources": obj.get("fixedResources"),
            "sharedDriveRequired": obj.get("sharedDriveRequired"),
            "notebooks": [CatalogItemReferenceObject.from_dict(_item) for _item in obj["notebooks"]] if obj.get("notebooks") is not None else None,
            "operatingSystem": CatalogItemReferenceObject.from_dict(obj["operatingSystem"]) if obj.get("operatingSystem") is not None else None,
            "applications": [CatalogItemReferenceObject.from_dict(_item) for _item in obj["applications"]] if obj.get("applications") is not None else None,
            "requirements": RequirementsObject.from_dict(obj["requirements"]) if obj.get("requirements") is not None else None
        })
        return _obj


