# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from do_sdk_platform.models.data_post_request_schema_dto_data_description_inner_options import DataPostRequestSchemaDtoDataDescriptionInnerOptions
from do_sdk_platform.models.function_definition_schema_dto_input_schema_const import FunctionDefinitionSchemaDtoInputSchemaConst
from do_sdk_platform.models.function_definition_schema_dto_input_schema_default import FunctionDefinitionSchemaDtoInputSchemaDefault
from do_sdk_platform.models.function_definition_schema_dto_input_schema_error_message_value import FunctionDefinitionSchemaDtoInputSchemaErrorMessageValue
from do_sdk_platform.models.function_definition_schema_dto_input_schema_exclusive_maximum import FunctionDefinitionSchemaDtoInputSchemaExclusiveMaximum
from do_sdk_platform.models.function_definition_schema_dto_input_schema_required import FunctionDefinitionSchemaDtoInputSchemaRequired
from typing import Optional, Set
from typing_extensions import Self

class FunctionDefinitionSchemaDtoInputSchema(BaseModel):
    """
    FunctionDefinitionSchemaDtoInputSchema
    """ # noqa: E501
    additional_items: Optional[Any] = Field(default=None, alias="additionalItems")
    additional_properties: Optional[StrictBool] = Field(default=None, alias="additionalProperties")
    all_of: Optional[List[Any]] = Field(default=None, alias="allOf")
    any_of: Optional[List[Any]] = Field(default=None, alias="anyOf")
    const: Optional[FunctionDefinitionSchemaDtoInputSchemaConst] = None
    default: Optional[FunctionDefinitionSchemaDtoInputSchemaDefault] = None
    var_else: Optional[Any] = Field(default=None, alias="else")
    enum: Optional[FunctionDefinitionSchemaDtoInputSchemaConst] = None
    error_message: Optional[Dict[str, Optional[FunctionDefinitionSchemaDtoInputSchemaErrorMessageValue]]] = Field(default=None, alias="errorMessage")
    exclusive_maximum: Optional[FunctionDefinitionSchemaDtoInputSchemaExclusiveMaximum] = Field(default=None, alias="exclusiveMaximum")
    exclusive_minimum: Optional[FunctionDefinitionSchemaDtoInputSchemaExclusiveMaximum] = Field(default=None, alias="exclusiveMinimum")
    format: Optional[StrictStr] = None
    var_if: Optional[Any] = Field(default=None, alias="if")
    items: Optional[List[Any]] = None
    max_items: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxItems")
    max_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxLength")
    max_properties: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxProperties")
    maximum: Optional[Union[StrictFloat, StrictInt]] = None
    min_items: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minItems")
    min_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minLength")
    min_properties: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minProperties")
    minimum: Optional[Union[StrictFloat, StrictInt]] = None
    multiple_of: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="multipleOf")
    one_of: Optional[List[Any]] = Field(default=None, alias="oneOf")
    pattern: Optional[StrictStr] = None
    pattern_properties: Optional[Dict[str, Any]] = Field(default=None, alias="patternProperties")
    properties: Optional[Dict[str, Any]] = None
    property_names: Optional[Any] = Field(default=None, alias="propertyNames")
    required: Optional[FunctionDefinitionSchemaDtoInputSchemaRequired] = None
    then: Optional[Any] = None
    type: Optional[DataPostRequestSchemaDtoDataDescriptionInnerOptions] = None
    unevaluated_properties: Optional[Any] = Field(default=None, alias="unevaluatedProperties")
    unique_items: Optional[StrictBool] = Field(default=None, alias="uniqueItems")
    x_deeporigin_path: Optional[StrictStr] = Field(default=None, alias="x-deeporigin-path")
    __properties: ClassVar[List[str]] = ["additionalItems", "additionalProperties", "allOf", "anyOf", "const", "default", "else", "enum", "errorMessage", "exclusiveMaximum", "exclusiveMinimum", "format", "if", "items", "maxItems", "maxLength", "maxProperties", "maximum", "minItems", "minLength", "minProperties", "minimum", "multipleOf", "oneOf", "pattern", "patternProperties", "properties", "propertyNames", "required", "then", "type", "unevaluatedProperties", "uniqueItems", "x-deeporigin-path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FunctionDefinitionSchemaDtoInputSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of const
        if self.const:
            _dict['const'] = self.const.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enum
        if self.enum:
            _dict['enum'] = self.enum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in error_message (dict)
        _field_dict = {}
        if self.error_message:
            for _key_error_message in self.error_message:
                if self.error_message[_key_error_message]:
                    _field_dict[_key_error_message] = self.error_message[_key_error_message].to_dict()
            _dict['errorMessage'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of exclusive_maximum
        if self.exclusive_maximum:
            _dict['exclusiveMaximum'] = self.exclusive_maximum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exclusive_minimum
        if self.exclusive_minimum:
            _dict['exclusiveMinimum'] = self.exclusive_minimum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required
        if self.required:
            _dict['required'] = self.required.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # set to None if additional_items (nullable) is None
        # and model_fields_set contains the field
        if self.additional_items is None and "additional_items" in self.model_fields_set:
            _dict['additionalItems'] = None

        # set to None if var_else (nullable) is None
        # and model_fields_set contains the field
        if self.var_else is None and "var_else" in self.model_fields_set:
            _dict['else'] = None

        # set to None if var_if (nullable) is None
        # and model_fields_set contains the field
        if self.var_if is None and "var_if" in self.model_fields_set:
            _dict['if'] = None

        # set to None if items (nullable) is None
        # and model_fields_set contains the field
        if self.items is None and "items" in self.model_fields_set:
            _dict['items'] = None

        # set to None if property_names (nullable) is None
        # and model_fields_set contains the field
        if self.property_names is None and "property_names" in self.model_fields_set:
            _dict['propertyNames'] = None

        # set to None if then (nullable) is None
        # and model_fields_set contains the field
        if self.then is None and "then" in self.model_fields_set:
            _dict['then'] = None

        # set to None if unevaluated_properties (nullable) is None
        # and model_fields_set contains the field
        if self.unevaluated_properties is None and "unevaluated_properties" in self.model_fields_set:
            _dict['unevaluatedProperties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FunctionDefinitionSchemaDtoInputSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalItems": obj.get("additionalItems"),
            "additionalProperties": obj.get("additionalProperties"),
            "allOf": obj.get("allOf"),
            "anyOf": obj.get("anyOf"),
            "const": FunctionDefinitionSchemaDtoInputSchemaConst.from_dict(obj["const"]) if obj.get("const") is not None else None,
            "default": FunctionDefinitionSchemaDtoInputSchemaDefault.from_dict(obj["default"]) if obj.get("default") is not None else None,
            "else": obj.get("else"),
            "enum": FunctionDefinitionSchemaDtoInputSchemaConst.from_dict(obj["enum"]) if obj.get("enum") is not None else None,
            "errorMessage": dict(
                (_k, FunctionDefinitionSchemaDtoInputSchemaErrorMessageValue.from_dict(_v))
                for _k, _v in obj["errorMessage"].items()
            )
            if obj.get("errorMessage") is not None
            else None,
            "exclusiveMaximum": FunctionDefinitionSchemaDtoInputSchemaExclusiveMaximum.from_dict(obj["exclusiveMaximum"]) if obj.get("exclusiveMaximum") is not None else None,
            "exclusiveMinimum": FunctionDefinitionSchemaDtoInputSchemaExclusiveMaximum.from_dict(obj["exclusiveMinimum"]) if obj.get("exclusiveMinimum") is not None else None,
            "format": obj.get("format"),
            "if": obj.get("if"),
            "items": obj.get("items"),
            "maxItems": obj.get("maxItems"),
            "maxLength": obj.get("maxLength"),
            "maxProperties": obj.get("maxProperties"),
            "maximum": obj.get("maximum"),
            "minItems": obj.get("minItems"),
            "minLength": obj.get("minLength"),
            "minProperties": obj.get("minProperties"),
            "minimum": obj.get("minimum"),
            "multipleOf": obj.get("multipleOf"),
            "oneOf": obj.get("oneOf"),
            "pattern": obj.get("pattern"),
            "patternProperties": obj.get("patternProperties"),
            "properties": obj.get("properties"),
            "propertyNames": obj.get("propertyNames"),
            "required": FunctionDefinitionSchemaDtoInputSchemaRequired.from_dict(obj["required"]) if obj.get("required") is not None else None,
            "then": obj.get("then"),
            "type": DataPostRequestSchemaDtoDataDescriptionInnerOptions.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "unevaluatedProperties": obj.get("unevaluatedProperties"),
            "uniqueItems": obj.get("uniqueItems"),
            "x-deeporigin-path": obj.get("x-deeporigin-path")
        })
        return _obj


