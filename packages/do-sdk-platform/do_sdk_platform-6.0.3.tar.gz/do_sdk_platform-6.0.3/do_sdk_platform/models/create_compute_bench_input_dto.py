# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from do_sdk_platform.models.access_settings_input_dto import AccessSettingsInputDto
from do_sdk_platform.models.requested_cloud_provider_input import RequestedCloudProviderInput
from do_sdk_platform.models.resources_request_dto import ResourcesRequestDto
from typing import Optional, Set
from typing_extensions import Self

class CreateComputeBenchInputDto(BaseModel):
    """
    CreateComputeBenchInputDto
    """ # noqa: E501
    access_settings: AccessSettingsInputDto = Field(description="Access Settings", alias="accessSettings")
    auto_stop_idle_cpu_threshold: Union[StrictFloat, StrictInt] = Field(description="The CPU threshold for auto-stop", alias="autoStopIdleCPUThreshold")
    auto_stop_idle_duration: Union[StrictFloat, StrictInt] = Field(description="The duration of idle time before auto-stop", alias="autoStopIdleDuration")
    blueprint: StrictStr = Field(description="The ComputeBench software blueprint to use")
    cloud_provider: RequestedCloudProviderInput = Field(description="The requested Cloud Provider for the ComputeBench", alias="cloudProvider")
    cluster_id: StrictStr = Field(description="The cluster to run the ComputeBench on", alias="clusterId")
    description: StrictStr = Field(description="The description of the ComputeBench")
    enable_auto_stop: StrictBool = Field(description="Whether auto-stop is enabled", alias="enableAutoStop")
    resources: ResourcesRequestDto = Field(description="The requested resources for the ComputeBench")
    summary: StrictStr = Field(description="The summary of the ComputeBench")
    volume_mounts: List[StrictStr] = Field(description="The list of volume DRNs to mount to the bench", alias="volumeMounts")
    __properties: ClassVar[List[str]] = ["accessSettings", "autoStopIdleCPUThreshold", "autoStopIdleDuration", "blueprint", "cloudProvider", "clusterId", "description", "enableAutoStop", "resources", "summary", "volumeMounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateComputeBenchInputDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_settings
        if self.access_settings:
            _dict['accessSettings'] = self.access_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_provider
        if self.cloud_provider:
            _dict['cloudProvider'] = self.cloud_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateComputeBenchInputDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessSettings": AccessSettingsInputDto.from_dict(obj["accessSettings"]) if obj.get("accessSettings") is not None else None,
            "autoStopIdleCPUThreshold": obj.get("autoStopIdleCPUThreshold"),
            "autoStopIdleDuration": obj.get("autoStopIdleDuration"),
            "blueprint": obj.get("blueprint"),
            "cloudProvider": RequestedCloudProviderInput.from_dict(obj["cloudProvider"]) if obj.get("cloudProvider") is not None else None,
            "clusterId": obj.get("clusterId"),
            "description": obj.get("description"),
            "enableAutoStop": obj.get("enableAutoStop"),
            "resources": ResourcesRequestDto.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "summary": obj.get("summary"),
            "volumeMounts": obj.get("volumeMounts")
        })
        return _obj


