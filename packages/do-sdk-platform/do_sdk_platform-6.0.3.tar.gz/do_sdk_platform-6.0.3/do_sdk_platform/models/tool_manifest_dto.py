# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from do_sdk_platform.models.billing_parser_dto import BillingParserDto
from do_sdk_platform.models.json_schema_object_object_schema_dto import JsonSchemaObjectObjectSchemaDTO
from do_sdk_platform.models.tool_executor_dto import ToolExecutorDto
from typing import Optional, Set
from typing_extensions import Self

class ToolManifestDto(BaseModel):
    """
    ToolManifestDto
    """ # noqa: E501
    billing_parser: BillingParserDto = Field(description="Describes the billing parser for this tool.", alias="billingParser")
    description: StrictStr = Field(description="A brief description of this tool.")
    executors: List[ToolExecutorDto] = Field(description="Describes all the executable components of this tool.")
    inputs: JsonSchemaObjectObjectSchemaDTO = Field(description="Describes all the inputs, parameters and files, needed for this tool.")
    key: StrictStr = Field(description="A unique key identifying this tool. Treat this like a variable name; letters, numbers, underscores, dashes are allowed.")
    name: StrictStr = Field(description="The name of this tool.  This is for human consumption.")
    outputs: JsonSchemaObjectObjectSchemaDTO = Field(description="Describes all the expected outputs from this tool.")
    tool_manifest_version: StrictStr = Field(description="The tool manifest schema version. This is used to determine the schema version of the tool manifest.", alias="toolManifestVersion")
    version: StrictStr = Field(description="Indicates the version of the tool this definition represents.  Only Semantic Versioning (SemVer) versioning strategy is supported.")
    __properties: ClassVar[List[str]] = ["billingParser", "description", "executors", "inputs", "key", "name", "outputs", "toolManifestVersion", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolManifestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_parser
        if self.billing_parser:
            _dict['billingParser'] = self.billing_parser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in executors (list)
        _items = []
        if self.executors:
            for _item_executors in self.executors:
                if _item_executors:
                    _items.append(_item_executors.to_dict())
            _dict['executors'] = _items
        # override the default output from pydantic by calling `to_dict()` of inputs
        if self.inputs:
            _dict['inputs'] = self.inputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outputs
        if self.outputs:
            _dict['outputs'] = self.outputs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolManifestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingParser": BillingParserDto.from_dict(obj["billingParser"]) if obj.get("billingParser") is not None else None,
            "description": obj.get("description"),
            "executors": [ToolExecutorDto.from_dict(_item) for _item in obj["executors"]] if obj.get("executors") is not None else None,
            "inputs": JsonSchemaObjectObjectSchemaDTO.from_dict(obj["inputs"]) if obj.get("inputs") is not None else None,
            "key": obj.get("key"),
            "name": obj.get("name"),
            "outputs": JsonSchemaObjectObjectSchemaDTO.from_dict(obj["outputs"]) if obj.get("outputs") is not None else None,
            "toolManifestVersion": obj.get("toolManifestVersion"),
            "version": obj.get("version")
        })
        return _obj


