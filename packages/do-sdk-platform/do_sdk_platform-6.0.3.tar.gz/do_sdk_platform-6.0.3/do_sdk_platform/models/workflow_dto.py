# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from do_sdk_platform.models.cluster_dto import ClusterDto
from typing import Optional, Set
from typing_extensions import Self

class WorkflowDto(BaseModel):
    """
    WorkflowDto
    """ # noqa: E501
    cluster: ClusterDto = Field(description="The id of the cluster the workflow is running on")
    completed_at: datetime = Field(description="Date the workflow was completed at", alias="completedAt")
    correlation_id: StrictStr = Field(description="Correlation id for the workflow execution", alias="correlationId")
    created_at: datetime = Field(description="Date the resource was created at", alias="createdAt")
    created_by: StrictStr = Field(description="DRN of the user who created the workflow", alias="createdBy")
    drn: StrictStr = Field(description="DRN for the Workflow")
    engine_parameters: Dict[str, Any] = Field(description="Parameters for the workflow", alias="engineParameters")
    name: StrictStr = Field(description="The name of the workflow")
    org_drn: StrictStr = Field(description="The drn of the organization that owns the workflow", alias="orgDrn")
    output_directory: StrictStr = Field(description="Location of the outputs of the workflow", alias="outputDirectory")
    parameters: Dict[str, Any] = Field(description="Parameters for the workflow")
    pipeline_id: StrictStr = Field(description="The id of the pipeline executed by the workflow", alias="pipelineId")
    status: StrictStr = Field(description="The status of the workflow")
    summary: StrictStr = Field(description="The summary of the workflow")
    updated_at: datetime = Field(description="Date the resource was last updated at", alias="updatedAt")
    volume_mounts: List[StrictStr] = Field(description="Volume Mounts", alias="volumeMounts")
    workflow_language: StrictStr = Field(description="Workflow language for the workflow", alias="workflowLanguage")
    working_dir: StrictStr = Field(description="Working directory for the workflow", alias="workingDir")
    __properties: ClassVar[List[str]] = ["cluster", "completedAt", "correlationId", "createdAt", "createdBy", "drn", "engineParameters", "name", "orgDrn", "outputDirectory", "parameters", "pipelineId", "status", "summary", "updatedAt", "volumeMounts", "workflowLanguage", "workingDir"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Pending', 'Running', 'Succeeded', 'Failed', 'Unknown']):
            raise ValueError("must be one of enum values ('Pending', 'Running', 'Succeeded', 'Failed', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster
        if self.cluster:
            _dict['cluster'] = self.cluster.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster": ClusterDto.from_dict(obj["cluster"]) if obj.get("cluster") is not None else None,
            "completedAt": obj.get("completedAt"),
            "correlationId": obj.get("correlationId"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "drn": obj.get("drn"),
            "engineParameters": obj.get("engineParameters"),
            "name": obj.get("name"),
            "orgDrn": obj.get("orgDrn"),
            "outputDirectory": obj.get("outputDirectory"),
            "parameters": obj.get("parameters"),
            "pipelineId": obj.get("pipelineId"),
            "status": obj.get("status"),
            "summary": obj.get("summary"),
            "updatedAt": obj.get("updatedAt"),
            "volumeMounts": obj.get("volumeMounts"),
            "workflowLanguage": obj.get("workflowLanguage"),
            "workingDir": obj.get("workingDir")
        })
        return _obj


