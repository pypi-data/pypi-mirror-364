# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from do_sdk_platform.models.organization_invite_dto import OrganizationInviteDto
from do_sdk_platform.models.organization_user_dto import OrganizationUserDto
from do_sdk_platform.models.role_dto import RoleDto
from typing import Optional, Set
from typing_extensions import Self

class OrganizationDto(BaseModel):
    """
    OrganizationDto
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="The date the org was created")
    data_hub_status: StrictStr = Field(description="The data hub status of the organization in the cloud resources", alias="dataHubStatus")
    drn: Optional[StrictStr] = Field(default=None, description="The DRN of the organization")
    friendly_id: Optional[StrictStr] = Field(default=None, description="The friendly ID of the organization", alias="friendlyId")
    invites: Optional[List[OrganizationInviteDto]] = Field(default=None, description="List of users invited to the organization")
    mfa_enabled: Optional[StrictBool] = Field(default=None, description="Whether MFA is enabled for the organization", alias="mfaEnabled")
    name: Optional[StrictStr] = Field(default=None, description="The name of the organization")
    roles: Optional[List[RoleDto]] = None
    status: StrictStr = Field(description="The status of the organization in the cloud resources")
    users: Optional[List[OrganizationUserDto]] = Field(default=None, description="List of users in the organization")
    __properties: ClassVar[List[str]] = ["created", "dataHubStatus", "drn", "friendlyId", "invites", "mfaEnabled", "name", "roles", "status", "users"]

    @field_validator('data_hub_status')
    def data_hub_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PENDING', 'READY', 'FAILED']):
            raise ValueError("must be one of enum values ('PENDING', 'READY', 'FAILED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PENDING', 'READY', 'FAILED']):
            raise ValueError("must be one of enum values ('PENDING', 'READY', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invites (list)
        _items = []
        if self.invites:
            for _item_invites in self.invites:
                if _item_invites:
                    _items.append(_item_invites.to_dict())
            _dict['invites'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "dataHubStatus": obj.get("dataHubStatus"),
            "drn": obj.get("drn"),
            "friendlyId": obj.get("friendlyId"),
            "invites": [OrganizationInviteDto.from_dict(_item) for _item in obj["invites"]] if obj.get("invites") is not None else None,
            "mfaEnabled": obj.get("mfaEnabled"),
            "name": obj.get("name"),
            "roles": [RoleDto.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "status": obj.get("status"),
            "users": [OrganizationUserDto.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj


