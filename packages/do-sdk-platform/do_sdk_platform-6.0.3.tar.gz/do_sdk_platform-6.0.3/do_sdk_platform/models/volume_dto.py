# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from do_sdk_platform.models.file_volume_configuration_dto import FileVolumeConfigurationDto
from do_sdk_platform.models.volumestatus import VOLUMESTATUS
from typing import Optional, Set
from typing_extensions import Self

class VolumeDto(BaseModel):
    """
    VolumeDto
    """ # noqa: E501
    cluster_id: StrictStr = Field(description="ID of the cluster the volume is attached to", alias="clusterId")
    configuration: FileVolumeConfigurationDto = Field(description="Configuration options for the volume")
    created_at: datetime = Field(description="Date the resource was created at", alias="createdAt")
    created_by: StrictStr = Field(description="DRN of the user who created the volume", alias="createdBy")
    drn: StrictStr = Field(description="DRN for the Volume")
    name: StrictStr = Field(description="The name of the volume assigned by the user")
    status: VOLUMESTATUS
    summary: StrictStr = Field(description="User given summary describing the volume")
    updated_at: datetime = Field(description="Date the resource was last updated at", alias="updatedAt")
    user_assigned_id: StrictStr = Field(description="The id assigned by the user for the volume", alias="userAssignedId")
    __properties: ClassVar[List[str]] = ["clusterId", "configuration", "createdAt", "createdBy", "drn", "name", "status", "summary", "updatedAt", "userAssignedId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "configuration": FileVolumeConfigurationDto.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "drn": obj.get("drn"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "summary": obj.get("summary"),
            "updatedAt": obj.get("updatedAt"),
            "userAssignedId": obj.get("userAssignedId")
        })
        return _obj


