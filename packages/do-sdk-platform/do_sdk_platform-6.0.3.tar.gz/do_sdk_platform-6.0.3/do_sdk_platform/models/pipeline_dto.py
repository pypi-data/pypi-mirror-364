# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class PipelineDto(BaseModel):
    """
    PipelineDto
    """ # noqa: E501
    created_at: datetime = Field(description="Date the resource was created at", alias="createdAt")
    name: StrictStr = Field(description="The name of the pipeline")
    pipeline_language: StrictStr = Field(description="The language of the pipeline", alias="pipelineLanguage")
    pipeline_language_version: StrictStr = Field(description="The version of the pipeline language", alias="pipelineLanguageVersion")
    pipeline_url: StrictStr = Field(description="The URL to the pipeline", alias="pipelineUrl")
    sample_schema: Dict[str, Any] = Field(alias="sampleSchema")
    var_schema: Dict[str, Any] = Field(alias="schema")
    summary: StrictStr = Field(description="Description of the pipeline")
    updated_at: datetime = Field(description="Date the resource was last updated at", alias="updatedAt")
    version: StrictStr = Field(description="Version of the pipeline")
    __properties: ClassVar[List[str]] = ["createdAt", "name", "pipelineLanguage", "pipelineLanguageVersion", "pipelineUrl", "sampleSchema", "schema", "summary", "updatedAt", "version"]

    @field_validator('pipeline_language')
    def pipeline_language_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['nextflow', 'snakemake']):
            raise ValueError("must be one of enum values ('nextflow', 'snakemake')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "name": obj.get("name"),
            "pipelineLanguage": obj.get("pipelineLanguage"),
            "pipelineLanguageVersion": obj.get("pipelineLanguageVersion"),
            "pipelineUrl": obj.get("pipelineUrl"),
            "sampleSchema": obj.get("sampleSchema"),
            "schema": obj.get("schema"),
            "summary": obj.get("summary"),
            "updatedAt": obj.get("updatedAt"),
            "version": obj.get("version")
        })
        return _obj


