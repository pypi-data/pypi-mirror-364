# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from do_sdk_platform.models.fsx_storage_type import FSXStorageType
from do_sdk_platform.models.requested_cloud_provider_input import RequestedCloudProviderInput
from do_sdk_platform.models.shared_volume_type import SharedVolumeType
from typing import Optional, Set
from typing_extensions import Self

class CreateFileVolumeDto(BaseModel):
    """
    CreateFileVolumeDto
    """ # noqa: E501
    cloud_provider: RequestedCloudProviderInput = Field(description="The requested Cloud Provider for the resource", alias="cloudProvider")
    cluster_id: StrictStr = Field(description="The ID of the cluster to deploy the volume to", alias="clusterId")
    name: StrictStr = Field(description="The name of the volume, assigned by the user")
    size_gb: Union[StrictFloat, StrictInt] = Field(description="The size of the volume", alias="sizeGb")
    summary: StrictStr = Field(description="User provided summary of what the volume is for")
    throughput: Optional[FSXStorageType] = None
    type: SharedVolumeType
    user_assigned_id: StrictStr = Field(description="The id assigned by the user for the volume, used for mounting the volume", alias="userAssignedId")
    __properties: ClassVar[List[str]] = ["cloudProvider", "clusterId", "name", "sizeGb", "summary", "throughput", "type", "userAssignedId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFileVolumeDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_provider
        if self.cloud_provider:
            _dict['cloudProvider'] = self.cloud_provider.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFileVolumeDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudProvider": RequestedCloudProviderInput.from_dict(obj["cloudProvider"]) if obj.get("cloudProvider") is not None else None,
            "clusterId": obj.get("clusterId"),
            "name": obj.get("name"),
            "sizeGb": obj.get("sizeGb"),
            "summary": obj.get("summary"),
            "throughput": obj.get("throughput"),
            "type": obj.get("type"),
            "userAssignedId": obj.get("userAssignedId")
        })
        return _obj


