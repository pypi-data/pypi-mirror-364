# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UpdateSubscriptionDto(BaseModel):
    """
    UpdateSubscriptionDto
    """ # noqa: E501
    existing_id: Optional[StrictStr] = Field(default=None, description="Existing subscription identifier if applicable.", alias="existingId")
    group_id: StrictStr = Field(description="Group identifier for the subscription plan.", alias="groupId")
    org_friendly_id: StrictStr = Field(description="Organization friendly identifier.", alias="orgFriendlyId")
    payment_id: Optional[StrictStr] = Field(default=None, description="Payment identifier associated with the subscription.", alias="paymentId")
    period: Union[StrictFloat, StrictInt] = Field(description="Subscription period type (Monthly, Yearly, etc.).")
    plan_id: StrictStr = Field(description="Identifier of the subscription plan.", alias="planId")
    qty: Union[StrictFloat, StrictInt] = Field(description="Quantity of the subscription plan.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Optional subscription identifier (if already exists).", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["existingId", "groupId", "orgFriendlyId", "paymentId", "period", "planId", "qty", "subscriptionId"]

    @field_validator('period')
    def period_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([1, 2, 3, 4]):
            raise ValueError("must be one of enum values (1, 2, 3, 4)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSubscriptionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSubscriptionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "existingId": obj.get("existingId"),
            "groupId": obj.get("groupId"),
            "orgFriendlyId": obj.get("orgFriendlyId"),
            "paymentId": obj.get("paymentId"),
            "period": obj.get("period"),
            "planId": obj.get("planId"),
            "qty": obj.get("qty"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj


