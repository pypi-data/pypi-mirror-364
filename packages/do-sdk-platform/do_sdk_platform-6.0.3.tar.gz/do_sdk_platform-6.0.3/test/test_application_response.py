# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.application_response import ApplicationResponse

class TestApplicationResponse(unittest.TestCase):
    """ApplicationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationResponse:
        """Test ApplicationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationResponse`
        """
        model = ApplicationResponse()
        if include_optional:
            return ApplicationResponse(
                authors = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                created = '',
                description = '',
                icon = '',
                id = '',
                license = do_sdk_platform.models.described_external_entity_object.DescribedExternalEntityObject(
                    description = '', 
                    name = '', 
                    url = '', ),
                name = '',
                publication_references = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                requirements = do_sdk_platform.models.application_requirements_object.ApplicationRequirementsObject(
                    applications = [
                        do_sdk_platform.models.application_requirement_specification_object.ApplicationRequirementSpecificationObject(
                            id = '', 
                            variant_tags = [
                                ''
                                ], 
                            version = '', )
                        ], 
                    hardware = null, 
                    operating_systems = do_sdk_platform.models.operating_system_requirement_specification_object.OperatingSystemRequirementSpecificationObject(
                        id = '', 
                        variant_tags = [
                            ''
                            ], 
                        version = [
                            do_sdk_platform.models.version_requirement_object.VersionRequirementObject(
                                operator = do_sdk_platform.models.operator.operator(), 
                                version = '', )
                            ], ), ),
                resource_links = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                summary = '',
                type_id = '',
                use_case_ids = [
                    ''
                    ],
                use_case_names = [
                    ''
                    ],
                variant_tags = [
                    ''
                    ],
                version = ''
            )
        else:
            return ApplicationResponse(
                authors = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                created = '',
                description = '',
                icon = '',
                id = '',
                license = do_sdk_platform.models.described_external_entity_object.DescribedExternalEntityObject(
                    description = '', 
                    name = '', 
                    url = '', ),
                name = '',
                publication_references = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                requirements = do_sdk_platform.models.application_requirements_object.ApplicationRequirementsObject(
                    applications = [
                        do_sdk_platform.models.application_requirement_specification_object.ApplicationRequirementSpecificationObject(
                            id = '', 
                            variant_tags = [
                                ''
                                ], 
                            version = '', )
                        ], 
                    hardware = null, 
                    operating_systems = do_sdk_platform.models.operating_system_requirement_specification_object.OperatingSystemRequirementSpecificationObject(
                        id = '', 
                        variant_tags = [
                            ''
                            ], 
                        version = [
                            do_sdk_platform.models.version_requirement_object.VersionRequirementObject(
                                operator = do_sdk_platform.models.operator.operator(), 
                                version = '', )
                            ], ), ),
                resource_links = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                summary = '',
                type_id = '',
                use_case_ids = [
                    ''
                    ],
                use_case_names = [
                    ''
                    ],
                variant_tags = [
                    ''
                    ],
                version = '',
        )
        """

    def testApplicationResponse(self):
        """Test ApplicationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
