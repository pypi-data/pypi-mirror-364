# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.blueprint_object import BlueprintObject

class TestBlueprintObject(unittest.TestCase):
    """BlueprintObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BlueprintObject:
        """Test BlueprintObject
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BlueprintObject`
        """
        model = BlueprintObject()
        if include_optional:
            return BlueprintObject(
                applications = [
                    do_sdk_platform.models.application_response.ApplicationResponse(
                        authors = [
                            do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                                name = '', 
                                url = '', )
                            ], 
                        created = '', 
                        description = '', 
                        icon = '', 
                        id = '', 
                        license = null, 
                        name = '', 
                        publication_references = [
                            do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                                name = '', 
                                url = '', )
                            ], 
                        requirements = null, 
                        resource_links = [
                            
                            ], 
                        summary = '', 
                        type_id = '', 
                        use_case_ids = [
                            ''
                            ], 
                        use_case_names = [
                            ''
                            ], 
                        variant_tags = [
                            ''
                            ], 
                        version = '', )
                    ],
                authors = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                created = '',
                description = None,
                enabled = True,
                icon = [
                    ''
                    ],
                id = '',
                license = do_sdk_platform.models.described_external_entity_object.DescribedExternalEntityObject(
                    description = '', 
                    name = '', 
                    url = '', ),
                name = '',
                node_types = [
                    do_sdk_platform.models.node_type_response.NodeTypeResponse(
                        applications = [
                            do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                                id = '', 
                                other_item_version = '', 
                                variant_tags = [
                                    ''
                                    ], 
                                version = '', )
                            ], 
                        entry_points = [
                            do_sdk_platform.models.entry_point_reference_object.EntryPointReferenceObject(
                                id = '', 
                                is_exposed = True, 
                                name = '', 
                                port = 1.337, 
                                protocol = '', )
                            ], 
                        fixed_resources = True, 
                        home_data_location = '', 
                        id = '', 
                        image_location = '', 
                        name = '', 
                        notebooks = [
                            do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                                id = '', 
                                other_item_version = '', 
                                variant_tags = [
                                    ''
                                    ], 
                                version = '', )
                            ], 
                        operating_system = null, 
                        requirements = null, 
                        shared_drive_required = True, 
                        summary = '', )
                    ],
                publication_references = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                resource_links = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                summary = '',
                type_id = '',
                use_case_ids = [
                    ''
                    ],
                use_case_names = [
                    ''
                    ],
                variant_tags = [
                    ''
                    ],
                version = ''
            )
        else:
            return BlueprintObject(
                applications = [
                    do_sdk_platform.models.application_response.ApplicationResponse(
                        authors = [
                            do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                                name = '', 
                                url = '', )
                            ], 
                        created = '', 
                        description = '', 
                        icon = '', 
                        id = '', 
                        license = null, 
                        name = '', 
                        publication_references = [
                            do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                                name = '', 
                                url = '', )
                            ], 
                        requirements = null, 
                        resource_links = [
                            
                            ], 
                        summary = '', 
                        type_id = '', 
                        use_case_ids = [
                            ''
                            ], 
                        use_case_names = [
                            ''
                            ], 
                        variant_tags = [
                            ''
                            ], 
                        version = '', )
                    ],
                authors = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                created = '',
                description = None,
                enabled = True,
                icon = [
                    ''
                    ],
                id = '',
                license = do_sdk_platform.models.described_external_entity_object.DescribedExternalEntityObject(
                    description = '', 
                    name = '', 
                    url = '', ),
                name = '',
                node_types = [
                    do_sdk_platform.models.node_type_response.NodeTypeResponse(
                        applications = [
                            do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                                id = '', 
                                other_item_version = '', 
                                variant_tags = [
                                    ''
                                    ], 
                                version = '', )
                            ], 
                        entry_points = [
                            do_sdk_platform.models.entry_point_reference_object.EntryPointReferenceObject(
                                id = '', 
                                is_exposed = True, 
                                name = '', 
                                port = 1.337, 
                                protocol = '', )
                            ], 
                        fixed_resources = True, 
                        home_data_location = '', 
                        id = '', 
                        image_location = '', 
                        name = '', 
                        notebooks = [
                            do_sdk_platform.models.catalog_item_reference_object.CatalogItemReferenceObject(
                                id = '', 
                                other_item_version = '', 
                                variant_tags = [
                                    ''
                                    ], 
                                version = '', )
                            ], 
                        operating_system = null, 
                        requirements = null, 
                        shared_drive_required = True, 
                        summary = '', )
                    ],
                publication_references = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                resource_links = [
                    do_sdk_platform.models.external_entity_object.ExternalEntityObject(
                        name = '', 
                        url = '', )
                    ],
                summary = '',
                type_id = '',
                use_case_ids = [
                    ''
                    ],
                use_case_names = [
                    ''
                    ],
                variant_tags = [
                    ''
                    ],
                version = '',
        )
        """

    def testBlueprintObject(self):
        """Test BlueprintObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
