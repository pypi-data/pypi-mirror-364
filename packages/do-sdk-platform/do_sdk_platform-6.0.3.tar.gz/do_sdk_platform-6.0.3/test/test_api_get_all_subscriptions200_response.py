# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.api_get_all_subscriptions200_response import ApiGetAllSubscriptions200Response

class TestApiGetAllSubscriptions200Response(unittest.TestCase):
    """ApiGetAllSubscriptions200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiGetAllSubscriptions200Response:
        """Test ApiGetAllSubscriptions200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiGetAllSubscriptions200Response`
        """
        model = ApiGetAllSubscriptions200Response()
        if include_optional:
            return ApiGetAllSubscriptions200Response(
                data = do_sdk_platform.models.api_get_all_subscriptions_200_response_data.apiGetAllSubscriptions_200_response_data(
                    attributes = do_sdk_platform.models.get_subscriptions_results_dto.GetSubscriptionsResultsDto(
                        subscriptions = [
                            do_sdk_platform.models.subscription_group_dto.SubscriptionGroupDto(
                                description = '', 
                                group_id = '', 
                                group_name = '', 
                                plans = [
                                    do_sdk_platform.models.subscriptions_plans_dto.SubscriptionsPlansDto(
                                        annually_price = 1.337, 
                                        auto_renew = True, 
                                        auto_set_qty = True, 
                                        can_delete = True, 
                                        description = '', 
                                        enabled = True, 
                                        group = '', 
                                        group_id = '', 
                                        id = '', 
                                        is_available = True, 
                                        meta = null, 
                                        monthly_price = 1.337, 
                                        name = '', 
                                        period = 1, 
                                        plan_id = '', 
                                        price = '', 
                                        qty = 1.337, 
                                        qty_required = True, 
                                        quarterly_price = 1.337, 
                                        semi_annually_price = 1.337, 
                                        to_date = '', )
                                    ], )
                            ], 
                        total_items_count = 1.337, ), 
                    id = '', 
                    type = '', ),
                links = do_sdk_platform.models.http_links_dto.HttpLinksDto(
                    first = '', 
                    next = '', 
                    prev = '', 
                    self = '', )
            )
        else:
            return ApiGetAllSubscriptions200Response(
                data = do_sdk_platform.models.api_get_all_subscriptions_200_response_data.apiGetAllSubscriptions_200_response_data(
                    attributes = do_sdk_platform.models.get_subscriptions_results_dto.GetSubscriptionsResultsDto(
                        subscriptions = [
                            do_sdk_platform.models.subscription_group_dto.SubscriptionGroupDto(
                                description = '', 
                                group_id = '', 
                                group_name = '', 
                                plans = [
                                    do_sdk_platform.models.subscriptions_plans_dto.SubscriptionsPlansDto(
                                        annually_price = 1.337, 
                                        auto_renew = True, 
                                        auto_set_qty = True, 
                                        can_delete = True, 
                                        description = '', 
                                        enabled = True, 
                                        group = '', 
                                        group_id = '', 
                                        id = '', 
                                        is_available = True, 
                                        meta = null, 
                                        monthly_price = 1.337, 
                                        name = '', 
                                        period = 1, 
                                        plan_id = '', 
                                        price = '', 
                                        qty = 1.337, 
                                        qty_required = True, 
                                        quarterly_price = 1.337, 
                                        semi_annually_price = 1.337, 
                                        to_date = '', )
                                    ], )
                            ], 
                        total_items_count = 1.337, ), 
                    id = '', 
                    type = '', ),
                links = do_sdk_platform.models.http_links_dto.HttpLinksDto(
                    first = '', 
                    next = '', 
                    prev = '', 
                    self = '', ),
        )
        """

    def testApiGetAllSubscriptions200Response(self):
        """Test ApiGetAllSubscriptions200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
