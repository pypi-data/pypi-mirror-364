# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.get_subscriptions_results_schema_dto_subscriptions_inner import GetSubscriptionsResultsSchemaDtoSubscriptionsInner

class TestGetSubscriptionsResultsSchemaDtoSubscriptionsInner(unittest.TestCase):
    """GetSubscriptionsResultsSchemaDtoSubscriptionsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSubscriptionsResultsSchemaDtoSubscriptionsInner:
        """Test GetSubscriptionsResultsSchemaDtoSubscriptionsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSubscriptionsResultsSchemaDtoSubscriptionsInner`
        """
        model = GetSubscriptionsResultsSchemaDtoSubscriptionsInner()
        if include_optional:
            return GetSubscriptionsResultsSchemaDtoSubscriptionsInner(
                description = '',
                group_id = '',
                group_name = '',
                plans = [
                    do_sdk_platform.models.get_subscriptions_results_schema_dto_subscriptions_inner_plans_inner.GetSubscriptionsResultsSchemaDto_subscriptions_inner_plans_inner(
                        annually_price = 1.337, 
                        auto_renew = True, 
                        auto_set_qty = True, 
                        can_delete = True, 
                        description = '', 
                        enabled = True, 
                        group = '', 
                        group_id = '', 
                        id = '', 
                        is_available = True, 
                        meta = do_sdk_platform.models.get_subscriptions_results_schema_dto_subscriptions_inner_plans_inner_meta.GetSubscriptionsResultsSchemaDto_subscriptions_inner_plans_inner_meta(
                            academic = True, 
                            can_buy_credits = True, 
                            coming_soon = [
                                ''
                                ], 
                            demo_url = '', 
                            doc_url = '', 
                            gateway = True, 
                            includes = [
                                ''
                                ], 
                            index = 1.337, 
                            is_beta = True, 
                            is_coming_soon = '', 
                            max_days = 1.337, 
                            max_invites = 1.337, 
                            max_subscriptions = 1.337, 
                            needs_credit_card = True, 
                            renewable = True, ), 
                        monthly_price = 1.337, 
                        name = '', 
                        period = 'Monthly', 
                        plan_id = '', 
                        price = '', 
                        qty = 1.337, 
                        qty_required = True, 
                        quarterly_price = 1.337, 
                        semi_annually_price = 1.337, 
                        to_date = '', )
                    ]
            )
        else:
            return GetSubscriptionsResultsSchemaDtoSubscriptionsInner(
                description = '',
                group_id = '',
                group_name = '',
                plans = [
                    do_sdk_platform.models.get_subscriptions_results_schema_dto_subscriptions_inner_plans_inner.GetSubscriptionsResultsSchemaDto_subscriptions_inner_plans_inner(
                        annually_price = 1.337, 
                        auto_renew = True, 
                        auto_set_qty = True, 
                        can_delete = True, 
                        description = '', 
                        enabled = True, 
                        group = '', 
                        group_id = '', 
                        id = '', 
                        is_available = True, 
                        meta = do_sdk_platform.models.get_subscriptions_results_schema_dto_subscriptions_inner_plans_inner_meta.GetSubscriptionsResultsSchemaDto_subscriptions_inner_plans_inner_meta(
                            academic = True, 
                            can_buy_credits = True, 
                            coming_soon = [
                                ''
                                ], 
                            demo_url = '', 
                            doc_url = '', 
                            gateway = True, 
                            includes = [
                                ''
                                ], 
                            index = 1.337, 
                            is_beta = True, 
                            is_coming_soon = '', 
                            max_days = 1.337, 
                            max_invites = 1.337, 
                            max_subscriptions = 1.337, 
                            needs_credit_card = True, 
                            renewable = True, ), 
                        monthly_price = 1.337, 
                        name = '', 
                        period = 'Monthly', 
                        plan_id = '', 
                        price = '', 
                        qty = 1.337, 
                        qty_required = True, 
                        quarterly_price = 1.337, 
                        semi_annually_price = 1.337, 
                        to_date = '', )
                    ],
        )
        """

    def testGetSubscriptionsResultsSchemaDtoSubscriptionsInner(self):
        """Test GetSubscriptionsResultsSchemaDtoSubscriptionsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
