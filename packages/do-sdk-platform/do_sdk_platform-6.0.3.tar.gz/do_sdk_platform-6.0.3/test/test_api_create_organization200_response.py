# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.api_create_organization200_response import ApiCreateOrganization200Response

class TestApiCreateOrganization200Response(unittest.TestCase):
    """ApiCreateOrganization200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiCreateOrganization200Response:
        """Test ApiCreateOrganization200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiCreateOrganization200Response`
        """
        model = ApiCreateOrganization200Response()
        if include_optional:
            return ApiCreateOrganization200Response(
                data = do_sdk_platform.models.api_create_organization_200_response_data.apiCreateOrganization_200_response_data(
                    attributes = do_sdk_platform.models.organization_dto.OrganizationDto(
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_hub_status = 'READY', 
                        drn = '', 
                        friendly_id = '', 
                        invites = [
                            do_sdk_platform.models.organization_invite_dto.OrganizationInviteDto(
                                accepted = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                code = '', 
                                email = '', 
                                invited_by = '', 
                                roles = [
                                    'Owner'
                                    ], )
                            ], 
                        mfa_enabled = True, 
                        name = '', 
                        roles = [
                            do_sdk_platform.models.role_dto.RoleDto(
                                name = 'Owner', 
                                permissions = [
                                    do_sdk_platform.models.permission_dto.PermissionDto(
                                        action = 'CREATE', 
                                        condition = null, 
                                        subject = 'CLUSTER', )
                                    ], )
                            ], 
                        status = 'READY', 
                        users = [
                            do_sdk_platform.models.organization_user_dto.OrganizationUserDto(
                                auth_id = '', 
                                avatar = '', 
                                email = '', 
                                name = '', 
                                roles = [
                                    'Owner'
                                    ], )
                            ], ), 
                    id = '', 
                    type = '', ),
                links = do_sdk_platform.models.http_links_dto.HttpLinksDto(
                    first = '', 
                    next = '', 
                    prev = '', 
                    self = '', )
            )
        else:
            return ApiCreateOrganization200Response(
                data = do_sdk_platform.models.api_create_organization_200_response_data.apiCreateOrganization_200_response_data(
                    attributes = do_sdk_platform.models.organization_dto.OrganizationDto(
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_hub_status = 'READY', 
                        drn = '', 
                        friendly_id = '', 
                        invites = [
                            do_sdk_platform.models.organization_invite_dto.OrganizationInviteDto(
                                accepted = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                code = '', 
                                email = '', 
                                invited_by = '', 
                                roles = [
                                    'Owner'
                                    ], )
                            ], 
                        mfa_enabled = True, 
                        name = '', 
                        roles = [
                            do_sdk_platform.models.role_dto.RoleDto(
                                name = 'Owner', 
                                permissions = [
                                    do_sdk_platform.models.permission_dto.PermissionDto(
                                        action = 'CREATE', 
                                        condition = null, 
                                        subject = 'CLUSTER', )
                                    ], )
                            ], 
                        status = 'READY', 
                        users = [
                            do_sdk_platform.models.organization_user_dto.OrganizationUserDto(
                                auth_id = '', 
                                avatar = '', 
                                email = '', 
                                name = '', 
                                roles = [
                                    'Owner'
                                    ], )
                            ], ), 
                    id = '', 
                    type = '', ),
                links = do_sdk_platform.models.http_links_dto.HttpLinksDto(
                    first = '', 
                    next = '', 
                    prev = '', 
                    self = '', ),
        )
        """

    def testApiCreateOrganization200Response(self):
        """Test ApiCreateOrganization200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
