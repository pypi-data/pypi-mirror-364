# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateAccountInputV2Dto(BaseModel):
    """
    CreateAccountInputV2Dto
    """ # noqa: E501
    name: StrictStr = Field(description="Full name of the user for account creation.")
    email: StrictStr = Field(description="Email address of the user to be used as the login identifier.")
    company: StrictStr = Field(description="Optional company name where the user works.")
    title: StrictStr = Field(description="Optional title or position of the user.")
    password: StrictStr = Field(description="Password for the new account. Should meet password policies.")
    code: StrictStr = Field(description="Verification code provided for account creation.")
    invite_code: Optional[StrictStr] = Field(default=None, description="Optional invite code if the user was invited.", alias="inviteCode")
    __properties: ClassVar[List[str]] = ["name", "email", "company", "title", "password", "code", "inviteCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAccountInputV2Dto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAccountInputV2Dto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "email": obj.get("email"),
            "company": obj.get("company"),
            "title": obj.get("title"),
            "password": obj.get("password"),
            "code": obj.get("code"),
            "inviteCode": obj.get("inviteCode")
        })
        return _obj


