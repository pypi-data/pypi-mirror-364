# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from do_sdk_platform.models.access_method_dto import AccessMethodDto
from do_sdk_platform.models.access_settings_dto import AccessSettingsDto
from do_sdk_platform.models.compute_bench_state_dto import ComputeBenchStateDto
from do_sdk_platform.models.compute_bench_status import ComputeBenchStatus
from do_sdk_platform.models.requested_cloud_provider_dto import RequestedCloudProviderDto
from do_sdk_platform.models.resources_request_dto import ResourcesRequestDto
from do_sdk_platform.models.user_action import UserAction
from typing import Optional, Set
from typing_extensions import Self

class ComputeBenchDto(BaseModel):
    """
    ComputeBenchDto
    """ # noqa: E501
    drn: StrictStr = Field(description="DRN for the ComputeBench")
    org_handle: StrictStr = Field(description="The organization this ComputeBench belongs to", alias="orgHandle")
    user_handle: StrictStr = Field(description="The user this ComputeBench belongs to", alias="userHandle")
    cloud_provider: RequestedCloudProviderDto = Field(description="The user this ComputeBench belongs to", alias="cloudProvider")
    cluster_id: StrictStr = Field(description="The clusterId this ComputeBench runs on", alias="clusterId")
    name: StrictStr
    description: StrictStr = Field(description="The user given description of the ComputeBench")
    summary: StrictStr = Field(description="summary")
    requested_resources: ResourcesRequestDto = Field(description="The requested resources for the ComputeBench", alias="requestedResources")
    status: ComputeBenchStatus
    state: ComputeBenchStateDto = Field(description="The current state of the ComputeBench")
    access_methods: List[AccessMethodDto] = Field(description="Access Settings", alias="accessMethods")
    user_access_methods: List[AccessMethodDto] = Field(description="User custom access methods", alias="userAccessMethods")
    access_settings: AccessSettingsDto = Field(description="Settings for controlling access to the ComputeBench", alias="accessSettings")
    blueprint: StrictStr = Field(description="The ComputeBench software blueprint to use")
    template_version: Dict[str, Any] = Field(description="Template version used to generate the computebench", alias="templateVersion")
    auto_stop_idle_cpu_threshold: Union[StrictFloat, StrictInt] = Field(description="The CPU threshold for auto-stop", alias="autoStopIdleCPUThreshold")
    auto_stop_idle_duration: Union[StrictFloat, StrictInt] = Field(description="The duration of idle time before auto-stop", alias="autoStopIdleDuration")
    enable_auto_stop: StrictBool = Field(description="Whether auto-stop is enabled", alias="enableAutoStop")
    was_auto_stopped: StrictBool = Field(description="Whether the computebench has been auto-stop", alias="wasAutoStopped")
    next_user_actions: List[UserAction] = Field(alias="nextUserActions")
    created: datetime = Field(description="The timestamp when the ComputeBench was created")
    updated: datetime = Field(description="The timestamp when the ComputeBench was last updated")
    volume_drns: List[StrictStr] = Field(description="The list of volume drns from the domain object", alias="volumeDrns")
    owner: StrictStr = Field(description="the owner of the bench")
    __properties: ClassVar[List[str]] = ["drn", "orgHandle", "userHandle", "cloudProvider", "clusterId", "name", "description", "summary", "requestedResources", "status", "state", "accessMethods", "userAccessMethods", "accessSettings", "blueprint", "templateVersion", "autoStopIdleCPUThreshold", "autoStopIdleDuration", "enableAutoStop", "wasAutoStopped", "nextUserActions", "created", "updated", "volumeDrns", "owner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeBenchDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_provider
        if self.cloud_provider:
            _dict['cloudProvider'] = self.cloud_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_resources
        if self.requested_resources:
            _dict['requestedResources'] = self.requested_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in access_methods (list)
        _items = []
        if self.access_methods:
            for _item_access_methods in self.access_methods:
                if _item_access_methods:
                    _items.append(_item_access_methods.to_dict())
            _dict['accessMethods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_access_methods (list)
        _items = []
        if self.user_access_methods:
            for _item_user_access_methods in self.user_access_methods:
                if _item_user_access_methods:
                    _items.append(_item_user_access_methods.to_dict())
            _dict['userAccessMethods'] = _items
        # override the default output from pydantic by calling `to_dict()` of access_settings
        if self.access_settings:
            _dict['accessSettings'] = self.access_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeBenchDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "drn": obj.get("drn"),
            "orgHandle": obj.get("orgHandle"),
            "userHandle": obj.get("userHandle"),
            "cloudProvider": RequestedCloudProviderDto.from_dict(obj["cloudProvider"]) if obj.get("cloudProvider") is not None else None,
            "clusterId": obj.get("clusterId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "summary": obj.get("summary"),
            "requestedResources": ResourcesRequestDto.from_dict(obj["requestedResources"]) if obj.get("requestedResources") is not None else None,
            "status": obj.get("status"),
            "state": ComputeBenchStateDto.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "accessMethods": [AccessMethodDto.from_dict(_item) for _item in obj["accessMethods"]] if obj.get("accessMethods") is not None else None,
            "userAccessMethods": [AccessMethodDto.from_dict(_item) for _item in obj["userAccessMethods"]] if obj.get("userAccessMethods") is not None else None,
            "accessSettings": AccessSettingsDto.from_dict(obj["accessSettings"]) if obj.get("accessSettings") is not None else None,
            "blueprint": obj.get("blueprint"),
            "templateVersion": obj.get("templateVersion"),
            "autoStopIdleCPUThreshold": obj.get("autoStopIdleCPUThreshold"),
            "autoStopIdleDuration": obj.get("autoStopIdleDuration"),
            "enableAutoStop": obj.get("enableAutoStop"),
            "wasAutoStopped": obj.get("wasAutoStopped"),
            "nextUserActions": obj.get("nextUserActions"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "volumeDrns": obj.get("volumeDrns"),
            "owner": obj.get("owner")
        })
        return _obj


