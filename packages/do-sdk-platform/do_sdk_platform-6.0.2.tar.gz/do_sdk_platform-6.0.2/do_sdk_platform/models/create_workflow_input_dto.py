# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from do_sdk_platform.models.workflow_engines import WorkflowEngines
from typing import Optional, Set
from typing_extensions import Self

class CreateWorkflowInputDto(BaseModel):
    """
    CreateWorkflowInputDto
    """ # noqa: E501
    cluster_drn: StrictStr = Field(alias="clusterDrn")
    pipeline_id: StrictStr = Field(alias="pipelineId")
    working_dir: StrictStr = Field(alias="workingDir")
    output_directory: StrictStr = Field(alias="outputDirectory")
    engine: WorkflowEngines
    engine_version: StrictStr = Field(alias="engineVersion")
    config: Optional[StrictStr] = None
    sample_sheet: Optional[StrictStr] = Field(default=None, alias="sampleSheet")
    unit_sheet: Optional[StrictStr] = Field(default=None, alias="unitSheet")
    profile: Optional[StrictStr] = None
    parameters: Dict[str, Any]
    engine_parameters: Dict[str, Any] = Field(alias="engineParameters")
    volume_mounts: List[StrictStr] = Field(alias="volumeMounts")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    __properties: ClassVar[List[str]] = ["clusterDrn", "pipelineId", "workingDir", "outputDirectory", "engine", "engineVersion", "config", "sampleSheet", "unitSheet", "profile", "parameters", "engineParameters", "volumeMounts", "createdBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateWorkflowInputDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateWorkflowInputDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterDrn": obj.get("clusterDrn"),
            "pipelineId": obj.get("pipelineId"),
            "workingDir": obj.get("workingDir"),
            "outputDirectory": obj.get("outputDirectory"),
            "engine": obj.get("engine"),
            "engineVersion": obj.get("engineVersion"),
            "config": obj.get("config"),
            "sampleSheet": obj.get("sampleSheet"),
            "unitSheet": obj.get("unitSheet"),
            "profile": obj.get("profile"),
            "parameters": obj.get("parameters"),
            "engineParameters": obj.get("engineParameters"),
            "volumeMounts": obj.get("volumeMounts"),
            "createdBy": obj.get("createdBy")
        })
        return _obj


