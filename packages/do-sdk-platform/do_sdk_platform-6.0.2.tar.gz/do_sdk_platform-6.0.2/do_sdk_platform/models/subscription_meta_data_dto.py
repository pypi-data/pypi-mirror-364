# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionMetaDataDto(BaseModel):
    """
    SubscriptionMetaDataDto
    """ # noqa: E501
    includes: List[StrictStr] = Field(description="List of included features.")
    coming_soon: List[StrictStr] = Field(description="Features marked as coming soon.", alias="comingSoon")
    max_days: Union[StrictFloat, StrictInt] = Field(description="Maximum number of days allowed.", alias="maxDays")
    renewable: StrictBool = Field(description="Indicates if the subscription is renewable.")
    max_invites: Union[StrictFloat, StrictInt] = Field(description="Maximum number of invites allowed.", alias="maxInvites")
    max_subscriptions: Union[StrictFloat, StrictInt] = Field(description="Maximum number of subscriptions allowed.", alias="maxSubscriptions")
    index: Union[StrictFloat, StrictInt] = Field(description="Index value for subscription ordering.")
    can_buy_credits: StrictBool = Field(description="Indicates if credits can be purchased.", alias="canBuyCredits")
    is_coming_soon: StrictBool = Field(description="Indicates if the subscription is marked as coming soon.", alias="isComingSoon")
    needs_credit_card: StrictBool = Field(description="Indicates if a credit card is required.", alias="needsCreditCard")
    academic: StrictBool = Field(description="if the user academic user")
    __properties: ClassVar[List[str]] = ["includes", "comingSoon", "maxDays", "renewable", "maxInvites", "maxSubscriptions", "index", "canBuyCredits", "isComingSoon", "needsCreditCard", "academic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionMetaDataDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionMetaDataDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includes": obj.get("includes"),
            "comingSoon": obj.get("comingSoon"),
            "maxDays": obj.get("maxDays"),
            "renewable": obj.get("renewable"),
            "maxInvites": obj.get("maxInvites"),
            "maxSubscriptions": obj.get("maxSubscriptions"),
            "index": obj.get("index"),
            "canBuyCredits": obj.get("canBuyCredits"),
            "isComingSoon": obj.get("isComingSoon"),
            "needsCreditCard": obj.get("needsCreditCard"),
            "academic": obj.get("academic")
        })
        return _obj


