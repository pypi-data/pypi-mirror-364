# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from do_sdk_platform.models.described_external_entity_object import DescribedExternalEntityObject
from do_sdk_platform.models.external_entity_object import ExternalEntityObject
from typing import Optional, Set
from typing_extensions import Self

class NotebookObject(BaseModel):
    """
    NotebookObject
    """ # noqa: E501
    type_id: StrictStr = Field(alias="typeId")
    use_case_ids: List[StrictStr] = Field(alias="useCaseIds")
    use_case_names: List[StrictStr] = Field(alias="useCaseNames")
    id: StrictStr
    version: StrictStr
    name: StrictStr
    summary: StrictStr
    description: Dict[str, Any]
    license: DescribedExternalEntityObject
    resource_links: List[ExternalEntityObject] = Field(alias="resourceLinks")
    publication_references: List[ExternalEntityObject] = Field(alias="publicationReferences")
    authors: List[ExternalEntityObject]
    created: Dict[str, Any]
    variant_tags: List[StrictStr] = Field(alias="variantTags")
    __properties: ClassVar[List[str]] = ["typeId", "useCaseIds", "useCaseNames", "id", "version", "name", "summary", "description", "license", "resourceLinks", "publicationReferences", "authors", "created", "variantTags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotebookObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license:
            _dict['license'] = self.license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_links (list)
        _items = []
        if self.resource_links:
            for _item_resource_links in self.resource_links:
                if _item_resource_links:
                    _items.append(_item_resource_links.to_dict())
            _dict['resourceLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in publication_references (list)
        _items = []
        if self.publication_references:
            for _item_publication_references in self.publication_references:
                if _item_publication_references:
                    _items.append(_item_publication_references.to_dict())
            _dict['publicationReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authors (list)
        _items = []
        if self.authors:
            for _item_authors in self.authors:
                if _item_authors:
                    _items.append(_item_authors.to_dict())
            _dict['authors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotebookObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "typeId": obj.get("typeId"),
            "useCaseIds": obj.get("useCaseIds"),
            "useCaseNames": obj.get("useCaseNames"),
            "id": obj.get("id"),
            "version": obj.get("version"),
            "name": obj.get("name"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "license": DescribedExternalEntityObject.from_dict(obj["license"]) if obj.get("license") is not None else None,
            "resourceLinks": [ExternalEntityObject.from_dict(_item) for _item in obj["resourceLinks"]] if obj.get("resourceLinks") is not None else None,
            "publicationReferences": [ExternalEntityObject.from_dict(_item) for _item in obj["publicationReferences"]] if obj.get("publicationReferences") is not None else None,
            "authors": [ExternalEntityObject.from_dict(_item) for _item in obj["authors"]] if obj.get("authors") is not None else None,
            "created": obj.get("created"),
            "variantTags": obj.get("variantTags")
        })
        return _obj


