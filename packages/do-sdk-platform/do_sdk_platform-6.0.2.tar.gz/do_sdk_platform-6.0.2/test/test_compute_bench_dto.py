# coding: utf-8

"""
    Platform API Documentation

    Combined API documentation for all platform services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from do_sdk_platform.models.compute_bench_dto import ComputeBenchDto

class TestComputeBenchDto(unittest.TestCase):
    """ComputeBenchDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ComputeBenchDto:
        """Test ComputeBenchDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ComputeBenchDto`
        """
        model = ComputeBenchDto()
        if include_optional:
            return ComputeBenchDto(
                drn = '',
                org_handle = '',
                user_handle = '',
                cloud_provider = do_sdk_platform.models.requested_cloud_provider_dto.RequestedCloudProviderDto(
                    vendor = 'aws', 
                    region = 'us-west-2', ),
                cluster_id = '',
                name = '',
                description = '',
                summary = '',
                requested_resources = do_sdk_platform.models.resources_request_dto.ResourcesRequestDto(
                    cpu = 1.337, 
                    memory = 1.337, 
                    gpu_size = 'SMALL', 
                    storage = 1.337, ),
                status = 'PENDING',
                state = do_sdk_platform.models.compute_bench_state_dto.ComputeBenchStateDto(
                    status = 'PENDING', 
                    is_error = True, 
                    error = '', 
                    stage = 'INVOKED', ),
                access_methods = [
                    do_sdk_platform.models.access_method_dto.AccessMethodDto(
                        id = '', 
                        name = '', 
                        icon = '', 
                        port = 1.337, 
                        protocol = '', )
                    ],
                user_access_methods = [
                    do_sdk_platform.models.access_method_dto.AccessMethodDto(
                        id = '', 
                        name = '', 
                        icon = '', 
                        port = 1.337, 
                        protocol = '', )
                    ],
                access_settings = do_sdk_platform.models.access_settings_dto.AccessSettingsDto(
                    ssh = True, 
                    public_key = '', ),
                blueprint = '',
                template_version = None,
                auto_stop_idle_cpu_threshold = 1.337,
                auto_stop_idle_duration = 1.337,
                enable_auto_stop = True,
                was_auto_stopped = True,
                next_user_actions = [
                    'CREATE'
                    ],
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                volume_drns = [
                    ''
                    ],
                owner = ''
            )
        else:
            return ComputeBenchDto(
                drn = '',
                org_handle = '',
                user_handle = '',
                cloud_provider = do_sdk_platform.models.requested_cloud_provider_dto.RequestedCloudProviderDto(
                    vendor = 'aws', 
                    region = 'us-west-2', ),
                cluster_id = '',
                name = '',
                description = '',
                summary = '',
                requested_resources = do_sdk_platform.models.resources_request_dto.ResourcesRequestDto(
                    cpu = 1.337, 
                    memory = 1.337, 
                    gpu_size = 'SMALL', 
                    storage = 1.337, ),
                status = 'PENDING',
                state = do_sdk_platform.models.compute_bench_state_dto.ComputeBenchStateDto(
                    status = 'PENDING', 
                    is_error = True, 
                    error = '', 
                    stage = 'INVOKED', ),
                access_methods = [
                    do_sdk_platform.models.access_method_dto.AccessMethodDto(
                        id = '', 
                        name = '', 
                        icon = '', 
                        port = 1.337, 
                        protocol = '', )
                    ],
                user_access_methods = [
                    do_sdk_platform.models.access_method_dto.AccessMethodDto(
                        id = '', 
                        name = '', 
                        icon = '', 
                        port = 1.337, 
                        protocol = '', )
                    ],
                access_settings = do_sdk_platform.models.access_settings_dto.AccessSettingsDto(
                    ssh = True, 
                    public_key = '', ),
                blueprint = '',
                template_version = None,
                auto_stop_idle_cpu_threshold = 1.337,
                auto_stop_idle_duration = 1.337,
                enable_auto_stop = True,
                was_auto_stopped = True,
                next_user_actions = [
                    'CREATE'
                    ],
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                volume_drns = [
                    ''
                    ],
                owner = '',
        )
        """

    def testComputeBenchDto(self):
        """Test ComputeBenchDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
