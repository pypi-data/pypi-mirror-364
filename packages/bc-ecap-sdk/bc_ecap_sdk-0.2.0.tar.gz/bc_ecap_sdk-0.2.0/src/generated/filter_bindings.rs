/* automatically generated by rust-bindgen 0.69.5 */

pub const DOUBLE_PRECISION: u32 = 1;
pub const USE_DOUBLE_PRECISION: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BWLowPass {
  pub n: ::std::os::raw::c_int,
  pub a: *mut f64,
  pub d1: *mut f64,
  pub d2: *mut f64,
  pub w0: *mut f64,
  pub w1: *mut f64,
  pub w2: *mut f64,
}
#[test]
fn bindgen_test_layout_BWLowPass() {
  const UNINIT: ::std::mem::MaybeUninit<BWLowPass> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<BWLowPass>(),
    56usize,
    concat!("Size of: ", stringify!(BWLowPass))
  );
  assert_eq!(
    ::std::mem::align_of::<BWLowPass>(),
    8usize,
    concat!("Alignment of ", stringify!(BWLowPass))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(BWLowPass),
      "::",
      stringify!(n)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(BWLowPass),
      "::",
      stringify!(a)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d1) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(BWLowPass),
      "::",
      stringify!(d1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d2) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(BWLowPass),
      "::",
      stringify!(d2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w0) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(BWLowPass),
      "::",
      stringify!(w0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w1) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(BWLowPass),
      "::",
      stringify!(w1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w2) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(BWLowPass),
      "::",
      stringify!(w2)
    )
  );
}
pub type BWHighPass = BWLowPass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BWBandPass {
  pub n: ::std::os::raw::c_int,
  pub a: *mut f64,
  pub d1: *mut f64,
  pub d2: *mut f64,
  pub d3: *mut f64,
  pub d4: *mut f64,
  pub w0: *mut f64,
  pub w1: *mut f64,
  pub w2: *mut f64,
  pub w3: *mut f64,
  pub w4: *mut f64,
}
#[test]
fn bindgen_test_layout_BWBandPass() {
  const UNINIT: ::std::mem::MaybeUninit<BWBandPass> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<BWBandPass>(),
    88usize,
    concat!("Size of: ", stringify!(BWBandPass))
  );
  assert_eq!(
    ::std::mem::align_of::<BWBandPass>(),
    8usize,
    concat!("Alignment of ", stringify!(BWBandPass))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(n)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(a)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d1) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(d1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d2) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(d2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d3) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(d3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d4) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(d4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w0) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(w0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w1) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(w1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w2) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(w2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w3) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(w3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w4) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandPass),
      "::",
      stringify!(w4)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BWBandStop {
  pub n: ::std::os::raw::c_int,
  pub r: f64,
  pub s: f64,
  pub a: *mut f64,
  pub d1: *mut f64,
  pub d2: *mut f64,
  pub d3: *mut f64,
  pub d4: *mut f64,
  pub w0: *mut f64,
  pub w1: *mut f64,
  pub w2: *mut f64,
  pub w3: *mut f64,
  pub w4: *mut f64,
}
#[test]
fn bindgen_test_layout_BWBandStop() {
  const UNINIT: ::std::mem::MaybeUninit<BWBandStop> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<BWBandStop>(),
    104usize,
    concat!("Size of: ", stringify!(BWBandStop))
  );
  assert_eq!(
    ::std::mem::align_of::<BWBandStop>(),
    8usize,
    concat!("Alignment of ", stringify!(BWBandStop))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(n)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(r)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(s)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(a)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d1) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(d1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d2) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(d2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d3) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(d3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d4) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(d4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w0) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(w0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w1) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(w1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w2) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(w2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w3) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(w3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w4) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(BWBandStop),
      "::",
      stringify!(w4)
    )
  );
}
extern "C" {
  pub fn create_bw_low_pass_filter(
    order: ::std::os::raw::c_int,
    sampling_frequency: f64,
    half_power_frequency: f64,
  ) -> *mut BWLowPass;
}
extern "C" {
  pub fn create_bw_high_pass_filter(
    order: ::std::os::raw::c_int,
    sampling_frequency: f64,
    half_power_frequency: f64,
  ) -> *mut BWHighPass;
}
extern "C" {
  pub fn create_bw_band_pass_filter(
    order: ::std::os::raw::c_int,
    sampling_frequency: f64,
    lower_half_power_frequency: f64,
    upper_half_power_frequency: f64,
  ) -> *mut BWBandPass;
}
extern "C" {
  pub fn create_bw_band_stop_filter(
    order: ::std::os::raw::c_int,
    sampling_frequency: f64,
    lower_half_power_frequency: f64,
    upper_half_power_frequency: f64,
  ) -> *mut BWBandStop;
}
extern "C" {
  pub fn free_bw_low_pass(filter: *mut BWLowPass);
}
extern "C" {
  pub fn free_bw_high_pass(filter: *mut BWHighPass);
}
extern "C" {
  pub fn free_bw_band_pass(filter: *mut BWBandPass);
}
extern "C" {
  pub fn free_bw_band_stop(filter: *mut BWBandStop);
}
extern "C" {
  pub fn low_pass(filter: *mut BWLowPass, input: f64) -> f64;
}
extern "C" {
  pub fn high_pass(filter: *mut BWHighPass, input: f64) -> f64;
}
extern "C" {
  pub fn band_pass(filter: *mut BWBandPass, input: f64) -> f64;
}
extern "C" {
  pub fn band_stop(filter: *mut BWBandStop, input: f64) -> f64;
}
extern "C" {
  pub fn softmaxf(
    data: *mut f32,
    size: ::std::os::raw::c_int,
    target_ind: ::std::os::raw::c_int,
  ) -> f32;
}
extern "C" {
  pub fn softmax(
    data: *mut f64,
    size: ::std::os::raw::c_int,
    target_ind: ::std::os::raw::c_int,
  ) -> f64;
}
extern "C" {
  pub fn spike_filter_upward(
    input: *mut f64,
    size: ::std::os::raw::c_int,
    output: *mut f64,
    strength: f64,
  );
}
