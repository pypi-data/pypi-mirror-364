# Generated by Django 3.0.5 on 2020-05-08 18:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.RunSQL(""" 
            CREATE OR REPLACE FUNCTION create_role_if_not_exists(rolename NAME) RETURNS TEXT AS
            $$
            BEGIN
                IF NOT EXISTS (SELECT * FROM pg_roles WHERE rolname = rolename) THEN
                    EXECUTE format('CREATE ROLE %I', rolename);
                    RETURN 'CREATE ROLE';
                ELSE
                    RETURN format('ROLE ''%I'' ALREADY EXISTS', rolename);
                END IF;
            END;
            $$
            LANGUAGE plpgsql;
            """, reverse_sql="drop function create_role_if_not_exists(rolename NAME);"),
        migrations.RunSQL("""SELECT create_role_if_not_exists('iamcustomer');"""),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(max_length=45, primary_key=True, serialize=False, unique=True)),
                ('origin_tenant_id', models.CharField(max_length=255, null=True)),
                ('enable_iam', models.BooleanField(default=False)),
                ('creator_id', models.CharField(default='system', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'db_table': 'api_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=255, null=True)),
                ('tire', models.CharField(max_length=45, null=True)),
                ('status', models.CharField(default='Active', max_length=45)),
                ('owner_id', models.CharField(default='system', max_length=255)),
                ('users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_tenant',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='tenants',
            field=models.ManyToManyField(blank=True, to='django_rds_iam_auth.Tenant'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
