# Generated by Django 3.0.5 on 2020-04-29 18:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('django_rds_iam_auth', '0030_auto_20210707_1003'),
    ]

    operations = [
        migrations.CreateModel(
            name='TenantRoles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='auth.Group')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='django_rds_iam_auth.Tenant')),
            ],
            options={
                'db_table': 'api_tenant_roles',
            },
        ),
        migrations.AddField(
            model_name='tenant',
            name='roles',
            field=models.ManyToManyField(related_name='tenants', through='django_rds_iam_auth.TenantRoles', to='auth.Group'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_roles', to='auth.Group'),
        ),

        migrations.RunSQL("""ALTER TABLE auth_group ADD is_active boolean DEFAULT true;""",
                          reverse_sql="ALTER TABLE auth_group DROP COLUMN is_active;"),
        migrations.RunSQL("""ALTER TABLE auth_group ADD is_default boolean DEFAULT false;""",
                          reverse_sql="ALTER TABLE auth_group DROP COLUMN is_default;"),
        migrations.RunSQL("""ALTER TABLE auth_group ADD name_alias varchar(255) DEFAULT NULL;""",
                          reverse_sql="ALTER TABLE auth_group DROP COLUMN name_alias;"),
        migrations.RunSQL("""ALTER TABLE auth_permission ADD is_default boolean DEFAULT true;""",
                          reverse_sql="ALTER TABLE auth_permission DROP COLUMN is_default;"),

        migrations.RunSQL("""ALTER TABLE auth_permission ENABLE ROW LEVEL SECURITY;""", reverse_sql="ALTER TABLE auth_permission DISABLE ROW LEVEL SECURITY;"),
        migrations.RunSQL("""ALTER TABLE auth_group ENABLE ROW LEVEL SECURITY;""", reverse_sql="ALTER TABLE auth_group DISABLE ROW LEVEL SECURITY;"),
        migrations.RunSQL("""ALTER TABLE auth_group_permissions ENABLE ROW LEVEL SECURITY;""", reverse_sql="ALTER TABLE auth_group_permissions DISABLE ROW LEVEL SECURITY;"),
        migrations.RunSQL("""ALTER TABLE api_tenant_roles ENABLE ROW LEVEL SECURITY;""", reverse_sql="ALTER TABLE api_tenant_roles DISABLE ROW LEVEL SECURITY;"),

        migrations.RunSQL("""GRANT SELECT ON  django_content_type TO IAMCUSTOMER;""",
                          reverse_sql="REVOKE SELECT ON  django_content_type FROM IAMCUSTOMER;"),
        migrations.RunSQL("""GRANT SELECT ON  auth_permission TO IAMCUSTOMER;""", reverse_sql="REVOKE SELECT ON  auth_permission FROM IAMCUSTOMER;"),
        migrations.RunSQL("""GRANT SELECT, INSERT, UPDATE, DELETE ON  auth_group TO IAMCUSTOMER;""", reverse_sql="REVOKE SELECT, INSERT, UPDATE, DELETE ON  group FROM IAMCUSTOMER;"),
        migrations.RunSQL("""GRANT SELECT, INSERT, UPDATE, DELETE ON  auth_group_permissions TO IAMCUSTOMER;""", reverse_sql="REVOKE SELECT, INSERT, UPDATE, DELETE ON  auth_group_permissions FROM IAMCUSTOMER;"),
        migrations.RunSQL("""GRANT SELECT, INSERT, UPDATE, DELETE ON  api_tenant_roles TO IAMCUSTOMER;""",
                          reverse_sql="REVOKE SELECT, INSERT, UPDATE, DELETE ON  api_tenant_roles FROM IAMCUSTOMER;"),

        migrations.RunSQL("""
            create function privileged_user_has_group(user_to_check text, group_to_check integer) 
            returns boolean
            security definer
            language sql
            as
            $$
            SELECT user_to_check IN (
                SELECT user_id FROM api_tenant_users
                JOIN api_tenant_roles
                ON api_tenant_roles.tenant_id = api_tenant_users.tenant_id
                AND api_tenant_roles.tenant_id IN (SELECT privileged_get_user_tenants(user_to_check))
                AND api_tenant_roles.group_id = group_to_check
            )
            $$;
        """, reverse_sql="drop function privileged_user_has_group(text, integer);"),
        migrations.RunSQL("""alter function privileged_user_has_group(text, integer) owner to postgres;"""),

        migrations.RunSQL("""
            create function privileged_get_user_permissions(user_to_check text) 
            returns SETOF text
            security definer
            language sql
            as
            $$
            SELECT codename FROM auth_permission
            JOIN auth_group_permissions
            ON auth_permission.id = auth_group_permissions.permission_id
            AND auth_group_permissions.group_id = (SELECT role_id FROM api_user WHERE id = user_to_check)
            $$;
        """, reverse_sql="drop function privileged_get_user_permissions(text);"),

        migrations.RunSQL("""
            create function is_group_default(group_to_check integer) returns boolean
                security definer
                language sql
            as
            $$
            SELECT is_default FROM auth_group WHERE id = group_to_check;
            $$;
        """, reverse_sql="drop function is_group_default(integer);"),

        migrations.RunSQL("""
            CREATE POLICY api_tenant_roles_policy ON api_tenant_roles
                USING (
                    privileged_user_has_tenant(current_user, tenant_id)
                );
        """, reverse_sql="drop policy api_tenant_roles_policy on api_tenant_roles;"),

        migrations.RunSQL("""
            CREATE POLICY auth_group_policy ON auth_group
                USING (
                    (select id in (
                        select group_id from api_tenant_roles where tenant_id in (
                            select privileged_get_user_tenants(current_user)
                        )
                    ))
                );
        """, reverse_sql="drop policy auth_group_policy on auth_group;"),

        # doesn't work on write - new row violates row-level security policy for table "auth_group_permissions"
        # migrations.RunSQL("""
        #    CREATE POLICY auth_group_permissions_policy ON auth_group_permissions
        #         USING (
        #             privileged_user_has_group(current_user, group_id)
        #         );
        # """, reverse_sql="drop policy auth_group_permissions_policy on auth_group_permissions;"),

        migrations.RunSQL("""
           CREATE POLICY auth_group_permissions_policy ON auth_group_permissions
                USING (
                    true
                )
                WITH CHECK (
                    true
                );
        """, reverse_sql="drop policy auth_group_permissions_policy on auth_group_permissions;"),

        migrations.RunSQL("""
           CREATE POLICY auth_permission_policy ON auth_permission
                USING (NOT is_default);
        """, reverse_sql="drop policy auth_permission_policy on auth_permission;"),
    ]
