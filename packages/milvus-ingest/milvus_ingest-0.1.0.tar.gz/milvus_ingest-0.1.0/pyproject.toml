[project]
name = "milvus-ingest"
version = "0.1.0"
description = "High-performance data ingestion tool for Milvus vector database with vectorized operations"
keywords = [
    "milvus",
    "vector-database",
    "data-ingestion",
    "bulk-import",
    "data-generation",
    "high-performance",
    "vectorization",
    "etl",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Benchmark",
    "Operating System :: OS Independent",
]
dependencies = [
    "faker>=23.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pyarrow>=14.0.0",
    "click>=8.0.0",
    "pyyaml>=6.0.0",
    "pymilvus[bulk_writer]",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "loguru>=0.7.3",
    "boto3>=1.28.0",
    "ml-dtypes>=0.5.1",
]
requires-python = ">=3.10"
readme = "README.md"
authors = [
    { name = "zhuwenxing", email = "wenxing.zhu@zilliz.com" },
]

[project.license]
text = "MIT"

[project.scripts]
milvus-ingest = "milvus_ingest.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "twine>=6.1.0",
]

[tool.pdm]
distribution = true

[tool.ruff]
target-version = "py310"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP",
    "ARG",
    "SIM",
    "TCH",
]
ignore = [
    "E501",
    "B008",
    "ARG001",
    "ARG002",
]

[tool.ruff.lint.isort]
known-first-party = [
    "milvus_ingest",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "yaml",
    "pymilvus.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = [
    "src",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = [
    "tests",
]
skips = [
    "B101",
    "B601",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
