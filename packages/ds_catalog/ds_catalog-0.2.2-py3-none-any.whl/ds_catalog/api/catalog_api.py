# coding: utf-8

"""
    Data Space Catalog Service

    The service provides a REST API for managing and sharing catalog items.

    The version of the OpenAPI document: 0.2.2
    Contact: all-hiro@hiro-microdatacenters.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr
from typing import Any, Dict

from ds_catalog.api_client import ApiClient, RequestSerialized
from ds_catalog.api_response import ApiResponse
from ds_catalog.rest import RESTResponseType


class CatalogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_catalog(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Get Local Catalog

        Get the local catalog with dataset list.  The request accepts filters as a JSON-LD object in the body.  ### Format: Filters are structured as nested JSON-LD objects. Each filter defines the path to the field with optional operators or language annotations.  ```json {   \"@context\": {     \"@vocab\": \"http://data-space.org/\",     \"<namespace>\": \"<namespaceURL>\",     ...   }   \"@type\": \"Filters\",   \"filters\": [     {       [\"@type\": \"<[namespace:]Class>\",]       \"<[namespace:]attribute>\": <nestedObject> | <value> | {         \"@value\": <value>,         [\"@type\": <type> | \"@language\": <language>]       }     }   ] } ```  To get all datasets, use an empty object in the request body.  ```json {} ```  ### Example: ```json {   \"@context\": {     \"@vocab\": \"http://data-space.org/\",     \"dcat\": \"http://www.w3.org/ns/dcat#\",     \"med\": \"http://med.example.org/\"   },   \"@type\": \"Filters\",   \"filters\": [     {       \"dcat:dataset\": {         \"extraMetadata\": {           \"@type\": \"med:Record\",           \"med:age\": true,           \"med:bmi\": true         }       }     }   ] } ```  ### More filter examples: - <b>Filter by dataset identifier</b> ```json     {         \"@type\": \"dcat:Catalog\",         \"dcat:dataset\": {             \"@type\": \"dcat:Dataset\",             \"dcterms:identifier\": \"123\"         }     } ```  - <b>Filtering without specifying classes:</b> The service will attempt to infer unspecified classes. If inferencing fails, an error will be returned. ```json     {         \"dcat:dataset\": {             \"dcterms:identifier\": \"123\"         }     } ```  - <b>Filtering with language</b> ```json     {         \"dcat:dataset\": {             \"dcterms:title\": {                 \"@value\": \"example\",                 \"@language\": \"en\"             }         }     } ```  - <b>Filtering with data type</b> ```json     {         \"dcat:dataset\": {             \"extraMetadata\": {                 \"@type\": \"med:Record\",                 \"med:age\": {                     \"@type\": \"xsd:boolean\",                     \"@value\": true                 }             }         }     } ```  - <b>Multiple conditions:</b> All datasets with identifier=123 <b>AND</b> age=true <b>AND</b> bmi=true will be found. ```json     {         \"dcat:dataset\": {             \"dcterms:identifier\": \"123\",             \"extraMetadata\": {                 \"@type\": \"med:Record\",                 \"med:age\": true,                 \"med:bmi\": true             }         }     } ```  - <b>Multiple values:</b> All datasets will be found for which the attribute age is true <b>OR</b> false. ```json     {         \"dcat:dataset\": {             \"extraMetadata\": [                 {                     \"@type\": \"med:Record\",                     \"med:age\": [                         {                             \"@value\": true,                             \"@type\": \"xsd:boolean\"                         },                         {                             \"@value\": false,                             \"@type\": \"xsd:boolean\"                         }                     ]                 }             ]         }     } ```

        :param request_body: (required)
        :type request_body: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_catalog_with_http_info(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Get Local Catalog

        Get the local catalog with dataset list.  The request accepts filters as a JSON-LD object in the body.  ### Format: Filters are structured as nested JSON-LD objects. Each filter defines the path to the field with optional operators or language annotations.  ```json {   \"@context\": {     \"@vocab\": \"http://data-space.org/\",     \"<namespace>\": \"<namespaceURL>\",     ...   }   \"@type\": \"Filters\",   \"filters\": [     {       [\"@type\": \"<[namespace:]Class>\",]       \"<[namespace:]attribute>\": <nestedObject> | <value> | {         \"@value\": <value>,         [\"@type\": <type> | \"@language\": <language>]       }     }   ] } ```  To get all datasets, use an empty object in the request body.  ```json {} ```  ### Example: ```json {   \"@context\": {     \"@vocab\": \"http://data-space.org/\",     \"dcat\": \"http://www.w3.org/ns/dcat#\",     \"med\": \"http://med.example.org/\"   },   \"@type\": \"Filters\",   \"filters\": [     {       \"dcat:dataset\": {         \"extraMetadata\": {           \"@type\": \"med:Record\",           \"med:age\": true,           \"med:bmi\": true         }       }     }   ] } ```  ### More filter examples: - <b>Filter by dataset identifier</b> ```json     {         \"@type\": \"dcat:Catalog\",         \"dcat:dataset\": {             \"@type\": \"dcat:Dataset\",             \"dcterms:identifier\": \"123\"         }     } ```  - <b>Filtering without specifying classes:</b> The service will attempt to infer unspecified classes. If inferencing fails, an error will be returned. ```json     {         \"dcat:dataset\": {             \"dcterms:identifier\": \"123\"         }     } ```  - <b>Filtering with language</b> ```json     {         \"dcat:dataset\": {             \"dcterms:title\": {                 \"@value\": \"example\",                 \"@language\": \"en\"             }         }     } ```  - <b>Filtering with data type</b> ```json     {         \"dcat:dataset\": {             \"extraMetadata\": {                 \"@type\": \"med:Record\",                 \"med:age\": {                     \"@type\": \"xsd:boolean\",                     \"@value\": true                 }             }         }     } ```  - <b>Multiple conditions:</b> All datasets with identifier=123 <b>AND</b> age=true <b>AND</b> bmi=true will be found. ```json     {         \"dcat:dataset\": {             \"dcterms:identifier\": \"123\",             \"extraMetadata\": {                 \"@type\": \"med:Record\",                 \"med:age\": true,                 \"med:bmi\": true             }         }     } ```  - <b>Multiple values:</b> All datasets will be found for which the attribute age is true <b>OR</b> false. ```json     {         \"dcat:dataset\": {             \"extraMetadata\": [                 {                     \"@type\": \"med:Record\",                     \"med:age\": [                         {                             \"@value\": true,                             \"@type\": \"xsd:boolean\"                         },                         {                             \"@value\": false,                             \"@type\": \"xsd:boolean\"                         }                     ]                 }             ]         }     } ```

        :param request_body: (required)
        :type request_body: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_catalog_without_preload_content(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Local Catalog

        Get the local catalog with dataset list.  The request accepts filters as a JSON-LD object in the body.  ### Format: Filters are structured as nested JSON-LD objects. Each filter defines the path to the field with optional operators or language annotations.  ```json {   \"@context\": {     \"@vocab\": \"http://data-space.org/\",     \"<namespace>\": \"<namespaceURL>\",     ...   }   \"@type\": \"Filters\",   \"filters\": [     {       [\"@type\": \"<[namespace:]Class>\",]       \"<[namespace:]attribute>\": <nestedObject> | <value> | {         \"@value\": <value>,         [\"@type\": <type> | \"@language\": <language>]       }     }   ] } ```  To get all datasets, use an empty object in the request body.  ```json {} ```  ### Example: ```json {   \"@context\": {     \"@vocab\": \"http://data-space.org/\",     \"dcat\": \"http://www.w3.org/ns/dcat#\",     \"med\": \"http://med.example.org/\"   },   \"@type\": \"Filters\",   \"filters\": [     {       \"dcat:dataset\": {         \"extraMetadata\": {           \"@type\": \"med:Record\",           \"med:age\": true,           \"med:bmi\": true         }       }     }   ] } ```  ### More filter examples: - <b>Filter by dataset identifier</b> ```json     {         \"@type\": \"dcat:Catalog\",         \"dcat:dataset\": {             \"@type\": \"dcat:Dataset\",             \"dcterms:identifier\": \"123\"         }     } ```  - <b>Filtering without specifying classes:</b> The service will attempt to infer unspecified classes. If inferencing fails, an error will be returned. ```json     {         \"dcat:dataset\": {             \"dcterms:identifier\": \"123\"         }     } ```  - <b>Filtering with language</b> ```json     {         \"dcat:dataset\": {             \"dcterms:title\": {                 \"@value\": \"example\",                 \"@language\": \"en\"             }         }     } ```  - <b>Filtering with data type</b> ```json     {         \"dcat:dataset\": {             \"extraMetadata\": {                 \"@type\": \"med:Record\",                 \"med:age\": {                     \"@type\": \"xsd:boolean\",                     \"@value\": true                 }             }         }     } ```  - <b>Multiple conditions:</b> All datasets with identifier=123 <b>AND</b> age=true <b>AND</b> bmi=true will be found. ```json     {         \"dcat:dataset\": {             \"dcterms:identifier\": \"123\",             \"extraMetadata\": {                 \"@type\": \"med:Record\",                 \"med:age\": true,                 \"med:bmi\": true             }         }     } ```  - <b>Multiple values:</b> All datasets will be found for which the attribute age is true <b>OR</b> false. ```json     {         \"dcat:dataset\": {             \"extraMetadata\": [                 {                     \"@type\": \"med:Record\",                     \"med:age\": [                         {                             \"@value\": true,                             \"@type\": \"xsd:boolean\"                         },                         {                             \"@value\": false,                             \"@type\": \"xsd:boolean\"                         }                     ]                 }             ]         }     } ```

        :param request_body: (required)
        :type request_body: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_catalog_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_catalog_serialize(
        self,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/ld+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/catalog/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_public_catalog(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Get Public Catalog

        Get the public catalog with dataset list.  The query uses the same format as the one for the Local Catalog endpoint. Returns only shared datasets. Query is required.

        :param request_body: (required)
        :type request_body: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_catalog_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_public_catalog_with_http_info(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Get Public Catalog

        Get the public catalog with dataset list.  The query uses the same format as the one for the Local Catalog endpoint. Returns only shared datasets. Query is required.

        :param request_body: (required)
        :type request_body: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_catalog_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_public_catalog_without_preload_content(
        self,
        request_body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Public Catalog

        Get the public catalog with dataset list.  The query uses the same format as the one for the Local Catalog endpoint. Returns only shared datasets. Query is required.

        :param request_body: (required)
        :type request_body: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_catalog_serialize(
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_public_catalog_serialize(
        self,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/ld+json', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/public-catalog/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


