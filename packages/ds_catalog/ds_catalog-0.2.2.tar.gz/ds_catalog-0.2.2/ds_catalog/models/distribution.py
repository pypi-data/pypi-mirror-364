# coding: utf-8

"""
    Data Space Catalog Service

    The service provides a REST API for managing and sharing catalog items.

    The version of the OpenAPI document: 0.1.1
    Contact: all-hiro@hiro-microdatacenters.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ds_catalog.models.checksum import Checksum
from ds_catalog.models.data_service import DataService
from typing import Optional, Set
from typing_extensions import Self

class Distribution(BaseModel):
    """
    Distribution
    """ # noqa: E501
    byte_size: Optional[StrictInt] = Field(alias="byteSize")
    media_type: StrictStr = Field(alias="mediaType")
    checksum: Checksum
    access_service: List[DataService] = Field(alias="accessService")
    __properties: ClassVar[List[str]] = ["byteSize", "mediaType", "checksum", "accessService"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Distribution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checksum
        if self.checksum:
            _dict['checksum'] = self.checksum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in access_service (list)
        _items = []
        if self.access_service:
            for _item_access_service in self.access_service:
                if _item_access_service:
                    _items.append(_item_access_service.to_dict())
            _dict['accessService'] = _items
        # set to None if byte_size (nullable) is None
        # and model_fields_set contains the field
        if self.byte_size is None and "byte_size" in self.model_fields_set:
            _dict['byteSize'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Distribution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "byteSize": obj.get("byteSize"),
            "mediaType": obj.get("mediaType"),
            "checksum": Checksum.from_dict(obj["checksum"]) if obj.get("checksum") is not None else None,
            "accessService": [DataService.from_dict(_item) for _item in obj["accessService"]] if obj.get("accessService") is not None else None
        })
        return _obj


