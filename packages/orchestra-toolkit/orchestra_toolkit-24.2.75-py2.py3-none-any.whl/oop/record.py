""" Copyright 2024-2025 LEDR Technologies Inc.This file is part of the Orchestra library, which helps developer use our Orchestra technology which is based on AvesTerra, owned and developped by Georgetown University, under license agreement with LEDR Technologies Inc.The Orchestra library is a free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.The Orchestra library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with the Orchestra library. If not, see <https://www.gnu.org/licenses/>.If you have any questions, feedback or issues about the Orchestra library, you can contact us at support@ledr.io."""from __future__ import annotationsfrom avesterra.avial import AvValueimport avesterra.annotations as av_annotationsimport avesterra.registries as registriesimport oop.interfaces as interfacesfrom avesterra.avesterra import AvEntity, AvAuthorizationfrom avesterra.taxonomy import AvAttributeclass Record:    parent: interfaces.Registry    registry: AvEntity    key: str    entity: AvEntity    authorization: AvAuthorization    auto_dep_res: bool    def __init__(        self,        parent: interfaces.Registry,        registry: AvEntity,        key: str,        authorization: AvAuthorization,        entity: AvEntity = None,        auto_dep_res: bool = False,    ):        self.parent = parent        self.registry = registry        self.key = key        self.entity = entity        self.authorization = authorization        self.auto_dep_res = auto_dep_res    def purge_annotations(self) -> Record:        av_annotations.purge_annotations(            entity=self.registry, key=self.key, authorization=self.authorization        )        return self    def get_annotation(self, attribute: AvAttribute) -> AvValue:        return av_annotations.get_annotation(            entity=self.registry,            attribute=attribute,            key=self.key,            authorization=self.authorization,        )    def set_annotation(self, attribute: AvAttribute, value: AvValue) -> Record:        av_annotations.set_annotation(            entity=self.registry,            key=self.key,            attribute=attribute,            value=value,            authorization=self.authorization,        )        return self    def set(self, name: str, entity: AvEntity) -> Record:        clean_entity: AvEntity = entity if entity is not None else self.entity        registries.register_entity(            registry=self.registry,            name=name,            key=self.key,            entity=clean_entity,            authorization=self.authorization,        )        self.entity = clean_entity        return self    def get(self) -> AvEntity:        return registries.lookup_registry(            registry=self.registry, key=self.key, authorization=self.authorization        )    def remove(self) -> Record:        registries.deregister_entity(            registry=self.registry, key=self.key, authorization=self.authorization        )        return Record    def back(self) -> interfaces.Registry:        return self.parent