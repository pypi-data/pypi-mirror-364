""" Copyright 2024-2025 LEDR Technologies Inc.This file is part of the Orchestra library, which helps developer use our Orchestra technology which is based on AvesTerra, owned and developped by Georgetown University, under license agreement with LEDR Technologies Inc.The Orchestra library is a free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.The Orchestra library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with the Orchestra library. If not, see <https://www.gnu.org/licenses/>.If you have any questions, feedback or issues about the Orchestra library, you can contact us at support@ledr.io."""from __future__ import annotationsimport tracebackimport avesterra.facts as factsimport avesterra.facets as facetsimport avesterra.factors as factorsfrom avesterra.avesterra import AvEntity, AvAuthorization, AuthorizationErrorfrom avesterra.avial import AvValuefrom avesterra.taxonomy import AvAttributeimport oop.interfaces as interfacesclass Factor(interfaces.Factor):    parent: interfaces.Facet    entity: AvEntity    authorization: AvAuthorization    attribute: AvAttribute    facet: str    key: str    auto_dep_res: bool    def __init__(        self,        parent: interfaces.Facet,        entity: AvEntity,        authorization: AvAuthorization,        attribute: AvAttribute,        facet: str,        key: str,        auto_dep_res: bool = True,    ):        self.parent = parent        self.entity = entity        self.authorization = authorization        self.attribute = attribute        self.facet = facet        self.key = key        self.auto_dep_res = auto_dep_res    def set(self, value: AvValue) -> Factor:        try:            factors.include_factor(                entity=self.entity,                attribute=self.attribute,                name=self.facet,                key=self.key,                value=value,                authorization=self.authorization,            )            return self        except Exception as e:            error_str: str = traceback.format_exc()            if "Server reported AUTHORIZATION error" in error_str:                raise AuthorizationError(                    f"Not authorized to include factor of key {self.key}, name {self.facet} on attribute {self.attribute.name} on entity {self.entity}"                )            elif "object not found" in error_str and self.auto_dep_res:                # Add object if auto_dep_resolution is enabled                facts.include_fact(                    entity=self.entity,                    attribute=self.attribute,                    value=AvValue.encode(""),                    authorization=self.authorization,                )                # Include facet as well, because a facet cannot be                # present if its parent fact is not already present                facets.include_facet(                    entity=self.entity,                    attribute=self.attribute,                    name=self.facet,                    value=AvValue.encode(""),                    authorization=self.authorization,                )                # Include factor again                factors.include_factor(                    entity=self.entity,                    attribute=self.attribute,                    name=self.facet,                    key=self.key,                    value=value,                    authorization=self.authorization,                )            elif "facet not found" in error_str and self.auto_dep_res:                # Include facet if parent facet is not present                facets.include_facet(                    entity=self.entity,                    attribute=self.attribute,                    name=self.facet,                    value=AvValue.encode(""),                    authorization=self.authorization,                )                # Include factor again                factors.include_factor(                    entity=self.entity,                    attribute=self.attribute,                    name=self.facet,                    key=self.key,                    value=value,                    authorization=self.authorization,                )            else:                raise e    def remove(self) -> Factor:        try:            factors.exclude_factor(                entity=self.entity,                attribute=self.attribute,                name=self.facet,                key=self.key,                authorization=self.authorization,            )            return self        except Exception as e:            error_str: str = traceback.format_exc()            if "Server reported AUTHORIZATION error" in error_str:                raise AuthorizationError(                    f"Not authorized to exclude factor of key {self.key}, name {self.facet}, attribute {self.attribute.name} from entity {self.entity}"                )            else:                raise e    def value(self) -> AvValue:        try:            return factors.get_factor(                entity=self.entity,                attribute=self.attribute,                name=self.facet,                key=self.key,                authorization=self.authorization,            )        except Exception as e:            error_str: str = traceback.format_exc()            if "Server reported AUTHORIZATION error" in error_str:                raise AuthorizationError(                    f"Not authorized to get value associated with factor key {self.key}, name {self.facet}, attribute {self.attribute.name} from entity {self.entity}"                )            else:                raise e    def back(self) -> interfaces.Facet:        return self.parent