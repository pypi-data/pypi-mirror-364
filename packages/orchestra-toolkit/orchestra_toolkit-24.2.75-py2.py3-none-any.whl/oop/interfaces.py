""" Copyright 2024-2025 LEDR Technologies Inc.This file is part of the Orchestra library, which helps developer use our Orchestra technology which is based on AvesTerra, owned and developped by Georgetown University, under license agreement with LEDR Technologies Inc.The Orchestra library is a free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.The Orchestra library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with the Orchestra library. If not, see <https://www.gnu.org/licenses/>.If you have any questions, feedback or issues about the Orchestra library, you can contact us at support@ledr.io."""from __future__ import annotationsfrom avesterra.avial import AvValue, NULL_VALUEfrom avesterra.taxonomy import AvAttribute, AvCategoryfrom avesterra.avesterra import AvEntity, AvAuthorization, NULL_ENTITYfrom abc import ABCMeta, abstractmethodclass Object(metaclass=ABCMeta):    def __init__(        self, entity: AvEntity, auth: AvAuthorization, auto_dep_res: bool = True    ):        pass    @abstractmethod    def fact(self, attribute: AvAttribute) -> Fact:        pass    @abstractmethod    def purge_facts(self):        passclass Fact(metaclass=ABCMeta):    def __init__(        self,        parent: Object,        entity: AvEntity,        auth: AvAuthorization,        attribute: AvAttribute,        auto_dep_res: bool = True,    ):        pass    @abstractmethod    def set(self, value: AvValue) -> Fact:        pass    @abstractmethod    def remove(self) -> Fact:        pass    @abstractmethod    def value(self) -> AvValue:        pass    @abstractmethod    def feature(self, key: str, name: str = "") -> Feature:        pass    @abstractmethod    def facet(self, name: str = "") -> Facet:        pass    @abstractmethod    def table(self) -> Table:        pass    @abstractmethod    def purge_features(self) -> Facet:        pass    @abstractmethod    def purge_facets(self) -> Facet:        pass    @abstractmethod    def back(self) -> Object:        passclass Feature(metaclass=ABCMeta):    def __init__(        self,        parent: Fact,        entity: AvEntity,        authorization: AvAuthorization,        attribute: AvAttribute,        key: str,        name: str = "",        auto_dep_res: bool = True,    ):        pass    @abstractmethod    def set(self, value: AvValue) -> Feature:        pass    @abstractmethod    def remove(self) -> Feature:        pass    @abstractmethod    def value(self) -> AvValue:        pass    @abstractmethod    def back(self) -> Fact:        passclass Facet(metaclass=ABCMeta):    def __init__(        self,        parent: object,        entity: AvEntity,        authorization: AvAuthorization,        attribute: AvAttribute,        facet: str,        auto_dep_res: bool = True,    ):        pass    @abstractmethod    def set(self, value: AvValue) -> Facet:        pass    @abstractmethod    def remove(self) -> Facet:        pass    @abstractmethod    def value(self) -> AvValue:        pass    @abstractmethod    def back(self) -> Fact:        pass    @abstractmethod    def factor(self, factor: str) -> Factor:        passclass Factor(metaclass=ABCMeta):    def __init__(        self,        parent: object,        entity: AvEntity,        authorization: AvAuthorization,        attribute: AvAttribute,        facet: str,        key: str,        auto_dep_res: bool = True,    ):        pass    @abstractmethod    def set(self, value: AvValue) -> Factor:        pass    @abstractmethod    def remove(self) -> Facet:        pass    @abstractmethod    def value(self) -> AvValue:        pass    @abstractmethod    def back(self) -> Facet:        passclass Table(metaclass=ABCMeta):    def __init__(        self,        parent: Fact,        entity: AvEntity,        authorization: AvAuthorization,        attribute: AvAttribute,        auto_dep_res: bool = True,    ):        self.parent = parent        self.entity = entity        self.authorization = authorization        self.attribute = attribute        self.auto_dep_res = auto_dep_res    @abstractmethod    def fields(self) -> str:        pass    @abstractmethod    def include_field(self, name: str, default_value: AvValue = NULL_VALUE) -> Table:        pass    @abstractmethod    def clear_field_of_frames(self, name: str) -> Table:        pass    @abstractmethod    def exclude_field(self, name: str) -> Table:        pass    @abstractmethod    def frame(self, key: str) -> Frame:        pass    @abstractmethod    def purge_fields(self) -> Table:        pass    @abstractmethod    def purge_frames(self) -> Table:        pass    @abstractmethod    def purge(self) -> Table:        pass    @abstractmethod    def back(self) -> Fact:        passclass Frame(metaclass=ABCMeta):    def __init__(        self,        parent: Table,        entity: AvEntity,        authorization: AvAuthorization,        attribute: AvAttribute,        key: str,        auto_dep_res: bool = True,    ):        pass    @abstractmethod    def include(self) -> Frame:        pass    @abstractmethod    def exclude(self) -> Frame:        pass    @abstractmethod    def clear(self, name: str = "") -> Frame:        pass    @abstractmethod    def set(self, name: str, value: AvValue) -> Frame:        pass    @abstractmethod    def value(self, name: str) -> AvValue:        pass    def back(self) -> Fact:        passclass Registry(metaclass=ABCMeta):    def __init__(        self,        authorization: AvAuthorization,        registry: AvEntity = NULL_ENTITY,        name: str = "",        category: AvCategory = AvCategory.REGISTRY,        outlet: AvEntity = AvEntity,    ):        pass    @abstractmethod    def get(self, key: str = "", index: int = 0) -> Record:        pass    @abstractmethod    def register(self, key: str, name: str, entity: AvEntity) -> Record:        pass    @abstractmethod    def deregister(self, key: str) -> Registry:        pass    @abstractmethod    def purge(self) -> Registry:        pass    @abstractmethod    def delete(self):        passclass Record(metaclass=ABCMeta):    def __init__(        self,        parent: Registry,        registry: AvEntity,        key: str,        authorization: AvAuthorization,        entity: AvEntity = None,        auto_dep_res: bool = False,    ):        pass    @abstractmethod    def purge_annotations(self) -> Record:        pass    @abstractmethod    def get_annotation(self, attribute: AvAttribute) -> AvValue:        pass    @abstractmethod    def set_annotation(self, attribute: AvAttribute, value: AvValue) -> Record:        pass    @abstractmethod    def set(self, name: str, entity: AvEntity) -> Record:        pass    @abstractmethod    def get(self) -> AvEntity:        pass    @abstractmethod    def remove(self) -> Record:        pass    @abstractmethod    def back(self) -> Record:        pass