""" Copyright 2024-2025 LEDR Technologies Inc.This file is part of the Orchestra library, which helps developer use our Orchestra technology which is based on AvesTerra, owned and developped by Georgetown University, under license agreement with LEDR Technologies Inc.The Orchestra library is a free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.The Orchestra library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.You should have received a copy of the GNU Lesser General Public License along with the Orchestra library. If not, see <https://www.gnu.org/licenses/>.If you have any questions, feedback or issues about the Orchestra library, you can contact us at support@ledr.io."""from __future__ import annotationsimport tracebackfrom avesterra import factsfrom avesterra.avial import AvValue, NULL_VALUEfrom avesterra.taxonomy import AvAttributefrom avesterra.avesterra import AvEntity, AvAuthorization, AuthorizationErrorimport oop.interfaces as interfacesimport avesterra.fields as fieldsimport avesterra.frames as framesfrom oop.frame import Frameclass Table(interfaces.Table):    parent: interfaces.Fact    entity: AvEntity    authorization: AvAuthorization    attribute: AvAttribute    auto_dep_res: bool    def __init__(        self,        parent: interfaces.Fact,        entity: AvEntity,        authorization: AvAuthorization,        attribute: AvAttribute,        auto_dep_res: bool = True,    ):        self.parent = parent        self.entity = entity        self.authorization = authorization        self.attribute = attribute        self.auto_dep_res = auto_dep_res    def fields(self) -> str:        return fields.retrieve_fields(            entity=self.entity,            attribute=self.attribute,            authorization=self.authorization,        )    def include_field(self, name: str, default_value: AvValue = NULL_VALUE) -> Table:        try:            fields.include_field(                entity=self.entity,                attribute=self.attribute,                name=name,                value=default_value,                authorization=self.authorization,            )            return self        except Exception as e:            error_str: str = traceback.format_exc()            if "Server reported AUTHORIZATION error" in error_str:                raise AuthorizationError(                    f"Not authorized to include field of {name} of fact {self.attribute.name} on entity {self.entity}"                )            elif "object not found" in error_str and self.auto_dep_res:                # Add fact if auto_dep_resolution is enabled                facts.include_fact(                    entity=self.entity,                    attribute=self.attribute,                    value=AvValue.encode(""),                    authorization=self.authorization,                )                # Include field again, once fact has been set                fields.include_field(                    entity=self.entity,                    attribute=self.attribute,                    name=name,                    value=default_value,                    authorization=self.authorization,                )                return self            else:                raise e    def clear_field_of_frames(self, name: str):        fields.clear_field(            entity=self.entity,            attribute=self.attribute,            name=name,            authorization=self.authorization,        )        return self    def exclude_field(self, name: str):        fields.exclude_field(            entity=self.entity,            attribute=self.attribute,            name=name,            authorization=self.authorization,        )        return self    def frame(self, key: str) -> Frame:        return Frame(            parent=self.parent,            entity=self.entity,            attribute=self.attribute,            key=key,            authorization=self.authorization,            auto_dep_res=self.auto_dep_res,        )    def purge_fields(self) -> Table:        fields.purge_fields(            entity=self.entity,            attribute=self.attribute,            authorization=self.authorization,        )        return self    def purge_frames(self) -> Table:        frames.purge_frames(            entity=self.entity,            attribute=self.attribute,            authorization=self.authorization,        )        return self    def purge(self) -> Table:        self.purge_frames()        self.purge_fields()        return self    def back(self) -> interfaces.Fact:        return self.parent