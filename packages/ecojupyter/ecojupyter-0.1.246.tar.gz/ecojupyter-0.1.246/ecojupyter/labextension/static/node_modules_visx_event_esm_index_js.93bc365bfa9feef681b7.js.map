{"version":3,"file":"node_modules_visx_event_esm_index_js.93bc365bfa9feef681b7.js","mappings":";;;;;;;;;;;;;;AAAA,sBAAsB,sEAAsE,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,iCAAiC,kBAAkB;AAChP;AAC1D;AACA;AACA;AACA;AACe;AACf,gCAAgC;AAChC,MAAM,yDAAY;AAClB;AACA;AACA;AACA,MAAM,aAAa;AACnB;AACA,MAAM,yDAAY;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7BqD;;;;;;;;;;;;;;;;;ACAD;AACF;;AAElD;AACe;AACf;AACA,MAAM,sDAAS;AACf,WAAW,8DAAiB;AAC5B;AACA;AACA,MAAM,oDAAO;AACb;AACA;AACA,qBAAqB,8DAAiB;AACtC;AACA;AACA;;;;;;;;;;;;;;;;;AChBoC;AAC+C;AAC/B;AACrC;AACf;AACA,eAAe,8DAAiB;;AAEhC;AACA,YAAY,yDAAY;AACxB,kBAAkB,iEAAoB;AACtC,MAAM,4DAAe;AACrB;AACA;AACA;AACA;AACA,eAAe,mDAAK;AACpB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,mDAAK;AAClB;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;;AC3BO;AACP;AACA;;AAEA;AACO;AACP;AACA;;AAEA;AACO;AACP;AACA;AACO;AACP;AACA;;AAEA;AACO;AACP;AACA;;AAEA;AACO;AACP;AACA;;AAEA;AACO;AACP;AACA;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://ecojupyter/./node_modules/@visx/event/esm/getXAndYFromEvent.js","webpack://ecojupyter/./node_modules/@visx/event/esm/index.js","webpack://ecojupyter/./node_modules/@visx/event/esm/localPoint.js","webpack://ecojupyter/./node_modules/@visx/event/esm/localPointGeneric.js","webpack://ecojupyter/./node_modules/@visx/event/esm/typeGuards.js","webpack://ecojupyter/./node_modules/@visx/point/esm/Point.js"],"sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { isMouseEvent, isTouchEvent } from './typeGuards';\nvar DEFAULT_POINT = {\n  x: 0,\n  y: 0\n};\nexport default function getXAndYFromEvent(event) {\n  if (!event) return _extends({}, DEFAULT_POINT);\n  if (isTouchEvent(event)) {\n    return event.changedTouches.length > 0 ? {\n      x: event.changedTouches[0].clientX,\n      y: event.changedTouches[0].clientY\n    } : _extends({}, DEFAULT_POINT);\n  }\n  if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n\n  // for focus events try to extract the center position of the target element\n  var target = event == null ? void 0 : event.target;\n  var boundingClientRect = target && 'getBoundingClientRect' in target ? target.getBoundingClientRect() : null;\n  if (!boundingClientRect) return _extends({}, DEFAULT_POINT);\n  return {\n    x: boundingClientRect.x + boundingClientRect.width / 2,\n    y: boundingClientRect.y + boundingClientRect.height / 2\n  };\n}","export { default as localPoint } from './localPoint';\nexport { default as touchPoint } from './touchPoint';","import localPointGeneric from './localPointGeneric';\nimport { isElement, isEvent } from './typeGuards';\n\n/** Handles two signatures for backwards compatibility. */\nexport default function localPoint(nodeOrEvent, maybeEvent) {\n  // localPoint(node, event)\n  if (isElement(nodeOrEvent) && maybeEvent) {\n    return localPointGeneric(nodeOrEvent, maybeEvent);\n  }\n  // localPoint(event)\n  if (isEvent(nodeOrEvent)) {\n    var event = nodeOrEvent;\n    var node = event.target;\n    if (node) return localPointGeneric(node, event);\n  }\n  return null;\n}","import { Point } from '@visx/point';\nimport { isSVGElement, isSVGGraphicsElement, isSVGSVGElement } from './typeGuards';\nimport getXAndYFromEvent from './getXAndYFromEvent';\nexport default function localPoint(node, event) {\n  if (!node || !event) return null;\n  var coords = getXAndYFromEvent(event);\n\n  // find top-most SVG\n  var svg = isSVGElement(node) ? node.ownerSVGElement : node;\n  var screenCTM = isSVGGraphicsElement(svg) ? svg.getScreenCTM() : null;\n  if (isSVGSVGElement(svg) && screenCTM) {\n    var point = svg.createSVGPoint();\n    point.x = coords.x;\n    point.y = coords.y;\n    point = point.matrixTransform(screenCTM.inverse());\n    return new Point({\n      x: point.x,\n      y: point.y\n    });\n  }\n\n  // fall back to bounding box\n  var rect = node.getBoundingClientRect();\n  return new Point({\n    x: coords.x - rect.left - node.clientLeft,\n    y: coords.y - rect.top - node.clientTop\n  });\n}","export function isElement(elem) {\n  return !!elem && elem instanceof Element;\n}\n\n// functional definition of isSVGElement. Note that SVGSVGElements are HTMLElements\nexport function isSVGElement(elem) {\n  return !!elem && (elem instanceof SVGElement || 'ownerSVGElement' in elem);\n}\n\n// functional definition of SVGGElement\nexport function isSVGSVGElement(elem) {\n  return !!elem && 'createSVGPoint' in elem;\n}\nexport function isSVGGraphicsElement(elem) {\n  return !!elem && 'getScreenCTM' in elem;\n}\n\n// functional definition of TouchEvent\nexport function isTouchEvent(event) {\n  return !!event && 'changedTouches' in event;\n}\n\n// functional definition of MouseEvent\nexport function isMouseEvent(event) {\n  return !!event && 'clientX' in event;\n}\n\n// functional definition of event\nexport function isEvent(event) {\n  return !!event && (event instanceof Event || 'nativeEvent' in event && event.nativeEvent instanceof Event);\n}","var Point = /*#__PURE__*/function () {\n  function Point(_ref) {\n    var _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y;\n    this.x = 0;\n    this.y = 0;\n    this.x = x;\n    this.y = y;\n  }\n  var _proto = Point.prototype;\n  _proto.value = function value() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  };\n  _proto.toArray = function toArray() {\n    return [this.x, this.y];\n  };\n  return Point;\n}();\nexport { Point as default };"],"names":[],"sourceRoot":""}