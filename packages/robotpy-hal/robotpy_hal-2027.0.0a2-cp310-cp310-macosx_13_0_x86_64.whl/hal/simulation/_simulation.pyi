from __future__ import annotations
import hal._wpiHal
import typing
__all__ = ['NotifierInfo', 'SimCB', 'SimValueCB', 'cancelAllSimPeriodicCallbacks', 'cancelAnalogInAverageBitsCallback', 'cancelAnalogInInitializedCallback', 'cancelAnalogInOversampleBitsCallback', 'cancelAnalogInVoltageCallback', 'cancelDIOFilterIndexCallback', 'cancelDIOInitializedCallback', 'cancelDIOIsInputCallback', 'cancelDIOPulseLengthCallback', 'cancelDIOValueCallback', 'cancelDigitalPWMDutyCycleCallback', 'cancelDigitalPWMInitializedCallback', 'cancelDigitalPWMPinCallback', 'cancelDriverStationAllianceStationIdCallback', 'cancelDriverStationAutonomousCallback', 'cancelDriverStationDsAttachedCallback', 'cancelDriverStationEStopCallback', 'cancelDriverStationEnabledCallback', 'cancelDriverStationFmsAttachedCallback', 'cancelDriverStationMatchTimeCallback', 'cancelDriverStationNewDataCallback', 'cancelDriverStationTestCallback', 'cancelDutyCycleFrequencyCallback', 'cancelDutyCycleInitializedCallback', 'cancelDutyCycleOutputCallback', 'cancelEncoderCountCallback', 'cancelEncoderDirectionCallback', 'cancelEncoderDistancePerPulseCallback', 'cancelEncoderInitializedCallback', 'cancelEncoderMaxPeriodCallback', 'cancelEncoderPeriodCallback', 'cancelEncoderResetCallback', 'cancelEncoderReverseDirectionCallback', 'cancelEncoderSamplesToAverageCallback', 'cancelJoystickAxesCallback', 'cancelJoystickButtonsCallback', 'cancelJoystickDescriptorCallback', 'cancelJoystickOutputsCallback', 'cancelJoystickPOVsCallback', 'cancelMatchInfoCallback', 'cancelPWMInitializedCallback', 'cancelPowerDistributionCurrentCallback', 'cancelPowerDistributionInitializedCallback', 'cancelPowerDistributionTemperatureCallback', 'cancelPowerDistributionVoltageCallback', 'cancelREVPHCompressorConfigTypeCallback', 'cancelREVPHCompressorCurrentCallback', 'cancelREVPHCompressorOnCallback', 'cancelREVPHInitializedCallback', 'cancelREVPHPressureSwitchCallback', 'cancelREVPHSolenoidOutputCallback', 'cancelRoboRioBrownoutVoltageCallback', 'cancelRoboRioCPUTempCallback', 'cancelRoboRioCommentsCallback', 'cancelRoboRioSerialNumberCallback', 'cancelRoboRioTeamNumberCallback', 'cancelRoboRioUserActive3V3Callback', 'cancelRoboRioUserCurrent3V3Callback', 'cancelRoboRioUserFaults3V3Callback', 'cancelRoboRioUserVoltage3V3Callback', 'cancelRoboRioVInVoltageCallback', 'findDigitalPWMForChannel', 'findEncoderForChannel', 'getAddressableLEDData', 'getAddressableLEDInitialized', 'getAddressableLEDLength', 'getAddressableLEDStart', 'getAnalogInAverageBits', 'getAnalogInInitialized', 'getAnalogInOversampleBits', 'getAnalogInSimDevice', 'getAnalogInVoltage', 'getCTREPCMAllSolenoids', 'getCTREPCMClosedLoopEnabled', 'getCTREPCMCompressorCurrent', 'getCTREPCMCompressorOn', 'getCTREPCMInitialized', 'getCTREPCMPressureSwitch', 'getCTREPCMSolenoidOutput', 'getDIOFilterIndex', 'getDIOInitialized', 'getDIOIsInput', 'getDIOPulseLength', 'getDIOSimDevice', 'getDIOValue', 'getDigitalPWMDutyCycle', 'getDigitalPWMInitialized', 'getDigitalPWMPin', 'getDriverStationAllianceStationId', 'getDriverStationAutonomous', 'getDriverStationDsAttached', 'getDriverStationEStop', 'getDriverStationEnabled', 'getDriverStationFmsAttached', 'getDriverStationMatchTime', 'getDriverStationTest', 'getDutyCycleFrequency', 'getDutyCycleInitialized', 'getDutyCycleOutput', 'getDutyCycleSimDevice', 'getEncoderCount', 'getEncoderDigitalChannelA', 'getEncoderDigitalChannelB', 'getEncoderDirection', 'getEncoderDistance', 'getEncoderDistancePerPulse', 'getEncoderInitialized', 'getEncoderMaxPeriod', 'getEncoderPeriod', 'getEncoderRate', 'getEncoderReset', 'getEncoderReverseDirection', 'getEncoderSamplesToAverage', 'getEncoderSimDevice', 'getJoystickAxes', 'getJoystickButtons', 'getJoystickCounts', 'getJoystickDescriptor', 'getJoystickOutputs', 'getJoystickPOVs', 'getMatchInfo', 'getNextNotifierTimeout', 'getNotifierInfo', 'getNumNotifiers', 'getPWMInitialized', 'getPWMOutputPeriod', 'getPWMPulseMicrosecond', 'getPWMSimDevice', 'getPowerDistributionAllCurrents', 'getPowerDistributionCurrent', 'getPowerDistributionInitialized', 'getPowerDistributionTemperature', 'getPowerDistributionVoltage', 'getProgramStarted', 'getREVPHAllSolenoids', 'getREVPHCompressorConfigType', 'getREVPHCompressorCurrent', 'getREVPHCompressorOn', 'getREVPHInitialized', 'getREVPHPressureSwitch', 'getREVPHSolenoidOutput', 'getRoboRioBrownoutVoltage', 'getRoboRioCPUTemp', 'getRoboRioComments', 'getRoboRioSerialNumber', 'getRoboRioTeamNumber', 'getRoboRioUserActive3V3', 'getRoboRioUserCurrent3V3', 'getRoboRioUserFaults3V3', 'getRoboRioUserVoltage3V3', 'getRoboRioVInVoltage', 'getSimDeviceHandle', 'getSimDeviceName', 'getSimValueDeviceHandle', 'getSimValueHandle', 'isSimDeviceEnabled', 'isTimingPaused', 'notifyDriverStationNewData', 'pauseTiming', 'registerSimPeriodicAfterCallback', 'registerSimPeriodicBeforeCallback', 'registerSimValueChangedCallback', 'registerSimValueCreatedCallback', 'registerSimValueResetCallback', 'resetAddressableLEDData', 'resetAllSimData', 'resetAnalogInData', 'resetCTREPCMData', 'resetDIOData', 'resetDigitalPWMData', 'resetDriverStationData', 'resetDutyCycleData', 'resetEncoderData', 'resetGlobalHandles', 'resetPWMData', 'resetPowerDistributionData', 'resetREVPHData', 'resetRoboRioData', 'resetSimDeviceData', 'restartTiming', 'resumeTiming', 'setAddressableLEDData', 'setAddressableLEDInitialized', 'setAddressableLEDLength', 'setAddressableLEDStart', 'setAnalogInAverageBits', 'setAnalogInInitialized', 'setAnalogInOversampleBits', 'setAnalogInVoltage', 'setCTREPCMAllSolenoids', 'setCTREPCMClosedLoopEnabled', 'setCTREPCMCompressorCurrent', 'setCTREPCMCompressorOn', 'setCTREPCMInitialized', 'setCTREPCMPressureSwitch', 'setCTREPCMSolenoidOutput', 'setDIOFilterIndex', 'setDIOInitialized', 'setDIOIsInput', 'setDIOPulseLength', 'setDIOValue', 'setDigitalPWMDutyCycle', 'setDigitalPWMInitialized', 'setDigitalPWMPin', 'setDriverStationAllianceStationId', 'setDriverStationAutonomous', 'setDriverStationDsAttached', 'setDriverStationEStop', 'setDriverStationEnabled', 'setDriverStationFmsAttached', 'setDriverStationMatchTime', 'setDriverStationTest', 'setDutyCycleFrequency', 'setDutyCycleInitialized', 'setDutyCycleOutput', 'setEncoderCount', 'setEncoderDirection', 'setEncoderDistance', 'setEncoderDistancePerPulse', 'setEncoderInitialized', 'setEncoderMaxPeriod', 'setEncoderPeriod', 'setEncoderRate', 'setEncoderReset', 'setEncoderReverseDirection', 'setEncoderSamplesToAverage', 'setEventName', 'setGameSpecificMessage', 'setJoystickAxes', 'setJoystickAxis', 'setJoystickAxisCount', 'setJoystickAxisType', 'setJoystickButton', 'setJoystickButtonCount', 'setJoystickButtons', 'setJoystickButtonsValue', 'setJoystickDescriptor', 'setJoystickIsGamepad', 'setJoystickName', 'setJoystickOutputs', 'setJoystickPOV', 'setJoystickPOVCount', 'setJoystickPOVs', 'setJoystickType', 'setMatchInfo', 'setMatchNumber', 'setMatchType', 'setPWMInitialized', 'setPWMOutputPeriod', 'setPWMPulseMicrosecond', 'setPowerDistributionAllCurrents', 'setPowerDistributionCurrent', 'setPowerDistributionInitialized', 'setPowerDistributionTemperature', 'setPowerDistributionVoltage', 'setProgramStarted', 'setREVPHAllSolenoids', 'setREVPHCompressorConfigType', 'setREVPHCompressorCurrent', 'setREVPHCompressorOn', 'setREVPHInitialized', 'setREVPHPressureSwitch', 'setREVPHSolenoidOutput', 'setReplayNumber', 'setRoboRioBrownoutVoltage', 'setRoboRioCPUTemp', 'setRoboRioComments', 'setRoboRioSerialNumber', 'setRoboRioTeamNumber', 'setRoboRioUserActive3V3', 'setRoboRioUserCurrent3V3', 'setRoboRioUserFaults3V3', 'setRoboRioUserVoltage3V3', 'setRoboRioVInVoltage', 'setRuntimeType', 'setSimDeviceEnabled', 'stepTiming', 'stepTimingAsync', 'waitForProgramStart']
class NotifierInfo:
    def __init__(self) -> None:
        ...
    @property
    def handle(self) -> int:
        ...
    @handle.setter
    def handle(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def name(self) -> memoryview:
        ...
    @property
    def timeout(self) -> int:
        ...
    @timeout.setter
    def timeout(self, arg0: typing.SupportsInt) -> None:
        ...
    @property
    def waitTimeValid(self) -> int:
        ...
    @waitTimeValid.setter
    def waitTimeValid(self, arg0: typing.SupportsInt) -> None:
        ...
class SimCB:
    """
    Simulation callback handle
    """
    def cancel(self) -> None:
        """
        Cancel the callback
        """
class SimValueCB:
    """
    Simulation callback handle
    """
    def cancel(self) -> None:
        """
        Cancel the callback
        """
def cancelAllSimPeriodicCallbacks() -> None:
    ...
def cancelAnalogInAverageBitsCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelAnalogInInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelAnalogInOversampleBitsCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelAnalogInVoltageCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDIOFilterIndexCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDIOInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDIOIsInputCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDIOPulseLengthCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDIOValueCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDigitalPWMDutyCycleCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDigitalPWMInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDigitalPWMPinCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationAllianceStationIdCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationAutonomousCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationDsAttachedCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationEStopCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationEnabledCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationFmsAttachedCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationMatchTimeCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationNewDataCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDriverStationTestCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelDutyCycleFrequencyCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDutyCycleInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelDutyCycleOutputCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderCountCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderDirectionCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderDistancePerPulseCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderMaxPeriodCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderPeriodCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderResetCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderReverseDirectionCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelEncoderSamplesToAverageCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelJoystickAxesCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelJoystickButtonsCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelJoystickDescriptorCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelJoystickOutputsCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelJoystickPOVsCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelMatchInfoCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelPWMInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelPowerDistributionCurrentCallback(index: typing.SupportsInt, channel: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelPowerDistributionInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelPowerDistributionTemperatureCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelPowerDistributionVoltageCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelREVPHCompressorConfigTypeCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelREVPHCompressorCurrentCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelREVPHCompressorOnCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelREVPHInitializedCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelREVPHPressureSwitchCallback(index: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelREVPHSolenoidOutputCallback(index: typing.SupportsInt, channel: typing.SupportsInt, uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioBrownoutVoltageCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioCPUTempCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioCommentsCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioSerialNumberCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioTeamNumberCallback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioUserActive3V3Callback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioUserCurrent3V3Callback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioUserFaults3V3Callback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioUserVoltage3V3Callback(uid: typing.SupportsInt) -> None:
    ...
def cancelRoboRioVInVoltageCallback(uid: typing.SupportsInt) -> None:
    ...
def findDigitalPWMForChannel(channel: typing.SupportsInt) -> int:
    ...
def findEncoderForChannel(channel: typing.SupportsInt) -> int:
    ...
def getAddressableLEDData(start: typing.SupportsInt, length: typing.SupportsInt, data: hal._wpiHal.AddressableLEDData) -> int:
    ...
def getAddressableLEDInitialized(index: typing.SupportsInt) -> int:
    ...
def getAddressableLEDLength(index: typing.SupportsInt) -> int:
    ...
def getAddressableLEDStart(index: typing.SupportsInt) -> int:
    ...
def getAnalogInAverageBits(index: typing.SupportsInt) -> int:
    ...
def getAnalogInInitialized(index: typing.SupportsInt) -> int:
    ...
def getAnalogInOversampleBits(index: typing.SupportsInt) -> int:
    ...
def getAnalogInSimDevice(index: typing.SupportsInt) -> int:
    ...
def getAnalogInVoltage(index: typing.SupportsInt) -> float:
    ...
def getCTREPCMAllSolenoids(index: typing.SupportsInt) -> int:
    ...
def getCTREPCMClosedLoopEnabled(index: typing.SupportsInt) -> int:
    ...
def getCTREPCMCompressorCurrent(index: typing.SupportsInt) -> float:
    ...
def getCTREPCMCompressorOn(index: typing.SupportsInt) -> int:
    ...
def getCTREPCMInitialized(index: typing.SupportsInt) -> int:
    ...
def getCTREPCMPressureSwitch(index: typing.SupportsInt) -> int:
    ...
def getCTREPCMSolenoidOutput(index: typing.SupportsInt, channel: typing.SupportsInt) -> int:
    ...
def getDIOFilterIndex(index: typing.SupportsInt) -> int:
    ...
def getDIOInitialized(index: typing.SupportsInt) -> int:
    ...
def getDIOIsInput(index: typing.SupportsInt) -> int:
    ...
def getDIOPulseLength(index: typing.SupportsInt) -> float:
    ...
def getDIOSimDevice(index: typing.SupportsInt) -> int:
    ...
def getDIOValue(index: typing.SupportsInt) -> int:
    ...
def getDigitalPWMDutyCycle(index: typing.SupportsInt) -> float:
    ...
def getDigitalPWMInitialized(index: typing.SupportsInt) -> int:
    ...
def getDigitalPWMPin(index: typing.SupportsInt) -> int:
    ...
def getDriverStationAllianceStationId() -> hal._wpiHal.AllianceStationID:
    ...
def getDriverStationAutonomous() -> int:
    ...
def getDriverStationDsAttached() -> int:
    ...
def getDriverStationEStop() -> int:
    ...
def getDriverStationEnabled() -> int:
    ...
def getDriverStationFmsAttached() -> int:
    ...
def getDriverStationMatchTime() -> float:
    ...
def getDriverStationTest() -> int:
    ...
def getDutyCycleFrequency(index: typing.SupportsInt) -> float:
    ...
def getDutyCycleInitialized(index: typing.SupportsInt) -> int:
    ...
def getDutyCycleOutput(index: typing.SupportsInt) -> float:
    ...
def getDutyCycleSimDevice(index: typing.SupportsInt) -> int:
    ...
def getEncoderCount(index: typing.SupportsInt) -> int:
    ...
def getEncoderDigitalChannelA(index: typing.SupportsInt) -> int:
    ...
def getEncoderDigitalChannelB(index: typing.SupportsInt) -> int:
    ...
def getEncoderDirection(index: typing.SupportsInt) -> int:
    ...
def getEncoderDistance(index: typing.SupportsInt) -> float:
    ...
def getEncoderDistancePerPulse(index: typing.SupportsInt) -> float:
    ...
def getEncoderInitialized(index: typing.SupportsInt) -> int:
    ...
def getEncoderMaxPeriod(index: typing.SupportsInt) -> float:
    ...
def getEncoderPeriod(index: typing.SupportsInt) -> float:
    ...
def getEncoderRate(index: typing.SupportsInt) -> float:
    ...
def getEncoderReset(index: typing.SupportsInt) -> int:
    ...
def getEncoderReverseDirection(index: typing.SupportsInt) -> int:
    ...
def getEncoderSamplesToAverage(index: typing.SupportsInt) -> int:
    ...
def getEncoderSimDevice(index: typing.SupportsInt) -> int:
    ...
def getJoystickAxes(joystickNum: typing.SupportsInt, axes: hal._wpiHal.JoystickAxes) -> None:
    ...
def getJoystickButtons(joystickNum: typing.SupportsInt, buttons: hal._wpiHal.JoystickButtons) -> None:
    ...
def getJoystickCounts(stick: typing.SupportsInt) -> tuple[int, int, int]:
    ...
def getJoystickDescriptor(joystickNum: typing.SupportsInt, descriptor: hal._wpiHal.JoystickDescriptor) -> None:
    ...
def getJoystickOutputs(joystickNum: typing.SupportsInt) -> tuple[int, int, int]:
    ...
def getJoystickPOVs(joystickNum: typing.SupportsInt, povs: hal._wpiHal.JoystickPOVs) -> None:
    ...
def getMatchInfo(info: hal._wpiHal.MatchInfo) -> None:
    ...
def getNextNotifierTimeout() -> int:
    ...
def getNotifierInfo(arr: NotifierInfo, size: typing.SupportsInt) -> int:
    """
    Gets detailed information about each notifier.
    
    :param arr:  array of information to be filled
    :param size: size of arr
    
    :returns: Number of notifiers; note: may be larger than passed-in size
    """
def getNumNotifiers() -> int:
    ...
def getPWMInitialized(index: typing.SupportsInt) -> int:
    ...
def getPWMOutputPeriod(index: typing.SupportsInt) -> int:
    ...
def getPWMPulseMicrosecond(index: typing.SupportsInt) -> int:
    ...
def getPWMSimDevice(index: typing.SupportsInt) -> int:
    ...
def getPowerDistributionAllCurrents(index: typing.SupportsInt, length: typing.SupportsInt) -> float:
    ...
def getPowerDistributionCurrent(index: typing.SupportsInt, channel: typing.SupportsInt) -> float:
    ...
def getPowerDistributionInitialized(index: typing.SupportsInt) -> int:
    ...
def getPowerDistributionTemperature(index: typing.SupportsInt) -> float:
    ...
def getPowerDistributionVoltage(index: typing.SupportsInt) -> float:
    ...
def getProgramStarted() -> int:
    ...
def getREVPHAllSolenoids(index: typing.SupportsInt) -> int:
    ...
def getREVPHCompressorConfigType(index: typing.SupportsInt) -> hal._wpiHal.REVPHCompressorConfigType:
    ...
def getREVPHCompressorCurrent(index: typing.SupportsInt) -> float:
    ...
def getREVPHCompressorOn(index: typing.SupportsInt) -> int:
    ...
def getREVPHInitialized(index: typing.SupportsInt) -> int:
    ...
def getREVPHPressureSwitch(index: typing.SupportsInt) -> int:
    ...
def getREVPHSolenoidOutput(index: typing.SupportsInt, channel: typing.SupportsInt) -> int:
    ...
def getRoboRioBrownoutVoltage() -> float:
    ...
def getRoboRioCPUTemp() -> float:
    ...
def getRoboRioComments() -> str:
    ...
def getRoboRioSerialNumber() -> str:
    ...
def getRoboRioTeamNumber() -> int:
    ...
def getRoboRioUserActive3V3() -> int:
    ...
def getRoboRioUserCurrent3V3() -> float:
    ...
def getRoboRioUserFaults3V3() -> int:
    ...
def getRoboRioUserVoltage3V3() -> float:
    ...
def getRoboRioVInVoltage() -> float:
    ...
def getSimDeviceHandle(name: str) -> int:
    ...
def getSimDeviceName(handle: typing.SupportsInt) -> str:
    ...
def getSimValueDeviceHandle(handle: typing.SupportsInt) -> int:
    ...
def getSimValueHandle(device: typing.SupportsInt, name: str) -> int:
    ...
def isSimDeviceEnabled(name: str) -> int:
    ...
def isTimingPaused() -> int:
    ...
def notifyDriverStationNewData() -> None:
    ...
def pauseTiming() -> None:
    ...
def registerSimPeriodicAfterCallback(callback: typing.Callable[[], None]) -> SimCB:
    ...
def registerSimPeriodicBeforeCallback(callback: typing.Callable[[], None]) -> SimCB:
    ...
def registerSimValueChangedCallback(value: hal._wpiHal.SimValue, callback: typing.Callable[[str, typing.SupportsInt, hal._wpiHal.SimValueDirection, hal._wpiHal.Value], None], initialNotify: bool) -> SimValueCB:
    ...
def registerSimValueCreatedCallback(device: hal._wpiHal.SimDevice, callback: typing.Callable[[str, typing.SupportsInt, hal._wpiHal.SimValueDirection, hal._wpiHal.Value], None], initialNotify: bool) -> SimValueCB:
    ...
def registerSimValueResetCallback(value: hal._wpiHal.SimValue, callback: typing.Callable[[str, typing.SupportsInt, hal._wpiHal.SimValueDirection, hal._wpiHal.Value], None], initialNotify: bool) -> SimValueCB:
    """
    Register a callback for HAL_SimValueReset(). The callback is called with the
    old value.
    
    :param value:         simulated value handle
    :param param:         parameter for callback
    :param callback:      callback
    :param initialNotify: ignored (present for consistency)
    """
def resetAddressableLEDData(index: typing.SupportsInt) -> None:
    ...
def resetAllSimData() -> None:
    ...
def resetAnalogInData(index: typing.SupportsInt) -> None:
    ...
def resetCTREPCMData(index: typing.SupportsInt) -> None:
    ...
def resetDIOData(index: typing.SupportsInt) -> None:
    ...
def resetDigitalPWMData(index: typing.SupportsInt) -> None:
    ...
def resetDriverStationData() -> None:
    ...
def resetDutyCycleData(index: typing.SupportsInt) -> None:
    ...
def resetEncoderData(index: typing.SupportsInt) -> None:
    ...
def resetGlobalHandles() -> None:
    ...
def resetPWMData(index: typing.SupportsInt) -> None:
    ...
def resetPowerDistributionData(index: typing.SupportsInt) -> None:
    ...
def resetREVPHData(index: typing.SupportsInt) -> None:
    ...
def resetRoboRioData() -> None:
    ...
def resetSimDeviceData() -> None:
    ...
def restartTiming() -> None:
    ...
def resumeTiming() -> None:
    ...
def setAddressableLEDData(start: typing.SupportsInt, length: typing.SupportsInt, data: hal._wpiHal.AddressableLEDData) -> None:
    ...
def setAddressableLEDInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setAddressableLEDLength(index: typing.SupportsInt, length: typing.SupportsInt) -> None:
    ...
def setAddressableLEDStart(index: typing.SupportsInt, start: typing.SupportsInt) -> None:
    ...
def setAnalogInAverageBits(index: typing.SupportsInt, averageBits: typing.SupportsInt) -> None:
    ...
def setAnalogInInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setAnalogInOversampleBits(index: typing.SupportsInt, oversampleBits: typing.SupportsInt) -> None:
    ...
def setAnalogInVoltage(index: typing.SupportsInt, voltage: typing.SupportsFloat) -> None:
    ...
def setCTREPCMAllSolenoids(index: typing.SupportsInt, values: typing.SupportsInt) -> None:
    ...
def setCTREPCMClosedLoopEnabled(index: typing.SupportsInt, closedLoopEnabled: typing.SupportsInt) -> None:
    ...
def setCTREPCMCompressorCurrent(index: typing.SupportsInt, compressorCurrent: typing.SupportsFloat) -> None:
    ...
def setCTREPCMCompressorOn(index: typing.SupportsInt, compressorOn: typing.SupportsInt) -> None:
    ...
def setCTREPCMInitialized(index: typing.SupportsInt, solenoidInitialized: typing.SupportsInt) -> None:
    ...
def setCTREPCMPressureSwitch(index: typing.SupportsInt, pressureSwitch: typing.SupportsInt) -> None:
    ...
def setCTREPCMSolenoidOutput(index: typing.SupportsInt, channel: typing.SupportsInt, solenoidOutput: typing.SupportsInt) -> None:
    ...
def setDIOFilterIndex(index: typing.SupportsInt, filterIndex: typing.SupportsInt) -> None:
    ...
def setDIOInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setDIOIsInput(index: typing.SupportsInt, isInput: typing.SupportsInt) -> None:
    ...
def setDIOPulseLength(index: typing.SupportsInt, pulseLength: typing.SupportsFloat) -> None:
    ...
def setDIOValue(index: typing.SupportsInt, value: typing.SupportsInt) -> None:
    ...
def setDigitalPWMDutyCycle(index: typing.SupportsInt, dutyCycle: typing.SupportsFloat) -> None:
    ...
def setDigitalPWMInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setDigitalPWMPin(index: typing.SupportsInt, pin: typing.SupportsInt) -> None:
    ...
def setDriverStationAllianceStationId(allianceStationId: hal._wpiHal.AllianceStationID) -> None:
    ...
def setDriverStationAutonomous(autonomous: typing.SupportsInt) -> None:
    ...
def setDriverStationDsAttached(dsAttached: typing.SupportsInt) -> None:
    ...
def setDriverStationEStop(eStop: typing.SupportsInt) -> None:
    ...
def setDriverStationEnabled(enabled: typing.SupportsInt) -> None:
    ...
def setDriverStationFmsAttached(fmsAttached: typing.SupportsInt) -> None:
    ...
def setDriverStationMatchTime(matchTime: typing.SupportsFloat) -> None:
    ...
def setDriverStationTest(test: typing.SupportsInt) -> None:
    ...
def setDutyCycleFrequency(index: typing.SupportsInt, frequency: typing.SupportsFloat) -> None:
    ...
def setDutyCycleInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setDutyCycleOutput(index: typing.SupportsInt, output: typing.SupportsFloat) -> None:
    ...
def setEncoderCount(index: typing.SupportsInt, count: typing.SupportsInt) -> None:
    ...
def setEncoderDirection(index: typing.SupportsInt, direction: typing.SupportsInt) -> None:
    ...
def setEncoderDistance(index: typing.SupportsInt, distance: typing.SupportsFloat) -> None:
    ...
def setEncoderDistancePerPulse(index: typing.SupportsInt, distancePerPulse: typing.SupportsFloat) -> None:
    ...
def setEncoderInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setEncoderMaxPeriod(index: typing.SupportsInt, maxPeriod: typing.SupportsFloat) -> None:
    ...
def setEncoderPeriod(index: typing.SupportsInt, period: typing.SupportsFloat) -> None:
    ...
def setEncoderRate(index: typing.SupportsInt, rate: typing.SupportsFloat) -> None:
    ...
def setEncoderReset(index: typing.SupportsInt, reset: typing.SupportsInt) -> None:
    ...
def setEncoderReverseDirection(index: typing.SupportsInt, reverseDirection: typing.SupportsInt) -> None:
    ...
def setEncoderSamplesToAverage(index: typing.SupportsInt, samplesToAverage: typing.SupportsInt) -> None:
    ...
def setEventName(name: str) -> None:
    ...
def setGameSpecificMessage(message: str) -> None:
    ...
def setJoystickAxes(joystickNum: typing.SupportsInt, axes: hal._wpiHal.JoystickAxes) -> None:
    ...
def setJoystickAxis(stick: typing.SupportsInt, axis: typing.SupportsInt, value: typing.SupportsFloat) -> None:
    ...
def setJoystickAxisCount(stick: typing.SupportsInt, count: typing.SupportsInt) -> None:
    ...
def setJoystickAxisType(stick: typing.SupportsInt, axis: typing.SupportsInt, type: typing.SupportsInt) -> None:
    ...
def setJoystickButton(stick: typing.SupportsInt, button: typing.SupportsInt, state: typing.SupportsInt) -> None:
    ...
def setJoystickButtonCount(stick: typing.SupportsInt, count: typing.SupportsInt) -> None:
    ...
def setJoystickButtons(joystickNum: typing.SupportsInt, buttons: hal._wpiHal.JoystickButtons) -> None:
    ...
def setJoystickButtonsValue(stick: typing.SupportsInt, buttons: typing.SupportsInt) -> None:
    ...
def setJoystickDescriptor(joystickNum: typing.SupportsInt, descriptor: hal._wpiHal.JoystickDescriptor) -> None:
    ...
def setJoystickIsGamepad(stick: typing.SupportsInt, isGamepad: typing.SupportsInt) -> None:
    ...
def setJoystickName(stick: typing.SupportsInt, name: str) -> None:
    ...
def setJoystickOutputs(joystickNum: typing.SupportsInt, outputs: typing.SupportsInt, leftRumble: typing.SupportsInt, rightRumble: typing.SupportsInt) -> None:
    ...
def setJoystickPOV(stick: typing.SupportsInt, pov: typing.SupportsInt, value: hal._wpiHal.JoystickPOV) -> None:
    ...
def setJoystickPOVCount(stick: typing.SupportsInt, count: typing.SupportsInt) -> None:
    ...
def setJoystickPOVs(joystickNum: typing.SupportsInt, povs: hal._wpiHal.JoystickPOVs) -> None:
    ...
def setJoystickType(stick: typing.SupportsInt, type: typing.SupportsInt) -> None:
    ...
def setMatchInfo(info: hal._wpiHal.MatchInfo) -> None:
    ...
def setMatchNumber(matchNumber: typing.SupportsInt) -> None:
    ...
def setMatchType(type: hal._wpiHal.MatchType) -> None:
    ...
def setPWMInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setPWMOutputPeriod(index: typing.SupportsInt, periodScale: typing.SupportsInt) -> None:
    ...
def setPWMPulseMicrosecond(index: typing.SupportsInt, microsecondPulseTime: typing.SupportsInt) -> None:
    ...
def setPowerDistributionAllCurrents(index: typing.SupportsInt, currents: typing.SupportsFloat, length: typing.SupportsInt) -> None:
    ...
def setPowerDistributionCurrent(index: typing.SupportsInt, channel: typing.SupportsInt, current: typing.SupportsFloat) -> None:
    ...
def setPowerDistributionInitialized(index: typing.SupportsInt, initialized: typing.SupportsInt) -> None:
    ...
def setPowerDistributionTemperature(index: typing.SupportsInt, temperature: typing.SupportsFloat) -> None:
    ...
def setPowerDistributionVoltage(index: typing.SupportsInt, voltage: typing.SupportsFloat) -> None:
    ...
def setProgramStarted() -> None:
    ...
def setREVPHAllSolenoids(index: typing.SupportsInt, values: typing.SupportsInt) -> None:
    ...
def setREVPHCompressorConfigType(index: typing.SupportsInt, configType: hal._wpiHal.REVPHCompressorConfigType) -> None:
    ...
def setREVPHCompressorCurrent(index: typing.SupportsInt, compressorCurrent: typing.SupportsFloat) -> None:
    ...
def setREVPHCompressorOn(index: typing.SupportsInt, compressorOn: typing.SupportsInt) -> None:
    ...
def setREVPHInitialized(index: typing.SupportsInt, solenoidInitialized: typing.SupportsInt) -> None:
    ...
def setREVPHPressureSwitch(index: typing.SupportsInt, pressureSwitch: typing.SupportsInt) -> None:
    ...
def setREVPHSolenoidOutput(index: typing.SupportsInt, channel: typing.SupportsInt, solenoidOutput: typing.SupportsInt) -> None:
    ...
def setReplayNumber(replayNumber: typing.SupportsInt) -> None:
    ...
def setRoboRioBrownoutVoltage(brownoutVoltage: typing.SupportsFloat) -> None:
    ...
def setRoboRioCPUTemp(cpuTemp: typing.SupportsFloat) -> None:
    ...
def setRoboRioComments(comments: str) -> None:
    ...
def setRoboRioSerialNumber(serialNumber: str) -> None:
    ...
def setRoboRioTeamNumber(teamNumber: typing.SupportsInt) -> None:
    ...
def setRoboRioUserActive3V3(userActive3V3: typing.SupportsInt) -> None:
    ...
def setRoboRioUserCurrent3V3(userCurrent3V3: typing.SupportsFloat) -> None:
    ...
def setRoboRioUserFaults3V3(userFaults3V3: typing.SupportsInt) -> None:
    ...
def setRoboRioUserVoltage3V3(userVoltage3V3: typing.SupportsFloat) -> None:
    ...
def setRoboRioVInVoltage(vInVoltage: typing.SupportsFloat) -> None:
    ...
def setRuntimeType(type: hal._wpiHal.RuntimeType) -> None:
    ...
def setSimDeviceEnabled(prefix: str, enabled: typing.SupportsInt) -> None:
    ...
def stepTiming(delta: typing.SupportsInt) -> None:
    ...
def stepTimingAsync(delta: typing.SupportsInt) -> None:
    ...
def waitForProgramStart() -> None:
    ...
