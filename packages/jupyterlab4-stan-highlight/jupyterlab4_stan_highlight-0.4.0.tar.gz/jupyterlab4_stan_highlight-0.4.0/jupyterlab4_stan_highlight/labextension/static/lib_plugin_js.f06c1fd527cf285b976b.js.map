{"version":3,"file":"lib_plugin_js.f06c1fd527cf285b976b.js","mappings":"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","sources":["webpack://jupyterlab-stan-highlight/./src/plugin.ts","webpack://jupyterlab-stan-highlight/./src/stan-lang.ts"],"sourcesContent":["import { stanLanguage } from './stan-lang';\n\n// @ts-ignore\nimport { INotebookTracker } from '@jupyterlab/notebook';\n// @ts-ignore  \nimport { CodeCell } from '@jupyterlab/cells';\n// @ts-ignore\nimport { IEditorLanguageRegistry } from '@jupyterlab/codemirror';\n\n/**\n * Register Stan file type and language\n */\nfunction registerStanFileType(app: any): void {\n  // Register file type\n  app.docRegistry.addFileType({\n    name: 'stan',\n    displayName: 'Stan',\n    extensions: ['stan'],\n    mimeTypes: ['text/x-stan'],\n  });\n\n  console.log('Stan file type registered');\n}\n\n/**\n * Check if a cell starts with %%stan magic command\n */\nfunction isStanCell(cell: any): boolean {\n  if (!cell || !(cell instanceof CodeCell)) return false;\n\n  const source = cell.model.sharedModel.getSource();\n  const firstLine = source.split('\\n')[0].trim();\n  return firstLine.startsWith('%%stan');\n}\n\n/**\n * Apply Stan highlighting to a cell\n */\nfunction applyStanHighlighting(cell: any): void {\n  if (!isStanCell(cell)) return;\n\n  try {\n    console.log('Applying Stan highlighting to cell');\n\n    // Set the MIME type\n    cell.model.mimeType = 'text/x-stan';\n\n    const editor = cell.editor;\n    if (editor) {\n      // Method 1: Try to use JupyterLab's language switching\n      try {\n        if (editor.model && editor.model.mimeType !== 'text/x-stan') {\n          editor.model.mimeType = 'text/x-stan';\n          console.log('Set MIME type to text/x-stan');\n        }\n      } catch (mimeError) {\n        console.warn('Failed to set MIME type:', mimeError);\n      }\n\n      // Method 2: Try CodeMirror 6 reconfiguration (safer approach)\n      if (editor.editor && editor.editor.state) {\n        try {\n          const editorView = editor.editor;\n\n          // Check if we can access the state configuration\n          if (editorView.state && editorView.state.facet) {\n            // This is a safer way to work with CodeMirror 6\n            console.log('CodeMirror 6 editor detected, attempting language change');\n\n            // Try to force a refresh instead of reconfiguration\n            if (editor.refresh) {\n              editor.refresh();\n              console.log('Editor refreshed');\n            }\n\n            // Alternative: dispatch a simple update\n            if (editorView.dispatch) {\n              editorView.dispatch({\n                changes: { from: 0, to: 0, insert: '' }\n              });\n            }\n          }\n        } catch (configError) {\n          console.warn('CodeMirror configuration failed:', configError);\n        }\n      }\n\n      // Method 3: Force editor to re-evaluate content\n      setTimeout(() => {\n        try {\n          if (editor.focus && editor.blur) {\n            editor.focus();\n            editor.blur();\n          }\n        } catch (focusError) {\n          console.warn('Focus/blur failed:', focusError);\n        }\n      }, 100);\n    }\n  } catch (error) {\n    console.warn('Failed to apply Stan highlighting:', error);\n  }\n}/**\n * Process all cells in a notebook\n */\nfunction processNotebook(notebook: any): void {\n  if (!notebook) return;\n\n  notebook.content.widgets.forEach((cell: any) => {\n    if (cell instanceof CodeCell) {\n      applyStanHighlighting(cell);\n    }\n  });\n}\n\n/**\n * JupyterLab extension definition\n */\nconst extension: any = {\n  id: 'jupyterlab-stan-highlight',\n  autoStart: true,\n  requires: [INotebookTracker],\n  optional: [IEditorLanguageRegistry],\n  activate: function (\n    app: any,\n    tracker: any,\n    languageRegistry?: any\n  ): void {\n    console.log('JupyterLab extension jupyterlab-stan-highlight is activated!');\n    console.log('Available language registry:', !!languageRegistry);\n    console.log('Language registry type:', typeof languageRegistry);\n    console.log('Stan language definition:', stanLanguage);\n    console.log('App object:', app);\n\n    // Register Stan file type\n    registerStanFileType(app);\n\n    // Register Stan language with enhanced error handling\n    console.log('Attempting to register Stan language...');\n\n    if (languageRegistry) {\n      try {\n        // Try the standard approach\n        const registration = {\n          name: 'stan',\n          mime: 'text/x-stan',\n          extensions: ['stan'],\n          load: async () => {\n            console.log('Loading Stan language definition for registration');\n            return stanLanguage;\n          }\n        };\n\n        languageRegistry.addLanguage(registration);\n        console.log('Stan language registered successfully with IEditorLanguageRegistry');\n\n        // Try alternative MIME types as well\n        try {\n          languageRegistry.addLanguage({\n            name: 'stan-text',\n            mime: 'text/stan',\n            extensions: ['stan'],\n            load: async () => stanLanguage\n          });\n          console.log('Alternative Stan MIME type registered');\n        } catch (altError) {\n          console.warn('Alternative MIME registration failed:', altError);\n        }\n\n      } catch (registrationError) {\n        console.error('Failed to register Stan language:', registrationError);\n      }\n    } else {\n      console.warn('Language registry not available - this may be normal in some JupyterLab configurations');\n\n      // Fallback: try to access global language registry\n      try {\n        const globalRegistry = (window as any).jupyterlab?.languageRegistry;\n        if (globalRegistry) {\n          globalRegistry.addLanguage({\n            name: 'stan',\n            mime: 'text/x-stan',\n            extensions: ['stan'],\n            load: async () => stanLanguage\n          });\n          console.log('Stan language registered via global registry');\n        }\n      } catch (globalError) {\n        console.warn('Global registry fallback failed:', globalError);\n      }\n    }    // Function to check and apply highlighting to all cells\n    const checkAllCells = (notebook: any) => {\n      if (!notebook) return;\n\n      console.log('Checking all cells for Stan magic');\n      notebook.content.widgets.forEach((cell: any, index: number) => {\n        if (cell instanceof CodeCell) {\n          const source = cell.model.sharedModel.getSource();\n          const firstLine = source.split('\\n')[0].trim();\n          if (firstLine.startsWith('%%stan')) {\n            console.log(`Found Stan cell at index ${index}`);\n            applyStanHighlighting(cell);\n          }\n        }\n      });\n    };\n\n    // Monitor cell content changes\n    const setupCellMonitoring = (notebook: any) => {\n      if (!notebook) return;\n\n      // Monitor each cell for content changes\n      notebook.content.widgets.forEach((cell: any) => {\n        if (cell instanceof CodeCell) {\n          // Listen to model changes\n          cell.model.contentChanged.connect(() => {\n            setTimeout(() => applyStanHighlighting(cell), 100);\n          });\n        }\n      });\n\n      // Monitor when new cells are added\n      notebook.content.model.cells.changed.connect(() => {\n        setTimeout(() => checkAllCells(notebook), 100);\n      });\n    };\n\n    // Process notebooks when they change\n    tracker.currentChanged.connect((tracker: any, notebook: any) => {\n      if (notebook) {\n        notebook.revealed.then(() => {\n          console.log('Notebook changed, setting up monitoring');\n          checkAllCells(notebook);\n          setupCellMonitoring(notebook);\n        });\n      }\n    });\n\n    // Process active cell when it changes\n    tracker.activeCellChanged.connect((tracker: any, activeCell: any) => {\n      if (activeCell instanceof CodeCell) {\n        console.log('Active cell changed, checking for Stan magic');\n        applyStanHighlighting(activeCell);\n      }\n    });\n\n    // Process new notebooks\n    tracker.widgetAdded.connect((tracker: any, notebook: any) => {\n      notebook.revealed.then(() => {\n        console.log('New notebook added, setting up monitoring');\n        checkAllCells(notebook);\n        setupCellMonitoring(notebook);\n      });\n    });\n\n    // Process current notebook if it already exists\n    if (tracker.currentWidget) {\n      console.log('Processing existing notebook');\n      checkAllCells(tracker.currentWidget);\n      setupCellMonitoring(tracker.currentWidget);\n    }\n  }\n};\n\nexport default [extension];\n","// @ts-ignore\r\nimport { StreamLanguage } from '@codemirror/language';\r\n\r\n// Stan language definition for CodeMirror 6\r\nconst stan = {\r\n  name: 'stan',\r\n\r\n  startState() {\r\n    return {\r\n      tokenize: tokenBase,\r\n      context: null,\r\n      indent: 0,\r\n      startOfLine: true\r\n    };\r\n  },\r\n\r\n  token(stream: any, state: any) {\r\n    if (stream.sol()) {\r\n      state.startOfLine = true;\r\n      state.indent = stream.indentation();\r\n    }\r\n\r\n    if (stream.eatSpace()) return null;\r\n\r\n    state.startOfLine = false;\r\n    return state.tokenize(stream, state);\r\n  },\r\n\r\n  indent(state: any, textAfter: string) {\r\n    const { context } = state;\r\n    if (!context) return 0;\r\n    return context.indent + (textAfter.charAt(0) === '}' ? 0 : 2);\r\n  },\r\n\r\n  languageData: {\r\n    commentTokens: { line: '//', block: { open: '/*', close: '*/' } },\r\n    closeBrackets: { brackets: ['(', '[', '{', '\"'] },\r\n    indentOnInput: /^\\s*\\}$/\r\n  }\r\n};\r\n\r\n// Define tokenize functions outside the object to avoid 'this' issues\r\nfunction tokenBase(stream: any, state: any): string | null {\r\n  // Comments\r\n  if (stream.match('//')) {\r\n    stream.skipToEnd();\r\n    return 'comment';\r\n  }\r\n\r\n  if (stream.match('/*')) {\r\n    state.tokenize = tokenComment;\r\n    return 'comment';\r\n  }\r\n\r\n  if (stream.match('#')) {\r\n    // Check for include directive\r\n    if (stream.match(/\\s*include\\b/)) {\r\n      state.tokenize = tokenInclude;\r\n      return 'meta';\r\n    }\r\n    stream.skipToEnd();\r\n    return 'comment';\r\n  }\r\n\r\n  // Numbers\r\n  if (stream.match(/^(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][-+]?\\d+)?i?/)) {\r\n    return 'number';\r\n  }\r\n\r\n  // Strings\r\n  if (stream.match('\"')) {\r\n    state.tokenize = tokenString;\r\n    return 'string';\r\n  }\r\n\r\n  // Block keywords\r\n  if (stream.match(/\\b(functions|data|transformed\\s+data|parameters|transformed\\s+parameters|model|generated\\s+quantities)\\b/)) {\r\n    return 'keyword';\r\n  }\r\n\r\n  // Types\r\n  if (stream.match(/\\b(int|real|complex|vector|array|simplex|unit_vector|ordered|positive_ordered|row_vector|matrix|corr_matrix|cov_matrix|cholesky_factor_cov|cholesky_factor_corr|void)\\b/)) {\r\n    return 'type';\r\n  }\r\n\r\n  // Control flow\r\n  if (stream.match(/\\b(for|in|while|if|else|return)\\b/)) {\r\n    return 'keyword';\r\n  }\r\n\r\n  // Distribution sampling\r\n  if (stream.match('~')) {\r\n    return 'operator';\r\n  }\r\n\r\n  // Distributions\r\n  if (stream.match(/\\b(bernoulli|bernoulli_logit|beta|beta_binomial|binomial|binomial_logit|categorical|categorical_logit|cauchy|chi_square|dirichlet|discrete_range|double_exponential|exp_mod_normal|exponential|frechet|gamma|gaussian_dlm_obs|gumbel|hypergeometric|inv_chi_square|inv_gamma|inv_wishart|lkj_corr|lkj_corr_cholesky|logistic|lognormal|multi_gp|multi_gp_cholesky|multi_normal|multi_normal_cholesky|multi_normal_prec|multi_student_t|multinomial|multinomial_logit|neg_binomial|neg_binomial_2|neg_binomial_2_log|normal|normal_id_glm|ordered_logistic|ordered_probit|pareto|pareto_type_2|poisson|poisson_log|rayleigh|scaled_inv_chi_square|skew_double_exponential|skew_normal|std_normal|student_t|uniform|von_mises|weibull|wiener|wishart)\\b/)) {\r\n    return 'builtin';\r\n  }\r\n\r\n  // Built-in functions\r\n  if (stream.match(/\\b(print|reject|target)\\b/)) {\r\n    return 'builtin';\r\n  }\r\n\r\n  // Constraints\r\n  if (stream.match(/\\b(lower|upper|offset|multiplier)\\b/)) {\r\n    return 'keyword';\r\n  }\r\n\r\n  // Operators\r\n  if (stream.match(/[+\\-*/%^=<>!&|]+|<-/)) {\r\n    return 'operator';\r\n  }\r\n\r\n  // Punctuation\r\n  if (stream.match(/[{}()\\[\\];,]/)) {\r\n    return 'bracket';\r\n  }\r\n\r\n  // Identifiers\r\n  if (stream.match(/\\b[A-Za-z][0-9A-Za-z_]*\\b/)) {\r\n    return 'variable';\r\n  }\r\n\r\n  // Illegal identifiers\r\n  if (stream.match(/\\b([a-zA-Z0-9_]*__|[0-9_][A-Za-z0-9_]+|_)\\b/)) {\r\n    return 'error';\r\n  }\r\n\r\n  stream.next();\r\n  return null;\r\n}\r\n\r\nfunction tokenString(stream: any, state: any): string {\r\n  let escaped = false;\r\n  let ch;\r\n  while ((ch = stream.next()) != null) {\r\n    if (ch === '\"' && !escaped) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    escaped = !escaped && ch === '\\\\';\r\n  }\r\n  return 'string';\r\n}\r\n\r\nfunction tokenComment(stream: any, state: any): string {\r\n  let maybeEnd = false;\r\n  let ch;\r\n  while ((ch = stream.next()) != null) {\r\n    if (ch === '/' && maybeEnd) {\r\n      state.tokenize = tokenBase;\r\n      break;\r\n    }\r\n    maybeEnd = (ch === '*');\r\n  }\r\n  return 'comment';\r\n}\r\n\r\nfunction tokenInclude(stream: any, state: any): string {\r\n  stream.skipToEnd();\r\n  state.tokenize = tokenBase;\r\n  return 'meta';\r\n}\r\n\r\nexport const stanLanguage = StreamLanguage.define(stan);\r\n\r\nexport function stanLang() {\r\n  return stanLanguage;\r\n}\r\n"],"names":[],"sourceRoot":""}