# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BF
else:
    import _BF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _BF.SWIG_PyInstanceMethod_New
_swig_new_static_method = _BF.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class BasisFunc(object):
    r"""
    This class is an abstract class used to create all other basis function classes. It defines standard methods to call the basis function and its
    derivatives, as well as provides wrappers for XLA computation.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    z0: "double" = property(_BF.BasisFunc_z0_get, _BF.BasisFunc_z0_set, doc=r""" Beginning of the basis function domain.""")
    x0: "double" = property(_BF.BasisFunc_x0_get, _BF.BasisFunc_x0_set, doc=r""" Start of the problem domain.""")
    c: "double" = property(_BF.BasisFunc_c_get, _BF.BasisFunc_c_set, doc=r""" Multiplier in the linear domain map.""")
    nC: "int *" = property(_BF.BasisFunc_nC_get, _BF.BasisFunc_nC_set, doc=r""" Array that specifies which basis functions to remove.""")
    numC: "int" = property(_BF.BasisFunc_numC_get, _BF.BasisFunc_numC_set, doc=r""" Number of basis functions to be removed.""")
    m: "int" = property(_BF.BasisFunc_m_get, _BF.BasisFunc_m_set, doc=r""" Number of basis functions to use.""")
    identifier: "int" = property(_BF.BasisFunc_identifier_get, _BF.BasisFunc_identifier_set, doc=r""" Unique identifier for this instance of BasisFunc.""")
    xlaCapsule: "PyObject *" = property(_BF.BasisFunc_xlaCapsule_get, _BF.BasisFunc_xlaCapsule_set, doc=r""" PyObject that contains the XLA version of the basis function.""")
    xlaGpuCapsule: "char const *" = property(_BF.BasisFunc_xlaGpuCapsule_get, _BF.BasisFunc_xlaGpuCapsule_set)
    nIdentifier = property(_BF.BasisFunc_nIdentifier_get, _BF.BasisFunc_nIdentifier_set, doc=r""" Counter that increments each time a new instance of BasisFunc is created.""")
    BasisFuncContainer = property(_BF.BasisFunc_BasisFuncContainer_get, _BF.BasisFunc_BasisFuncContainer_set, doc=r""" Vector that contains pointers to all BasisFunc classes.""")
    __swig_destroy__ = _BF.delete_BasisFunc

    def H(self, x: "double *", d: "int const", full: "bool") -> "void":
        r"""
        Function is used to create a basis function matrix and its derivatives. This matrix is is an m x N matrix where:
        	- m is the number of basis functions
        	- N = in is the number of points in x
        	- d is used to specify the derivative
        	- full is a bool that specifies:
        		- If true, full matrix with no basis functions removed is returned
        		- If false, matrix columns corresponding to the values in nC are removed
        	- useVal is a bool that specifies:
        		- If true, uses the x values given
        		- If false, uses the z values from the class
        Note that this function is used to hook into Python, thus the extra arguments.
        """
        return _BF.BasisFunc_H(self, x, d, full)
    H = _swig_new_instance_method(_BF.BasisFunc_H)

    def xla(self, out: "void *", _in: "void **") -> "void":
        r""" This function is an XLA version of the basis function."""
        return _BF.BasisFunc_xla(self, out, _in)
    xla = _swig_new_instance_method(_BF.BasisFunc_xla)

# Register BasisFunc in _BF:
_BF.BasisFunc_swigregister(BasisFunc)
cvar = _BF.cvar

class CP(BasisFunc):
    r""" Class for Chebyshev orthogonal polynomials."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        CP class constructor. Calls BasisFunc class constructor. See BasisFunc class for more details.

        |

        *Overload 2:*
        Dummy CP class constructor. Used only in n-dimensions.
        """
        _BF.CP_swiginit(self, _BF.new_CP(*args))
    __swig_destroy__ = _BF.delete_CP

# Register CP in _BF:
_BF.CP_swigregister(CP)
class LeP(BasisFunc):
    r""" Class for Legendre orthogonal polynomials."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        LeP class constructor. Calls BasisFunc class constructor. See BasisFunc class for more details.

        |

        *Overload 2:*
        Dummy LeP class constructor. Used only in n-dimensions.
        """
        _BF.LeP_swiginit(self, _BF.new_LeP(*args))
    __swig_destroy__ = _BF.delete_LeP

# Register LeP in _BF:
_BF.LeP_swigregister(LeP)
class LaP(BasisFunc):
    r""" Class for Laguerre orthogonal polynomials."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" LaP class constructor. Calls BasisFunc class constructor. See BasisFunc class for more details."""
        _BF.LaP_swiginit(self, _BF.new_LaP(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_LaP

# Register LaP in _BF:
_BF.LaP_swigregister(LaP)
class HoPpro(BasisFunc):
    r""" Class for Hermite probablist orthogonal polynomials."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" HoPpro class constructor. Calls BasisFunc class constructor. See BasisFunc class for more details."""
        _BF.HoPpro_swiginit(self, _BF.new_HoPpro(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_HoPpro

# Register HoPpro in _BF:
_BF.HoPpro_swigregister(HoPpro)
class HoPphy(BasisFunc):
    r""" Class for Hermite physicist orthogonal polynomials."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" HoPphy class constructor. Calls BasisFunc class constructor. See BasisFunc class for more details."""
        _BF.HoPphy_swiginit(self, _BF.new_HoPphy(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_HoPphy

# Register HoPphy in _BF:
_BF.HoPphy_swigregister(HoPphy)
class FS(BasisFunc):
    r""" Class for Fourier Series basis."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        FS class constructor. Calls BasisFunc class constructor. See BasisFunc class for more details.

        |

        *Overload 2:*
        Dummy FS class constructor. Used only in n-dimensions.
        """
        _BF.FS_swiginit(self, _BF.new_FS(*args))
    __swig_destroy__ = _BF.delete_FS

# Register FS in _BF:
_BF.FS_swigregister(FS)
class ELM(BasisFunc):
    r""" ELM base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BF.delete_ELM

    def _getW(self) -> "void":
        r""" Python hook to return ELM weights."""
        return _BF.ELM__getW(self)
    _getW = _swig_new_instance_method(_BF.ELM__getW)

    def _setW(self, arrIn: "double *") -> "void":
        r""" Python hook to set ELM weights."""
        return _BF.ELM__setW(self, arrIn)
    _setW = _swig_new_instance_method(_BF.ELM__setW)

    def _getB(self) -> "void":
        r""" Python hook to return ELM biases."""
        return _BF.ELM__getB(self)
    _getB = _swig_new_instance_method(_BF.ELM__getB)

    def _setB(self, arrIn: "double *") -> "void":
        r""" Python hook to set ELM biases."""
        return _BF.ELM__setB(self, arrIn)
    _setB = _swig_new_instance_method(_BF.ELM__setB)

    w = property(_getW,_setW)
    b = property(_getB,_setB)


# Register ELM in _BF:
_BF.ELM_swigregister(ELM)
class ELMSigmoid(ELM):
    r""" ELM that uses the sigmoid activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" ELMSigmoid class constructor. Calls ELM class constructor. See ELM class for more details."""
        _BF.ELMSigmoid_swiginit(self, _BF.new_ELMSigmoid(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMSigmoid

# Register ELMSigmoid in _BF:
_BF.ELMSigmoid_swigregister(ELMSigmoid)
class ELMReLU(ELM):
    r""" ELM that uses the recitified linear unit activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" ELMReLU class constructor. Calls ELM class constructor. See ELM class for more details."""
        _BF.ELMReLU_swiginit(self, _BF.new_ELMReLU(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMReLU

# Register ELMReLU in _BF:
_BF.ELMReLU_swigregister(ELMReLU)
class ELMTanh(ELM):
    r""" ELM that uses the tanh activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" ELMTanh class constructor. Calls ELM class constructor. See ELM class for more details."""
        _BF.ELMTanh_swiginit(self, _BF.new_ELMTanh(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMTanh

# Register ELMTanh in _BF:
_BF.ELMTanh_swigregister(ELMTanh)
class ELMSin(ELM):
    r""" ELM that uses the sin activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" ELMSin class constructor. Calls ELM class constructor. See ELM class for more details."""
        _BF.ELMSin_swiginit(self, _BF.new_ELMSin(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMSin

# Register ELMSin in _BF:
_BF.ELMSin_swigregister(ELMSin)
class ELMSwish(ELM):
    r""" ELM that uses the swish activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0: "double", xf: "double", nCin: "int *", min: "int"):
        r""" ELMSwish class constructor. Calls ELM class constructor. See ELM class for more details."""
        _BF.ELMSwish_swiginit(self, _BF.new_ELMSwish(x0, xf, nCin, min))
    __swig_destroy__ = _BF.delete_ELMSwish

# Register ELMSwish in _BF:
_BF.ELMSwish_swigregister(ELMSwish)
class nBasisFunc(BasisFunc):
    r"""
    Base class for n-dimensional basis functions. This class inherits from BasisFunc, and contains
    methods that are used for all n-dimensional basis fuctions. This is an abstract class.
    Concrete n-dimensional basis functions will inherit from this class and one of the concrete
    1-dimensional basis function classes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    z0: "double" = property(_BF.nBasisFunc_z0_get, _BF.nBasisFunc_z0_set, doc=r""" Beginning of the basis function domain.""")
    zf: "double" = property(_BF.nBasisFunc_zf_get, _BF.nBasisFunc_zf_set, doc=r""" Beginning of the basis function domain.""")
    c: "double *" = property(_BF.nBasisFunc_c_get, _BF.nBasisFunc_c_set, doc=r""" Multipliers for the linear domain map.""")
    x0: "double *" = property(_BF.nBasisFunc_x0_get, _BF.nBasisFunc_x0_set, doc=r""" Initial value of the domain""")
    dim: "int" = property(_BF.nBasisFunc_dim_get, _BF.nBasisFunc_dim_set, doc=r""" Number of dimensions.""")
    numBasisFunc: "int" = property(_BF.nBasisFunc_numBasisFunc_get, _BF.nBasisFunc_numBasisFunc_set, doc=r""" Number of basis functions in H matrix.""")
    numBasisFuncFull: "int" = property(_BF.nBasisFunc_numBasisFuncFull_get, _BF.nBasisFunc_numBasisFuncFull_set, doc=r""" Number of basis functions in full H matrix.""")
    __swig_destroy__ = _BF.delete_nBasisFunc

    def H(self, x: "double *", d: "int *", full: "bool const") -> "void":
        r""" This function is used to create a basis function matrix and its derivatives."""
        return _BF.nBasisFunc_H(self, x, d, full)
    H = _swig_new_instance_method(_BF.nBasisFunc_H)

    def _getC(self) -> "void":
        r""" Python hook to return domain mapping constants."""
        return _BF.nBasisFunc__getC(self)
    _getC = _swig_new_instance_method(_BF.nBasisFunc__getC)

    c = property(_getC)


# Register nBasisFunc in _BF:
_BF.nBasisFunc_swigregister(nBasisFunc)
class nCP(nBasisFunc, CP):
    r""" Class for n-dimensional Chebyshev orthogonal polynomials."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nCP class constructor. Calls nBasisFunc class constructor and dummy constructors of remaining parents. See nBasisFunc class for more details."""
        _BF.nCP_swiginit(self, _BF.new_nCP(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nCP

# Register nCP in _BF:
_BF.nCP_swigregister(nCP)
class nLeP(nBasisFunc, LeP):
    r""" Class for n-dimensional Legendre orthogonal polynomials."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nLeP class constructor. Calls nBasisFunc class constructor and dummy constructors of remaining parents. See nBasisFunc class for more details."""
        _BF.nLeP_swiginit(self, _BF.new_nLeP(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nLeP

# Register nLeP in _BF:
_BF.nLeP_swigregister(nLeP)
class nFS(nBasisFunc, FS):
    r""" Class for n-dimensional Fourier Series."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nFS class constructor. Calls nBasisFunc class constructor and dummy constructors of remaining parents. See nBasisFunc class for more details."""
        _BF.nFS_swiginit(self, _BF.new_nFS(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nFS

# Register nFS in _BF:
_BF.nFS_swigregister(nFS)
class nELM(nBasisFunc):
    r""" n-D ELM base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    z0: "double" = property(_BF.nELM_z0_get, _BF.nELM_z0_set, doc=r""" Beginning of the basis function domain.""")
    zf: "double" = property(_BF.nELM_zf_get, _BF.nELM_zf_set, doc=r""" Beginning of the basis function domain.""")
    __swig_destroy__ = _BF.delete_nELM

    def _setW(self, arrIn: "double *") -> "void":
        r""" Python hook to return nELM weights."""
        return _BF.nELM__setW(self, arrIn)
    _setW = _swig_new_instance_method(_BF.nELM__setW)

    def _getW(self) -> "void":
        r""" Python hook to set nELM weights."""
        return _BF.nELM__getW(self)
    _getW = _swig_new_instance_method(_BF.nELM__getW)

    def _getB(self) -> "void":
        r""" Python hook to return nELM biases."""
        return _BF.nELM__getB(self)
    _getB = _swig_new_instance_method(_BF.nELM__getB)

    def _setB(self, arrIn: "double *") -> "void":
        r""" Python hook to set nELM biases."""
        return _BF.nELM__setB(self, arrIn)
    _setB = _swig_new_instance_method(_BF.nELM__setB)

    w = property(_getW,_setW)
    b = property(_getB,_setB)


# Register nELM in _BF:
_BF.nELM_swigregister(nELM)
class nELMSigmoid(nELM):
    r""" n-D ELM that uses the sigmoid activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nELMSigmoid class constructor. Calls nELM class constructor. See nELM class for more details."""
        _BF.nELMSigmoid_swiginit(self, _BF.new_nELMSigmoid(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMSigmoid

# Register nELMSigmoid in _BF:
_BF.nELMSigmoid_swigregister(nELMSigmoid)
class nELMTanh(nELM):
    r""" n-D ELM that uses the tanh activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nELMTanh class constructor. Calls nELM class constructor. See nELM class for more details."""
        _BF.nELMTanh_swiginit(self, _BF.new_nELMTanh(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMTanh

# Register nELMTanh in _BF:
_BF.nELMTanh_swigregister(nELMTanh)
class nELMSin(nELM):
    r""" n-D ELM that uses the sine activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nELMSin class constructor. Calls nELM class constructor. See nELM class for more details."""
        _BF.nELMSin_swiginit(self, _BF.new_nELMSin(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMSin

# Register nELMSin in _BF:
_BF.nELMSin_swigregister(nELMSin)
class nELMSwish(nELM):
    r""" n-D ELM that uses the swish activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nELMSwish class constructor. Calls nELM class constructor. See nELM class for more details."""
        _BF.nELMSwish_swiginit(self, _BF.new_nELMSwish(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMSwish

# Register nELMSwish in _BF:
_BF.nELMSwish_swigregister(nELMSwish)
class nELMReLU(nELM):
    r""" n-D ELM that uses the rectified linear activation function."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0in: "double *", xf: "double *", nCin: "int *", min: "int"):
        r""" nELMReLU class constructor. Calls nELM class constructor. See nELM class for more details."""
        _BF.nELMReLU_swiginit(self, _BF.new_nELMReLU(x0in, xf, nCin, min))
    __swig_destroy__ = _BF.delete_nELMReLU

# Register nELMReLU in _BF:
_BF.nELMReLU_swigregister(nELMReLU)

