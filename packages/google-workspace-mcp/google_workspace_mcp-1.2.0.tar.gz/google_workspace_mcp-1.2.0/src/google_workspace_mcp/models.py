"""
Pydantic output models for Google Workspace MCP tools.

These models define the exact structure of tool outputs to ensure proper
output schemas are generated by the MCP Python SDK.
"""

from typing import Any

from pydantic import BaseModel, Field

# === Document (Google Docs) Output Models ===


class DocumentCreationOutput(BaseModel):
    """Output schema for document creation operations."""

    document_id: str = Field(..., description="The ID of the created document")
    title: str = Field(..., description="The title of the document")
    document_link: str = Field(..., description="The link to access the document")


class DocumentMetadataOutput(BaseModel):
    """Output schema for document metadata retrieval."""

    document_id: str = Field(..., description="The ID of the document")
    title: str = Field(..., description="The title of the document")
    document_link: str = Field(..., description="The link to access the document")


class DocumentContentOutput(BaseModel):
    """Output schema for document content retrieval."""

    document_id: str = Field(..., description="The ID of the document")
    markdown_content: str = Field(
        ..., description="The document content in Markdown format"
    )


class DocumentUpdateOutput(BaseModel):
    """Output schema for document update operations."""

    success: bool = Field(..., description="Whether the operation was successful")
    message: str = Field(..., description="Success or error message")
    updated_range: str | None = Field(None, description="The range that was updated")


class DocumentBatchUpdateOutput(BaseModel):
    """Output schema for document batch update operations."""

    document_id: str = Field(..., description="The ID of the document")
    replies: list[dict[str, Any]] = Field(
        ..., description="The API response replies for each request"
    )


class DocumentImageInsertOutput(BaseModel):
    """Output schema for image insertion operations."""

    success: bool = Field(
        ..., description="Whether the image was inserted successfully"
    )
    image_id: str | None = Field(None, description="The ID of the inserted image")
    message: str = Field(..., description="Success or error message")


# === Calendar Output Models ===


class CalendarEventsOutput(BaseModel):
    """Output schema for calendar events retrieval."""

    count: int = Field(..., description="Number of events returned")
    events: list[dict[str, Any]] = Field(..., description="List of calendar events")


class CalendarEventDetailsOutput(BaseModel):
    """Output schema for single calendar event details."""

    id: str = Field(..., description="The event ID")
    summary: str = Field(..., description="The event title/summary")
    start: dict[str, Any] = Field(..., description="Event start time information")
    end: dict[str, Any] = Field(..., description="Event end time information")
    description: str | None = Field(None, description="Event description")
    attendees: list[dict[str, Any]] | None = Field(
        None, description="List of attendees"
    )
    location: str | None = Field(None, description="Event location")


class CalendarEventCreationOutput(BaseModel):
    """Output schema for calendar event creation."""

    id: str = Field(..., description="The created event ID")
    html_link: str = Field(..., description="Link to view the event")
    summary: str = Field(..., description="The event title/summary")
    start: dict[str, Any] = Field(..., description="Event start time information")
    end: dict[str, Any] = Field(..., description="Event end time information")


class CalendarEventDeletionOutput(BaseModel):
    """Output schema for calendar event deletion."""

    message: str = Field(..., description="Confirmation message")
    success: bool = Field(..., description="Whether the deletion was successful")


# === Drive Output Models ===


class DriveSearchOutput(BaseModel):
    """Output schema for Drive file search operations."""

    files: list[dict[str, Any]] = Field(..., description="List of found files")


class DriveFileContentOutput(BaseModel):
    """Output schema for Drive file content reading."""

    file_id: str = Field(..., description="The ID of the file")
    name: str = Field(..., description="The name of the file")
    content: str = Field(..., description="The file content")
    mime_type: str = Field(..., description="The MIME type of the file")


class DriveFileUploadOutput(BaseModel):
    """Output schema for Drive file upload operations."""

    id: str = Field(..., description="The ID of the uploaded file")
    name: str = Field(..., description="The name of the uploaded file")
    web_view_link: str = Field(..., description="Link to view the file")
    size: str = Field(..., description="Size of the uploaded file")


class DriveFolderCreationOutput(BaseModel):
    """Output schema for Drive folder creation."""

    id: str = Field(..., description="The ID of the created folder")
    name: str = Field(..., description="The name of the created folder")
    web_view_link: str = Field(..., description="Link to view the folder")


class DriveFileDeletionOutput(BaseModel):
    """Output schema for Drive file deletion."""

    success: bool = Field(..., description="Whether the deletion was successful")
    message: str = Field(..., description="Confirmation message")
    file_id: str = Field(..., description="The ID of the deleted file")


class DriveSharedDrivesOutput(BaseModel):
    """Output schema for shared drives listing."""

    count: int = Field(..., description="Number of shared drives returned")
    shared_drives: list[dict[str, Any]] = Field(
        ..., description="List of shared drives"
    )


class DriveFolderSearchOutput(BaseModel):
    """Output schema for folder file search operations."""

    folder_id: str = Field(..., description="The ID of the searched folder")
    files: list[dict[str, Any]] = Field(..., description="List of files in the folder")


class DriveFolderFindOutput(BaseModel):
    """Output schema for folder finding operations."""

    folder_name: str = Field(..., description="The searched folder name")
    folders_found: list[dict[str, Any]] = Field(
        ..., description="List of found folders"
    )
    folder_count: int = Field(..., description="Number of folders found")
    target_folder: dict[str, Any] | None = Field(
        None, description="The primary target folder"
    )
    files: list[dict[str, Any]] | None = Field(
        None, description="Files in the target folder"
    )
    file_count: int | None = Field(None, description="Number of files in target folder")
    message: str | None = Field(None, description="Additional status message")


# === Gmail Output Models ===


class GmailEmailSearchOutput(BaseModel):
    """Output schema for Gmail email search operations."""

    count: int = Field(..., description="Number of emails returned")
    emails: list[dict[str, Any]] = Field(..., description="List of email messages")


class GmailMessageDetailsOutput(BaseModel):
    """Output schema for Gmail message details retrieval."""

    id: str = Field(..., description="The message ID")
    thread_id: str = Field(..., description="The thread ID")
    subject: str = Field(..., description="Email subject")
    from_email: str = Field(..., description="Sender email address")
    to_email: list[str] = Field(..., description="Recipient email addresses")
    date: str = Field(..., description="Email date")
    body: str = Field(..., description="Email body content")
    attachments: list[dict[str, Any]] | None = Field(
        None, description="List of attachments"
    )


class GmailAttachmentOutput(BaseModel):
    """Output schema for Gmail attachment retrieval."""

    filename: str = Field(..., description="The attachment filename")
    mime_type: str = Field(..., description="The MIME type of the attachment")
    size: int = Field(..., description="Size of the attachment in bytes")
    data: str = Field(..., description="Base64 encoded attachment data")


class GmailDraftCreationOutput(BaseModel):
    """Output schema for Gmail draft creation."""

    id: str = Field(..., description="The draft ID")
    message: dict[str, Any] = Field(..., description="The draft message details")


class GmailDraftDeletionOutput(BaseModel):
    """Output schema for Gmail draft deletion."""

    message: str = Field(..., description="Confirmation message")
    success: bool = Field(..., description="Whether the deletion was successful")


class GmailDraftSendOutput(BaseModel):
    """Output schema for Gmail draft sending."""

    id: str = Field(..., description="The sent message ID")
    thread_id: str = Field(..., description="The thread ID")
    label_ids: list[str] = Field(..., description="Labels applied to the sent message")


class GmailReplyOutput(BaseModel):
    """Output schema for Gmail reply operations."""

    id: str = Field(..., description="The reply message ID")
    thread_id: str = Field(..., description="The thread ID")
    in_reply_to: str = Field(..., description="The original message ID")


class GmailBulkDeleteOutput(BaseModel):
    """Output schema for Gmail bulk deletion operations."""

    deleted_count: int = Field(..., description="Number of messages deleted")
    success: bool = Field(..., description="Whether the operation was successful")
    message: str = Field(..., description="Operation summary message")


class GmailSendOutput(BaseModel):
    """Output schema for Gmail email sending."""

    id: str = Field(..., description="The sent message ID")
    thread_id: str = Field(..., description="The thread ID")
    label_ids: list[str] = Field(..., description="Labels applied to the sent message")


# === Sheets Output Models ===


class SheetsCreationOutput(BaseModel):
    """Output schema for spreadsheet creation."""

    spreadsheet_id: str = Field(..., description="The ID of the created spreadsheet")
    title: str = Field(..., description="The title of the spreadsheet")
    spreadsheet_url: str = Field(..., description="URL to access the spreadsheet")


class SheetsReadOutput(BaseModel):
    """Output schema for spreadsheet range reading."""

    range: str = Field(..., description="The A1 notation range that was read")
    values: list[list[Any]] = Field(..., description="The cell values as a 2D array")
    major_dimension: str = Field(..., description="The major dimension of the data")


class SheetsWriteOutput(BaseModel):
    """Output schema for spreadsheet range writing."""

    updated_range: str = Field(
        ..., description="The A1 notation range that was updated"
    )
    updated_rows: int = Field(..., description="Number of rows updated")
    updated_columns: int = Field(..., description="Number of columns updated")
    updated_cells: int = Field(..., description="Number of cells updated")


class SheetsAppendOutput(BaseModel):
    """Output schema for spreadsheet row appending."""

    spreadsheet_id: str = Field(..., description="The ID of the spreadsheet")
    table_range: str = Field(
        ..., description="The range of the table that was appended to"
    )
    updates: dict[str, Any] = Field(..., description="Information about the update")


class SheetsClearOutput(BaseModel):
    """Output schema for spreadsheet range clearing."""

    cleared_range: str = Field(
        ..., description="The A1 notation range that was cleared"
    )
    spreadsheet_id: str = Field(..., description="The ID of the spreadsheet")


class SheetsAddSheetOutput(BaseModel):
    """Output schema for adding a new sheet."""

    sheet_properties: dict[str, Any] = Field(
        ..., description="Properties of the newly created sheet"
    )
    spreadsheet_id: str = Field(..., description="The ID of the spreadsheet")


class SheetsDeleteSheetOutput(BaseModel):
    """Output schema for sheet deletion."""

    success: bool = Field(..., description="Whether the deletion was successful")
    message: str = Field(..., description="Confirmation message")
    spreadsheet_id: str = Field(..., description="The ID of the spreadsheet")
    deleted_sheet_id: int = Field(..., description="The ID of the deleted sheet")


# === Slides Output Models ===


class SlidesGetPresentationOutput(BaseModel):
    """Output schema for presentation retrieval."""

    presentation_id: str = Field(..., description="The ID of the presentation")
    title: str = Field(..., description="The title of the presentation")
    slides: list[dict[str, Any]] = Field(
        ..., description="List of slides in the presentation"
    )
    masters: list[dict[str, Any]] = Field(..., description="List of slide masters")
    layouts: list[dict[str, Any]] = Field(..., description="List of slide layouts")


class SlidesGetSlidesOutput(BaseModel):
    """Output schema for slides retrieval."""

    count: int = Field(..., description="Number of slides returned")
    slides: list[dict[str, Any]] = Field(
        ..., description="List of slides with their elements"
    )


class SlidesCreatePresentationOutput(BaseModel):
    """Output schema for presentation creation."""

    presentation_id: str = Field(..., description="The ID of the created presentation")
    title: str = Field(..., description="The title of the presentation")
    presentation_url: str = Field(..., description="URL to access the presentation")


class SlidesCreateSlideOutput(BaseModel):
    """Output schema for slide creation."""

    slide_id: str = Field(..., description="The ID of the created slide")
    presentation_id: str = Field(..., description="The ID of the presentation")
    layout: str = Field(..., description="The layout used for the slide")


class SlidesAddTextOutput(BaseModel):
    """Output schema for text addition to slides."""

    element_id: str = Field(..., description="The ID of the created text element")
    presentation_id: str = Field(..., description="The ID of the presentation")
    slide_id: str = Field(..., description="The ID of the slide")


class SlidesAddFormattedTextOutput(BaseModel):
    """Output schema for formatted text addition to slides."""

    element_id: str = Field(..., description="The ID of the created text element")
    presentation_id: str = Field(..., description="The ID of the presentation")
    slide_id: str = Field(..., description="The ID of the slide")
    formatting_applied: bool = Field(
        ..., description="Whether formatting was successfully applied"
    )


class SlidesAddListOutput(BaseModel):
    """Output schema for bulleted list addition to slides."""

    element_id: str = Field(..., description="The ID of the created list element")
    presentation_id: str = Field(..., description="The ID of the presentation")
    slide_id: str = Field(..., description="The ID of the slide")
    items_count: int = Field(..., description="Number of list items added")


class SlidesAddTableOutput(BaseModel):
    """Output schema for table addition to slides."""

    element_id: str = Field(..., description="The ID of the created table element")
    presentation_id: str = Field(..., description="The ID of the presentation")
    slide_id: str = Field(..., description="The ID of the slide")
    rows: int = Field(..., description="Number of rows in the table")
    columns: int = Field(..., description="Number of columns in the table")


class SlidesAddNotesOutput(BaseModel):
    """Output schema for slide notes addition."""

    success: bool = Field(..., description="Whether the notes were added successfully")
    presentation_id: str = Field(..., description="The ID of the presentation")
    slide_id: str = Field(..., description="The ID of the slide")
    notes_length: int = Field(..., description="Length of the added notes")


class SlidesDuplicateSlideOutput(BaseModel):
    """Output schema for slide duplication."""

    new_slide_id: str = Field(..., description="The ID of the duplicated slide")
    presentation_id: str = Field(..., description="The ID of the presentation")
    source_slide_id: str = Field(..., description="The ID of the original slide")


class SlidesDeleteSlideOutput(BaseModel):
    """Output schema for slide deletion."""

    success: bool = Field(..., description="Whether the deletion was successful")
    presentation_id: str = Field(..., description="The ID of the presentation")
    deleted_slide_id: str = Field(..., description="The ID of the deleted slide")


class SlidesCreateFromMarkdownOutput(BaseModel):
    """Output schema for presentation creation from Markdown."""

    presentation_id: str = Field(..., description="The ID of the created presentation")
    title: str = Field(..., description="The title of the presentation")
    presentation_url: str = Field(..., description="URL to access the presentation")
    slides_created: int = Field(
        ..., description="Number of slides created from the Markdown"
    )


class SlidesSharePresentationOutput(BaseModel):
    """Output schema for presentation sharing."""

    success: bool = Field(..., description="Whether the sharing was successful")
    message: str = Field(..., description="Confirmation message")
    presentation_id: str = Field(..., description="The ID of the presentation")
    presentation_link: str = Field(..., description="Link to access the presentation")
    domain: str = Field(..., description="The domain the presentation was shared with")
    role: str = Field(..., description="The access role granted")


class SlidesInsertChartOutput(BaseModel):
    """Output schema for chart insertion into slides."""

    success: bool = Field(
        ..., description="Whether the chart was inserted successfully"
    )
    message: str = Field(..., description="Confirmation message")
    presentation_id: str = Field(..., description="The ID of the presentation")
    slide_id: str = Field(..., description="The ID of the slide")
    chart_element_id: str | None = Field(
        None, description="The ID of the chart element"
    )


# === Generic Success/Error Output Models ===


class SuccessOutput(BaseModel):
    """Generic success output schema."""

    success: bool = Field(..., description="Whether the operation was successful")
    message: str = Field(..., description="Success message")


class ErrorOutput(BaseModel):
    """Generic error output schema."""

    error: bool = Field(..., description="Whether an error occurred")
    message: str = Field(..., description="Error message")
    details: dict[str, Any] | None = Field(None, description="Additional error details")
