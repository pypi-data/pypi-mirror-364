Metadata-Version: 2.4
Name: fetch-fundamental-data
Version: 0.1.0
Summary: A Python package for fetching and analyzing fundamental financial data
Home-page: https://github.com/username/fetch-fundamental-data
Author: Carl Viggo Gravenhorst-Lövenstierne
Author-email: 
Maintainer: Carl Viggo Gravenhorst-Lövenstierne
License: MIT
Project-URL: Homepage, https://github.com/username/fetch-fundamental-data
Project-URL: Bug Reports, https://github.com/username/fetch-fundamental-data/issues
Project-URL: Source Code, https://github.com/username/fetch-fundamental-data
Project-URL: Documentation, https://github.com/username/fetch-fundamental-data/blob/main/README.md
Keywords: finance,stocks,fundamental analysis,financial data,EODHD
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Developers
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: openpyxl>=3.0.0
Requires-Dist: numpy>=1.20.0
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Fetch Fundamental Data

A Python package for fetching and analyzing fundamental financial data using the EODHD API in the background. This package allows you to process Excel files containing stock tickers to generate financial analysis reports.

## Features

- **Concurrent Data Fetching**: Efficiently fetches financial data for multiple stocks simultaneously
- **Comprehensive Analysis**: Calculate key financial metrics not avaibale in EODHD including:
  - Greenblatt Magic Formula rankings
  - Conservative investment scores
  - Quality scores
  - P/E ratios, ROCE, revenue growth, EPS growth
  - Free cash flow metrics, buyback data, insider ownership
  - Technical indicators and moving averages
- **Excel Integration**: Read ticker lists from Excel and output results to Excel

## Installation

### From PyPI (when published)
```bash
pip install fetch-fundamental-data
```

### Development Installation
```bash
git clone https://github.com/username/fetch-fundamental-data.git
cd fetch-fundamental-data
pip install -r requirements.txt
pip install -e .
```

## Prerequisites

1. **EODHD API Key**: You need an API key from [EODHD](https://eodhd.com/) to fetch financial data

## Start

### 1. Prepare Excel File

Create an Excel file (`.xlsx`) with the following format:

![Alt text](figures/excel_ticker_snapshot.png)

**Important Notes:**
- First Column: Company names
- Second Column: Ticker symbols
- Note! Make sure to use proper ticker formats (e.g., `DANSKE.CO` for Copenhagen exchange) that are compatible with EODHD. 

### 2. Run the Analysis

```bash
fetch-fundamentals --api-key YOUR_EODHD_API_KEY --input tickers.xlsx --output results.xlsx
```

### 3. View Results

The output Excel file will contain comprehensive financial data and analysis for all tickers.

The following is an example of an excel-file generated by the tickers above: 

![Alt text](figures/excel_snapshot_1.png)
![Alt text](figures/excel_snapshot_2.png)

## Command Line Usage

### Basic Usage
```bash
fetch-fundamentals --api-key YOUR_API_KEY --input input.xlsx --output output.xlsx
```

### Advanced Usage
```bash
# Custom number of concurrent workers (default: 10)
fetch-fundamentals --api-key YOUR_API_KEY --input tickers.xlsx --output results.xlsx --workers 5

# Short form arguments
fetch-fundamentals --api-key YOUR_API_KEY -i tickers.xlsx -o results.xlsx -w 5
```

### Command Line Arguments

| Argument | Short | Required | Description |
|----------|-------|----------|-------------|
| `--api-key` | | Yes | Your EODHD API key |
| `--input` | `-i` | Yes | Path to input Excel file |
| `--output` | `-o` | YEs | Path to output Excel file |
| `--workers` | `-w` | | Number of concurrent workers (1-50, default: 10) |
| `--version` | | | Show version information |
| `--help` | `-h` | | Show help message |

## Python API Usage

```python
from fetch_fundamental_data import FundamentalDataFetcher

# Initialize with your API key
fetcher = FundamentalDataFetcher(api_key="YOUR_EODHD_API_KEY")

# Process an Excel file
fetcher.process_excel_file(
    input_file="path/to/tickers.xlsx",
    output_file="path/to/results.xlsx",
    max_workers=10
)

# Or work with data directly
company_list, ticker_list = fetcher.extract_tickers_from_excel("tickers.xlsx")
df, separate_data = fetcher.fetch_all_data(company_list, ticker_list)
analyzed_df = fetcher.analyze_data(df, separate_data)
```

## Output Data

The output Excel file contains the following types of data:

### Financial Metrics
- **Price Information**: Current price, currency, sector
- **Valuation Ratios**: P/E ratios (current and 5-year average), ROCE
- **Growth Metrics**: Revenue growth, EPS growth, asset growth
- **Profitability**: Gross profitability, free cash flow metrics
- **Balance Sheet**: Accruals, total yield, insider ownership percentage

### Analysis Scores
- **Greenblatt Formula**: Magic Formula ranking based on P/E and ROCE
- **Conservative Formula**: Risk-adjusted scoring based on volatility, NPY, and momentum
- **Quality Score**: Overall quality assessment

### Technical Data
- **Moving Averages**: Various period moving averages
- **Volatility Metrics**: Historical volatility measures
- **Price Momentum**: Momentum indicators

## Examples

### Example Input File (`tickers.xlsx`)

| Company | Ticker |
|---------|--------|
| Apple | AAPL |
| Microsoft | MSFT |
| Alphabet | GOOGL |
| Amazon | AMZN |
| Tesla | TSLA |

### Example Usage

```bash
# Basic analysis
fetch-fundamentals --api-key abc123xyz --input tickers.xlsx --output analysis.xlsx

# High-speed processing (more workers)
fetch-fundamentals --api-key abc123xyz --input large_portfolio.xlsx --output results.xlsx --workers 20

# Conservative processing (fewer workers, good for rate limits)
fetch-fundamentals --api-key abc123xyz --input tickers.xlsx --output results.xlsx --workers 3
```

## Testing

Before pushing changes, run the test script to validate functionality:

```bash
python test_package.py
```

## Contributing

Contributions are welcome!

## Author

**Carl Viggo Gravenhorst-Lövenstierne**
