// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/simulation/ElevatorSim.h>

#include <trampolines/frc__sim__LinearSystemSim.hpp>

namespace frc::sim {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_ElevatorSim :
  frc::sim::PyTrampolineCfg_LinearSystemSim<2, 1, 2, 
  CfgBase
  >
{
  using Base = frc::sim::ElevatorSim;
  using override_base_UpdateX_KRTVectord_KRTVectord_Tsecond_t = frc::sim::ElevatorSim;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_ElevatorSim =
  frc::sim::PyTrampoline_LinearSystemSim<
    PyTrampolineBase
    , 2, 1, 2
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_ElevatorSim : PyTrampolineBase_ElevatorSim<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_ElevatorSim<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_ElevatorSim;
  using DCMotor = frc::DCMotor;
  template <int S, int I, int O> using LinearSystem = frc::LinearSystem<S, I, O>;
  template <int I> using Vectord = frc::Vectord<I>;

  #ifndef SWGEN_DISABLE_UpdateX_KRTVectord_KRTVectord_Tsecond_t
    Vectord<2> UpdateX(const Vectord<2>& currentXhat, const Vectord<1>& u, units::second_t dt) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_UpdateX_KRTVectord_KRTVectord_Tsecond_t;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(Vectord<2>), LookupBase,
        "_updateX", currentXhat, u, dt);
      return CxxCallBase::UpdateX(std::forward<decltype(currentXhat)>(currentXhat), std::forward<decltype(u)>(u), std::move(dt));
    }
  #endif
};

}; // namespace frc::sim
