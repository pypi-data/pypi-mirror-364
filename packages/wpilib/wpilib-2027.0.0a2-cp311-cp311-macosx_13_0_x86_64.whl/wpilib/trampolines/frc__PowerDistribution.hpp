// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/PowerDistribution.h>

// from extra_includes
#include <wpi/sendable/SendableBuilder.h>

#include <trampolines/wpi__Sendable.hpp>

namespace frc {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_PowerDistribution :
  wpi::PyTrampolineCfg_Sendable<
  CfgBase
  >
{
  using Base = frc::PowerDistribution;
  using override_base_InitSendable_RTSendableBuilder = frc::PowerDistribution;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_PowerDistribution =
  wpi::PyTrampoline_Sendable<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_PowerDistribution : PyTrampolineBase_PowerDistribution<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_PowerDistribution<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_PowerDistribution;
  using Version [[maybe_unused]] = typename frc::PowerDistribution::Version;
  using Faults [[maybe_unused]] = typename frc::PowerDistribution::Faults;
  using StickyFaults [[maybe_unused]] = typename frc::PowerDistribution::StickyFaults;
  using ModuleType [[maybe_unused]] = typename frc::PowerDistribution::ModuleType;
  static constexpr auto kDefaultModule [[maybe_unused]] = frc::PowerDistribution::kDefaultModule;

  #ifndef SWGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "initSendable", builder);
      return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    }
  #endif
};

}; // namespace frc
