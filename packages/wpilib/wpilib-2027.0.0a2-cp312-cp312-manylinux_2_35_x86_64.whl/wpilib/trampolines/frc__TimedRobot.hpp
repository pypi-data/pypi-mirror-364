// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/TimedRobot.h>

#include <trampolines/frc__IterativeRobotBase.hpp>

namespace frc {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_TimedRobot :
  frc::PyTrampolineCfg_IterativeRobotBase<
  CfgBase
  >
{
  using Base = frc::TimedRobot;
  using override_base_StartCompetition_v = frc::TimedRobot;
  using override_base_EndCompetition_v = frc::TimedRobot;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_TimedRobot =
  frc::PyTrampoline_IterativeRobotBase<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_TimedRobot : PyTrampolineBase_TimedRobot<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_TimedRobot<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_TimedRobot;
  static constexpr auto kDefaultPeriod [[maybe_unused]] = frc::TimedRobot::kDefaultPeriod;

  #ifndef SWGEN_DISABLE_StartCompetition_v
    void StartCompetition() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_StartCompetition_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "startCompetition", );
      return CxxCallBase::StartCompetition();
    }
  #endif

  #ifndef SWGEN_DISABLE_EndCompetition_v
    void EndCompetition() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_EndCompetition_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "endCompetition", );
      return CxxCallBase::EndCompetition();
    }
  #endif
};

}; // namespace frc
