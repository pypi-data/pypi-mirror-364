// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/ADXL345_I2C.h>

// from extra_includes
#include <networktables/NTSendableBuilder.h>

#include <trampolines/nt__NTSendable.hpp>

namespace frc {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_ADXL345_I2C :
  nt::PyTrampolineCfg_NTSendable<
  CfgBase
  >
{
  using Base = frc::ADXL345_I2C;
  using override_base_GetAcceleration_TAxes = frc::ADXL345_I2C;
  using override_base_GetAccelerations_v = frc::ADXL345_I2C;
  using override_base_InitSendable_RTNTSendableBuilder = frc::ADXL345_I2C;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_ADXL345_I2C =
  nt::PyTrampoline_NTSendable<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_ADXL345_I2C : PyTrampolineBase_ADXL345_I2C<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_ADXL345_I2C<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_ADXL345_I2C;
  using AllAxes [[maybe_unused]] = typename frc::ADXL345_I2C::AllAxes;
  using Range [[maybe_unused]] = typename frc::ADXL345_I2C::Range;
  using Axes [[maybe_unused]] = typename frc::ADXL345_I2C::Axes;
  static constexpr auto kAddress [[maybe_unused]] = frc::ADXL345_I2C::kAddress;

  static constexpr auto kRange_2G = frc::ADXL345_I2C::Range::kRange_2G;

  #ifndef SWGEN_DISABLE_GetAcceleration_TAxes
    double GetAcceleration(Axes axis) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetAcceleration_TAxes;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
        "getAcceleration", axis);
      return CxxCallBase::GetAcceleration(std::move(axis));
    }
  #endif

  #ifndef SWGEN_DISABLE_GetAccelerations_v
    AllAxes GetAccelerations() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_GetAccelerations_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(AllAxes), LookupBase,
        "getAccelerations", );
      return CxxCallBase::GetAccelerations();
    }
  #endif

  #ifndef SWGEN_DISABLE_InitSendable_RTNTSendableBuilder
    void InitSendable(nt::NTSendableBuilder& builder) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTNTSendableBuilder;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "initSendable", builder);
      return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    }
  #endif
};

}; // namespace frc
