#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ OneC Contract Generator –Ω–∞ PyPI.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"üîÑ {description}...")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        if result.stdout:
            print(result.stdout)
    else:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"STDOUT: {result.stdout}")
        print(f"STDERR: {result.stderr}")
        return False
    
    return True

def clean_build():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏."""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–æ–∫ —Å–±–æ—Ä–∫–∏...")
    
    build_dirs = ["build", "dist", "*.egg-info"]
    for pattern in build_dirs:
        for path in Path(".").glob(pattern):
            if path.is_dir():
                shutil.rmtree(path)
                print(f"  –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {path}")
            elif path.is_file():
                path.unlink()
                print(f"  –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}")

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    tools = [
        ("python", "Python"),
        ("pip", "pip"),
        ("twine", "twine"),
    ]
    
    for tool, name in tools:
        result = subprocess.run(f"{tool} --version", shell=True, capture_output=True)
        if result.returncode == 0:
            print(f"  ‚úÖ {name}: –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"  ‚ùå {name}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            print(f"    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install {tool}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º build –∫–∞–∫ Python –º–æ–¥—É–ª—å
    try:
        import build
        print(f"  ‚úÖ build: –Ω–∞–π–¥–µ–Ω–æ")
    except ImportError:
        print(f"  ‚ùå build: –ù–ï –ù–ê–ô–î–ï–ù–û")
        print(f"    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install build")
        return False
    
    return True

def build_package():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç."""
    return run_command(
        "python -m build",
        "–°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞"
    )

def check_package():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç."""
    return run_command(
        "twine check dist/*",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞"
    )

def upload_to_testpypi():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–∫–µ—Ç –Ω–∞ TestPyPI."""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ TestPyPI...")
    print("  –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ TestPyPI –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  twine upload --repository testpypi dist/*")
    print("  –ò–ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω PyPI:")
    print("  twine upload dist/*")
    
    choice = input("\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ TestPyPI —Å–µ–π—á–∞—Å? (y/N): ").strip().lower()
    if choice == 'y':
        return run_command(
            "twine upload --repository testpypi dist/*",
            "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ TestPyPI"
        )
    else:
        print("üì¶ –ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –ø–∞–ø–∫–µ dist/")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ONEC CONTRACT GENERATOR")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("setup.py").exists():
        print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if not check_prerequisites():
        print("‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–±–æ—Ä–∫–∏
    clean_build()
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç
    if not build_package():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø–∞–∫–µ—Ç–∞")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç
    if not check_package():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–∫–µ—Ç–∞")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ PyPI
    if not upload_to_testpypi():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–∫–µ—Ç–∞")
        sys.exit(1)
    
    print("\nüéâ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("üì¶ –ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

if __name__ == "__main__":
    main() 