"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π 1–°.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ 1–°.

–°–¢–ê–¢–£–°: –ó–ê–ì–õ–£–®–ö–ê
–≠—Ç–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –º–æ–¥—É–ª–µ–π.
–¢–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö) —É–∂–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º.

–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:
- –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π (.bsl, .os)
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä
- –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
- –°–æ–∑–¥–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
- –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π

–î–∞—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: ~—á–µ—Ä–µ–∑ 100 –ª–µ—Ç üòÑ
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Optional, Any
from collections import defaultdict

class ModuleGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)."""
    
    def __init__(self, conf_dir: str, output_dir: str):
        self.conf_dir = Path(conf_dir)
        self.output_dir = Path(output_dir)
        self.logs = defaultdict(list)  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        
    def log(self, category: str, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        self.logs[category].append(message)
        
    def print_logs(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏."""
        print(f"\nüìã –°–≤–æ–¥–∫–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π:")
        print("=" * 50)
        
        for category, messages in self.logs.items():
            if messages:
                print(f"\nüîç {category} ({len(messages)}):")
                for msg in messages[:5]:
                    print(f"  ‚Ä¢ {msg}")
                if len(messages) > 5:
                    print(f"  ‚Ä¢ ... –∏ –µ—â–µ {len(messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print("=" * 50)
        
    def clean_output_directory(self):
        """–û—á–∏—â–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π."""
        if self.output_dir.exists():
            self.log("info", f"–û—á–∏—â–∞—é —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É: {self.output_dir}")
            try:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã .json –≤ –ø–∞–ø–∫–µ
                deleted_files = 0
                for json_file in self.output_dir.glob("*.json"):
                    json_file.unlink()
                    deleted_files += 1
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                deleted_dirs = 0
                for subdir in self.output_dir.iterdir():
                    if subdir.is_dir():
                        import shutil
                        shutil.rmtree(subdir)
                        deleted_dirs += 1
                
                self.log("success", f"–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_files} —Ñ–∞–π–ª–æ–≤, {deleted_dirs} –ø–∞–ø–æ–∫")
            except Exception as e:
                self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ {self.output_dir}: {e}")
        else:
            self.log("info", f"–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞: {self.output_dir}")
    
    def generate(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)."""
        try:
            self.log("info", f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.conf_dir}")
            self.log("info", f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")
            
            # –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
            self.clean_output_directory()
            self.output_dir.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ —Å—Ç–∞—Ç—É—Å–µ
            info_contract = {
                "metadata_type": "ModuleGenerator",
                "status": "STUB",
                "description": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π - –∑–∞–≥–ª—É—à–∫–∞",
                "current_functionality": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "reason": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º",
                "future_plans": [
                    "–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π (.bsl, .os)",
                    "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä",
                    "–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", 
                    "–°–æ–∑–¥–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π",
                    "–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"
                ],
                "implementation_date": "~—á–µ—Ä–µ–∑ 100 –ª–µ—Ç üòÑ",
                "generated_at": str(Path().cwd()),
                "source": "Module Generator Stub"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
            info_file = self.output_dir / "ModuleGenerator_Status.json"
            with open(info_file, 'w', encoding='utf-8') as f:
                json.dump(info_contract, f, ensure_ascii=False, indent=2)
            
            self.log("success", "–°–æ–∑–¥–∞–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: ModuleGenerator_Status.json")
            self.log("info", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏")
            self.log("info", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
            self.log("warning", "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –±—É–¥—É—â–µ–µ")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            self.log("summary", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π: —Ä–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            # –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏
            self.print_logs()
            
            return True
            
        except Exception as e:
            self.log("error", f"–û—à–∏–±–∫–∞ –≤ –∑–∞–≥–ª—É—à–∫–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥—É–ª–µ–π: {e}")
            self.print_logs()
            return False 