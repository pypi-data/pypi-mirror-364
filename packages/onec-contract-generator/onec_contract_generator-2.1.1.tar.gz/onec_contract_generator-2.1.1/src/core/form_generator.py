"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º 1–°.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è —Ñ–æ—Ä–º –∏–∑ XML-–æ–ø–∏—Å–∞–Ω–∏–π –∏ BSL-–º–æ–¥—É–ª–µ–π.
"""

import os
import json
import re
import shutil
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Dict, List, Optional, Any
from collections import defaultdict

class FormGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º."""
    
    def __init__(self, conf_dir: str, output_dir: str):
        self.conf_dir = Path(conf_dir)
        self.output_dir = Path(output_dir)
        self.logs = defaultdict(list)  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        
    def log(self, category: str, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        self.logs[category].append(message)
        
    def print_logs(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏."""
        if not self.logs:
            return
            
        print("\nüìã –°–≤–æ–¥–∫–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º:")
        print("=" * 50)
        
        for category, messages in self.logs.items():
            if messages:
                print(f"\nüîç {category} ({len(messages)}):")
                for msg in messages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    print(f"  ‚Ä¢ {msg}")
                if len(messages) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print("=" * 50)
        
    def clean_output_directory(self):
        """–û—á–∏—â–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º."""
        if self.output_dir.exists():
            self.log("info", f"–û—á–∏—â–∞—é —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É: {self.output_dir}")
            try:
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .json, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
                deleted_files = 0
                for json_file in self.output_dir.rglob("*.json"):
                    json_file.unlink()
                    deleted_files += 1
                
                self.log("success", f"–û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_files} —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏: {e}")
        else:
            self.output_dir.mkdir(parents=True, exist_ok=True)
            self.log("info", f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.output_dir}")

    def find_form_files(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ XML —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        form_files = []
        
        # –ò—â–µ–º —Ñ–æ—Ä–º—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
        search_patterns = [
            "**/Forms/*.xml",
            "**/Forms/*/*.xml",
            "**/Form/*.xml"
        ]
        
        for pattern in search_patterns:
            try:
                files = list(self.conf_dir.glob(pattern))
                form_files.extend(files)
                self.log("info", f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
            except Exception as e:
                self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}: {e}")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_files = list(set(form_files))
        self.log("info", f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º: {len(unique_files)}")
        
        return unique_files

    def parse_form_xml(self, xml_path: Path) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç XML —Ñ–∞–π–ª —Ñ–æ—Ä–º—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º namespace –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            ET.register_namespace('v8', 'http://v8.1c.ru/8.1/data/core')
            ET.register_namespace('lf', 'http://v8.1c.ru/8.2/managed-application/logform')
            ET.register_namespace('app', 'http://v8.1c.ru/8.2/managed-application/core')
            
            tree = ET.parse(xml_path)
            root = tree.getroot()
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç Form
            form_elem = root.find('.//{http://v8.1c.ru/8.3/MDClasses}Form')
            if form_elem is None:
                self.log("warning", f"–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç Form –≤ —Ñ–∞–π–ª–µ: {xml_path.name}")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–æ—Ä–º—ã
            form_data = {
                "name": "",
                "synonym": "",
                "comment": "",
                "form_type": "",
                "elements": [],
                "attributes": []
            }
            
            # –ò—â–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–æ—Ä–º—ã
            properties = form_elem.find('.//{http://v8.1c.ru/8.3/MDClasses}Properties')
            if properties is not None:
                # –ò–º—è —Ñ–æ—Ä–º—ã
                name_elem = properties.find('.//{http://v8.1c.ru/8.3/MDClasses}Name')
                if name_elem is not None:
                    form_data["name"] = name_elem.text or ""
                
                # –°–∏–Ω–æ–Ω–∏–º
                synonym_elem = properties.find('.//{http://v8.1c.ru/8.3/MDClasses}Synonym')
                if synonym_elem is not None:
                    content_elem = synonym_elem.find('.//{http://v8.1c.ru/8.1/data/core}content')
                    if content_elem is not None:
                        form_data["synonym"] = content_elem.text or ""
                
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                comment_elem = properties.find('.//{http://v8.1c.ru/8.3/MDClasses}Comment')
                if comment_elem is not None:
                    form_data["comment"] = comment_elem.text or ""
                
                # –¢–∏–ø —Ñ–æ—Ä–º—ã
                form_type_elem = properties.find('.//{http://v8.1c.ru/8.3/MDClasses}FormType')
                if form_type_elem is not None:
                    form_data["form_type"] = form_type_elem.text or ""
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
            self._parse_form_elements(form_elem, form_data)
            
            return form_data
            
        except ET.ParseError as e:
            self.log("error", f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –≤ —Ñ–∞–π–ª–µ {xml_path.name}: {e}")
            return None
        except Exception as e:
            self.log("error", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {xml_path.name}: {e}")
            return None

    def _parse_form_elements(self, form_elem, form_data: Dict[str, Any]):
        """–ü–∞—Ä—Å–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
            elements = form_elem.findall('.//{http://v8.1c.ru/8.2/managed-application/logform}Form')
            for elem in elements:
                elem_data = {
                    "type": "FormElement",
                    "name": elem.get("name", ""),
                    "id": elem.get("id", "")
                }
                form_data["elements"].append(elem_data)
            
            # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–æ—Ä–º—ã
            attributes = form_elem.findall('.//{http://v8.1c.ru/8.2/managed-application/logform}Attribute')
            for attr in attributes:
                attr_data = {
                    "type": "Attribute",
                    "name": attr.get("name", ""),
                    "id": attr.get("id", "")
                }
                form_data["attributes"].append(attr_data)
                
        except Exception as e:
            self.log("warning", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã: {e}")

    def generate_form_contract(self, form_data: Dict[str, Any], form_name: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ñ–æ—Ä–º—ã."""
        contract = {
            "metadata_type": "Form",
            "name": form_data.get("name", form_name),
            "synonym": form_data.get("synonym", ""),
            "comment": form_data.get("comment", ""),
            "form_type": form_data.get("form_type", ""),
            "structure": {
                "elements_count": len(form_data.get("elements", [])),
                "attributes_count": len(form_data.get("attributes", [])),
                "elements": form_data.get("elements", []),
                "attributes": form_data.get("attributes", [])
            },
            "generated_at": str(Path().cwd()),
            "source": "XML Form Description"
        }
        
        return contract

    def process_form_file(self, xml_path: Path) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Ñ–æ—Ä–º—ã."""
        try:
            # –ü–∞—Ä—Å–∏–º XML
            form_data = self.parse_form_xml(xml_path)
            if not form_data:
                return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            form_name = xml_path.stem
            contract = self.generate_form_contract(form_data, form_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            output_file = self.output_dir / f"{form_name}.json"
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(contract, f, ensure_ascii=False, indent=2)
            
            self.log("success", f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {form_name}")
            return True
            
        except Exception as e:
            self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {xml_path.name}: {e}")
            return False

    def generate(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º."""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º...")
        
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É
        self.clean_output_directory()
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º
        form_files = self.find_form_files()
        if not form_files:
            self.log("warning", "–§–∞–π–ª—ã —Ñ–æ—Ä–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.print_logs()
            return False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        success_count = 0
        for xml_path in form_files:
            if self.process_form_file(xml_path):
                success_count += 1
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("summary", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(form_files)}, —É—Å–ø–µ—à–Ω–æ: {success_count}")
        self.print_logs()
        
        return success_count > 0 