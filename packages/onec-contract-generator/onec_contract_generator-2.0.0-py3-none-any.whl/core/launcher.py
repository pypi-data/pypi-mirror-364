#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö 1–°.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:
- –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
- –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º
- –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:
1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
2. –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
"""

import os
import sys
import argparse
import json
import subprocess
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Windows
if sys.platform == "win32":
    import locale
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏
    os.system('chcp 65001 > nul')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        locale.setlocale(locale.LC_ALL, 'Russian_Russia.1251')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
        except:
            pass
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UTF-8
    os.environ['PYTHONIOENCODING'] = 'utf-8'

class ContractGeneratorLauncher:
    """–ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."""
    
    def __init__(self):
        self.conf_dir = None
        self.report_path = None
        self.output_dir = "metadata_contracts"
        self.skip_metadata = False
        self.skip_forms = False
        self.skip_modules = False
        
    def print_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–ù–¢–†–ê–ö–¢–û–í 1–°                   ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤                           ‚ïë
‚ïë  üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º                                          ‚ïë
‚ïë  üîß –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π                                       ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –í–µ—Ä—Å–∏—è: 2.0 | Python 3.x                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(banner)
    
    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø–æ—à–∞–≥–æ–≤—ã–º –º–∞—Å—Ç–µ—Ä–æ–º."""
        self.print_banner()
        print("üéØ –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print("=" * 60)
        
        # –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.conf_dir = self._get_conf_directory()
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
        self.report_path = self._get_report_file()
        
        # –®–∞–≥ 3: –í—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.output_dir = self._get_output_directory()
        
        # –®–∞–≥ 4: –í—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self._select_components()
        
        # –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫
        self._confirm_and_run()
    
    def _get_conf_directory(self) -> str:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        print("\nüìÅ –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
        default_paths = ["conf_files", "src", "."]
        existing_paths = []
        
        for path in default_paths:
            if os.path.exists(path):
                existing_paths.append(path)
                print(f"  ‚úÖ {path}")
        
        if existing_paths:
            print(f"\n–ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
            for i, path in enumerate(existing_paths, 1):
                print(f"  {i}. {path}")
            
            while True:
                try:
                    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-{len(existing_paths)}) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å: ").strip()
                    
                    if choice.isdigit():
                        idx = int(choice) - 1
                        if 0 <= idx < len(existing_paths):
                            selected_path = existing_paths[idx]
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {selected_path}")
                            return selected_path
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø—É—Ç—å
                        if os.path.exists(choice):
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {choice}")
                            return choice
                        else:
                            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {choice}")
                            
                except KeyboardInterrupt:
                    print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    sys.exit(0)
        else:
            # –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
            while True:
                path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ").strip()
                if os.path.exists(path):
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
                    return path
                else:
                    print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}")
    
    def _get_report_file(self) -> str:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞."""
        print("\nüìÑ –®–∞–≥ 2: –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞")
        print("-" * 40)
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        report_paths = []
        search_dirs = ["conf_reports", "reports", self.conf_dir, "."]
        
        for search_dir in search_dirs:
            if os.path.exists(search_dir):
                for file in os.listdir(search_dir):
                    if file.endswith(('.txt', '.report')) and 'report' in file.lower():
                        full_path = os.path.join(search_dir, file)
                        report_paths.append(full_path)
        
        if report_paths:
            print("–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤:")
            for i, path in enumerate(report_paths, 1):
                print(f"  {i}. {path}")
            
            while True:
                try:
                    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-{len(report_paths)}) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å: ").strip()
                    
                    if choice.isdigit():
                        idx = int(choice) - 1
                        if 0 <= idx < len(report_paths):
                            selected_path = report_paths[idx]
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_path}")
                            return selected_path
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø—É—Ç—å
                        if os.path.exists(choice):
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {choice}")
                            return choice
                        else:
                            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {choice}")
                            
                except KeyboardInterrupt:
                    print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    sys.exit(0)
        else:
            # –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
            while True:
                path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞: ").strip()
                if os.path.exists(path):
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {path}")
                    return path
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    
    def _get_output_directory(self) -> str:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        print("\nüìÇ –®–∞–≥ 3: –í—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("-" * 40)
        
        default_output = "metadata_contracts"
        print(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_output}")
        
        while True:
            try:
                choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? (y/n): ").strip().lower()
                
                if choice in ['y', 'yes', '–¥–∞', '–¥']:
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_output}")
                    return default_output
                elif choice in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                    path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ").strip()
                    if path:
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
                        return path
                    else:
                        print("‚ùå –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                else:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'.")
                    
            except KeyboardInterrupt:
                print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                sys.exit(0)
    
    def _select_components(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        print("\nüîß –®–∞–≥ 4: –í—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print("-" * 40)
        
        components = [
            ("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤", "metadata"),
            ("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º", "forms"),
            ("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π", "modules")
        ]
        
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for i, (name, key) in enumerate(components, 1):
            print(f"  {i}. {name}")
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print("  'all' - –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("  '1,2,3' - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("  '1 2' - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        
        while True:
            try:
                choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
                
                if choice == 'all':
                    self.skip_metadata = False
                    self.skip_forms = False
                    self.skip_modules = False
                    print("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
                    break
                else:
                    # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    selected = set()
                    for part in choice.replace(',', ' ').split():
                        if part.isdigit():
                            idx = int(part) - 1
                            if 0 <= idx < len(components):
                                selected.add(components[idx][1])
                    
                    if selected:
                        self.skip_metadata = "metadata" not in selected
                        self.skip_forms = "forms" not in selected
                        self.skip_modules = "modules" not in selected
                        
                        print("‚úÖ –í—ã–±—Ä–∞–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                        if not self.skip_metadata:
                            print("  - –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
                        if not self.skip_forms:
                            print("  - –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º")
                        if not self.skip_modules:
                            print("  - –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π")
                        break
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        
            except KeyboardInterrupt:
                print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                sys.exit(0)
    
    def _confirm_and_run(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        print("\nüéØ –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        print("-" * 40)
        
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"  üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.conf_dir}")
        print(f"  üìÑ –û—Ç—á–µ—Ç: {self.report_path}")
        print(f"  üìÇ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")
        print(f"  üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        if not self.skip_metadata:
            print("    ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        if not self.skip_forms:
            print("    ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º")
        if not self.skip_modules:
            print("    ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π")
        
        while True:
            try:
                choice = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é? (y/n): ").strip().lower()
                
                if choice in ['y', 'yes', '–¥–∞', '–¥']:
                    print("\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
                    self.run_generation()
                    break
                elif choice in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                    print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    sys.exit(0)
                else:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'.")
                    
            except KeyboardInterrupt:
                print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                sys.exit(0)
    
    def run_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        print("\n" + "=" * 60)
        print("üöÄ –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–†–ê–ö–¢–û–í")
        print("=" * 60)
        
        success_count = 0
        total_count = 0
        
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if not self.skip_metadata:
            total_count += 1
            print(f"\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
            if self._run_metadata_generation():
                success_count += 1
                print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º
        if not self.skip_forms:
            total_count += 1
            print(f"\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º...")
            if self._run_forms_generation():
                success_count += 1
                print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º")
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π
        if not self.skip_modules:
            total_count += 1
            print(f"\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")
            if self._run_modules_generation():
                success_count += 1
                print("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n{'='*60}")
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"{'='*60}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}/{total_count}")
        
        if success_count == total_count:
            print("üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÇ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
        print(f"\nüìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(self.output_dir)}")
    
    def _run_metadata_generation(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            from .metadata_generator import MetadataGenerator
            
            generator = MetadataGenerator(self.report_path, self.output_dir)
            return generator.generate()
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def _run_forms_generation(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º."""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–æ—Ä–º
            from .form_generator import FormGenerator
            
            forms_output_dir = os.path.join(self.output_dir, "–§–æ—Ä–º—ã")
            generator = FormGenerator(self.conf_dir, forms_output_dir)
            return generator.generate()
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def _run_modules_generation(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π."""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥—É–ª–µ–π
            from .module_generator import ModuleGenerator
            
            modules_output_dir = os.path.join(self.output_dir, "–ú–æ–¥—É–ª–∏")
            generator = ModuleGenerator(self.conf_dir, modules_output_dir)
            return generator.generate()
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def command_line_mode(self, args):
        """–ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
        self.conf_dir = args.conf_dir
        self.report_path = args.report_path
        self.output_dir = args.output_dir
        self.skip_metadata = args.skip_metadata
        self.skip_forms = args.skip_forms
        self.skip_modules = args.skip_modules
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        self.run_generation()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö 1–°",
        formatter_class=argparse.RawTextHelpFormatter
    )
    
    parser.add_argument(
        "--auto",
        action="store_true",
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)"
    )
    
    parser.add_argument(
        "--conf-dir",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    )
    
    parser.add_argument(
        "--report-path",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    )
    
    parser.add_argument(
        "--output-dir",
        default="metadata_contracts",
        help="–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: metadata_contracts)"
    )
    
    parser.add_argument(
        "--skip-metadata",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"
    )
    
    parser.add_argument(
        "--skip-forms",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º"
    )
    
    parser.add_argument(
        "--skip-modules",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"
    )
    
    args = parser.parse_args()
    
    launcher = ContractGeneratorLauncher()
    
    if args.auto:
        # –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º
        if not args.conf_dir or not args.report_path:
            print("‚ùå –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã --conf-dir –∏ --report-path")
            sys.exit(1)
        
        launcher.command_line_mode(args)
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        launcher.interactive_mode()

if __name__ == "__main__":
    main() 