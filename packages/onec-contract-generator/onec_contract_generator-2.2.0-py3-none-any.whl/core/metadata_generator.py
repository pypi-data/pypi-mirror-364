"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ 1–°.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

import os
import json
import re
import shutil
from pathlib import Path
from typing import Dict, List, Optional, Any
from collections import defaultdict

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—â–µ–º –≤ –æ—Ç—á–µ—Ç–µ
ALLOWED_ROOT_TYPES = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
    "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã", "–û–±—â–∏–µ–§–æ—Ä–º—ã", "–û—Ç—á–µ—Ç—ã",
    "–û–±—Ä–∞–±–æ—Ç–∫–∏", "–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π", "–†–µ–≥–∏—Å—Ç—Ä—ã–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è",
    "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", "–ü–ª–∞–Ω—ã–û–±–º–µ–Ω–∞", "–ë–∏–∑–Ω–µ—Å–ü—Ä–æ—Ü–µ—Å—Å—ã", "–ó–∞–¥–∞—á–∏",
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "–Ø–∑—ã–∫–∏", "–ü–æ–¥—Å–∏—Å—Ç–µ–º—ã", "–†–æ–ª–∏", "–ü–ª–∞–Ω—ã–°—á–µ—Ç–æ–≤",
    "–†–µ–≥–∏—Å—Ç—Ä—ã–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏", "–†–µ–≥–∏—Å—Ç—Ä—ã–†–∞—Å—á–µ—Ç–∞", "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–†–∞—Å—á–µ—Ç–∞",
    "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤", "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°–≤–æ–π—Å—Ç–≤",
    "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏", "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ù–∞–ª–æ–≥–æ–≤–æ–≥–æ–£—á–µ—Ç–∞",
    
    # –¢–∏–ø—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è", "–û–±—â–∏–µ–ú–æ–¥—É–ª–∏", "HTTP–°–µ—Ä–≤–∏—Å—ã", "Web–°–µ—Ä–≤–∏—Å—ã", 
    "XDTO–ü–∞–∫–µ—Ç—ã", "–°—Ç–∏–ª–∏", "–≠–ª–µ–º–µ–Ω—Ç—ã–°—Ç–∏–ª—è", "–•—Ä–∞–Ω–∏–ª–∏—â–∞–ù–∞—Å—Ç—Ä–æ–µ–∫",
    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–°–µ–∞–Ω—Å–∞", "–†–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã–µ–ó–∞–¥–∞–Ω–∏—è", "–ñ—É—Ä–Ω–∞–ª—ã–î–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "–û–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–µ–¢–∏–ø—ã", "–û–±—â–∏–µ–ö–∞—Ä—Ç–∏–Ω–∫–∏", "–û–±—â–∏–µ–ö–æ–º–∞–Ω–¥—ã", "–û–±—â–∏–µ–†–µ–∫–≤–∏–∑–∏—Ç—ã",
    "–ì—Ä—É–ø–ø—ã–ö–æ–º–∞–Ω–¥", "–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", "–ë–æ—Ç—ã", "–ü–æ–¥–ø–∏—Å–∫–∏–ù–∞–°–æ–±—ã—Ç–∏—è",
    "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ–û–ø—Ü–∏–∏", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö–û–ø—Ü–∏–π", "–ö—Ä–∏—Ç–µ—Ä–∏–∏–û—Ç–±–æ—Ä–∞",
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –æ—Ç—á–µ—Ç–µ
    "–û–±—â–∏–µ–®–∞–±–ª–æ–Ω—ã", "–†–∞—Å—à–∏—Ä–µ–Ω–∏—è"
]

class MetadataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤."""
    
    def __init__(self, report_path: str, output_dir: str):
        self.report_path = Path(report_path)
        self.output_dir = Path(output_dir)
        self.logs = defaultdict(list)  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        
    def log(self, category: str, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        self.logs[category].append(message)
        
    def print_logs(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏."""
        if not self.logs:
            return
            
        print("\nüìã –°–≤–æ–¥–∫–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:")
        print("=" * 50)
        
        for category, messages in self.logs.items():
            if messages:
                print(f"\nüîç {category} ({len(messages)}):")
                for msg in messages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    print(f"  ‚Ä¢ {msg}")
                if len(messages) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print("=" * 50)

    def clean_output_directory(self):
        """–û—á–∏—â–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        if self.output_dir.exists():
            self.log("info", f"–û—á–∏—â–∞—é —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É: {self.output_dir}")
            try:
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .json, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
                deleted_files = 0
                for json_file in self.output_dir.rglob("*.json"):
                    json_file.unlink()
                    deleted_files += 1
                
                self.log("success", f"–û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_files} —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏: {e}")
        else:
            self.output_dir.mkdir(parents=True, exist_ok=True)
            self.log("info", f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.output_dir}")

    def parse_report(self) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        self.log("info", f"–ß–∏—Ç–∞—é –æ—Ç—á–µ—Ç: {self.report_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        lines = None
        try:
            with open(self.report_path, 'r', encoding='utf-16') as f:
                lines = f.readlines()
            self.log("info", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ: UTF-16")
        except UnicodeError:
            try:
                with open(self.report_path, 'r', encoding='utf-8-sig') as f:
                    lines = f.readlines()
                self.log("info", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ: UTF-8-SIG")
            except UnicodeError:
                try:
                    with open(self.report_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    self.log("info", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ: UTF-8")
                except UnicodeError:
                    try:
                        with open(self.report_path, 'r', encoding='cp1251') as f:
                            lines = f.readlines()
                        self.log("info", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ: CP1251")
                    except Exception as e:
                        self.log("error", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞: {e}")
                        return {}
        
        if not lines:
            self.log("error", "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏")
            return {}
        
        self.log("info", f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        objects = {}
        current_object = None
        last_typed_element = None
        processed_lines = 0
        
        for i, line in enumerate(lines):
            if not line.strip():
                continue
                
            processed_lines += 1
            trimmed_line = line.strip()
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if trimmed_line.startswith("-"):
                last_element_line = trimmed_line[1:].strip()
                parts = last_element_line.split('.')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                is_valid_root = len(parts) == 2 and parts[0] in ALLOWED_ROOT_TYPES
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if len(parts) == 2 and parts[0] in ALLOWED_ROOT_TYPES:
                    self.log("info", f"–ù–∞–π–¥–µ–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: {last_element_line}")
                elif len(parts) == 2:
                    self.log("warning", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {parts[0]} –≤ —Å—Ç—Ä–æ–∫–µ {last_element_line}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if parts[0] not in [msg.split(': ')[1].split(' ')[0] for msg in self.logs.get('warning', [])]:
                        self.log("info", f"–ù–û–í–´–ô –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü: {parts[0]} - –¥–æ–±–∞–≤—å—Ç–µ –≤ ALLOWED_ROOT_TYPES")
                
                if is_valid_root:
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    object_name = last_element_line
                    current_object = {
                        "name": object_name,
                        "type": self._extract_object_type(object_name),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                        "attributes": [],
                        "tabular_sections": {},
                        "comment": ""
                    }
                    objects[object_name] = current_object
                    last_typed_element = None
                    self.log("info", f"–ù–∞–π–¥–µ–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: {object_name}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, —Ç–∞–±. —á–∞—Å—Ç–µ–π)
                elif current_object and last_element_line.startswith(current_object['name']):
                    child_parts = last_element_line.replace(current_object['name'] + '.', '').split('.')
                    
                    if len(child_parts) == 2 and child_parts[0] == "–†–µ–∫–≤–∏–∑–∏—Ç—ã":
                        attr = {"name": child_parts[1], "type": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "path": last_element_line}
                        current_object['attributes'].append(attr)
                        last_typed_element = attr
                        self.log("info", f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç: {child_parts[1]}")
                    
                    elif len(child_parts) == 2 and child_parts[0] == "–¢–∞–±–ª–∏—á–Ω—ã–µ–ß–∞—Å—Ç–∏":
                        ts_name = child_parts[1]
                        current_object['tabular_sections'][ts_name] = {
                            "name": ts_name,
                            "type": "–¢–∞–±–ª–∏—á–Ω–∞—è–ß–∞—Å—Ç—å",
                            "attributes": []
                        }
                        last_typed_element = None
                        self.log("info", f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å: {ts_name}")
                    
                    elif len(child_parts) == 4 and child_parts[0] == "–¢–∞–±–ª–∏—á–Ω—ã–µ–ß–∞—Å—Ç–∏" and child_parts[2] == "–†–µ–∫–≤–∏–∑–∏—Ç—ã":
                        ts_name = child_parts[1]
                        col_name = child_parts[3]
                        if ts_name in current_object['tabular_sections']:
                            col_attr = {"name": col_name, "type": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "path": last_element_line}
                            current_object['tabular_sections'][ts_name]['attributes'].append(col_attr)
                            last_typed_element = col_attr
                            self.log("info", f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏ {ts_name}: {col_name}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            elif current_object and trimmed_line.startswith("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"):
                comment_text = ""
                try:
                    comment_text = trimmed_line.split(":", 1)[1].strip().strip('"')
                except IndexError:
                    continue
                
                if not comment_text:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                target_element = last_typed_element
                if target_element is None:
                    target_element = current_object
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
                if isinstance(target_element, dict):
                    target_element['comment'] = comment_text
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è "–¢–∏–ø:" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
            elif current_object and trimmed_line.startswith("–¢–∏–ø:"):
                type_parts = []
                type_line_indent = len(line) - len(line.lstrip())
                
                j = i + 1
                while j < len(lines):
                    next_line = lines[j]
                    next_line_indent = len(next_line) - len(next_line.lstrip())
                    
                    if next_line.strip() and next_line_indent > type_line_indent:
                        part = next_line.strip().strip('",')
                        type_parts.append(part)
                        j += 1
                    else:
                        break
                
                if type_parts and last_typed_element:
                    full_type = ", ".join(type_parts)
                    last_typed_element['type'] = full_type
                    self.log("info", f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –¥–ª—è {last_typed_element['name']}: {full_type}")
        
        self.log("summary", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
        self.log("info", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {processed_lines} –∏–∑ {len(lines)}")
        return objects

    def _extract_object_type(self, object_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –µ–≥–æ –∏–º–µ–Ω–∏."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
        if object_name.startswith("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏."):
            return "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
        elif object_name.startswith("–î–æ–∫—É–º–µ–Ω—Ç—ã."):
            return "–î–æ–∫—É–º–µ–Ω—Ç"
        elif object_name.startswith("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã."):
            return "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞"
        elif object_name.startswith("–û—Ç—á–µ—Ç—ã."):
            return "–û—Ç—á–µ—Ç"
        elif object_name.startswith("–û–±—Ä–∞–±–æ—Ç–∫–∏."):
            return "–û–±—Ä–∞–±–æ—Ç–∫–∞"
        elif object_name.startswith("–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π."):
            return "–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π"
        elif object_name.startswith("–†–µ–≥–∏—Å—Ç—Ä—ã–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è."):
            return "–†–µ–≥–∏—Å—Ç—Ä–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è"
        elif object_name.startswith("–†–µ–≥–∏—Å—Ç—Ä—ã–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏."):
            return "–†–µ–≥–∏—Å—Ç—Ä–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏"
        elif object_name.startswith("–†–µ–≥–∏—Å—Ç—Ä—ã–†–∞—Å—á–µ—Ç–∞."):
            return "–†–µ–≥–∏—Å—Ç—Ä–†–∞—Å—á–µ—Ç–∞"
        
        # –ü–ª–∞–Ω—ã
        elif object_name.startswith("–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫."):
            return "–ü–ª–∞–Ω–í–∏–¥–æ–≤–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–û–±–º–µ–Ω–∞."):
            return "–ü–ª–∞–Ω–û–±–º–µ–Ω–∞"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–°—á–µ—Ç–æ–≤."):
            return "–ü–ª–∞–Ω–°—á–µ—Ç–æ–≤"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–†–∞—Å—á–µ—Ç–∞."):
            return "–ü–ª–∞–Ω–í–∏–¥–æ–≤–†–∞—Å—á–µ—Ç–∞"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤."):
            return "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã."):
            return "–ü–ª–∞–Ω–í–∏–¥–æ–≤–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°–≤–æ–π—Å—Ç–≤."):
            return "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°–≤–æ–π—Å—Ç–≤"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏."):
            return "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏"
        elif object_name.startswith("–ü–ª–∞–Ω—ã–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ù–∞–ª–æ–≥–æ–≤–æ–≥–æ–£—á–µ—Ç–∞."):
            return "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ù–∞–ª–æ–≥–æ–≤–æ–≥–æ–£—á–µ—Ç–∞"
        
        # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã
        elif object_name.startswith("–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è."):
            return "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ"
        elif object_name.startswith("–û–±—â–∏–µ–ú–æ–¥—É–ª–∏."):
            return "–û–±—â–∏–π–ú–æ–¥—É–ª—å"
        elif object_name.startswith("HTTP–°–µ—Ä–≤–∏—Å—ã."):
            return "HTTP–°–µ—Ä–≤–∏—Å"
        elif object_name.startswith("Web–°–µ—Ä–≤–∏—Å—ã."):
            return "Web–°–µ—Ä–≤–∏—Å"
        elif object_name.startswith("XDTO–ü–∞–∫–µ—Ç—ã."):
            return "XDTO–ü–∞–∫–µ—Ç"
        elif object_name.startswith("–°—Ç–∏–ª–∏."):
            return "–°—Ç–∏–ª—å"
        elif object_name.startswith("–≠–ª–µ–º–µ–Ω—Ç—ã–°—Ç–∏–ª–µ–π."):
            return "–≠–ª–µ–º–µ–Ω—Ç–°—Ç–∏–ª—è"
        elif object_name.startswith("–•—Ä–∞–Ω–∏–ª–∏—â–∞–ù–∞—Å—Ç—Ä–æ–µ–∫."):
            return "–•—Ä–∞–Ω–∏–ª–∏—â–µ–ù–∞—Å—Ç—Ä–æ–µ–∫"
        elif object_name.startswith("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–°–µ–∞–Ω—Å–∞."):
            return "–ü–∞—Ä–∞–º–µ—Ç—Ä–°–µ–∞–Ω—Å–∞"
        elif object_name.startswith("–†–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã–µ–ó–∞–¥–∞–Ω–∏—è."):
            return "–†–µ–≥–ª–∞–º–µ–Ω—Ç–Ω–æ–µ–ó–∞–¥–∞–Ω–∏–µ"
        elif object_name.startswith("–ñ—É—Ä–Ω–∞–ª—ã–î–æ–∫—É–º–µ–Ω—Ç–æ–≤."):
            return "–ñ—É—Ä–Ω–∞–ª–î–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        elif object_name.startswith("–û–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–µ–¢–∏–ø—ã."):
            return "–û–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π–¢–∏–ø"
        elif object_name.startswith("–û–±—â–∏–µ–ö–∞—Ä—Ç–∏–Ω–∫–∏."):
            return "–û–±—â–∞—è–ö–∞—Ä—Ç–∏–Ω–∫–∞"
        elif object_name.startswith("–û–±—â–∏–µ–ö–æ–º–∞–Ω–¥—ã."):
            return "–û–±—â–∞—è–ö–æ–º–∞–Ω–¥–∞"
        elif object_name.startswith("–û–±—â–∏–µ–†–µ–∫–≤–∏–∑–∏—Ç—ã."):
            return "–û–±—â–∏–π–†–µ–∫–≤–∏–∑–∏—Ç"
        elif object_name.startswith("–ì—Ä—É–ø–ø—ã–ö–æ–º–∞–Ω–¥."):
            return "–ì—Ä—É–ø–ø–∞–ö–æ–º–∞–Ω–¥"
        elif object_name.startswith("–ë–æ—Ç—ã."):
            return "–ë–æ—Ç"
        elif object_name.startswith("–ü–æ–¥–ø–∏—Å–∫–∏–ù–∞–°–æ–±—ã—Ç–∏—è."):
            return "–ü–æ–¥–ø–∏—Å–∫–∞–ù–∞–°–æ–±—ã—Ç–∏–µ"
        elif object_name.startswith("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ–û–ø—Ü–∏–∏."):
            return "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è–û–ø—Ü–∏—è"
        elif object_name.startswith("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö–û–ø—Ü–∏–π."):
            return "–ü–∞—Ä–∞–º–µ—Ç—Ä–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π–û–ø—Ü–∏–∏"
        elif object_name.startswith("–ö—Ä–∏—Ç–µ—Ä–∏–∏–û—Ç–±–æ—Ä–∞."):
            return "–ö—Ä–∏—Ç–µ—Ä–∏–π–û—Ç–±–æ—Ä–∞"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã
        elif object_name.startswith("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."):
            return "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        elif object_name.startswith("–Ø–∑—ã–∫–∏."):
            return "–Ø–∑—ã–∫"
        elif object_name.startswith("–ü–æ–¥—Å–∏—Å—Ç–µ–º—ã."):
            return "–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞"
        elif object_name.startswith("–†–æ–ª–∏."):
            return "–†–æ–ª—å"
        elif object_name.startswith("–ë–∏–∑–Ω–µ—Å–ü—Ä–æ—Ü–µ—Å—Å—ã."):
            return "–ë–∏–∑–Ω–µ—Å–ü—Ä–æ—Ü–µ—Å—Å"
        elif object_name.startswith("–ó–∞–¥–∞—á–∏."):
            return "–ó–∞–¥–∞—á–∞"
        elif object_name.startswith("–û–±—â–∏–µ–®–∞–±–ª–æ–Ω—ã."):
            return "–û–±—â–∏–π–®–∞–±–ª–æ–Ω"
        elif object_name.startswith("–†–∞—Å—à–∏—Ä–µ–Ω–∏—è."):
            return "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ"
        
        else:
            return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    
    def _get_category_for_type(self, object_type: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞."""
        categories = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫": "–û—Å–Ω–æ–≤–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–î–æ–∫—É–º–µ–Ω—Ç": "–û—Å–Ω–æ–≤–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã", 
            "–û—Ç—á–µ—Ç": "–û—Å–Ω–æ–≤–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞": "–û—Å–Ω–æ–≤–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞": "–û—Å–Ω–æ–≤–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            
            # –†–µ–≥–∏—Å—Ç—Ä—ã
            "–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π": "–†–µ–≥–∏—Å—Ç—Ä—ã",
            "–†–µ–≥–∏—Å—Ç—Ä–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è": "–†–µ–≥–∏—Å—Ç—Ä—ã",
            "–†–µ–≥–∏—Å—Ç—Ä–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏": "–†–µ–≥–∏—Å—Ç—Ä—ã",
            "–†–µ–≥–∏—Å—Ç—Ä–†–∞—Å—á–µ—Ç–∞": "–†–µ–≥–∏—Å—Ç—Ä—ã",
            
            # –ü–ª–∞–Ω—ã
            "–ü–ª–∞–Ω–í–∏–¥–æ–≤–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–û–±–º–µ–Ω–∞": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–°—á–µ—Ç–æ–≤": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–í–∏–¥–æ–≤–†–∞—Å—á–µ—Ç–∞": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–í–∏–¥–æ–≤–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°–≤–æ–π—Å—Ç–≤": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏": "–ü–ª–∞–Ω—ã",
            "–ü–ª–∞–Ω–í–∏–¥–æ–≤–°—á–µ—Ç–æ–≤–ù–∞–ª–æ–≥–æ–≤–æ–≥–æ–£—á–µ—Ç–∞": "–ü–ª–∞–Ω—ã",
            
            # –û–±—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
            "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ": "–û–±—â–∏–µ–û–±—ä–µ–∫—Ç—ã",
            "–û–±—â–∏–π–ú–æ–¥—É–ª—å": "–û–±—â–∏–µ–û–±—ä–µ–∫—Ç—ã",
            "–û–±—â–∞—è–ö–∞—Ä—Ç–∏–Ω–∫–∞": "–û–±—â–∏–µ–û–±—ä–µ–∫—Ç—ã",
            "–û–±—â–∞—è–ö–æ–º–∞–Ω–¥–∞": "–û–±—â–∏–µ–û–±—ä–µ–∫—Ç—ã",
            "–û–±—â–∏–π–†–µ–∫–≤–∏–∑–∏—Ç": "–û–±—â–∏–µ–û–±—ä–µ–∫—Ç—ã",
            "–û–±—â–∏–π–®–∞–±–ª–æ–Ω": "–û–±—â–∏–µ–û–±—ä–µ–∫—Ç—ã",
            
            # –°–µ—Ä–≤–∏—Å—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            "HTTP–°–µ—Ä–≤–∏—Å": "–°–µ—Ä–≤–∏—Å—ã",
            "Web–°–µ—Ä–≤–∏—Å": "–°–µ—Ä–≤–∏—Å—ã",
            "XDTO–ü–∞–∫–µ—Ç": "–°–µ—Ä–≤–∏—Å—ã",
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            "–°—Ç–∏–ª—å": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–≠–ª–µ–º–µ–Ω—Ç–°—Ç–∏–ª—è": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–•—Ä–∞–Ω–∏–ª–∏—â–µ–ù–∞—Å—Ç—Ä–æ–µ–∫": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ü–∞—Ä–∞–º–µ—Ç—Ä–°–µ–∞–Ω—Å–∞": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–†–µ–≥–ª–∞–º–µ–Ω—Ç–Ω–æ–µ–ó–∞–¥–∞–Ω–∏–µ": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ñ—É—Ä–Ω–∞–ª–î–æ–∫—É–º–µ–Ω—Ç–æ–≤": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–û–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π–¢–∏–ø": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ì—Ä—É–ø–ø–∞–ö–æ–º–∞–Ω–¥": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ë–æ—Ç": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ü–æ–¥–ø–∏—Å–∫–∞–ù–∞–°–æ–±—ã—Ç–∏–µ": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è–û–ø—Ü–∏—è": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ü–∞—Ä–∞–º–µ—Ç—Ä–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π–û–ø—Ü–∏–∏": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            "–ö—Ä–∏—Ç–µ—Ä–∏–π–û—Ç–±–æ—Ä–∞": "–°–∏—Å—Ç–µ–º–Ω—ã–µ–û–±—ä–µ–∫—Ç—ã",
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "–Ø–∑—ã–∫": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "–†–æ–ª—å": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "–ë–∏–∑–Ω–µ—Å–ü—Ä–æ—Ü–µ—Å—Å": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "–ó–∞–¥–∞—á–∞": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        }
        
        return categories.get(object_type, "–ü—Ä–æ—á–µ–µ")

    def generate_contract(self, object_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        tabular_sections_list = []
        for ts_name, ts_data in object_data["tabular_sections"].items():
            tabular_sections_list.append(ts_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Ç–∏–ø–∞
        object_short_name = object_data["name"].split('.')[-1]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        search_keywords = [
            object_data["type"].lower(),
            object_short_name.lower(),
            object_data["name"].lower()
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if object_data.get("comment"):
            comment_words = object_data["comment"].lower().split()
            search_keywords.extend([word for word in comment_words if len(word) > 2])
        
        contract = {
            "metadata_type": "Object",
            "name": object_data["name"],
            "type": object_data["type"],
            "comment": object_data["comment"],
            "structure": {
                "attributes_count": len(object_data["attributes"]),
                "tabular_sections_count": len(object_data["tabular_sections"]),
                "attributes": object_data["attributes"],
                "tabular_sections": tabular_sections_list
            },
            "search_info": {
                "type": object_data["type"],
                "category": self._get_category_for_type(object_data["type"]),
                "full_name": f"{object_data['type']}_{object_short_name}",
                "search_keywords": list(set(search_keywords)),  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                "object_short_name": object_short_name
            },
            "generated_at": str(Path().cwd()),
            "source": "Text Report"
        }
        
        return contract

    def save_contract(self, contract: Dict[str, Any], object_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ JSON —Ñ–∞–π–ª."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ search_info –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            full_name = contract["search_info"]["full_name"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–±–µ–∑ –ø–∞–ø–æ–∫)
            output_file = self.output_dir / f"{full_name}.json"
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(contract, f, ensure_ascii=False, indent=2)
            
            self.log("success", f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {full_name}")
            
        except Exception as e:
            self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {object_name}: {e}")

    def generate(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É
        self.clean_output_directory()
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç
        objects = self.parse_report()
        if not objects:
            self.log("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ –æ—Ç—á–µ—Ç–∞")
            self.print_logs()
            return False 
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        success_count = 0
        for object_name, object_data in objects.items():
            try:
                contract = self.generate_contract(object_data)
                self.save_contract(contract, object_name)
                success_count += 1
            except Exception as e:
                self.log("error", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è {object_name}: {e}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("summary", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}, —É—Å–ø–µ—à–Ω–æ: {success_count}")
        self.print_logs()
        
        return success_count > 0 