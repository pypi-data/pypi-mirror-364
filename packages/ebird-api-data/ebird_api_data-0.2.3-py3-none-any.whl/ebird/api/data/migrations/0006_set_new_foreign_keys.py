# Generated by Django 5.2.4 on 2025-07-14 10:06

import django.db.models.deletion
from django.db import connection, migrations, models


def update_location_country(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_location "
            "SET country_id = data_country.code "
            "FROM data_country "
            "WHERE data_location.country_old = data_country.id"
        )


def update_location_state(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_location "
            "SET state_id = data_state.code "
            "FROM data_state "
            "WHERE data_location.state_old = data_state.id"
        )


def update_location_county(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_location "
            "SET county_id = data_county.code "
            "FROM data_county "
            "WHERE data_location.county_old = data_county.id"
        )


def update_checklist_country(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_checklist "
            "SET country_id = data_country.code "
            "FROM data_country "
            "WHERE data_checklist.country_old = data_country.id"
        )


def update_checklist_state(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_checklist "
            "SET state_id = data_state.code "
            "FROM data_state "
            "WHERE data_checklist.state_old = data_state.id"
        )


def update_checklist_county(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_checklist "
            "SET county_id = data_county.code "
            "FROM data_county "
            "WHERE data_checklist.county_old = data_county.id"
        )


def update_checklist_location(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_checklist "
            "SET location_id = data_location.identifier "
            "FROM data_location "
            "WHERE data_checklist.location_old = data_location.id"
        )


def update_checklist_observer(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_checklist "
            "SET observer_id = data_observer.identifier "
            "FROM data_observer "
            "WHERE data_checklist.observer_old = data_observer.id"
        )


def update_observation_country(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_observation "
            "SET country_id = data_country.code "
            "FROM data_country "
            "WHERE data_observation.country_old = data_country.id"
        )


def update_observation_state(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_observation "
            "SET state_id = data_state.code "
            "FROM data_state "
            "WHERE data_observation.state_old = data_state.id"
        )


def update_observation_county(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_observation "
            "SET county_id = data_county.code "
            "FROM data_county "
            "WHERE data_observation.county_old = data_county.id"
        )


def update_observation_location(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_observation "
            "SET location_id = data_location.identifier "
            "FROM data_location "
            "WHERE data_observation.location_old = data_location.id"
        )


def update_observation_observer(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_observation "
            "SET observer_id = data_observer.identifier "
            "FROM data_observer "
            "WHERE data_observation.observer_old = data_observer.id"
        )


def update_observation_checklist(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_observation "
            "SET checklist_id = data_checklist.identifier "
            "FROM data_checklist "
            "WHERE data_observation.checklist_old = data_checklist.id"
        )


def update_observation_species(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_observation "
            "SET species_id = data_species.species_code "
            "FROM data_species "
            "WHERE data_observation.species_old = data_species.id"
        )


def update_filter_species(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_filter "
            "SET species_id = data_species.species_code "
            "FROM data_species "
            "WHERE data_filter.species_old = data_species.id"
        )


def update_filter_location(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_filter "
            "SET location_id = data_location.identifier "
            "FROM data_location "
            "WHERE data_filter.location_old = data_location.id"
        )


def update_filter_update_species(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            "UPDATE data_filter "
            "SET update_species_id = data_species.species_code "
            "FROM data_species "
            "WHERE data_filter.update_species_old = data_species.id"
        )


class Migration(migrations.Migration):

    dependencies = [
        ('data', '0005_add_new_foreign_keys'),
    ]

    operations = [
        migrations.RunPython(
            update_location_country,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_location_state,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_location_county,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_checklist_country,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_checklist_state,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_checklist_county,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_checklist_location,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_checklist_observer,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_observation_country,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_observation_state,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_observation_county,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_observation_location,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_observation_observer,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_observation_checklist,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_observation_species,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_filter_species,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_filter_location,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_filter_update_species,
            reverse_code=migrations.RunPython.noop
        ),
    ]
