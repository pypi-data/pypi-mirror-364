name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} / Django ${{ matrix.django-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        django-version: ["4.2", "5.0"]

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache tox environments
        id: cache-tox
        uses: actions/cache@v4
        with:
          path: .tox
          key: tox-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('tox.ini', 'pyproject.toml', 'requirements*.txt') }}
          restore-keys: |
            tox-${{ matrix.python-version }}-${{ matrix.django-version }}-
            tox-${{ matrix.python-version }}-

      - name: Install PostgreSQL extensions
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions

      - name: Run linting and type checking
        run: |
          tox -e lint

      - name: Run tests with tox
        env:
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          # tox-gh-actions will automatically select the right environment
          # based on the matrix values and [gh-actions] section in tox.ini
          tox -- -v --cov=django_chain --cov-report=xml

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    # Only run performance tests on main branch or when explicitly triggered
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'performance')

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Run performance tests
        env:
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
        run: tox -e performance -- --cov=django_chain --cov-report=xml
        continue-on-error: true  # Performance tests can be flaky

  docs:
    name: Test documentation links
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -e ".[dev,docs]"

      - run: mkdocs serve &
      - run: WAIT_TIME=0 && until nc -vzw 2 localhost 8000 || [ $WAIT_TIME -eq 5 ]; do sleep $(( WAIT_TIME++ )); done
      - run: if [ $WAIT_TIME == 5 ]; then echo cannot start mkdocs server on http://localhost:8000; exit 1; fi

      - name: Check links
        continue-on-error: true
        run: pylinkvalidate.py -P http://localhost:8000/

      - run: echo "Done"

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run bandit security linter
        run: |
          bandit -r django_chain/ -f json -o bandit-report.json || true
          bandit -r django_chain/
        continue-on-error: true

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Combined job for quick feedback on PRs
  quick-check:
    name: Quick Check (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Run quick checks
        env:
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          tox -e lint
          tox -e fast -- --cov=django_chain --cov-report=xml

  # Summary job that depends on all others
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, docs, security]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.security.result }}" == "failure" ||
                "${{ needs.docs.result }}" == "failure" ]]; then
            echo "One or more critical jobs failed"
            exit 1
          else
            echo "All critical jobs passed"
          fi
