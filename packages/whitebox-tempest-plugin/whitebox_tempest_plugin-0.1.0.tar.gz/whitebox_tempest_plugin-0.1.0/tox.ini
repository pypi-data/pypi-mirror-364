[tox]
minversion = 3.18.0
envlist = pep8
skip_missing_interpreters = True
# Automatic envs (pyXX) will only use the python version appropriate to that
# env and ignore basepython inherited from [testenv] if we set
# ignore_basepython_conflict.
ignore_basepython_conflict = True

[testenv]
setenv =
  VIRTUAL_ENV = {envdir}
usedevelop = True
install_command = pip install -U {opts} {packages}
allowlist_externals = *
deps =
  -r{toxinidir}/requirements.txt
  -r{toxinidir}/test-requirements.txt

[testenv:pep8]
commands =
  flake8 {posargs}

[flake8]
ignore = H405,W504
enable-extensions = H106,H203,H904
show-source = True
exclude = .git,.venv,.tox,dist,doc,*egg

[flake8:local-plugins]
extension =
  T102 = tempest.hacking.checks:import_no_clients_in_api_and_scenario_tests
  T104 = tempest.hacking.checks:scenario_tests_need_service_tags
  T105 = tempest.hacking.checks:no_setup_teardown_class_for_tests
  T107 = tempest.hacking.checks:service_tags_not_in_module_path
  T108 = tempest.hacking.checks:no_hyphen_at_end_of_rand_name
  N322 = tempest.hacking.checks:no_mutable_default_args
  T109 = tempest.hacking.checks:no_testtools_skip_decorator
  T110 = tempest.hacking.checks:get_resources_on_service_clients
  T111 = tempest.hacking.checks:delete_resources_on_service_clients
  T112 = tempest.hacking.checks:dont_import_local_tempest_into_lib
  T113 = tempest.hacking.checks:use_rand_uuid_instead_of_uuid4
  T114 = tempest.hacking.checks:dont_use_config_in_tempest_lib
  T115 = tempest.hacking.checks:dont_put_admin_tests_on_nonadmin_path
  T116 = tempest.hacking.checks:unsupported_exception_attribute_PY3
  T117 = tempest.hacking.checks:negative_test_attribute_always_applied_to_negative_tests
