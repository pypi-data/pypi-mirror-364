Metadata-Version: 2.4
Name: lang111
Version: 0.1.0
Summary: A natural language interpreter for data structures and algorithms
Home-page: https://github.com/satya/satya-language
Author: Satya
Author-email: satya@example.com
Keywords: data structures,algorithms,natural language,education
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Education
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: requires-python
Dynamic: summary

# Satya Language

A natural language interpreter for data structures and algorithms in Python.

## Installation

```bash
# Install from the current directory
pip install .

# Or install from PyPI (once published)
# pip install satya
```

## Installation

```bash
pip install satya-language
```

## Usage

```python
from satya_language import SatyaInterpreter

# Create an interpreter instance
interpreter = SatyaInterpreter()

# Run commands in natural language
print(interpreter.run("Create linked list with 5 nodes"))
print(interpreter.run("Add apple, banana, cherry"))
print(interpreter.run("List show"))

print(interpreter.run("Create stack"))
print(interpreter.run("Push hello"))
print(interpreter.run("Stack show"))

print(interpreter.run("Create graph"))
print(interpreter.run("Add edge A B"))
print(interpreter.run("Add edge B C"))
print(interpreter.run("DFS A"))
```

## Features

- **Data Structures**: Linked List, Stack, Queue, Graph
- **Algorithms**: DFS, BFS, Sorting, Searching
- **Math Operations**: Factorial, Fibonacci, Prime checking, Armstrong number checking
- **Text Operations**: Palindrome checking

## Command Examples

### Linked List
- Create linked list with N nodes
- Add a, b, c
- Remove 2nd element
- List show
- List size

### Stack
- Create stack
- Push x
- Pop
- Stack show

### Queue
- Create queue
- Enqueue 1,2,3
- Dequeue
- Queue show

### Graph
- Create graph
- Add edge A B
- Show graph
- DFS A
- BFS A

### Math & Logic
- Factorial of N
- Fibonacci till N
- Is N palindrome?
- Is N armstrong?
- Is N prime?
- Sort 5 1 3
- Search 3 in 1 2 3

## License

MIT
