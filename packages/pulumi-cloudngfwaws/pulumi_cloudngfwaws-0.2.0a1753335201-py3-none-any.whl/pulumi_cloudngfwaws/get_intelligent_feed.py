# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIntelligentFeedResult',
    'AwaitableGetIntelligentFeedResult',
    'get_intelligent_feed',
    'get_intelligent_feed_output',
]

@pulumi.output_type
class GetIntelligentFeedResult:
    """
    A collection of values returned by getIntelligentFeed.
    """
    def __init__(__self__, audit_comment=None, certificate=None, config_type=None, description=None, frequency=None, id=None, name=None, rulestack=None, scope=None, time=None, type=None, update_token=None, url=None):
        if audit_comment and not isinstance(audit_comment, str):
            raise TypeError("Expected argument 'audit_comment' to be a str")
        pulumi.set(__self__, "audit_comment", audit_comment)
        if certificate and not isinstance(certificate, str):
            raise TypeError("Expected argument 'certificate' to be a str")
        pulumi.set(__self__, "certificate", certificate)
        if config_type and not isinstance(config_type, str):
            raise TypeError("Expected argument 'config_type' to be a str")
        pulumi.set(__self__, "config_type", config_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if frequency and not isinstance(frequency, str):
            raise TypeError("Expected argument 'frequency' to be a str")
        pulumi.set(__self__, "frequency", frequency)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rulestack and not isinstance(rulestack, str):
            raise TypeError("Expected argument 'rulestack' to be a str")
        pulumi.set(__self__, "rulestack", rulestack)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if time and not isinstance(time, int):
            raise TypeError("Expected argument 'time' to be a int")
        pulumi.set(__self__, "time", time)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_token and not isinstance(update_token, str):
            raise TypeError("Expected argument 'update_token' to be a str")
        pulumi.set(__self__, "update_token", update_token)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="auditComment")
    def audit_comment(self) -> builtins.str:
        """
        The audit comment.
        """
        return pulumi.get(self, "audit_comment")

    @property
    @pulumi.getter
    def certificate(self) -> builtins.str:
        """
        The certificate profile.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[builtins.str]:
        """
        Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
        """
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        """
        Update frequency. Valid values are `HOURLY` or `DAILY`.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rulestack(self) -> builtins.str:
        """
        The rulestack.
        """
        return pulumi.get(self, "rulestack")

    @property
    @pulumi.getter
    def scope(self) -> Optional[builtins.str]:
        """
        The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def time(self) -> builtins.int:
        """
        The time to poll for updates if frequency is daily. The number must be between [0, 23] incluside.
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The intelligent feed type. Valid values are `IP_LIST` or `URL_LIST`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateToken")
    def update_token(self) -> builtins.str:
        """
        The update token.
        """
        return pulumi.get(self, "update_token")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The intelligent feed source.
        """
        return pulumi.get(self, "url")


class AwaitableGetIntelligentFeedResult(GetIntelligentFeedResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntelligentFeedResult(
            audit_comment=self.audit_comment,
            certificate=self.certificate,
            config_type=self.config_type,
            description=self.description,
            frequency=self.frequency,
            id=self.id,
            name=self.name,
            rulestack=self.rulestack,
            scope=self.scope,
            time=self.time,
            type=self.type,
            update_token=self.update_token,
            url=self.url)


def get_intelligent_feed(config_type: Optional[builtins.str] = None,
                         name: Optional[builtins.str] = None,
                         rulestack: Optional[builtins.str] = None,
                         scope: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIntelligentFeedResult:
    """
    Data source for retrieving intelligent feed information.

    ## Admin Permission Type

    * `Rulestack` (for `scope="Local"`)
    * `Global Rulestack` (for `scope="Global"`)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudngfwaws as cloudngfwaws

    r = cloudngfwaws.Rulestack("r",
        name="my-rulestack",
        scope="Local",
        account_id="12345",
        description="Made by Pulumi",
        profile_config={
            "anti_spyware": "BestPractice",
        })
    example = cloudngfwaws.get_intelligent_feed_output(rulestack=r.name,
        name="foobar")
    ```


    :param builtins.str config_type: Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
    :param builtins.str name: The name.
    :param builtins.str rulestack: The rulestack.
    :param builtins.str scope: The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
    """
    __args__ = dict()
    __args__['configType'] = config_type
    __args__['name'] = name
    __args__['rulestack'] = rulestack
    __args__['scope'] = scope
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudngfwaws:index/getIntelligentFeed:getIntelligentFeed', __args__, opts=opts, typ=GetIntelligentFeedResult).value

    return AwaitableGetIntelligentFeedResult(
        audit_comment=pulumi.get(__ret__, 'audit_comment'),
        certificate=pulumi.get(__ret__, 'certificate'),
        config_type=pulumi.get(__ret__, 'config_type'),
        description=pulumi.get(__ret__, 'description'),
        frequency=pulumi.get(__ret__, 'frequency'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        rulestack=pulumi.get(__ret__, 'rulestack'),
        scope=pulumi.get(__ret__, 'scope'),
        time=pulumi.get(__ret__, 'time'),
        type=pulumi.get(__ret__, 'type'),
        update_token=pulumi.get(__ret__, 'update_token'),
        url=pulumi.get(__ret__, 'url'))
def get_intelligent_feed_output(config_type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                name: Optional[pulumi.Input[builtins.str]] = None,
                                rulestack: Optional[pulumi.Input[builtins.str]] = None,
                                scope: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIntelligentFeedResult]:
    """
    Data source for retrieving intelligent feed information.

    ## Admin Permission Type

    * `Rulestack` (for `scope="Local"`)
    * `Global Rulestack` (for `scope="Global"`)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudngfwaws as cloudngfwaws

    r = cloudngfwaws.Rulestack("r",
        name="my-rulestack",
        scope="Local",
        account_id="12345",
        description="Made by Pulumi",
        profile_config={
            "anti_spyware": "BestPractice",
        })
    example = cloudngfwaws.get_intelligent_feed_output(rulestack=r.name,
        name="foobar")
    ```


    :param builtins.str config_type: Retrieve either the candidate or running config. Valid values are `candidate` or `running`. Defaults to `candidate`.
    :param builtins.str name: The name.
    :param builtins.str rulestack: The rulestack.
    :param builtins.str scope: The rulestack's scope. A local rulestack will require that you've retrieved a LRA JWT. A global rulestack will require that you've retrieved a GRA JWT. Valid values are `Local` or `Global`. Defaults to `Local`.
    """
    __args__ = dict()
    __args__['configType'] = config_type
    __args__['name'] = name
    __args__['rulestack'] = rulestack
    __args__['scope'] = scope
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudngfwaws:index/getIntelligentFeed:getIntelligentFeed', __args__, opts=opts, typ=GetIntelligentFeedResult)
    return __ret__.apply(lambda __response__: GetIntelligentFeedResult(
        audit_comment=pulumi.get(__response__, 'audit_comment'),
        certificate=pulumi.get(__response__, 'certificate'),
        config_type=pulumi.get(__response__, 'config_type'),
        description=pulumi.get(__response__, 'description'),
        frequency=pulumi.get(__response__, 'frequency'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        rulestack=pulumi.get(__response__, 'rulestack'),
        scope=pulumi.get(__response__, 'scope'),
        time=pulumi.get(__response__, 'time'),
        type=pulumi.get(__response__, 'type'),
        update_token=pulumi.get(__response__, 'update_token'),
        url=pulumi.get(__response__, 'url')))
