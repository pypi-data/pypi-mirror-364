[build-system]
requires = ["setuptools>=68", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "tinty"
dynamic = ["version"]
description = "A Python library for terminal text colorization and highlighting"
authors = [
    {name = "Jimmy"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Terminals",
    "Topic :: Text Processing",
    "Topic :: Utilities",
]
keywords = ["color", "terminal", "ansi", "highlighting", "text", "cli"]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
cli = [
    "click>=8.0",
]

[project.urls]
Homepage = "https://github.com/jim-my/tinty"
Documentation = "https://github.com/jim-my/tinty"
Repository = "https://github.com/jim-my/tinty"
Issues = "https://github.com/jim-my/tinty/issues"

[project.scripts]
tinty = "tinty.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools_scm]

[tool.poetry]
name = "tinty"
version = "0.1.10"  # managed by setuptools-scm
description = "A Python library for terminal text colorization and highlighting"
authors = ["Jimmy"]
readme = "README.md"
homepage = "https://github.com/jim-my/tinty"
repository = "https://github.com/jim-my/tinty"
documentation = "https://github.com/jim-my/tinty"
keywords = ["color", "terminal", "ansi", "highlighting", "text", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Terminals",
    "Topic :: Text Processing",
    "Topic :: Utilities",
]
packages = [
    {include = "tinty", from = "src"}
]

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "semver"

[tool.poetry.dependencies]
python = "^3.9"
click = {version = "^8.0", optional = true}

[tool.poetry.extras]
cli = ["click"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
ruff = "^0.1.0"
mypy = "^1.0"
pre-commit = "^3.0"
twine = "^4.0"
build = "^1.0"
poetry-dynamic-versioning = "^1.0"

[tool.poetry.scripts]
tinty = "tinty.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88
target-version = "py39"
src = ["src"]
preview = true

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "S",     # bandit (security)
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate (remove commented code)
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "NPY",   # numpy
    "PERF",  # perflint
    "RUF",   # ruff-specific rules
]
ignore = [
    "S101",    # Use of assert
    "S311",    # Use of random for non-security purposes
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "TRY003",  # Avoid specifying long messages in exceptions
    "PD901",   # df is a bad variable name (pandas)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert in tests
    "ARG001",  # Unused function argument
    "S106",    # Possible hardcoded password
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import at top level (allow in tests)
    "SIM117",  # Nested with statements (common in tests)
    "PLR6301", # Method could be static (test methods are fine as instance methods)
    "PLC1901", # Empty string comparison (explicit is better in tests)
    "PLR6201", # Use set literal (lists are more readable in tests)
]
"examples/**/*.py" = [
    "T201",    # Allow print statements in examples
    "PLC0415", # Import at top level (allow in examples)
    "E501",    # Line too long (examples can be longer)
]
"scripts/**/*.py" = [
    "T201",    # Allow print statements in scripts
    "PLC0415", # Import at top level (allow in scripts)
    "E501",    # Line too long (scripts can be longer)
]
"src/tinty/cli.py" = [
    "T201",    # Allow print statements in CLI
    "PERF203", # try-except in loop (acceptable for CLI)
    "E501",    # Line too long (CLI can be longer)
]
"src/tinty/color_codes.py" = [
    "PLC0415", # Import at top level (re import in function)
    "E501",    # Line too long (regex pattern)
    "PLR6301", # Method could be static (keeping as instance methods for consistency)
    "PLR6201", # Use set literal (tuple is intentional for readability)
]
"src/tinty/tinty.py" = [
    "PLR0912", # Too many branches (complex highlighting logic)
    "ARG002",  # Unused argument (value in __init__)
    "PERF401", # List comprehension suggestion (readability over perf)
    "E501",    # Line too long (complex type signatures)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601", "B311"]  # B311: random is OK for color selection

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow untyped defs for now
disallow_incomplete_defs = false  # Allow incomplete defs for now
check_untyped_defs = true
disallow_untyped_decorators = false  # Allow untyped decorators for now
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = false  # Disable strict equality for enum comparisons
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "examples.*"
disallow_untyped_defs = false
disallow_untyped_calls = false
