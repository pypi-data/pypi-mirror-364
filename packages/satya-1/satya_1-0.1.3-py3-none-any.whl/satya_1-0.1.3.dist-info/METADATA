Metadata-Version: 2.4
Name: satya-1
Version: 0.1.3
Summary: Satya - Educational Python interpreter for data structures and algorithms in natural language.
Author: Satya Bharadwaj Vemparala
Author-email: vvempara@gitam.in.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: license-file
Dynamic: requires-python
Dynamic: summary

# satya-1

Write and learn data structures and algorithms in easy, everyday languageâ€”no complex code, just simple commands.

## Installation

```bash
pip install satya-1
```

## Basic Usage

```python
from satya import SatyaInterpreter

interpreter = SatyaInterpreter()
print(interpreter.run("Create linked list with 3 nodes"))
print(interpreter.run("Add satya, 1, 2, 3"))
print(interpreter.run("Remove 2nd element"))
print(interpreter.run("List show"))
```

## More Use Cases

### Stack Operations
```python
interpreter.run("Create stack")
interpreter.run("Push X")
interpreter.run("Pop")
interpreter.run("Stack show")
```

### Queue Operations
```python
interpreter.run("Create queue")
interpreter.run("Enqueue 5,6,7")
interpreter.run("Dequeue")
interpreter.run("Queue show")
```

### Graph Operations
```python
interpreter.run("Create graph")
interpreter.run("Add edge A B")
interpreter.run("Add edge B C")
interpreter.run("Show graph")
interpreter.run("DFS A")
interpreter.run("BFS A")
```

### Math & Logic
```python
interpreter.run("Is 121 palindrome?")
interpreter.run("Factorial of 5")
interpreter.run("Fibonacci till 10")
interpreter.run("Sort 5 1 3 2")
interpreter.run("Search 3 in 1 2 3 4")
interpreter.run("Is 153 armstrong?")
interpreter.run("Is 29 prime?")
```

## Advantages
- **Natural Language Interface:** Use plain English to interact with data structures and algorithms.
- **Educational:** Great for teaching and learning basic data structures and algorithms.
- **Quick Prototyping:** Instantly test logic and structure operations without boilerplate code.
- **Extensible:** Easily add new commands or extend existing ones for custom educational needs.
- **No Dependencies:** Pure Python, no external requirements.

## License
MIT
