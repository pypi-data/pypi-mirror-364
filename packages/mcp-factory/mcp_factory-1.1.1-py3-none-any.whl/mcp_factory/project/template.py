"""BasicTemplate: MVP version of single standard project template

Focus on core functionality validation, avoiding template selection complexity
"""

import textwrap


class BasicTemplate:
    """MVP version: Single standard template

    Design philosophy:
    - Avoid template selection complexity, focus on validating core processes
    - Single standard structure to meet 90% of user needs
    - Only includes core methods used directly by Builder
    - Supports MCP's three core capabilities: tools, resources, prompts
    - Minimalist principle: empty directory structure, no example files
    """

    def __init__(self) -> None:
        """Initialize basic template instance."""
        self.template_name = "basic-mcp-server"
        self.version = "1.0.0"

    def get_structure(self) -> dict[str, str]:
        """Return standard project structure definition - core Builder usage"""
        return {
            "config.yaml": "Server configuration file",
            "pyproject.toml": "Python project configuration",
            "server.py": "Server entry file",
            "README.md": "Project documentation",
            "CHANGELOG.md": "Version change log",
            ".env": "Environment variables configuration file",
            ".gitignore": "Git ignore file",
            "tools/": "Tools implementation directory",
            "resources/": "Resources implementation directory",
            "prompts/": "Prompt template directory",
        }

    def get_server_template(self) -> str:
        """Return server entry file template - core Builder usage"""
        return textwrap.dedent(
            '''
            #!/usr/bin/env python3
            """
            {description}
            Generated by MCP Factory

            This server automatically discovers and registers components from:
            - tools/ directory: @server.tool() functions
            - resources/ directory: @server.resource() functions
            - prompts/ directory: @server.prompt() functions
            """

            import sys
            import yaml
            from pathlib import Path
            from mcp_factory.server import ManagedServer

            class ConfigurationError(Exception):
                \"\"\"Configuration error\"\"\"
                pass

            def load_config():
                """Load and validate configuration"""
                config_path = Path(__file__).parent / "config.yaml"
                try:
                    with open(config_path, 'r', encoding='utf-8') as f:
                        config = yaml.safe_load(f)

                    # Validate required configuration
                    if not config or 'server' not in config:
                        raise ConfigurationError("Invalid configuration: missing 'server' section")

                    server_config = config['server']
                    if 'name' not in server_config:
                        raise ConfigurationError("Invalid configuration: missing 'server.name'")

                    return config

                except FileNotFoundError:
                    print(f"Error: Configuration file not found: {{config_path}}")
                    sys.exit(1)
                except ConfigurationError as e:
                    print(f"Error: {{e}}")
                    sys.exit(1)

            def create_server(config):
                """Create and configure the ManagedServer"""
                server_config = config['server']

                # Create server with basic configuration first
                server_params = {{
                    'name': server_config['name'],
                    'instructions': server_config.get('instructions', ''),
                    'expose_management_tools': server_config.get('expose_management_tools', True)
                }}

                # Load middleware from configuration
                try:
                    from mcp_factory.middleware import load_middleware_from_config
                    middleware_instances = load_middleware_from_config(config)
                    if middleware_instances:
                        server_params['middleware'] = middleware_instances
                        print(f"✅ Loaded {{len(middleware_instances)}} middleware(s)")
                except ImportError:
                    print("⚠️  Middleware support not available, skipping middleware loading")
                except Exception as e:
                    print(f"❌ Failed to load middleware: {{e}}")

                server = ManagedServer(**server_params)

                # Configure external servers if present
                if 'mcpServers' in config:
                    try:
                        from mcp_factory.mounting import ServerRegistry
                        registry = ServerRegistry(server)
                        server_configs = registry.parse_external_servers_config(config)
                        registry.register_servers(server_configs)
                        lifespan = registry.create_lifespan({{"auto_start": True}})
                        if lifespan:
                            server._lifespan = lifespan
                            print(f"🔗 External servers configured")
                    except ImportError:
                        print("⚠️  ServerRegistry not available, skipping external servers")
                    except Exception as e:
                        print(f"⚠️  External servers configuration failed: {{e}}")

                # Store full config for component registration
                server._config = config

                return server

            def register_components(server):
                """Register project components using ComponentManager"""
                try:
                    from mcp_factory.project.components import ComponentManager
                    project_path = Path(__file__).parent
                    ComponentManager.register_components(server, project_path)
                    print(f"✅ Components registered successfully")
                except ImportError:
                    print("⚠️  ComponentManager not available, skipping auto-discovery")
                except Exception as e:
                    print(f"⚠️  Component registration failed: {{e}}")
                    print("💡 You can still add tools manually using @server.tool()")

            def main():
                """Main entry point"""
                print("🚀 Starting MCP Server...")

                # Load configuration
                config = load_config()
                print(f"📋 Loaded configuration for: {{config['server']['name']}}")

                # Create server
                server = create_server(config)
                print(f"🏗️  Created server: {{server.name}}")

                # Register components
                register_components(server)

                # Start server
                print(f"🎯 Instructions: {{server.instructions}}")
                print("🔄 Starting server (Press Ctrl+C to stop)...")

                try:
                    server.run()
                except KeyboardInterrupt:
                    print("\\n👋 Server stopped by user")
                except Exception as e:
                    print(f"❌ Server error: {{e}}")
                    sys.exit(1)

            if __name__ == "__main__":
                main()
        '''
        ).strip()

    def get_pyproject_template(self) -> str:
        """Return pyproject.toml template"""
        return textwrap.dedent(
            """
            [build-system]
            requires = ["setuptools>=61.0", "wheel"]
            build-backend = "setuptools.build_meta"

            [project]
            name = "{name}"
            version = "1.0.0"
            description = "{description}"
            readme = "README.md"
            requires-python = ">=3.10"
            dependencies = [
                "mcp-factory>=0.1.0",
                "pydantic>=2.0.0",
                "pyyaml>=6.0.0"
            ]

            [project.optional-dependencies]
            dev = [
                "pytest>=7.0.0",
                "pytest-asyncio>=0.21.0",
                "black>=23.0.0",
                "ruff>=0.1.0"
            ]

            [tool.black]
            line-length = 88
            target-version = ["py310"]

            [tool.ruff]
            line-length = 88
            target-version = "py310"
        """
        ).strip()

    def get_readme_template(self) -> str:
        """Return README.md template"""
        return textwrap.dedent(
            """
            # {name}

            {description}

            ## Quick Start

            ```bash
            # Install dependencies
            pip install -e .

            # Start server
            python server.py
            ```

            ## Project Structure

            ```
            {name}/
            ├── config.yaml          # Server configuration
            ├── pyproject.toml       # Python project configuration
            ├── server.py            # Server entry file
            ├── README.md            # Documentation
            ├── CHANGELOG.md         # Version change log
            ├── .env                 # Environment variables configuration
            ├── .gitignore           # Git ignore file
            ├── tools/               # Tools implementation directory
            ├── resources/           # Resources implementation directory
            └── prompts/             # Prompt template directory
            ```

            ## Development

            Edit `server.py` to add your functionality:

            ```python
            @server.tool()
            def my_tool(arg: str) -> str:
                \"\"\"Tool description\"\"\"
                return f"Result: {{{{arg}}}}"
            ```

            ---

            *Generated by [MCP Factory](https://github.com/your-org/mcp-factory)*
        """
        ).strip()

    def get_env_template(self) -> str:
        """Return .env file template"""
        return textwrap.dedent(
            """
            # JWT authentication configuration
            FASTMCP_AUTH_BEARER_ISSUER=https://your-auth-server.com
            FASTMCP_AUTH_BEARER_AUDIENCE=your-app-name
            FASTMCP_AUTH_BEARER_PUBLIC_KEY="-----BEGIN PUBLIC KEY-----
            # Please replace with your JWT verification public key
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...
            -----END PUBLIC KEY-----"

            # Optional: JWKS endpoint (for dynamic key retrieval)
            # FASTMCP_AUTH_BEARER_JWKS_URI=https://your-auth-server.com/.well-known/jwks.json

            # Other environment variables
            DEBUG=true
            LOG_LEVEL=INFO
        """
        ).strip()

    def get_changelog_template(self) -> str:
        """Return CHANGELOG.md template"""
        return textwrap.dedent(
            """
            # Changelog

            All notable changes to this MCP server will be documented in this file.

            The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
            and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

            ## [Unreleased]

            ### Added
            - Initial MCP server implementation

            ### Changed

            ### Deprecated

            ### Removed

            ### Fixed

            ### Security

            ## [1.0.0] - {date}

            ### Added
            - Initial release
            - Basic server configuration
            - Core MCP functionality
            - Tools, resources, and prompts modules
        """
        ).strip()

    def get_gitignore_template(self) -> str:
        """Return .gitignore file template"""
        return textwrap.dedent(
            """
            # Python
            __pycache__/
            *.py[cod]
            *$py.class
            *.so

            # Distribution / packaging
            .Python
            build/
            develop-eggs/
            dist/
            downloads/
            eggs/
            .eggs/
            lib/
            lib64/
            parts/
            sdist/
            var/
            wheels/
            *.egg-info/
            .installed.cfg
            *.egg
            MANIFEST

            # Unit test / coverage reports
            htmlcov/
            .tox/
            .coverage
            .coverage.*
            .cache
            nosetests.xml
            coverage.xml
            *.cover
            .hypothesis/
            .pytest_cache/

            # Environments
            .env
            .env.*
            .venv
            env/
            venv/
            ENV/
            env.bak/
            venv.bak/

            # IDE
            .vscode/
            .idea/
            *.swp
            *.swo

            # OS
            .DS_Store
            Thumbs.db
            Desktop.ini

            # Logs
            *.log
            logs/

            # MCP Server specific
            cache/
            data/local/
            temp/
            *.pid
            *.sock

            # Local config overrides
            config.local.yaml
            .env.production
            .env.staging
        """
        ).strip()
