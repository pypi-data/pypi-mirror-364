
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.process.equipment
import jneqsim.neqsim.process.mechanicaldesign
import typing



class ControlValveSizing_IEC_60534:
    def __init__(self): ...
    @staticmethod
    def calculateFlowRateFromCvAndValveOpeningGas(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, boolean: bool) -> float: ...
    @staticmethod
    def calculateFlowRateFromValveOpeningLiquid(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, boolean: bool) -> float: ...
    @staticmethod
    def calculateValveOpeningFromFlowRateGas(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, boolean: bool) -> float: ...
    @staticmethod
    def calculateValveOpeningFromFlowRateLiquid(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, boolean: bool) -> float: ...
    @staticmethod
    def findOutletPressureForFixedCvGas(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, boolean: bool) -> float: ...
    @staticmethod
    def findOutletPressureForFixedCvLiquid(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, boolean: bool, boolean2: bool) -> float: ...
    @staticmethod
    def sizeControlValve(fluidType: 'ControlValveSizing_IEC_60534.FluidType', double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, double13: float, double14: float, boolean: bool, boolean2: bool, boolean3: bool) -> java.util.Map[java.lang.String, typing.Any]: ...
    @staticmethod
    def sizeControlValveGas(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, double13: float, double14: float, boolean: bool, boolean2: bool, boolean3: bool) -> java.util.Map[java.lang.String, typing.Any]: ...
    @staticmethod
    def sizeControlValveLiquid(double: float, double2: float, double3: float, double4: float, double5: float, double6: float, double7: float, double8: float, double9: float, double10: float, double11: float, double12: float, boolean: bool, boolean2: bool, boolean3: bool) -> java.util.Map[java.lang.String, typing.Any]: ...
    class FluidType(java.lang.Enum['ControlValveSizing_IEC_60534.FluidType']):
        LIQUID: typing.ClassVar['ControlValveSizing_IEC_60534.FluidType'] = ...
        GAS: typing.ClassVar['ControlValveSizing_IEC_60534.FluidType'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: typing.Union[java.lang.String, str]) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: typing.Union[java.lang.String, str]) -> 'ControlValveSizing_IEC_60534.FluidType': ...
        @staticmethod
        def values() -> typing.MutableSequence['ControlValveSizing_IEC_60534.FluidType']: ...

class ValveMechanicalDesign(jneqsim.neqsim.process.mechanicaldesign.MechanicalDesign):
    def __init__(self, processEquipmentInterface: jneqsim.neqsim.process.equipment.ProcessEquipmentInterface): ...
    def calcDesign(self) -> None: ...
    def calcValveSize(self) -> java.util.Map[java.lang.String, typing.Any]: ...
    def displayResults(self) -> None: ...
    def getValveSizingMethod(self) -> ControlValveSizing_IEC_60534: ...
    def readDesignSpecifications(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.process.mechanicaldesign.valve")``.

    ControlValveSizing_IEC_60534: typing.Type[ControlValveSizing_IEC_60534]
    ValveMechanicalDesign: typing.Type[ValveMechanicalDesign]
