# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import dashvector_pb2 as dashvector__pb2


class DashVectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_collection = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/create_collection',
                request_serializer=dashvector__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.CreateCollectionResponse.FromString,
                )
        self.delete_collection = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/delete_collection',
                request_serializer=dashvector__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.DeleteCollectionResponse.FromString,
                )
        self.describe_collection = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/describe_collection',
                request_serializer=dashvector__pb2.DescribeCollectionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.DescribeCollectionResponse.FromString,
                )
        self.list_collections = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/list_collections',
                request_serializer=dashvector__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=dashvector__pb2.ListCollectionsResponse.FromString,
                )
        self.stats_collection = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/stats_collection',
                request_serializer=dashvector__pb2.StatsCollectionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.StatsCollectionResponse.FromString,
                )
        self.create_partition = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/create_partition',
                request_serializer=dashvector__pb2.CreatePartitionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.CreatePartitionResponse.FromString,
                )
        self.delete_partition = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/delete_partition',
                request_serializer=dashvector__pb2.DeletePartitionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.DeletePartitionResponse.FromString,
                )
        self.describe_partition = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/describe_partition',
                request_serializer=dashvector__pb2.DescribePartitionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.DescribePartitionResponse.FromString,
                )
        self.stats_partition = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/stats_partition',
                request_serializer=dashvector__pb2.StatsPartitionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.StatsPartitionResponse.FromString,
                )
        self.list_partitions = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/list_partitions',
                request_serializer=dashvector__pb2.ListPartitionsRequest.SerializeToString,
                response_deserializer=dashvector__pb2.ListPartitionsResponse.FromString,
                )
        self.insert_doc = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/insert_doc',
                request_serializer=dashvector__pb2.InsertDocRequest.SerializeToString,
                response_deserializer=dashvector__pb2.InsertDocResponse.FromString,
                )
        self.update_doc = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/update_doc',
                request_serializer=dashvector__pb2.UpdateDocRequest.SerializeToString,
                response_deserializer=dashvector__pb2.UpdateDocResponse.FromString,
                )
        self.upsert_doc = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/upsert_doc',
                request_serializer=dashvector__pb2.UpsertDocRequest.SerializeToString,
                response_deserializer=dashvector__pb2.UpsertDocResponse.FromString,
                )
        self.delete_doc = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/delete_doc',
                request_serializer=dashvector__pb2.DeleteDocRequest.SerializeToString,
                response_deserializer=dashvector__pb2.DeleteDocResponse.FromString,
                )
        self.query_doc = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/query_doc',
                request_serializer=dashvector__pb2.QueryDocRequest.SerializeToString,
                response_deserializer=dashvector__pb2.QueryDocResponse.FromString,
                )
        self.query_doc_group_by = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/query_doc_group_by',
                request_serializer=dashvector__pb2.QueryDocGroupByRequest.SerializeToString,
                response_deserializer=dashvector__pb2.QueryDocGroupByResponse.FromString,
                )
        self.fetch_doc = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/fetch_doc',
                request_serializer=dashvector__pb2.FetchDocRequest.SerializeToString,
                response_deserializer=dashvector__pb2.FetchDocResponse.FromString,
                )
        self.get_version = channel.unary_unary(
                '/proxima.dashvector.proto.DashVectorService/get_version',
                request_serializer=dashvector__pb2.GetVersionRequest.SerializeToString,
                response_deserializer=dashvector__pb2.GetVersionResponse.FromString,
                )


class DashVectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_collection(self, request, context):
        """Create a collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_collection(self, request, context):
        """Delete a collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def describe_collection(self, request, context):
        """Get information of a collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_collections(self, request, context):
        """Get all collection information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stats_collection(self, request, context):
        """Get collection statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_partition(self, request, context):
        """Create a partition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_partition(self, request, context):
        """Delete a partition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def describe_partition(self, request, context):
        """Get information of a partition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stats_partition(self, request, context):
        """Get partition statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_partitions(self, request, context):
        """List partitions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_doc(self, request, context):
        """Insert records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_doc(self, request, context):
        """Update records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upsert_doc(self, request, context):
        """Upsert records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_doc(self, request, context):
        """Delete records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_doc(self, request, context):
        """Knn query docs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_doc_group_by(self, request, context):
        """Knn group by query docs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fetch_doc(self, request, context):
        """Fetch docs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_version(self, request, context):
        """Get server version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DashVectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.create_collection,
                    request_deserializer=dashvector__pb2.CreateCollectionRequest.FromString,
                    response_serializer=dashvector__pb2.CreateCollectionResponse.SerializeToString,
            ),
            'delete_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_collection,
                    request_deserializer=dashvector__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=dashvector__pb2.DeleteCollectionResponse.SerializeToString,
            ),
            'describe_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.describe_collection,
                    request_deserializer=dashvector__pb2.DescribeCollectionRequest.FromString,
                    response_serializer=dashvector__pb2.DescribeCollectionResponse.SerializeToString,
            ),
            'list_collections': grpc.unary_unary_rpc_method_handler(
                    servicer.list_collections,
                    request_deserializer=dashvector__pb2.ListCollectionsRequest.FromString,
                    response_serializer=dashvector__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'stats_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.stats_collection,
                    request_deserializer=dashvector__pb2.StatsCollectionRequest.FromString,
                    response_serializer=dashvector__pb2.StatsCollectionResponse.SerializeToString,
            ),
            'create_partition': grpc.unary_unary_rpc_method_handler(
                    servicer.create_partition,
                    request_deserializer=dashvector__pb2.CreatePartitionRequest.FromString,
                    response_serializer=dashvector__pb2.CreatePartitionResponse.SerializeToString,
            ),
            'delete_partition': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_partition,
                    request_deserializer=dashvector__pb2.DeletePartitionRequest.FromString,
                    response_serializer=dashvector__pb2.DeletePartitionResponse.SerializeToString,
            ),
            'describe_partition': grpc.unary_unary_rpc_method_handler(
                    servicer.describe_partition,
                    request_deserializer=dashvector__pb2.DescribePartitionRequest.FromString,
                    response_serializer=dashvector__pb2.DescribePartitionResponse.SerializeToString,
            ),
            'stats_partition': grpc.unary_unary_rpc_method_handler(
                    servicer.stats_partition,
                    request_deserializer=dashvector__pb2.StatsPartitionRequest.FromString,
                    response_serializer=dashvector__pb2.StatsPartitionResponse.SerializeToString,
            ),
            'list_partitions': grpc.unary_unary_rpc_method_handler(
                    servicer.list_partitions,
                    request_deserializer=dashvector__pb2.ListPartitionsRequest.FromString,
                    response_serializer=dashvector__pb2.ListPartitionsResponse.SerializeToString,
            ),
            'insert_doc': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_doc,
                    request_deserializer=dashvector__pb2.InsertDocRequest.FromString,
                    response_serializer=dashvector__pb2.InsertDocResponse.SerializeToString,
            ),
            'update_doc': grpc.unary_unary_rpc_method_handler(
                    servicer.update_doc,
                    request_deserializer=dashvector__pb2.UpdateDocRequest.FromString,
                    response_serializer=dashvector__pb2.UpdateDocResponse.SerializeToString,
            ),
            'upsert_doc': grpc.unary_unary_rpc_method_handler(
                    servicer.upsert_doc,
                    request_deserializer=dashvector__pb2.UpsertDocRequest.FromString,
                    response_serializer=dashvector__pb2.UpsertDocResponse.SerializeToString,
            ),
            'delete_doc': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_doc,
                    request_deserializer=dashvector__pb2.DeleteDocRequest.FromString,
                    response_serializer=dashvector__pb2.DeleteDocResponse.SerializeToString,
            ),
            'query_doc': grpc.unary_unary_rpc_method_handler(
                    servicer.query_doc,
                    request_deserializer=dashvector__pb2.QueryDocRequest.FromString,
                    response_serializer=dashvector__pb2.QueryDocResponse.SerializeToString,
            ),
            'query_doc_group_by': grpc.unary_unary_rpc_method_handler(
                    servicer.query_doc_group_by,
                    request_deserializer=dashvector__pb2.QueryDocGroupByRequest.FromString,
                    response_serializer=dashvector__pb2.QueryDocGroupByResponse.SerializeToString,
            ),
            'fetch_doc': grpc.unary_unary_rpc_method_handler(
                    servicer.fetch_doc,
                    request_deserializer=dashvector__pb2.FetchDocRequest.FromString,
                    response_serializer=dashvector__pb2.FetchDocResponse.SerializeToString,
            ),
            'get_version': grpc.unary_unary_rpc_method_handler(
                    servicer.get_version,
                    request_deserializer=dashvector__pb2.GetVersionRequest.FromString,
                    response_serializer=dashvector__pb2.GetVersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proxima.dashvector.proto.DashVectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DashVectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/create_collection',
            dashvector__pb2.CreateCollectionRequest.SerializeToString,
            dashvector__pb2.CreateCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/delete_collection',
            dashvector__pb2.DeleteCollectionRequest.SerializeToString,
            dashvector__pb2.DeleteCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def describe_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/describe_collection',
            dashvector__pb2.DescribeCollectionRequest.SerializeToString,
            dashvector__pb2.DescribeCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_collections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/list_collections',
            dashvector__pb2.ListCollectionsRequest.SerializeToString,
            dashvector__pb2.ListCollectionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stats_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/stats_collection',
            dashvector__pb2.StatsCollectionRequest.SerializeToString,
            dashvector__pb2.StatsCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/create_partition',
            dashvector__pb2.CreatePartitionRequest.SerializeToString,
            dashvector__pb2.CreatePartitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/delete_partition',
            dashvector__pb2.DeletePartitionRequest.SerializeToString,
            dashvector__pb2.DeletePartitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def describe_partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/describe_partition',
            dashvector__pb2.DescribePartitionRequest.SerializeToString,
            dashvector__pb2.DescribePartitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stats_partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/stats_partition',
            dashvector__pb2.StatsPartitionRequest.SerializeToString,
            dashvector__pb2.StatsPartitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_partitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/list_partitions',
            dashvector__pb2.ListPartitionsRequest.SerializeToString,
            dashvector__pb2.ListPartitionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_doc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/insert_doc',
            dashvector__pb2.InsertDocRequest.SerializeToString,
            dashvector__pb2.InsertDocResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_doc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/update_doc',
            dashvector__pb2.UpdateDocRequest.SerializeToString,
            dashvector__pb2.UpdateDocResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upsert_doc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/upsert_doc',
            dashvector__pb2.UpsertDocRequest.SerializeToString,
            dashvector__pb2.UpsertDocResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_doc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/delete_doc',
            dashvector__pb2.DeleteDocRequest.SerializeToString,
            dashvector__pb2.DeleteDocResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_doc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/query_doc',
            dashvector__pb2.QueryDocRequest.SerializeToString,
            dashvector__pb2.QueryDocResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_doc_group_by(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/query_doc_group_by',
            dashvector__pb2.QueryDocGroupByRequest.SerializeToString,
            dashvector__pb2.QueryDocGroupByResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fetch_doc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/fetch_doc',
            dashvector__pb2.FetchDocRequest.SerializeToString,
            dashvector__pb2.FetchDocResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.dashvector.proto.DashVectorService/get_version',
            dashvector__pb2.GetVersionRequest.SerializeToString,
            dashvector__pb2.GetVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
