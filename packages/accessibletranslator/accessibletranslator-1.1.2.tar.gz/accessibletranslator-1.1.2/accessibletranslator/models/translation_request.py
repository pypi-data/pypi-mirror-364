# coding: utf-8

"""
    AccessibleTranslator SDK API

    Official SDK API for AccessibleTranslator - automated cognitive accessibility

    The version of the OpenAPI document: 1.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TranslationRequest(BaseModel):
    """
    Request model for text translation API  This model defines the structure for text translation requests sent to the /api/translate endpoint.  Attributes:     text: The original text to be translated (required)     transformations: List of transformation names to apply (required)         Available transformations include language, clarity, structure, tone, and content modifications.  Example:     {         \"text\": \"Complex text to translate\",         \"transformations\": [\"language_literal\", \"clarity_pronouns\", \"structure_headers\"],         \"target_language\": \"Spanish\"     }
    """ # noqa: E501
    text: StrictStr
    transformations: List[StrictStr]
    input_type: Optional[StrictStr] = None
    target_language: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["text", "transformations", "input_type", "target_language"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if input_type (nullable) is None
        # and model_fields_set contains the field
        if self.input_type is None and "input_type" in self.model_fields_set:
            _dict['input_type'] = None

        # set to None if target_language (nullable) is None
        # and model_fields_set contains the field
        if self.target_language is None and "target_language" in self.model_fields_set:
            _dict['target_language'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "transformations": obj.get("transformations"),
            "input_type": obj.get("input_type"),
            "target_language": obj.get("target_language")
        })
        return _obj


