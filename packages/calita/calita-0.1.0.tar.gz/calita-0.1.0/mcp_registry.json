{
    "MCP_057e7f_1": "#!/usr/bin/env python3\n\"\"\"\nScript Description: Sorts a list of numbers using a user-specified algorithm\nGenerated for task: Create a function to sort a list of numbers\nDependencies: None (uses Python standard library)\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom typing import List, Optional, Callable\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\ndef bubble_sort(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Sorts a list of numbers using the bubble sort algorithm.\n    \n    Args:\n        numbers: List of numbers to be sorted\n        \n    Returns:\n        List of sorted numbers in ascending order\n    \"\"\"\n    n = len(numbers)\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    return numbers\n\ndef quick_sort(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Sorts a list of numbers using the quick sort algorithm.\n    \n    Args:\n        numbers: List of numbers to be sorted\n        \n    Returns:\n        List of sorted numbers in ascending order\n    \"\"\"\n    if len(numbers) <= 1:\n        return numbers\n    \n    pivot = numbers[len(numbers) // 2]\n    left = [x for x in numbers if x < pivot]\n    middle = [x for x in numbers if x == pivot]\n    right = [x for x in numbers if x > pivot]\n    \n    return quick_sort(left) + middle + quick_sort(right)\n\ndef sort_numbers(numbers: List[float], algorithm: str = 'quick') -> List[float]:\n    \"\"\"\n    Sorts a list of numbers using the specified algorithm.\n    \n    Args:\n        numbers: List of numbers to be sorted\n        algorithm: Sorting algorithm to use ('bubble' or 'quick')\n        \n    Returns:\n        List of sorted numbers in ascending order\n        \n    Raises:\n        ValueError: If an unsupported algorithm is specified\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list\")\n        \n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise ValueError(\"All elements in the list must be numeric\")\n    \n    if algorithm == 'bubble':\n        logger.info(\"Using bubble sort algorithm\")\n        return bubble_sort(numbers)\n    elif algorithm == 'quick':\n        logger.info(\"Using quick sort algorithm\")\n        return quick_sort(numbers)\n    else:\n        raise ValueError(f\"Unsupported sorting algorithm: {algorithm}\")\n\ndef main():\n    \"\"\"\n    Main function that implements the core functionality.\n    \"\"\"\n    try:\n        logger.info(\"Starting script execution\")\n        \n        # Example input\n        input_numbers = [5, 2, 9, 1, 5, 6]\n        logger.info(f\"Original list: {input_numbers}\")\n        \n        # Sort using default quick sort\n        sorted_numbers = sort_numbers(input_numbers)\n        logger.info(f\"Sorted list: {sorted_numbers}\")\n        \n        # Demonstrate bubble sort as well\n        logger.info(\"Demonstrating bubble sort:\")\n        sorted_numbers_bubble = sort_numbers(input_numbers, algorithm='bubble')\n        logger.info(f\"Sorted list (bubble): {sorted_numbers_bubble}\")\n        \n        logger.info(\"Validation: Using Python's built-in sorted() function\")\n        logger.info(f\"Built-in sorted: {sorted(input_numbers)}\")\n        \n        # Verify that both algorithms produce the same result\n        assert sorted_numbers == sorted_numbers_bubble == sorted(input_numbers)\n        logger.info(\"All sorting methods produced identical results\")\n        \n        logger.info(\"Script execution completed successfully\")\n        return True\n        \n    except Exception as e:\n        logger.error(f\"Script execution failed: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)"
}