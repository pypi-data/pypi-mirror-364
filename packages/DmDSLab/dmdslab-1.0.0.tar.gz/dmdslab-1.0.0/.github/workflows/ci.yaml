name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,uci]
    
    - name: Run linting with Ruff
      run: |
        ruff check dmdslab/ tests/
        ruff format --check dmdslab/ tests/
    
    - name: Run type checking with mypy
      run: mypy dmdslab/
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=dmdslab --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: test
    outputs:
      package-version: ${{ steps.get-version.outputs.version }}
      can-publish-testpypi: ${{ steps.check-versions.outputs.can-publish-testpypi }}
      can-publish-pypi: ${{ steps.check-versions.outputs.can-publish-pypi }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Get package version
      id: get-version
      run: |
        # Use dedicated script to get version
        VERSION=$(grep "__version__" dmdslab/__init__.py | head -1 | sed 's/.*=.*[\"'\'']\([^\"'\'']*\)[\"'\''].*/\1/')
        echo "📦 Package version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check versions on repositories
      id: check-versions
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        
        # Check TestPyPI
        echo "🔍 Checking TestPyPI for version $VERSION..."
        if curl -s --fail "https://test.pypi.org/pypi/DmDSLab/$VERSION/json" > /dev/null 2>&1; then
          echo "⚠️ Version $VERSION already exists on TestPyPI"
          echo "can-publish-testpypi=false" >> $GITHUB_OUTPUT
        else
          echo "✅ Version $VERSION not found on TestPyPI - can publish"
          echo "can-publish-testpypi=true" >> $GITHUB_OUTPUT
        fi
        
        # Check PyPI
        echo "🔍 Checking PyPI for version $VERSION..."
        if curl -s --fail "https://pypi.org/pypi/DmDSLab/$VERSION/json" > /dev/null 2>&1; then
          echo "⚠️ Version $VERSION already exists on PyPI"
          echo "can-publish-pypi=false" >> $GITHUB_OUTPUT
        else
          echo "✅ Version $VERSION not found on PyPI - can publish"
          echo "can-publish-pypi=true" >> $GITHUB_OUTPUT
        fi

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # 🎯 Публикация на TestPyPI - только если можно публиковать
  publish-test:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/develop' && 
      needs.build.outputs.can-publish-testpypi == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/project/DmDSLab/
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Success notification
      run: |
        echo "🎉 Successfully published DmDSLab v${{ needs.build.outputs.package-version }} to TestPyPI!"
        echo "📦 Install with: pip install -i https://test.pypi.org/simple/ DmDSLab==${{ needs.build.outputs.package-version }}"

  # ⏭️ Информационный job если нельзя публиковать на TestPyPI
  skip-test:
    name: Skip TestPyPI (version exists)
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/develop' && 
      needs.build.outputs.can-publish-testpypi == 'false'

    steps:
    - name: Version exists notification
      run: |
        echo "ℹ️ Version ${{ needs.build.outputs.package-version }} already exists on TestPyPI"
        echo "🔄 To publish a new version, update the version in dmdslab/__init__.py"
        echo "📋 Current version: ${{ needs.build.outputs.package-version }}"
        echo "🔗 Existing package: https://test.pypi.org/project/DmDSLab/${{ needs.build.outputs.package-version }}/"

  # 🎯 Публикация на PyPI - только если можно публиковать
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'release' && 
      github.event.action == 'published' && 
      needs.build.outputs.can-publish-pypi == 'true'
    environment:
      name: pypi
      url: https://pypi.org/project/DmDSLab/
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Success notification
      run: |
        echo "🚀 Successfully published DmDSLab v${{ needs.build.outputs.package-version }} to PyPI!"
        echo "📦 Install with: pip install DmDSLab==${{ needs.build.outputs.package-version }}"

  # ⏭️ Ошибка если нельзя публиковать на PyPI
  skip-pypi:
    name: Skip PyPI (version exists)
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'release' && 
      github.event.action == 'published' && 
      needs.build.outputs.can-publish-pypi == 'false'

    steps:
    - name: Version exists error
      run: |
        echo "❌ Version ${{ needs.build.outputs.package-version }} already exists on PyPI!"
        echo "🔄 Please update the version in dmdslab/__init__.py before creating a release"
        echo "📋 Current version: ${{ needs.build.outputs.package-version }}"
        echo "🔗 Existing package: https://pypi.org/project/DmDSLab/${{ needs.build.outputs.package-version }}/"
        exit 1  # Fail the workflow to indicate the issue

  # 📊 Сводная информация
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && (needs.build.result == 'success')

    steps:
    - name: Print summary
      run: |
        echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package Version:** ${{ needs.build.outputs.package-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Repository Status:" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build.outputs.can-publish-testpypi }}" == "true" ]]; then
          echo "- **TestPyPI:** ✅ Available for publication" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **TestPyPI:** ⚠️ Version already exists" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build.outputs.can-publish-pypi }}" == "true" ]]; then
          echo "- **PyPI:** ✅ Available for publication" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **PyPI:** ⚠️ Version already exists" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Actions Taken:" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/develop" ]]; then
          if [[ "${{ needs.build.outputs.can-publish-testpypi }}" == "true" ]]; then
            echo "- 🚀 **TestPyPI publication triggered**" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ **TestPyPI publication skipped** (version exists)" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [[ "${{ github.event_name }}" == "release" ]]; then
          if [[ "${{ needs.build.outputs.can-publish-pypi }}" == "true" ]]; then
            echo "- 🚀 **PyPI publication triggered**" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **PyPI publication failed** (version exists)" >> $GITHUB_STEP_SUMMARY
          fi
        fi

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme

    - name: Build docs
      run: |
        mkdir -p docs/
        echo "# DmDSLab Documentation" > docs/index.md
        echo "Documentation will be available soon!" >> docs/index.md

    - name: Upload docs
      uses: actions/upload-artifact@v4
      with:
        name: docs
        path: docs/