# coding: utf-8

"""
    aind-labtracks-service

     ## aind-labtracks-service  Service to fetch data from LabTracks.  

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Expected Task view of joined tables
    """ # noqa: E501
    id: StrictStr
    type_name: Optional[StrictStr] = None
    date_start: Optional[datetime] = None
    date_end: Optional[datetime] = None
    investigator_id: Optional[StrictStr] = None
    task_description: Optional[StrictStr] = None
    task_object: Optional[StrictStr] = None
    protocol_number: Optional[StrictStr] = None
    protocol_title: Optional[StrictStr] = None
    task_status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "type_name", "date_start", "date_end", "investigator_id", "task_description", "task_object", "protocol_number", "protocol_title", "task_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type_name (nullable) is None
        # and model_fields_set contains the field
        if self.type_name is None and "type_name" in self.model_fields_set:
            _dict['type_name'] = None

        # set to None if date_start (nullable) is None
        # and model_fields_set contains the field
        if self.date_start is None and "date_start" in self.model_fields_set:
            _dict['date_start'] = None

        # set to None if date_end (nullable) is None
        # and model_fields_set contains the field
        if self.date_end is None and "date_end" in self.model_fields_set:
            _dict['date_end'] = None

        # set to None if investigator_id (nullable) is None
        # and model_fields_set contains the field
        if self.investigator_id is None and "investigator_id" in self.model_fields_set:
            _dict['investigator_id'] = None

        # set to None if task_description (nullable) is None
        # and model_fields_set contains the field
        if self.task_description is None and "task_description" in self.model_fields_set:
            _dict['task_description'] = None

        # set to None if task_object (nullable) is None
        # and model_fields_set contains the field
        if self.task_object is None and "task_object" in self.model_fields_set:
            _dict['task_object'] = None

        # set to None if protocol_number (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_number is None and "protocol_number" in self.model_fields_set:
            _dict['protocol_number'] = None

        # set to None if protocol_title (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_title is None and "protocol_title" in self.model_fields_set:
            _dict['protocol_title'] = None

        # set to None if task_status (nullable) is None
        # and model_fields_set contains the field
        if self.task_status is None and "task_status" in self.model_fields_set:
            _dict['task_status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type_name": obj.get("type_name"),
            "date_start": obj.get("date_start"),
            "date_end": obj.get("date_end"),
            "investigator_id": obj.get("investigator_id"),
            "task_description": obj.get("task_description"),
            "task_object": obj.get("task_object"),
            "protocol_number": obj.get("protocol_number"),
            "protocol_title": obj.get("protocol_title"),
            "task_status": obj.get("task_status")
        })
        return _obj


