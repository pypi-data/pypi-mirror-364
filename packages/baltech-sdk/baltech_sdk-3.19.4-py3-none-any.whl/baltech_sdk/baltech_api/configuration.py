
import abc
from io import BytesIO
from typing import Optional, NamedTuple, Union, Literal, TypedDict, Dict, List, ClassVar, Type as _Type

from typing_extensions import Self, NotRequired

from .common import safe_read_int_from_buffer, LiteralParser, FrameExecutor, BaltechApiError, PayloadTooLongError, PayloadTooShortError, InvalidPayloadError
from .typedefs import *
from .baltech_script import BaltechScript
from .template import Template
class Autoread_Rule_ConstArea_Result(NamedTuple):
    Position: 'int'
    CompareData: 'str'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'Position={ repr(self.Position) }')
        non_default_args.append(f'CompareData={ repr(self.CompareData) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Device_Run_RepeatMessageMode_Result(NamedTuple):
    Suppress: 'bool'
    Force: 'bool'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'Suppress={ repr(self.Suppress) }')
        non_default_args.append(f'Force={ repr(self.Force) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Device_Run_MaintenanceFunctionFilter_Result(NamedTuple):
    DisableReaderInfo: 'bool'
    DisableBec2Upload: 'bool'
    DisableLicenseCards: 'bool'
    DisableAdrCards: 'bool'
    DisableConfigCards: 'bool'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'DisableReaderInfo={ repr(self.DisableReaderInfo) }')
        non_default_args.append(f'DisableBec2Upload={ repr(self.DisableBec2Upload) }')
        non_default_args.append(f'DisableLicenseCards={ repr(self.DisableLicenseCards) }')
        non_default_args.append(f'DisableAdrCards={ repr(self.DisableAdrCards) }')
        non_default_args.append(f'DisableConfigCards={ repr(self.DisableConfigCards) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Device_CryptoKey_Entry_Result(NamedTuple):
    AccessRights: 'KeyAccessRights'
    Algorithm: 'CryptoAlgorithm'
    Key: 'str'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'AccessRights={ repr(self.AccessRights) }')
        non_default_args.append(f'Algorithm={ repr(self.Algorithm) }')
        non_default_args.append(f'Key={ repr(self.Key) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Device_HostSecurity_Key_Result(NamedTuple):
    AuthenticationMode: 'HostSecurityAuthenticationMode'
    DeriveKeyId: 'int'
    AesKey: 'str'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'AuthenticationMode={ repr(self.AuthenticationMode) }')
        non_default_args.append(f'DeriveKeyId={ repr(self.DeriveKeyId) }')
        non_default_args.append(f'AesKey={ repr(self.AesKey) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Custom_Crypto_Key_Result(NamedTuple):
    DenyIdentify: 'bool'
    DenyEncrypt: 'bool'
    DenyDecrypt: 'bool'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'DenyIdentify={ repr(self.DenyIdentify) }')
        non_default_args.append(f'DenyEncrypt={ repr(self.DenyEncrypt) }')
        non_default_args.append(f'DenyDecrypt={ repr(self.DenyDecrypt) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Project_VhlSettings_Iso14aVasup_Result(NamedTuple):
    FormatVersion: 'int'
    VasSupported: 'bool'
    AuthUserRequested: 'bool'
    TerminalTypeDataLength: 'int'
    TerminalType: 'int'
    TCI: 'bytes'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'FormatVersion={ repr(self.FormatVersion) }')
        non_default_args.append(f'VasSupported={ repr(self.VasSupported) }')
        non_default_args.append(f'AuthUserRequested={ repr(self.AuthUserRequested) }')
        non_default_args.append(f'TerminalTypeDataLength={ repr(self.TerminalTypeDataLength) }')
        non_default_args.append(f'TerminalType={ repr(self.TerminalType) }')
        non_default_args.append(f'TCI={ repr(self.TCI) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Project_HidSam_Confcard_Result(NamedTuple):
    HidConfigurationCard: 'bool'
    HidPreparationCard: 'bool'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'HidConfigurationCard={ repr(self.HidConfigurationCard) }')
        non_default_args.append(f'HidPreparationCard={ repr(self.HidPreparationCard) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Project_CryptoKey_Entry_Result(NamedTuple):
    AccessRights: 'KeyAccessRights'
    Algorithm: 'CryptoAlgorithm'
    Key: 'str'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'AccessRights={ repr(self.AccessRights) }')
        non_default_args.append(f'Algorithm={ repr(self.Algorithm) }')
        non_default_args.append(f'Key={ repr(self.Key) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Project_Bluetooth_AdvertizingChannels_Result(NamedTuple):
    Channel39: 'bool'
    Channel38: 'bool'
    Channel37: 'bool'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'Channel39={ repr(self.Channel39) }')
        non_default_args.append(f'Channel38={ repr(self.Channel38) }')
        non_default_args.append(f'Channel37={ repr(self.Channel37) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Protocols_BrpSerial_InterbyteTimeout_Result(NamedTuple):
    Timeout: 'int'
    LegacyFormat: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'Timeout={ repr(self.Timeout) }')
        non_default_args.append(f'LegacyFormat={ repr(self.LegacyFormat) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Protocols_Osdp_SCBKeyDefault_Result(NamedTuple):
    DiversifyFlag: 'Protocols_Osdp_SCBKeyDefault_DiversifyFlag'
    SCBKD: 'str'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'DiversifyFlag={ repr(self.DiversifyFlag) }')
        non_default_args.append(f'SCBKD={ repr(self.SCBKD) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class Protocols_Osdp_SCBKey_Result(NamedTuple):
    DiversifyFlag: 'Protocols_Osdp_SCBKey_DiversifyFlag'
    SCBK: 'str'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'DiversifyFlag={ repr(self.DiversifyFlag) }')
        non_default_args.append(f'SCBK={ repr(self.SCBK) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_DesfireFormatMasterPiccKeySettings_Result(NamedTuple):
    ConfigurationChangeable: 'bool'
    AllowCreateDeleteApp: 'bool'
    FreeDirectoryList: 'bool'
    AllowChangeMasterPiccKey: 'bool'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'ConfigurationChangeable={ repr(self.ConfigurationChangeable) }')
        non_default_args.append(f'AllowCreateDeleteApp={ repr(self.AllowCreateDeleteApp) }')
        non_default_args.append(f'FreeDirectoryList={ repr(self.FreeDirectoryList) }')
        non_default_args.append(f'AllowChangeMasterPiccKey={ repr(self.AllowChangeMasterPiccKey) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_DesfireFormatAppKeySettings_Result(NamedTuple):
    ConfigurationChangeable: 'bool'
    AllowCreateDeleteFile: 'bool'
    AllowDirectoryList: 'bool'
    AllowChangeAppMasterKey: 'bool'
    AES: 'bool'
    ThreeKeyTripleDES: 'bool'
    UseIsofileIDs: 'bool'
    KS3Presence: 'bool'
    AppSpecificCapabilityData: 'Optional[bool]' = None
    AppSpecificVcKeys: 'Optional[bool]' = None
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'ConfigurationChangeable={ repr(self.ConfigurationChangeable) }')
        non_default_args.append(f'AllowCreateDeleteFile={ repr(self.AllowCreateDeleteFile) }')
        non_default_args.append(f'AllowDirectoryList={ repr(self.AllowDirectoryList) }')
        non_default_args.append(f'AllowChangeAppMasterKey={ repr(self.AllowChangeAppMasterKey) }')
        non_default_args.append(f'AES={ repr(self.AES) }')
        non_default_args.append(f'ThreeKeyTripleDES={ repr(self.ThreeKeyTripleDES) }')
        non_default_args.append(f'UseIsofileIDs={ repr(self.UseIsofileIDs) }')
        non_default_args.append(f'KS3Presence={ repr(self.KS3Presence) }')
        if self.AppSpecificCapabilityData != None:
            non_default_args.append(f'AppSpecificCapabilityData={ repr(self.AppSpecificCapabilityData) }')
        if self.AppSpecificVcKeys != None:
            non_default_args.append(f'AppSpecificVcKeys={ repr(self.AppSpecificVcKeys) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_DesfireRandomIdKey_Result(NamedTuple):
    ReadIdKeyNo: 'int' = 0
    ReadIdKeyIdx: 'int' = 192
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        if self.ReadIdKeyNo != 0:
            non_default_args.append(f'ReadIdKeyNo={ repr(self.ReadIdKeyNo) }')
        if self.ReadIdKeyIdx != 192:
            non_default_args.append(f'ReadIdKeyIdx={ repr(self.ReadIdKeyIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_DesfireEv2FormatAppKeysetParams_Result(NamedTuple):
    KeysetVersion: 'int'
    NoKeysets: 'int'
    MaxKeySize: 'VhlCfg_File_DesfireEv2FormatAppKeysetParams_MaxKeySize'
    KeysetSettings: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'KeysetVersion={ repr(self.KeysetVersion) }')
        non_default_args.append(f'NoKeysets={ repr(self.NoKeysets) }')
        non_default_args.append(f'MaxKeySize={ repr(self.MaxKeySize) }')
        non_default_args.append(f'KeysetSettings={ repr(self.KeysetSettings) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_DesfireEv2FormatAppDAM_Result(NamedTuple):
    SlotNumber: 'int'
    SlotVersion: 'int'
    QuotaLimit: 'int'
    EncApplicationKey: 'bytes'
    DamMac: 'bytes'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'SlotNumber={ repr(self.SlotNumber) }')
        non_default_args.append(f'SlotVersion={ repr(self.SlotVersion) }')
        non_default_args.append(f'QuotaLimit={ repr(self.QuotaLimit) }')
        non_default_args.append(f'EncApplicationKey={ repr(self.EncApplicationKey) }')
        non_default_args.append(f'DamMac={ repr(self.DamMac) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_DesfireEv2FormatAppSwitchKeyset_Result(NamedTuple):
    Keyset: 'int'
    KeyNr: 'int'
    RollKeyIdx: 'DesfireKeyIdx'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'Keyset={ repr(self.Keyset) }')
        non_default_args.append(f'KeyNr={ repr(self.KeyNr) }')
        non_default_args.append(f'RollKeyIdx={ repr(self.RollKeyIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_DesfireVcsParams_Result(NamedTuple):
    PrependUidBeforeMacDivData: 'bool'
    RejectCardsWithoutValidIid: 'bool'
    ForceAuthToCard: 'bool'
    DfName: 'bytes'
    VcsEncKeyidx: 'DesfireKeyIdx'
    VcsMacKeyidx: 'DesfireKeyIdx'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'PrependUidBeforeMacDivData={ repr(self.PrependUidBeforeMacDivData) }')
        non_default_args.append(f'RejectCardsWithoutValidIid={ repr(self.RejectCardsWithoutValidIid) }')
        non_default_args.append(f'ForceAuthToCard={ repr(self.ForceAuthToCard) }')
        non_default_args.append(f'DfName={ repr(self.DfName) }')
        non_default_args.append(f'VcsEncKeyidx={ repr(self.VcsEncKeyidx) }')
        non_default_args.append(f'VcsMacKeyidx={ repr(self.VcsMacKeyidx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_IntIndSegment_Result(NamedTuple):
    FileOffset: 'int'
    FileLength: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'FileOffset={ repr(self.FileOffset) }')
        non_default_args.append(f'FileLength={ repr(self.FileLength) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_IntIndKeyIdx_Result(NamedTuple):
    MemoryType: 'int'
    KeyIndex: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'MemoryType={ repr(self.MemoryType) }')
        non_default_args.append(f'KeyIndex={ repr(self.KeyIndex) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_MifarePlusMadKeyBIndex_Result(NamedTuple):
    MadKeyBMemoryType: 'MifarePlusKeyMemoryType'
    MadKeyBIdx: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'MadKeyBMemoryType={ repr(self.MadKeyBMemoryType) }')
        non_default_args.append(f'MadKeyBIdx={ repr(self.MadKeyBIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_MifarePlusCommunicationMode_Result(NamedTuple):
    ReadNoMacOnCommand: 'bool'
    ReadPlain: 'bool'
    ReadNoMacOnResponse: 'bool'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'ReadNoMacOnCommand={ repr(self.ReadNoMacOnCommand) }')
        non_default_args.append(f'ReadPlain={ repr(self.ReadPlain) }')
        non_default_args.append(f'ReadNoMacOnResponse={ repr(self.ReadNoMacOnResponse) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_MifarePlusProxyimityCheck_Result(NamedTuple):
    ProxCheckKeyMemoryType: 'MifarePlusKeyMemoryType'
    ProxCheckKeyIdx: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'ProxCheckKeyMemoryType={ repr(self.ProxCheckKeyMemoryType) }')
        non_default_args.append(f'ProxCheckKeyIdx={ repr(self.ProxCheckKeyIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_MifareVcsParams_Result(NamedTuple):
    PrependUidBeforeMacDivData: 'bool'
    RejectCardsWithoutValidIid: 'bool'
    ForceAuthToCard: 'bool'
    DfName: 'bytes'
    MifareVcsEncKeyMemoryType: 'MifarePlusKeyMemoryType'
    MifareVcsEncKeyIdx: 'int'
    MifareVcsMacKeyMemoryType: 'MifarePlusKeyMemoryType'
    MifareVcsMacKeyIdx: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'PrependUidBeforeMacDivData={ repr(self.PrependUidBeforeMacDivData) }')
        non_default_args.append(f'RejectCardsWithoutValidIid={ repr(self.RejectCardsWithoutValidIid) }')
        non_default_args.append(f'ForceAuthToCard={ repr(self.ForceAuthToCard) }')
        non_default_args.append(f'DfName={ repr(self.DfName) }')
        non_default_args.append(f'MifareVcsEncKeyMemoryType={ repr(self.MifareVcsEncKeyMemoryType) }')
        non_default_args.append(f'MifareVcsEncKeyIdx={ repr(self.MifareVcsEncKeyIdx) }')
        non_default_args.append(f'MifareVcsMacKeyMemoryType={ repr(self.MifareVcsMacKeyMemoryType) }')
        non_default_args.append(f'MifareVcsMacKeyIdx={ repr(self.MifareVcsMacKeyIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_MifarePlusFormatLevelSwitchKeyIdx_Result(NamedTuple):
    NewSecurityLevel: 'int'
    LevelSwitchKeyMemoryType: 'MifarePlusKeyMemoryType'
    LevelSwitchKeyIdx: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'NewSecurityLevel={ repr(self.NewSecurityLevel) }')
        non_default_args.append(f'LevelSwitchKeyMemoryType={ repr(self.LevelSwitchKeyMemoryType) }')
        non_default_args.append(f'LevelSwitchKeyIdx={ repr(self.LevelSwitchKeyIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_MifarePlusFormatCardConfigurationKeyList_Result(NamedTuple):
    OldCardConfigurationKeyMemoryType: 'MifarePlusKeyMemoryType'
    OldCardConfigurationKeyIdx: 'int'
    NewCardConfigurationKeyMemoryType: 'MifarePlusKeyMemoryType'
    NewCardConfigurationKeyIdx: 'int'
    SelectVirtualCardKeyMemoryType: 'MifarePlusKeyMemoryType'
    SelectVirtualCardKeyIdx: 'int'
    VirtualCardEncryptionKeyMemoryType: 'MifarePlusKeyMemoryType'
    VirtualCardEncryptionKeyIdx: 'int'
    VirtualCardMacKeyMemoryType: 'MifarePlusKeyMemoryType'
    VirtualCardMacKeyIdx: 'int'
    FieldConfigurationBlockKeyMemoryType: 'MifarePlusKeyMemoryType'
    FieldConfigurationBlockKeyIdx: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'OldCardConfigurationKeyMemoryType={ repr(self.OldCardConfigurationKeyMemoryType) }')
        non_default_args.append(f'OldCardConfigurationKeyIdx={ repr(self.OldCardConfigurationKeyIdx) }')
        non_default_args.append(f'NewCardConfigurationKeyMemoryType={ repr(self.NewCardConfigurationKeyMemoryType) }')
        non_default_args.append(f'NewCardConfigurationKeyIdx={ repr(self.NewCardConfigurationKeyIdx) }')
        non_default_args.append(f'SelectVirtualCardKeyMemoryType={ repr(self.SelectVirtualCardKeyMemoryType) }')
        non_default_args.append(f'SelectVirtualCardKeyIdx={ repr(self.SelectVirtualCardKeyIdx) }')
        non_default_args.append(f'VirtualCardEncryptionKeyMemoryType={ repr(self.VirtualCardEncryptionKeyMemoryType) }')
        non_default_args.append(f'VirtualCardEncryptionKeyIdx={ repr(self.VirtualCardEncryptionKeyIdx) }')
        non_default_args.append(f'VirtualCardMacKeyMemoryType={ repr(self.VirtualCardMacKeyMemoryType) }')
        non_default_args.append(f'VirtualCardMacKeyIdx={ repr(self.VirtualCardMacKeyIdx) }')
        non_default_args.append(f'FieldConfigurationBlockKeyMemoryType={ repr(self.FieldConfigurationBlockKeyMemoryType) }')
        non_default_args.append(f'FieldConfigurationBlockKeyIdx={ repr(self.FieldConfigurationBlockKeyIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class VhlCfg_File_MifarePlusFormatCardMasterKeyList_Result(NamedTuple):
    OldCardMasterKeyMemoryType: 'MifarePlusKeyMemoryType'
    OldCardMasterKeyIdx: 'int'
    NewCardMasterKeyMemoryType: 'MifarePlusKeyMemoryType'
    NewCardMasterKeyIdx: 'int'
    CardConfigurationKeyMemoryType: 'MifarePlusKeyMemoryType'
    CardConfigurationKeyIdx: 'int'
    InstallationIDKeyMemoryType: 'MifarePlusKeyMemoryType'
    InstallationIDKeyIdx: 'int'
    ATSKeyMemoryType: 'MifarePlusKeyMemoryType'
    ATSKeyIdx: 'int'
    def __repr__(self) -> str:
        non_default_args: List[str] = []
        non_default_args.append(f'OldCardMasterKeyMemoryType={ repr(self.OldCardMasterKeyMemoryType) }')
        non_default_args.append(f'OldCardMasterKeyIdx={ repr(self.OldCardMasterKeyIdx) }')
        non_default_args.append(f'NewCardMasterKeyMemoryType={ repr(self.NewCardMasterKeyMemoryType) }')
        non_default_args.append(f'NewCardMasterKeyIdx={ repr(self.NewCardMasterKeyIdx) }')
        non_default_args.append(f'CardConfigurationKeyMemoryType={ repr(self.CardConfigurationKeyMemoryType) }')
        non_default_args.append(f'CardConfigurationKeyIdx={ repr(self.CardConfigurationKeyIdx) }')
        non_default_args.append(f'InstallationIDKeyMemoryType={ repr(self.InstallationIDKeyMemoryType) }')
        non_default_args.append(f'InstallationIDKeyIdx={ repr(self.InstallationIDKeyIdx) }')
        non_default_args.append(f'ATSKeyMemoryType={ repr(self.ATSKeyMemoryType) }')
        non_default_args.append(f'ATSKeyIdx={ repr(self.ATSKeyIdx) }')
        return f'{type(self).__name__}({", ".join(non_default_args)})'
class ConfigValue:
    def __init__(self, executor: FrameExecutor) -> None:
        self.executor = executor
    def execute(self, frame: bytes) -> bytes:
        return self.executor.execute(frame)
class Autoread(ConfigValue):
    MasterKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
class Autoread_Rule(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
class Autoread_Rule_Template(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x00
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x00')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_VhlFileIndex(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x01
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: int) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_ConstArea(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x02
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Autoread_Rule_ConstArea_Result:
        _recv_buffer = BytesIO(frame)
        _Position = safe_read_int_from_buffer(_recv_buffer, 2)
        _CompareData_bytes = _recv_buffer.read(-1)
        _CompareData = _CompareData_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Autoread_Rule_ConstArea_Result(_Position, _CompareData)
    def get(self, Rule_ndx: int) -> Autoread_Rule_ConstArea_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Position: int, CompareData: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x02')
        _send_buffer.write(Position.to_bytes(length=2, byteorder='big'))
        _send_buffer.write(CompareData.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Position: int, CompareData: str) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Position=Position, CompareData=CompareData)
        self.execute(frame)
class Autoread_Rule_CardTypes(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x03
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[CardType]:
        _recv_buffer = BytesIO(frame)
        _AcceptedCardTypes = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _AcceptedCardType = CardType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _AcceptedCardTypes.append(_AcceptedCardType)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _AcceptedCardTypes
    def get(self, Rule_ndx: int) -> List[CardType]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, AcceptedCardTypes: List[CardType]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x03')
        for _AcceptedCardTypes_Entry in AcceptedCardTypes:
            _AcceptedCardType = _AcceptedCardTypes_Entry
            _send_buffer.write(CardType_Parser.as_value(_AcceptedCardType).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, AcceptedCardTypes: List[CardType]) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, AcceptedCardTypes=AcceptedCardTypes)
        self.execute(frame)
class Autoread_Rule_CheckScriptId(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x04
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _ScriptId = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ScriptId
    def get(self, Rule_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, ScriptId: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x04')
        _send_buffer.write(ScriptId.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, ScriptId: int) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, ScriptId=ScriptId)
        self.execute(frame)
class Autoread_Rule_MsgType(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x05
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> MessageType:
        _recv_buffer = BytesIO(frame)
        _Value = MessageType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> MessageType:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: MessageType) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x05')
        _send_buffer.write(MessageType_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: MessageType) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_WiegandInputBitLen(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x06
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: int) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_CardFamilies(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x07
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x07')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_PrioritizationMode(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x08
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Autoread_Rule_PrioritizationMode_PrioMode:
        _recv_buffer = BytesIO(frame)
        _PrioMode = Autoread_Rule_PrioritizationMode_PrioMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _PrioMode
    def get(self, Rule_ndx: int) -> Autoread_Rule_PrioritizationMode_PrioMode:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, PrioMode: Autoread_Rule_PrioritizationMode_PrioMode) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x08')
        _send_buffer.write(Autoread_Rule_PrioritizationMode_PrioMode_Parser.as_value(PrioMode).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, PrioMode: Autoread_Rule_PrioritizationMode_PrioMode) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, PrioMode=PrioMode)
        self.execute(frame)
class Autoread_Rule_PrioritizationTriggeringCardFamilies(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x09
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\t')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_OnMatchAction(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x0A
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Autoread_Rule_OnMatchAction_Action:
        _recv_buffer = BytesIO(frame)
        _Action = Autoread_Rule_OnMatchAction_Action_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Action
    def get(self, Rule_ndx: int) -> Autoread_Rule_OnMatchAction_Action:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Action: Autoread_Rule_OnMatchAction_Action) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\n')
        _send_buffer.write(Autoread_Rule_OnMatchAction_Action_Parser.as_value(Action).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Action: Autoread_Rule_OnMatchAction_Action) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Action=Action)
        self.execute(frame)
class Autoread_Rule_AllowRandomSerialNumbers(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x0B
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x0b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bool:
        _recv_buffer = BytesIO(frame)
        _Value = bool(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> bool:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x0b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x0b')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: bool) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_OnMatchEvent(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x0C
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x0c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x0c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x0c')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_VhlFileName(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x0D
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\r')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: str) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_CheckScript(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x10
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x10')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_BlackWhiteListTemplate(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x11
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x11')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_SendProtocol(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x12
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> ProtocolID:
        _recv_buffer = BytesIO(frame)
        _ProtocolId = ProtocolID_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ProtocolId
    def get(self, Rule_ndx: int) -> ProtocolID:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, ProtocolId: ProtocolID) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x12')
        _send_buffer.write(ProtocolID_Parser.as_value(ProtocolId).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, ProtocolId: ProtocolID) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, ProtocolId=ProtocolId)
        self.execute(frame)
class Autoread_Rule_TemplateExt1(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x31
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'1')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_TemplateExt2(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x32
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'2')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_Counter(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x44
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: int) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Autoread_Rule_OnMatchSendApdu(ConfigValue):
    MasterKey = 0x04
    SubKey = 0x01
    ValueKey = 0x13
    def delete(self, Rule_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Rule_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Rule_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        if Rule_ndx < 0 or Rule_ndx >= 63:
            raise IndexError(Rule_ndx)
        _send_buffer.write((1 + Rule_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Rule_ndx: int, Value: str) -> None:
        frame = self.build_frame(Rule_ndx=Rule_ndx, Value=Value)
        self.execute(frame)
class Scripts(ConfigValue):
    MasterKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
class Scripts_StaticMessages(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
class Scripts_StaticMessages_MatchMsg(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x02
    ValueKey = 0x00
    def delete(self, MatchMsg_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x02')
        if MatchMsg_ndx < 0 or MatchMsg_ndx >= 3:
            raise IndexError(MatchMsg_ndx)
        _send_buffer.write((0 + MatchMsg_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, MatchMsg_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x02')
        if MatchMsg_ndx < 0 or MatchMsg_ndx >= 3:
            raise IndexError(MatchMsg_ndx)
        _send_buffer.write((0 + MatchMsg_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, MatchMsg_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x02')
        if MatchMsg_ndx < 0 or MatchMsg_ndx >= 3:
            raise IndexError(MatchMsg_ndx)
        _send_buffer.write((0 + MatchMsg_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, MatchMsg_ndx: int, Value: str) -> None:
        frame = self.build_frame(MatchMsg_ndx=MatchMsg_ndx, Value=Value)
        self.execute(frame)
class Scripts_StaticMessages_SendMsg(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x02
    ValueKey = 0x03
    def delete(self, SendMsg_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x02')
        if SendMsg_ndx < 0 or SendMsg_ndx >= 252:
            raise IndexError(SendMsg_ndx)
        _send_buffer.write((3 + SendMsg_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, SendMsg_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x02')
        if SendMsg_ndx < 0 or SendMsg_ndx >= 252:
            raise IndexError(SendMsg_ndx)
        _send_buffer.write((3 + SendMsg_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SendMsg_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x02')
        if SendMsg_ndx < 0 or SendMsg_ndx >= 252:
            raise IndexError(SendMsg_ndx)
        _send_buffer.write((3 + SendMsg_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, SendMsg_ndx: int, Value: str) -> None:
        frame = self.build_frame(SendMsg_ndx=SendMsg_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
class Scripts_Events_OnSetState(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x00
    def delete(self, OnSetState_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetState_ndx < 0 or OnSetState_ndx >= 4:
            raise IndexError(OnSetState_ndx)
        _send_buffer.write((0 + OnSetState_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnSetState_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetState_ndx < 0 or OnSetState_ndx >= 4:
            raise IndexError(OnSetState_ndx)
        _send_buffer.write((0 + OnSetState_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnSetState_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetState_ndx < 0 or OnSetState_ndx >= 4:
            raise IndexError(OnSetState_ndx)
        _send_buffer.write((0 + OnSetState_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnSetState_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnSetState_ndx=OnSetState_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnSetInput(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x04
    def delete(self, OnSetInput_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetInput_ndx < 0 or OnSetInput_ndx >= 2:
            raise IndexError(OnSetInput_ndx)
        _send_buffer.write((4 + OnSetInput_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnSetInput_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetInput_ndx < 0 or OnSetInput_ndx >= 2:
            raise IndexError(OnSetInput_ndx)
        _send_buffer.write((4 + OnSetInput_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnSetInput_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetInput_ndx < 0 or OnSetInput_ndx >= 2:
            raise IndexError(OnSetInput_ndx)
        _send_buffer.write((4 + OnSetInput_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnSetInput_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnSetInput_ndx=OnSetInput_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnSetTamperAlarm(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnSetGpio(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x08
    def delete(self, OnSetGpio_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetGpio_ndx < 0 or OnSetGpio_ndx >= 6:
            raise IndexError(OnSetGpio_ndx)
        _send_buffer.write((8 + OnSetGpio_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnSetGpio_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetGpio_ndx < 0 or OnSetGpio_ndx >= 6:
            raise IndexError(OnSetGpio_ndx)
        _send_buffer.write((8 + OnSetGpio_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnSetGpio_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnSetGpio_ndx < 0 or OnSetGpio_ndx >= 6:
            raise IndexError(OnSetGpio_ndx)
        _send_buffer.write((8 + OnSetGpio_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnSetGpio_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnSetGpio_ndx=OnSetGpio_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearState(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x20
    def delete(self, OnClearState_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearState_ndx < 0 or OnClearState_ndx >= 4:
            raise IndexError(OnClearState_ndx)
        _send_buffer.write((32 + OnClearState_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnClearState_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearState_ndx < 0 or OnClearState_ndx >= 4:
            raise IndexError(OnClearState_ndx)
        _send_buffer.write((32 + OnClearState_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnClearState_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearState_ndx < 0 or OnClearState_ndx >= 4:
            raise IndexError(OnClearState_ndx)
        _send_buffer.write((32 + OnClearState_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnClearState_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnClearState_ndx=OnClearState_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearInput(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x24
    def delete(self, OnClearInput_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearInput_ndx < 0 or OnClearInput_ndx >= 2:
            raise IndexError(OnClearInput_ndx)
        _send_buffer.write((36 + OnClearInput_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnClearInput_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearInput_ndx < 0 or OnClearInput_ndx >= 2:
            raise IndexError(OnClearInput_ndx)
        _send_buffer.write((36 + OnClearInput_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnClearInput_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearInput_ndx < 0 or OnClearInput_ndx >= 2:
            raise IndexError(OnClearInput_ndx)
        _send_buffer.write((36 + OnClearInput_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnClearInput_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnClearInput_ndx=OnClearInput_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearTamperAlarm(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearGpio(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x28
    def delete(self, OnClearGpio_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearGpio_ndx < 0 or OnClearGpio_ndx >= 6:
            raise IndexError(OnClearGpio_ndx)
        _send_buffer.write((40 + OnClearGpio_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnClearGpio_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearGpio_ndx < 0 or OnClearGpio_ndx >= 6:
            raise IndexError(OnClearGpio_ndx)
        _send_buffer.write((40 + OnClearGpio_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnClearGpio_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnClearGpio_ndx < 0 or OnClearGpio_ndx >= 6:
            raise IndexError(OnClearGpio_ndx)
        _send_buffer.write((40 + OnClearGpio_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnClearGpio_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnClearGpio_ndx=OnClearGpio_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnKeypressF(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x30
    def delete(self, OnKeypressF_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnKeypressF_ndx < 0 or OnKeypressF_ndx >= 4:
            raise IndexError(OnKeypressF_ndx)
        _send_buffer.write((48 + OnKeypressF_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnKeypressF_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnKeypressF_ndx < 0 or OnKeypressF_ndx >= 4:
            raise IndexError(OnKeypressF_ndx)
        _send_buffer.write((48 + OnKeypressF_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnKeypressF_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnKeypressF_ndx < 0 or OnKeypressF_ndx >= 4:
            raise IndexError(OnKeypressF_ndx)
        _send_buffer.write((48 + OnKeypressF_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnKeypressF_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnKeypressF_ndx=OnKeypressF_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnKeypressEsc(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnKeypressClear(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnKeypressMenu(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnKeypressOk(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnKeypressStar(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x3A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnKeypressSharp(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x3B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b';')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b';')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b';')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnPinEntry(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x3C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'<')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'<')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'<')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnDetectedCard(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnMatchMsg(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x41
    def delete(self, OnMatchMsg_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnMatchMsg_ndx < 0 or OnMatchMsg_ndx >= 3:
            raise IndexError(OnMatchMsg_ndx)
        _send_buffer.write((65 + OnMatchMsg_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnMatchMsg_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnMatchMsg_ndx < 0 or OnMatchMsg_ndx >= 3:
            raise IndexError(OnMatchMsg_ndx)
        _send_buffer.write((65 + OnMatchMsg_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnMatchMsg_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnMatchMsg_ndx < 0 or OnMatchMsg_ndx >= 3:
            raise IndexError(OnMatchMsg_ndx)
        _send_buffer.write((65 + OnMatchMsg_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnMatchMsg_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnMatchMsg_ndx=OnMatchMsg_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnAccepted(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnInvalidCard(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnEnabledProtocol(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x46
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnBlackWhiteListDenied(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x47
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnSetGreenLed(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnSetRedLed(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x49
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnSetBeeper(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x4A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnSetRelay(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x4B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'K')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'K')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'K')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearGreenLed(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearRedLed(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearBeeper(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnClearRelay(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnTimer(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x68
    def delete(self, OnTimer_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnTimer_ndx < 0 or OnTimer_ndx >= 3:
            raise IndexError(OnTimer_ndx)
        _send_buffer.write((104 + OnTimer_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, OnTimer_ndx: int) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnTimer_ndx < 0 or OnTimer_ndx >= 3:
            raise IndexError(OnTimer_ndx)
        _send_buffer.write((104 + OnTimer_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OnTimer_ndx: int, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        if OnTimer_ndx < 0 or OnTimer_ndx >= 3:
            raise IndexError(OnTimer_ndx)
        _send_buffer.write((104 + OnTimer_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, OnTimer_ndx: int, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(OnTimer_ndx=OnTimer_ndx, Value=Value)
        self.execute(frame)
class Scripts_Events_OnConfigCardSucceeded(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnConfigCardFailed(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnPowerup(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnAutoreadEnabled(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnAutoreadDisabled(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnScan(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x75
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnDetectedNoCard(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x76
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnCheckSuppressRepeat(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x77
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnBrpCommand(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x78
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnCardRemoved(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x79
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnCardProcessed(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x7A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnCardAcceptedByHost(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x7B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'{')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'{')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'{')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnCardDeniedByHost(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x7C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'|')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'|')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'|')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnNetworkBooted(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x90
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnLinkedNoPort(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x91
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnLinkedNetworkPort(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x92
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnLinkedDevicePort(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x93
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnLinkedAllPorts(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x94
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnWaitingForDHCP(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x95
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnSearchingForHost(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x96
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnUDPConnectFailure(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x97
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnHostConnectFailure(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x98
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnStaticIPFailure(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x99
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Scripts_Events_OnHostFound(ConfigValue):
    MasterKey = 0x05
    SubKey = 0x01
    ValueKey = 0x9A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device(ConfigValue):
    MasterKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
class Device_VhlSettings(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
class Device_VhlSettings_ScanCardFamilies(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x06
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x01')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings_ForceReselect(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x06
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_VhlSettings_ForceReselect_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_VhlSettings_ForceReselect_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_VhlSettings_ForceReselect_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_VhlSettings_ForceReselect_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Device_VhlSettings_ForceReselect_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_VhlSettings_ForceReselect_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings_DelayRequestATS(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x06
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings_DelayPerformPPS(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x06
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings_MaxBaudrateIso14443A(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x06
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> MaxBaudrateIso14443:
        _recv_buffer = BytesIO(frame)
        _Value = MaxBaudrateIso14443_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> MaxBaudrateIso14443:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: MaxBaudrateIso14443) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x10')
        _send_buffer.write(MaxBaudrateIso14443_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: MaxBaudrateIso14443) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings_MaxBaudrateIso14443B(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x06
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> MaxBaudrateIso14443:
        _recv_buffer = BytesIO(frame)
        _Value = MaxBaudrateIso14443_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> MaxBaudrateIso14443:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: MaxBaudrateIso14443) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(MaxBaudrateIso14443_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: MaxBaudrateIso14443) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings125Khz(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
class Device_VhlSettings125Khz_ScanCardTypes(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardTypes125KhzPart1:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _TTF = bool((_Value_int >> 15) & 0b1)
        _Hitag2B = bool((_Value_int >> 14) & 0b1)
        _Hitag2M = bool((_Value_int >> 13) & 0b1)
        _Hitag1S = bool((_Value_int >> 12) & 0b1)
        _HidIoprox = bool((_Value_int >> 11) & 0b1)
        _HidProx = bool((_Value_int >> 10) & 0b1)
        _HidAwid = bool((_Value_int >> 9) & 0b1)
        _HidIndala = bool((_Value_int >> 8) & 0b1)
        _Quadrakey = bool((_Value_int >> 7) & 0b1)
        _Keri = bool((_Value_int >> 6) & 0b1)
        _HidProx32 = bool((_Value_int >> 5) & 0b1)
        _Pyramid = bool((_Value_int >> 4) & 0b1)
        _EM4450 = bool((_Value_int >> 3) & 0b1)
        _EM4100 = bool((_Value_int >> 1) & 0b1)
        _EM4205 = bool((_Value_int >> 0) & 0b1)
        _Value = CardTypes125KhzPart1(_TTF, _Hitag2B, _Hitag2M, _Hitag1S, _HidIoprox, _HidProx, _HidAwid, _HidIndala, _Quadrakey, _Keri, _HidProx32, _Pyramid, _EM4450, _EM4100, _EM4205)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardTypes125KhzPart1:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardTypes125KhzPart1, CardTypes125KhzPart1_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x00')
        if isinstance(Value, dict):
            Value = CardTypes125KhzPart1(**Value)
        Value_int = 0
        Value_int |= (int(Value.TTF) & 0b1) << 15
        Value_int |= (int(Value.Hitag2B) & 0b1) << 14
        Value_int |= (int(Value.Hitag2M) & 0b1) << 13
        Value_int |= (int(Value.Hitag1S) & 0b1) << 12
        Value_int |= (int(Value.HidIoprox) & 0b1) << 11
        Value_int |= (int(Value.HidProx) & 0b1) << 10
        Value_int |= (int(Value.HidAwid) & 0b1) << 9
        Value_int |= (int(Value.HidIndala) & 0b1) << 8
        Value_int |= (int(Value.Quadrakey) & 0b1) << 7
        Value_int |= (int(Value.Keri) & 0b1) << 6
        Value_int |= (int(Value.HidProx32) & 0b1) << 5
        Value_int |= (int(Value.Pyramid) & 0b1) << 4
        Value_int |= (int(Value.EM4450) & 0b1) << 3
        Value_int |= (int(Value.EM4100) & 0b1) << 1
        Value_int |= (int(Value.EM4205) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardTypes125KhzPart1, CardTypes125KhzPart1_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings125Khz_ModulationType(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_VhlSettings125Khz_ModulationType_TTFMod:
        _recv_buffer = BytesIO(frame)
        _TTFMod = Device_VhlSettings125Khz_ModulationType_TTFMod_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _TTFMod
    def get(self, ) -> Device_VhlSettings125Khz_ModulationType_TTFMod:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, TTFMod: Device_VhlSettings125Khz_ModulationType_TTFMod) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Device_VhlSettings125Khz_ModulationType_TTFMod_Parser.as_value(TTFMod).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, TTFMod: Device_VhlSettings125Khz_ModulationType_TTFMod) -> None:
        frame = self.build_frame(TTFMod=TTFMod)
        self.execute(frame)
class Device_VhlSettings125Khz_Baud(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_VhlSettings125Khz_Baud_Baud:
        _recv_buffer = BytesIO(frame)
        _Baud = Device_VhlSettings125Khz_Baud_Baud_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Baud
    def get(self, ) -> Device_VhlSettings125Khz_Baud_Baud:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Baud: Device_VhlSettings125Khz_Baud_Baud) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Device_VhlSettings125Khz_Baud_Baud_Parser.as_value(Baud).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Baud: Device_VhlSettings125Khz_Baud_Baud) -> None:
        frame = self.build_frame(Baud=Baud)
        self.execute(frame)
class Device_VhlSettings125Khz_TTFHeaderLength(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings125Khz_TTFHeader(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bytes:
        _recv_buffer = BytesIO(frame)
        _Value = _recv_buffer.read(-1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value)
        return _send_buffer.getvalue()
    def __call__(self, Value: bytes) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings125Khz_TTFDataLength(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings125Khz_TTFOkCounter(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings125Khz_IndaspDecode(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x07')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VhlSettings125Khz_IndaspParityCheck(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_VhlSettings125Khz_IndaspParityCheck_ParityDisable:
        _recv_buffer = BytesIO(frame)
        _ParityDisable = Device_VhlSettings125Khz_IndaspParityCheck_ParityDisable_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ParityDisable
    def get(self, ) -> Device_VhlSettings125Khz_IndaspParityCheck_ParityDisable:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, ParityDisable: Device_VhlSettings125Khz_IndaspParityCheck_ParityDisable) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Device_VhlSettings125Khz_IndaspParityCheck_ParityDisable_Parser.as_value(ParityDisable).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, ParityDisable: Device_VhlSettings125Khz_IndaspParityCheck_ParityDisable) -> None:
        frame = self.build_frame(ParityDisable=ParityDisable)
        self.execute(frame)
class Device_VhlSettings125Khz_IndaspOkCounter(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\t')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Device_VhlSettings125Khz_AwidOkCounter(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x0A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\n')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Device_VhlSettings125Khz_HidProxOkCounter(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x42
    ValueKey = 0x0B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0b')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Device_Keypad(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
class Device_Keypad_SpecialKeySettings(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x03
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Keypad_SpecialKeySettings_Settings:
        _recv_buffer = BytesIO(frame)
        _Settings = Device_Keypad_SpecialKeySettings_Settings_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Settings
    def get(self, ) -> Device_Keypad_SpecialKeySettings_Settings:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Settings: Device_Keypad_SpecialKeySettings_Settings) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Device_Keypad_SpecialKeySettings_Settings_Parser.as_value(Settings).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Settings: Device_Keypad_SpecialKeySettings_Settings) -> None:
        frame = self.build_frame(Settings=Settings)
        self.execute(frame)
class Device_Keypad_Timeout(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x03
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Keypad_PinLength(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x03
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Keypad_KeyPressSignal(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x03
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Keypad_KeyPressSignal_SignalType:
        _recv_buffer = BytesIO(frame)
        _SignalType = Device_Keypad_KeyPressSignal_SignalType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SignalType
    def get(self, ) -> Device_Keypad_KeyPressSignal_SignalType:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SignalType: Device_Keypad_KeyPressSignal_SignalType) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Device_Keypad_KeyPressSignal_SignalType_Parser.as_value(SignalType).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, SignalType: Device_Keypad_KeyPressSignal_SignalType) -> None:
        frame = self.build_frame(SignalType=SignalType)
        self.execute(frame)
class Device_Boot(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
class Device_Boot_ConfigCardState(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Boot_ConfigCardState_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Boot_ConfigCardState_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Boot_ConfigCardState_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Boot_ConfigCardState_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(Device_Boot_ConfigCardState_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Boot_ConfigCardState_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Boot_FireInputEventAtPowerup(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    ValueKey = 0x14
    def delete(self, FireInputEventAtPowerup_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        if FireInputEventAtPowerup_ndx < 0 or FireInputEventAtPowerup_ndx >= 2:
            raise IndexError(FireInputEventAtPowerup_ndx)
        _send_buffer.write((20 + FireInputEventAtPowerup_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> FireEventAtPowerup:
        _recv_buffer = BytesIO(frame)
        _Value = FireEventAtPowerup_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, FireInputEventAtPowerup_ndx: int) -> FireEventAtPowerup:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        if FireInputEventAtPowerup_ndx < 0 or FireInputEventAtPowerup_ndx >= 2:
            raise IndexError(FireInputEventAtPowerup_ndx)
        _send_buffer.write((20 + FireInputEventAtPowerup_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, FireInputEventAtPowerup_ndx: int, Value: FireEventAtPowerup) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        if FireInputEventAtPowerup_ndx < 0 or FireInputEventAtPowerup_ndx >= 2:
            raise IndexError(FireInputEventAtPowerup_ndx)
        _send_buffer.write((20 + FireInputEventAtPowerup_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(FireEventAtPowerup_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, FireInputEventAtPowerup_ndx: int, Value: FireEventAtPowerup) -> None:
        frame = self.build_frame(FireInputEventAtPowerup_ndx=FireInputEventAtPowerup_ndx, Value=Value)
        self.execute(frame)
class Device_Boot_FireTamperEventAtPowerup(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> FireEventAtPowerup:
        _recv_buffer = BytesIO(frame)
        _Value = FireEventAtPowerup_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> FireEventAtPowerup:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: FireEventAtPowerup) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        _send_buffer.write(FireEventAtPowerup_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: FireEventAtPowerup) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Boot_FireGpioEventAtPowerup(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    ValueKey = 0x18
    def delete(self, FireGpioEventAtPowerup_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        if FireGpioEventAtPowerup_ndx < 0 or FireGpioEventAtPowerup_ndx >= 8:
            raise IndexError(FireGpioEventAtPowerup_ndx)
        _send_buffer.write((24 + FireGpioEventAtPowerup_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> FireEventAtPowerup:
        _recv_buffer = BytesIO(frame)
        _Value = FireEventAtPowerup_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, FireGpioEventAtPowerup_ndx: int) -> FireEventAtPowerup:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        if FireGpioEventAtPowerup_ndx < 0 or FireGpioEventAtPowerup_ndx >= 8:
            raise IndexError(FireGpioEventAtPowerup_ndx)
        _send_buffer.write((24 + FireGpioEventAtPowerup_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, FireGpioEventAtPowerup_ndx: int, Value: FireEventAtPowerup) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        if FireGpioEventAtPowerup_ndx < 0 or FireGpioEventAtPowerup_ndx >= 8:
            raise IndexError(FireGpioEventAtPowerup_ndx)
        _send_buffer.write((24 + FireGpioEventAtPowerup_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(FireEventAtPowerup_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, FireGpioEventAtPowerup_ndx: int, Value: FireEventAtPowerup) -> None:
        frame = self.build_frame(FireGpioEventAtPowerup_ndx=FireGpioEventAtPowerup_ndx, Value=Value)
        self.execute(frame)
class Device_Boot_StartAutoreadAtPowerup(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> AutoReadMode:
        _recv_buffer = BytesIO(frame)
        _Mode = AutoReadMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Mode
    def get(self, ) -> AutoReadMode:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Mode: AutoReadMode) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(AutoReadMode_Parser.as_value(Mode).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Mode: AutoReadMode) -> None:
        frame = self.build_frame(Mode=Mode)
        self.execute(frame)
class Device_Boot_FirmwareCrcCheck(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Boot_FirmwareCrcCheck_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Boot_FirmwareCrcCheck_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Boot_FirmwareCrcCheck_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Boot_FirmwareCrcCheck_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Device_Boot_FirmwareCrcCheck_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Boot_FirmwareCrcCheck_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Boot_LegicAdvantInitialization(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x01
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Boot_LegicAdvantInitialization_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Boot_LegicAdvantInitialization_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Boot_LegicAdvantInitialization_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Boot_LegicAdvantInitialization_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Device_Boot_LegicAdvantInitialization_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Boot_LegicAdvantInitialization_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
class Device_Run_ConfigCardAcceptTime(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_EnabledProtocols(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[ProtocolID]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _ProtocolId = ProtocolID_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _Value.append(_ProtocolId)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> List[ProtocolID]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: List[ProtocolID]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        for _Value_Entry in Value:
            _ProtocolId = _Value_Entry
            _send_buffer.write(ProtocolID_Parser.as_value(_ProtocolId).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: List[ProtocolID]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_AutoreadPulseHf(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_AutoreadPulseHf_PulseHf:
        _recv_buffer = BytesIO(frame)
        _PulseHf = Device_Run_AutoreadPulseHf_PulseHf_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _PulseHf
    def get(self, ) -> Device_Run_AutoreadPulseHf_PulseHf:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, PulseHf: Device_Run_AutoreadPulseHf_PulseHf) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Device_Run_AutoreadPulseHf_PulseHf_Parser.as_value(PulseHf).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, PulseHf: Device_Run_AutoreadPulseHf_PulseHf) -> None:
        frame = self.build_frame(PulseHf=PulseHf)
        self.execute(frame)
class Device_Run_RepeatMessageDelay(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_DeviceName(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_ProjectName(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_DebugInterfaceSecurityLevel(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x0B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_DebugInterfaceSecurityLevel_SecurityLevel:
        _recv_buffer = BytesIO(frame)
        _SecurityLevel = Device_Run_DebugInterfaceSecurityLevel_SecurityLevel_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SecurityLevel
    def get(self, ) -> Device_Run_DebugInterfaceSecurityLevel_SecurityLevel:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SecurityLevel: Device_Run_DebugInterfaceSecurityLevel_SecurityLevel) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0b')
        _send_buffer.write(Device_Run_DebugInterfaceSecurityLevel_SecurityLevel_Parser.as_value(SecurityLevel).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, SecurityLevel: Device_Run_DebugInterfaceSecurityLevel_SecurityLevel) -> None:
        frame = self.build_frame(SecurityLevel=SecurityLevel)
        self.execute(frame)
class Device_Run_RepeatMessageMode(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x0C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_RepeatMessageMode_Result:
        _recv_buffer = BytesIO(frame)
        _Mode_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _Suppress = bool((_Mode_int >> 1) & 0b1)
        _Force = bool((_Mode_int >> 0) & 0b1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Device_Run_RepeatMessageMode_Result(_Suppress, _Force)
    def get(self, ) -> Device_Run_RepeatMessageMode_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Suppress: bool, Force: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0c')
        _var_0000_int = 0
        _var_0000_int |= (int(Suppress) & 0b1) << 1
        _var_0000_int |= (int(Force) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Suppress: bool, Force: bool) -> None:
        frame = self.build_frame(Suppress=Suppress, Force=Force)
        self.execute(frame)
class Device_Run_RestrictFirmwareRelease(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x0E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x0e')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_EnableProtocolOnBAC(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> ProtocolID:
        _recv_buffer = BytesIO(frame)
        _Value = ProtocolID_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> ProtocolID:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: ProtocolID) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x11')
        _send_buffer.write(ProtocolID_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: ProtocolID) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_AccessRightsOfBAC(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_AccessRightsOfBAC_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Run_AccessRightsOfBAC_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Run_AccessRightsOfBAC_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Run_AccessRightsOfBAC_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Device_Run_AccessRightsOfBAC_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Run_AccessRightsOfBAC_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_FirmwareVersionBlacklist(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[FirmwareVersion]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _FirmwareID = safe_read_int_from_buffer(_recv_buffer, 2)
            _SmallestBlockedFwVersionMajor = safe_read_int_from_buffer(_recv_buffer, 1)
            _SmallestBlockedFwVersionMinor = safe_read_int_from_buffer(_recv_buffer, 1)
            _SmallestBlockedFwVersionBuild = safe_read_int_from_buffer(_recv_buffer, 1)
            _GreatestBlockedFwVersionMajor = safe_read_int_from_buffer(_recv_buffer, 1)
            _GreatestBlockedFwVersionMinor = safe_read_int_from_buffer(_recv_buffer, 1)
            _GreatestBlockedFwVersionBuild = safe_read_int_from_buffer(_recv_buffer, 1)
            _BlacklistedFirmware = FirmwareVersion(_FirmwareID, _SmallestBlockedFwVersionMajor, _SmallestBlockedFwVersionMinor, _SmallestBlockedFwVersionBuild, _GreatestBlockedFwVersionMajor, _GreatestBlockedFwVersionMinor, _GreatestBlockedFwVersionBuild)
            _Value.append(_BlacklistedFirmware)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> List[FirmwareVersion]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: List[FirmwareVersion]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x14')
        for _Value_Entry in Value:
            _BlacklistedFirmware = _Value_Entry
            if isinstance(_BlacklistedFirmware, dict):
                _BlacklistedFirmware = FirmwareVersion(**_BlacklistedFirmware)
            _FirmwareID, _SmallestBlockedFwVersionMajor, _SmallestBlockedFwVersionMinor, _SmallestBlockedFwVersionBuild, _GreatestBlockedFwVersionMajor, _GreatestBlockedFwVersionMinor, _GreatestBlockedFwVersionBuild = _BlacklistedFirmware
            _send_buffer.write(_FirmwareID.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_SmallestBlockedFwVersionMajor.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_SmallestBlockedFwVersionMinor.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_SmallestBlockedFwVersionBuild.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_GreatestBlockedFwVersionMajor.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_GreatestBlockedFwVersionMinor.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_GreatestBlockedFwVersionBuild.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: List[FirmwareVersion]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_DefaultBusAdrForBAC(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_CardReadFailureLogging(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_CardReadFailureLogging_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Run_CardReadFailureLogging_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Run_CardReadFailureLogging_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Run_CardReadFailureLogging_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Device_Run_CardReadFailureLogging_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Run_CardReadFailureLogging_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_MessageExpireTimeout(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_AutoreadPollTime(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x18')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_AuthReqUploadViaBrp(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> AuthReqUpload:
        _recv_buffer = BytesIO(frame)
        _AuthReq = AuthReqUpload_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _AuthReq
    def get(self, ) -> AuthReqUpload:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, AuthReq: AuthReqUpload = "Default") -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x19')
        _send_buffer.write(AuthReqUpload_Parser.as_value(AuthReq).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, AuthReq: AuthReqUpload = "Default") -> None:
        frame = self.build_frame(AuthReq=AuthReq)
        self.execute(frame)
class Device_Run_AuthReqUploadViaIso14443(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x1A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> AuthReqUpload:
        _recv_buffer = BytesIO(frame)
        _AuthReq = AuthReqUpload_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _AuthReq
    def get(self, ) -> AuthReqUpload:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, AuthReq: AuthReqUpload = "Default") -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1a')
        _send_buffer.write(AuthReqUpload_Parser.as_value(AuthReq).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, AuthReq: AuthReqUpload = "Default") -> None:
        frame = self.build_frame(AuthReq=AuthReq)
        self.execute(frame)
class Device_Run_AutoreadWaitForCardRemoval(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x1B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_AutoreadWaitForCardRemoval_WaitForCardRemoval:
        _recv_buffer = BytesIO(frame)
        _WaitForCardRemoval = Device_Run_AutoreadWaitForCardRemoval_WaitForCardRemoval_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _WaitForCardRemoval
    def get(self, ) -> Device_Run_AutoreadWaitForCardRemoval_WaitForCardRemoval:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, WaitForCardRemoval: Device_Run_AutoreadWaitForCardRemoval_WaitForCardRemoval) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1b')
        _send_buffer.write(Device_Run_AutoreadWaitForCardRemoval_WaitForCardRemoval_Parser.as_value(WaitForCardRemoval).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, WaitForCardRemoval: Device_Run_AutoreadWaitForCardRemoval_WaitForCardRemoval) -> None:
        frame = self.build_frame(WaitForCardRemoval=WaitForCardRemoval)
        self.execute(frame)
class Device_Run_UsbVendorId(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x1C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_UsbProductId(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x1D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1d')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1d')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1d')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_DenyUploadViaIso14443(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x1E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_DenyUploadViaIso14443_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Run_DenyUploadViaIso14443_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Run_DenyUploadViaIso14443_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Run_DenyUploadViaIso14443_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1e')
        _send_buffer.write(Device_Run_DenyUploadViaIso14443_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Run_DenyUploadViaIso14443_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_DenyReaderInfoViaIso14443(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x1F
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_DenyReaderInfoViaIso14443_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Run_DenyReaderInfoViaIso14443_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Run_DenyReaderInfoViaIso14443_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Run_DenyReaderInfoViaIso14443_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x1f')
        _send_buffer.write(Device_Run_DenyReaderInfoViaIso14443_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Run_DenyReaderInfoViaIso14443_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_DenyUnauthFwUploadViaBrp(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_DenyUnauthFwUploadViaBrp_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Run_DenyUnauthFwUploadViaBrp_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Run_DenyUnauthFwUploadViaBrp_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Run_DenyUnauthFwUploadViaBrp_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b' ')
        _send_buffer.write(Device_Run_DenyUnauthFwUploadViaBrp_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Run_DenyUnauthFwUploadViaBrp_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_SetBusAdrOnUploadViaIso14443(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_SetBusAdrOnUploadViaIso14443_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Device_Run_SetBusAdrOnUploadViaIso14443_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Device_Run_SetBusAdrOnUploadViaIso14443_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Device_Run_SetBusAdrOnUploadViaIso14443_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'!')
        _send_buffer.write(Device_Run_SetBusAdrOnUploadViaIso14443_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Device_Run_SetBusAdrOnUploadViaIso14443_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_MaintenanceFunctionFilter(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_MaintenanceFunctionFilter_Result:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _DisableReaderInfo = bool((_Value_int >> 4) & 0b1)
        _DisableBec2Upload = bool((_Value_int >> 3) & 0b1)
        _DisableLicenseCards = bool((_Value_int >> 2) & 0b1)
        _DisableAdrCards = bool((_Value_int >> 1) & 0b1)
        _DisableConfigCards = bool((_Value_int >> 0) & 0b1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Device_Run_MaintenanceFunctionFilter_Result(_DisableReaderInfo, _DisableBec2Upload, _DisableLicenseCards, _DisableAdrCards, _DisableConfigCards)
    def get(self, ) -> Device_Run_MaintenanceFunctionFilter_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, DisableReaderInfo: bool, DisableBec2Upload: bool, DisableLicenseCards: bool, DisableAdrCards: bool, DisableConfigCards: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'"')
        _var_0000_int = 0
        _var_0000_int |= (int(DisableReaderInfo) & 0b1) << 4
        _var_0000_int |= (int(DisableBec2Upload) & 0b1) << 3
        _var_0000_int |= (int(DisableLicenseCards) & 0b1) << 2
        _var_0000_int |= (int(DisableAdrCards) & 0b1) << 1
        _var_0000_int |= (int(DisableConfigCards) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, DisableReaderInfo: bool, DisableBec2Upload: bool, DisableLicenseCards: bool, DisableAdrCards: bool, DisableConfigCards: bool) -> None:
        frame = self.build_frame(DisableReaderInfo=DisableReaderInfo, DisableBec2Upload=DisableBec2Upload, DisableLicenseCards=DisableLicenseCards, DisableAdrCards=DisableAdrCards, DisableConfigCards=DisableConfigCards)
        self.execute(frame)
class Device_Run_FirstVhlRc500Key(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_ConfigCardMifareKey(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x81
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x81')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x81')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x81')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_ConfigSecurityCode(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x82
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x82')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x82')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x82')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_CustomerKey(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x85
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x85')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x85')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x85')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_AltConfigSecurityCode(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x8A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x8a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x8a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x8a')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_ConfigCardDesfireKey(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x8F
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x8f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x8f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x8f')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_BusAdressByBAC(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_ConfigCardMifareKeyBackup(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0xC1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xc1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xc1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xc1')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_CustomerKeyBackup(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0xC5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xc5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xc5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xc5')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_ConfigCardDesfireKeyBackup(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0xCF
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xcf')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xcf')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\xcf')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Run_UsbSuspendMode(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x02
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_Run_UsbSuspendMode_SuspendMode:
        _recv_buffer = BytesIO(frame)
        _SuspendMode = Device_Run_UsbSuspendMode_SuspendMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SuspendMode
    def get(self, ) -> Device_Run_UsbSuspendMode_SuspendMode:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SuspendMode: Device_Run_UsbSuspendMode_SuspendMode) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'H')
        _send_buffer.write(Device_Run_UsbSuspendMode_SuspendMode_Parser.as_value(SuspendMode).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, SuspendMode: Device_Run_UsbSuspendMode_SuspendMode) -> None:
        frame = self.build_frame(SuspendMode=SuspendMode)
        self.execute(frame)
class Device_CryptoKey(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
class Device_CryptoKey_Entry(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x30
    ValueKey = 0x80
    def delete(self, Entry_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'0')
        if Entry_ndx < 0 or Entry_ndx >= 64:
            raise IndexError(Entry_ndx)
        _send_buffer.write((128 + Entry_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_CryptoKey_Entry_Result:
        _recv_buffer = BytesIO(frame)
        _KeySettings_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _IsVersion = bool((_KeySettings_int >> 7) & 0b1)
        _IsDivInfo = bool((_KeySettings_int >> 6) & 0b1)
        _IsDivInfoVhl = bool((_KeySettings_int >> 5) & 0b1)
        _DenyFormat = bool((_KeySettings_int >> 2) & 0b1)
        _DenyWrite = bool((_KeySettings_int >> 1) & 0b1)
        _DenyRead = bool((_KeySettings_int >> 0) & 0b1)
        _KeySettings = KeyAccessRights_KeySettings(_IsVersion, _IsDivInfo, _IsDivInfoVhl, _DenyFormat, _DenyWrite, _DenyRead)
        if _IsVersion:
            _Version = safe_read_int_from_buffer(_recv_buffer, 1)
        else:
            _Version = None
        if _IsDivInfo:
            _DiversificationMode = KeyAccessRights_DiversificationMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _DivIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        else:
            _DiversificationMode = None
            _DivIdx = None
        _AccessRights = KeyAccessRights(_KeySettings, _Version, _DiversificationMode, _DivIdx)
        _Algorithm = CryptoAlgorithm_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _Key_bytes = _recv_buffer.read(-1)
        _Key = _Key_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Device_CryptoKey_Entry_Result(_AccessRights, _Algorithm, _Key)
    def get(self, Entry_ndx: int) -> Device_CryptoKey_Entry_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'0')
        if Entry_ndx < 0 or Entry_ndx >= 64:
            raise IndexError(Entry_ndx)
        _send_buffer.write((128 + Entry_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Entry_ndx: int, AccessRights: Union[KeyAccessRights, KeyAccessRights_Dict], Algorithm: CryptoAlgorithm, Key: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'0')
        if Entry_ndx < 0 or Entry_ndx >= 64:
            raise IndexError(Entry_ndx)
        _send_buffer.write((128 + Entry_ndx).to_bytes(1, byteorder='big'))
        if isinstance(AccessRights, dict):
            AccessRights = KeyAccessRights(**AccessRights)
        _KeySettings, _Version, _DiversificationMode, _DivIdx = AccessRights
        if isinstance(_KeySettings, dict):
            _KeySettings = KeyAccessRights_KeySettings(**_KeySettings)
        _KeySettings_int = 0
        _KeySettings_int |= (int(_KeySettings.IsVersion) & 0b1) << 7
        _KeySettings_int |= (int(_KeySettings.IsDivInfo) & 0b1) << 6
        _KeySettings_int |= (int(_KeySettings.IsDivInfoVhl) & 0b1) << 5
        _KeySettings_int |= (int(_KeySettings.DenyFormat) & 0b1) << 2
        _KeySettings_int |= (int(_KeySettings.DenyWrite) & 0b1) << 1
        _KeySettings_int |= (int(_KeySettings.DenyRead) & 0b1) << 0
        _send_buffer.write(_KeySettings_int.to_bytes(length=1, byteorder='big'))
        if _KeySettings.IsVersion:
            if _Version is None:
                raise TypeError("missing a required argument: '_Version'")
            _send_buffer.write(_Version.to_bytes(length=1, byteorder='big'))
        if _KeySettings.IsDivInfo:
            if _DiversificationMode is None:
                raise TypeError("missing a required argument: '_DiversificationMode'")
            if _DivIdx is None:
                raise TypeError("missing a required argument: '_DivIdx'")
            _send_buffer.write(KeyAccessRights_DiversificationMode_Parser.as_value(_DiversificationMode).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_DivIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(CryptoAlgorithm_Parser.as_value(Algorithm).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(Key.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Entry_ndx: int, AccessRights: Union[KeyAccessRights, KeyAccessRights_Dict], Algorithm: CryptoAlgorithm, Key: str) -> None:
        frame = self.build_frame(Entry_ndx=Entry_ndx, AccessRights=AccessRights, Algorithm=Algorithm, Key=Key)
        self.execute(frame)
class Device_HostSecurity(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
class Device_HostSecurity_AccessConditionMask(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x00
    def delete(self, AccessConditionMask_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if AccessConditionMask_ndx < 0 or AccessConditionMask_ndx >= 4:
            raise IndexError(AccessConditionMask_ndx)
        _send_buffer.write((0 + AccessConditionMask_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, AccessConditionMask_ndx: int) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if AccessConditionMask_ndx < 0 or AccessConditionMask_ndx >= 4:
            raise IndexError(AccessConditionMask_ndx)
        _send_buffer.write((0 + AccessConditionMask_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, AccessConditionMask_ndx: int, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if AccessConditionMask_ndx < 0 or AccessConditionMask_ndx >= 4:
            raise IndexError(AccessConditionMask_ndx)
        _send_buffer.write((0 + AccessConditionMask_ndx).to_bytes(1, byteorder='big'))
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, AccessConditionMask_ndx: int, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(AccessConditionMask_ndx=AccessConditionMask_ndx, Value=Value)
        self.execute(frame)
class Device_HostSecurity_Key(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x81
    def delete(self, Key_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if Key_ndx < 0 or Key_ndx >= 4:
            raise IndexError(Key_ndx)
        _send_buffer.write((129 + Key_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Device_HostSecurity_Key_Result:
        _recv_buffer = BytesIO(frame)
        _AuthenticationMode_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _RequireContinuousIv = bool((_AuthenticationMode_int >> 7) & 0b1)
        _RequireEncrypted = bool((_AuthenticationMode_int >> 6) & 0b1)
        _RequireMac = bool((_AuthenticationMode_int >> 5) & 0b1)
        _RequireSessionKey = bool((_AuthenticationMode_int >> 4) & 0b1)
        _AuthenticationMode = HostSecurityAuthenticationMode(_RequireContinuousIv, _RequireEncrypted, _RequireMac, _RequireSessionKey)
        _DeriveKeyId = safe_read_int_from_buffer(_recv_buffer, 1)
        _AesKey_bytes = _recv_buffer.read(-1)
        _AesKey = _AesKey_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Device_HostSecurity_Key_Result(_AuthenticationMode, _DeriveKeyId, _AesKey)
    def get(self, Key_ndx: int) -> Device_HostSecurity_Key_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if Key_ndx < 0 or Key_ndx >= 4:
            raise IndexError(Key_ndx)
        _send_buffer.write((129 + Key_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Key_ndx: int, AuthenticationMode: Union[HostSecurityAuthenticationMode, HostSecurityAuthenticationMode_Dict], DeriveKeyId: int, AesKey: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if Key_ndx < 0 or Key_ndx >= 4:
            raise IndexError(Key_ndx)
        _send_buffer.write((129 + Key_ndx).to_bytes(1, byteorder='big'))
        if isinstance(AuthenticationMode, dict):
            AuthenticationMode = HostSecurityAuthenticationMode(**AuthenticationMode)
        AuthenticationMode_int = 0
        AuthenticationMode_int |= (int(AuthenticationMode.RequireContinuousIv) & 0b1) << 7
        AuthenticationMode_int |= (int(AuthenticationMode.RequireEncrypted) & 0b1) << 6
        AuthenticationMode_int |= (int(AuthenticationMode.RequireMac) & 0b1) << 5
        AuthenticationMode_int |= (int(AuthenticationMode.RequireSessionKey) & 0b1) << 4
        _send_buffer.write(AuthenticationMode_int.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(DeriveKeyId.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(AesKey.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Key_ndx: int, AuthenticationMode: Union[HostSecurityAuthenticationMode, HostSecurityAuthenticationMode_Dict], DeriveKeyId: int, AesKey: str) -> None:
        frame = self.build_frame(Key_ndx=Key_ndx, AuthenticationMode=AuthenticationMode, DeriveKeyId=DeriveKeyId, AesKey=AesKey)
        self.execute(frame)
class Device_HostSecurity_PrivateKey(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x85
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x85')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x85')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x85')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_HostSecurity_PublicKey(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_HostSecurity_HostRootCertSubjectName(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x10
    def delete(self, HostRootCertSubjectName_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertSubjectName_ndx < 0 or HostRootCertSubjectName_ndx >= 4:
            raise IndexError(HostRootCertSubjectName_ndx)
        _send_buffer.write((16 + HostRootCertSubjectName_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostRootCertSubjectName_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertSubjectName_ndx < 0 or HostRootCertSubjectName_ndx >= 4:
            raise IndexError(HostRootCertSubjectName_ndx)
        _send_buffer.write((16 + HostRootCertSubjectName_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostRootCertSubjectName_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertSubjectName_ndx < 0 or HostRootCertSubjectName_ndx >= 4:
            raise IndexError(HostRootCertSubjectName_ndx)
        _send_buffer.write((16 + HostRootCertSubjectName_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, HostRootCertSubjectName_ndx: int, Value: str) -> None:
        frame = self.build_frame(HostRootCertSubjectName_ndx=HostRootCertSubjectName_ndx, Value=Value)
        self.execute(frame)
class Device_HostSecurity_HostRootCertPubKey(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x14
    def delete(self, HostRootCertPubKey_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertPubKey_ndx < 0 or HostRootCertPubKey_ndx >= 4:
            raise IndexError(HostRootCertPubKey_ndx)
        _send_buffer.write((20 + HostRootCertPubKey_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostRootCertPubKey_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertPubKey_ndx < 0 or HostRootCertPubKey_ndx >= 4:
            raise IndexError(HostRootCertPubKey_ndx)
        _send_buffer.write((20 + HostRootCertPubKey_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostRootCertPubKey_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertPubKey_ndx < 0 or HostRootCertPubKey_ndx >= 4:
            raise IndexError(HostRootCertPubKey_ndx)
        _send_buffer.write((20 + HostRootCertPubKey_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, HostRootCertPubKey_ndx: int, Value: str) -> None:
        frame = self.build_frame(HostRootCertPubKey_ndx=HostRootCertPubKey_ndx, Value=Value)
        self.execute(frame)
class Device_HostSecurity_HostRootCertSnr(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x18
    def delete(self, HostRootCertSnr_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertSnr_ndx < 0 or HostRootCertSnr_ndx >= 4:
            raise IndexError(HostRootCertSnr_ndx)
        _send_buffer.write((24 + HostRootCertSnr_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostRootCertSnr_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertSnr_ndx < 0 or HostRootCertSnr_ndx >= 4:
            raise IndexError(HostRootCertSnr_ndx)
        _send_buffer.write((24 + HostRootCertSnr_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostRootCertSnr_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if HostRootCertSnr_ndx < 0 or HostRootCertSnr_ndx >= 4:
            raise IndexError(HostRootCertSnr_ndx)
        _send_buffer.write((24 + HostRootCertSnr_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, HostRootCertSnr_ndx: int, Value: str) -> None:
        frame = self.build_frame(HostRootCertSnr_ndx=HostRootCertSnr_ndx, Value=Value)
        self.execute(frame)
class Device_HostSecurity_ReaderCertSnr(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x20
    def delete(self, ReaderCertSnr_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertSnr_ndx < 0 or ReaderCertSnr_ndx >= 4:
            raise IndexError(ReaderCertSnr_ndx)
        _send_buffer.write((32 + ReaderCertSnr_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ReaderCertSnr_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertSnr_ndx < 0 or ReaderCertSnr_ndx >= 4:
            raise IndexError(ReaderCertSnr_ndx)
        _send_buffer.write((32 + ReaderCertSnr_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, ReaderCertSnr_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertSnr_ndx < 0 or ReaderCertSnr_ndx >= 4:
            raise IndexError(ReaderCertSnr_ndx)
        _send_buffer.write((32 + ReaderCertSnr_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, ReaderCertSnr_ndx: int, Value: str) -> None:
        frame = self.build_frame(ReaderCertSnr_ndx=ReaderCertSnr_ndx, Value=Value)
        self.execute(frame)
class Device_HostSecurity_ReaderCertIssuer(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x24
    def delete(self, ReaderCertIssuer_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertIssuer_ndx < 0 or ReaderCertIssuer_ndx >= 4:
            raise IndexError(ReaderCertIssuer_ndx)
        _send_buffer.write((36 + ReaderCertIssuer_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ReaderCertIssuer_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertIssuer_ndx < 0 or ReaderCertIssuer_ndx >= 4:
            raise IndexError(ReaderCertIssuer_ndx)
        _send_buffer.write((36 + ReaderCertIssuer_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, ReaderCertIssuer_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertIssuer_ndx < 0 or ReaderCertIssuer_ndx >= 4:
            raise IndexError(ReaderCertIssuer_ndx)
        _send_buffer.write((36 + ReaderCertIssuer_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, ReaderCertIssuer_ndx: int, Value: str) -> None:
        frame = self.build_frame(ReaderCertIssuer_ndx=ReaderCertIssuer_ndx, Value=Value)
        self.execute(frame)
class Device_HostSecurity_ReaderCertValidity(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x28
    def delete(self, ReaderCertValidity_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertValidity_ndx < 0 or ReaderCertValidity_ndx >= 4:
            raise IndexError(ReaderCertValidity_ndx)
        _send_buffer.write((40 + ReaderCertValidity_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ReaderCertValidity_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertValidity_ndx < 0 or ReaderCertValidity_ndx >= 4:
            raise IndexError(ReaderCertValidity_ndx)
        _send_buffer.write((40 + ReaderCertValidity_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, ReaderCertValidity_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertValidity_ndx < 0 or ReaderCertValidity_ndx >= 4:
            raise IndexError(ReaderCertValidity_ndx)
        _send_buffer.write((40 + ReaderCertValidity_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, ReaderCertValidity_ndx: int, Value: str) -> None:
        frame = self.build_frame(ReaderCertValidity_ndx=ReaderCertValidity_ndx, Value=Value)
        self.execute(frame)
class Device_HostSecurity_ReaderCertSignature(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x08
    ValueKey = 0x2C
    def delete(self, ReaderCertSignature_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertSignature_ndx < 0 or ReaderCertSignature_ndx >= 4:
            raise IndexError(ReaderCertSignature_ndx)
        _send_buffer.write((44 + ReaderCertSignature_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ReaderCertSignature_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertSignature_ndx < 0 or ReaderCertSignature_ndx >= 4:
            raise IndexError(ReaderCertSignature_ndx)
        _send_buffer.write((44 + ReaderCertSignature_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, ReaderCertSignature_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if ReaderCertSignature_ndx < 0 or ReaderCertSignature_ndx >= 4:
            raise IndexError(ReaderCertSignature_ndx)
        _send_buffer.write((44 + ReaderCertSignature_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, ReaderCertSignature_ndx: int, Value: str) -> None:
        frame = self.build_frame(ReaderCertSignature_ndx=ReaderCertSignature_ndx, Value=Value)
        self.execute(frame)
class Device_VirtualLeds(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
class Device_VirtualLeds_TransitionTime(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x09
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VirtualLeds_PulsePeriod(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x09
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_VirtualLeds_CustomVledDefinition(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x09
    ValueKey = 0x40
    def delete(self, CustomVledDefinition_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        if CustomVledDefinition_ndx < 0 or CustomVledDefinition_ndx >= 16:
            raise IndexError(CustomVledDefinition_ndx)
        _send_buffer.write((64 + CustomVledDefinition_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VirtualLedDefinition:
        _recv_buffer = BytesIO(frame)
        _Mode_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _ContainsTransitionTime = bool((_Mode_int >> 2) & 0b1)
        _IsPulse = bool((_Mode_int >> 1) & 0b1)
        _ContainsPhysicalLedSelection = bool((_Mode_int >> 0) & 0b1)
        _Mode = VirtualLedDefinition_Mode(_ContainsTransitionTime, _IsPulse, _ContainsPhysicalLedSelection)
        _RgbColor = safe_read_int_from_buffer(_recv_buffer, 4)
        if _ContainsPhysicalLedSelection:
            _PhysicalLedSelection = VirtualLedDefinition_PhysicalLedSelection_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        else:
            _PhysicalLedSelection = None
        if _IsPulse:
            _RgbColor2 = safe_read_int_from_buffer(_recv_buffer, 4)
        else:
            _RgbColor2 = None
        if _ContainsTransitionTime:
            _TransitionTime = safe_read_int_from_buffer(_recv_buffer, 2)
        else:
            _TransitionTime = None
        _VledDefinition = VirtualLedDefinition(_Mode, _RgbColor, _PhysicalLedSelection, _RgbColor2, _TransitionTime)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _VledDefinition
    def get(self, CustomVledDefinition_ndx: int) -> VirtualLedDefinition:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        if CustomVledDefinition_ndx < 0 or CustomVledDefinition_ndx >= 16:
            raise IndexError(CustomVledDefinition_ndx)
        _send_buffer.write((64 + CustomVledDefinition_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, CustomVledDefinition_ndx: int, VledDefinition: Union[VirtualLedDefinition, VirtualLedDefinition_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        if CustomVledDefinition_ndx < 0 or CustomVledDefinition_ndx >= 16:
            raise IndexError(CustomVledDefinition_ndx)
        _send_buffer.write((64 + CustomVledDefinition_ndx).to_bytes(1, byteorder='big'))
        if isinstance(VledDefinition, dict):
            VledDefinition = VirtualLedDefinition(**VledDefinition)
        _Mode, _RgbColor, _PhysicalLedSelection, _RgbColor2, _TransitionTime = VledDefinition
        if isinstance(_Mode, dict):
            _Mode = VirtualLedDefinition_Mode(**_Mode)
        _Mode_int = 0
        _Mode_int |= (int(_Mode.ContainsTransitionTime) & 0b1) << 2
        _Mode_int |= (int(_Mode.IsPulse) & 0b1) << 1
        _Mode_int |= (int(_Mode.ContainsPhysicalLedSelection) & 0b1) << 0
        _send_buffer.write(_Mode_int.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_RgbColor.to_bytes(length=4, byteorder='big'))
        if _Mode.ContainsPhysicalLedSelection:
            if _PhysicalLedSelection is None:
                raise TypeError("missing a required argument: '_PhysicalLedSelection'")
            _send_buffer.write(VirtualLedDefinition_PhysicalLedSelection_Parser.as_value(_PhysicalLedSelection).to_bytes(length=1, byteorder='big'))
        if _Mode.IsPulse:
            if _RgbColor2 is None:
                raise TypeError("missing a required argument: '_RgbColor2'")
            _send_buffer.write(_RgbColor2.to_bytes(length=4, byteorder='big'))
        if _Mode.ContainsTransitionTime:
            if _TransitionTime is None:
                raise TypeError("missing a required argument: '_TransitionTime'")
            _send_buffer.write(_TransitionTime.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, CustomVledDefinition_ndx: int, VledDefinition: Union[VirtualLedDefinition, VirtualLedDefinition_Dict]) -> None:
        frame = self.build_frame(CustomVledDefinition_ndx=CustomVledDefinition_ndx, VledDefinition=VledDefinition)
        self.execute(frame)
class Device_Statistics(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
class Device_Statistics_FirmwareId(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Statistics_FirmwareRelease(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Statistics_WatchdogResetCount(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Statistics_StackOverflowCount(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Statistics_StackOverflowTaskAddress(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Statistics_BrownoutResetCount(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Statistics_KeypadResetCount(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Device_Statistics_AccessRestrictedTaskOverflowResetCount(ConfigValue):
    MasterKey = 0x02
    SubKey = 0x44
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'D')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom(ConfigValue):
    MasterKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
class Custom_BlackWhiteList(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
class Custom_BlackWhiteList_ListMode(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x02
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Custom_BlackWhiteList_ListMode_BlackWhiteListMode:
        _recv_buffer = BytesIO(frame)
        _BlackWhiteListMode = Custom_BlackWhiteList_ListMode_BlackWhiteListMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _BlackWhiteListMode
    def get(self, ) -> Custom_BlackWhiteList_ListMode_BlackWhiteListMode:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, BlackWhiteListMode: Custom_BlackWhiteList_ListMode_BlackWhiteListMode) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Custom_BlackWhiteList_ListMode_BlackWhiteListMode_Parser.as_value(BlackWhiteListMode).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, BlackWhiteListMode: Custom_BlackWhiteList_ListMode_BlackWhiteListMode) -> None:
        frame = self.build_frame(BlackWhiteListMode=BlackWhiteListMode)
        self.execute(frame)
class Custom_BlackWhiteList_RangeStart(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x02
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_BlackWhiteList_RangeEnd(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x02
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_BlackWhiteList_EntrySize(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x02
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_BlackWhiteList_List(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x02
    ValueKey = 0x10
    def delete(self, List_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        if List_ndx < 0 or List_ndx >= 112:
            raise IndexError(List_ndx)
        _send_buffer.write((16 + List_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, List_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        if List_ndx < 0 or List_ndx >= 112:
            raise IndexError(List_ndx)
        _send_buffer.write((16 + List_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, List_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x02')
        if List_ndx < 0 or List_ndx >= 112:
            raise IndexError(List_ndx)
        _send_buffer.write((16 + List_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, List_ndx: int, Value: str) -> None:
        frame = self.build_frame(List_ndx=List_ndx, Value=Value)
        self.execute(frame)
class Custom_Crypto(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
class Custom_Crypto_Key(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x01
    ValueKey = 0x80
    def delete(self, Key_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x01')
        if Key_ndx < 0 or Key_ndx >= 128:
            raise IndexError(Key_ndx)
        _send_buffer.write((128 + Key_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Custom_Crypto_Key_Result:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _DenyIdentify = bool((_Value_int >> 2) & 0b1)
        _DenyEncrypt = bool((_Value_int >> 1) & 0b1)
        _DenyDecrypt = bool((_Value_int >> 0) & 0b1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Custom_Crypto_Key_Result(_DenyIdentify, _DenyEncrypt, _DenyDecrypt)
    def get(self, Key_ndx: int) -> Custom_Crypto_Key_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x01')
        if Key_ndx < 0 or Key_ndx >= 128:
            raise IndexError(Key_ndx)
        _send_buffer.write((128 + Key_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Key_ndx: int, DenyIdentify: bool, DenyEncrypt: bool, DenyDecrypt: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x01')
        if Key_ndx < 0 or Key_ndx >= 128:
            raise IndexError(Key_ndx)
        _send_buffer.write((128 + Key_ndx).to_bytes(1, byteorder='big'))
        _var_0000_int = 0
        _var_0000_int |= (int(DenyIdentify) & 0b1) << 2
        _var_0000_int |= (int(DenyEncrypt) & 0b1) << 1
        _var_0000_int |= (int(DenyDecrypt) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Key_ndx: int, DenyIdentify: bool, DenyEncrypt: bool, DenyDecrypt: bool) -> None:
        frame = self.build_frame(Key_ndx=Key_ndx, DenyIdentify=DenyIdentify, DenyEncrypt=DenyEncrypt, DenyDecrypt=DenyDecrypt)
        self.execute(frame)
class Custom_AdminData(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
class Custom_AdminData_CustomerNo(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DeviceSettingsNo(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DeviceSettingsName(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DeviceSettingsVersion(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_ProjectSettingsNo(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_ProjectName(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_ProjectSettingsVersion(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_MasterCardNoRef(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_MasterCardNameRef(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DataLen(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x0A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\n')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DummyDeviceSettingsNo(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x0B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DummyDeviceSettingsName(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x0C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0c')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DummyDeviceSettingsVersion(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x0D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\r')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_AddCustomerKeyInProduction(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x0E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bool:
        _recv_buffer = BytesIO(frame)
        _Value = bool(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> bool:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x0e')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: bool) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_MasterCardNo(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_MasterCardName(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DeviceSettingsTemplateBased(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bool:
        _recv_buffer = BytesIO(frame)
        _Value = bool(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> bool:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: bool) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_ProjectSettingsTemplateBased(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bool:
        _recv_buffer = BytesIO(frame)
        _Value = bool(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> bool:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: bool) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_UniqueDeviceName(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DraftFlag(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bool:
        _recv_buffer = BytesIO(frame)
        _Value = bool(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> bool:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: bool) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_BaltechConfigID(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_DeviceSettingsCustomerNo(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_FactoryResetFirmwareVersion(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[Custom_AdminData_FactoryResetFirmwareVersion_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _FirmwareId = safe_read_int_from_buffer(_recv_buffer, 2)
            _FwVersionMajor = safe_read_int_from_buffer(_recv_buffer, 1)
            _FwVersionMinor = safe_read_int_from_buffer(_recv_buffer, 1)
            _FwVersionBuild = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value_Entry = Custom_AdminData_FactoryResetFirmwareVersion_Value_Entry(_FirmwareId, _FwVersionMajor, _FwVersionMinor, _FwVersionBuild)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> List[Custom_AdminData_FactoryResetFirmwareVersion_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: List[Custom_AdminData_FactoryResetFirmwareVersion_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x18')
        for _Value_Entry in Value:
            _FirmwareId, _FwVersionMajor, _FwVersionMinor, _FwVersionBuild = _Value_Entry
            _send_buffer.write(_FirmwareId.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_FwVersionMajor.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_FwVersionMinor.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_FwVersionBuild.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: List[Custom_AdminData_FactoryResetFirmwareVersion_Value_Entry]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_BleFirmwareVersion(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x19')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_RequiresBusAddress(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bool:
        _recv_buffer = BytesIO(frame)
        _Value = bool(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> bool:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: bool) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Custom_AdminData_V2eFormatIndicator(ConfigValue):
    MasterKey = 0x06
    SubKey = 0x20
    ValueKey = 0x80
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x80')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x80')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x80')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers(ConfigValue):
    MasterKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
class Registers_Rc(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
class Registers_Rc_TxControl14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x80
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x80')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x80')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x80')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x90
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControl15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControlALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TxControlVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'A')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x81
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x81')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x81')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x81')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x91
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductance15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductanceALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_CwConductanceVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'B')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x62
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x82
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x82')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x82')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x82')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x92
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductance15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductanceALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModConductanceVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'C')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x63
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x83
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x83')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x83')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x83')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x93
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidth15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x64
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x84
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x94
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOF15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOFALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_ModWidthSOFVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x55
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'U')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'U')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'U')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x65
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x75
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x85
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x85')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x85')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x85')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x95
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFraming15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFramingALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_TypeBFramingVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x46
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x56
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'V')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'V')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'V')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x66
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'f')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x76
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl115Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x86
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x86')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x86')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x86')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl115Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x96
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl114B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl115(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl1ALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxControl1VOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x47
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x57
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'W')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'W')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'W')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x67
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'g')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'g')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'g')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x77
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x87
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x97
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhase15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhaseALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BitPhaseVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x18')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x58
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'X')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'X')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'X')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x68
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'h')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'h')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'h')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x78
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x88
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x88')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x88')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x88')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x98
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThreshold15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThresholdALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxThresholdVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x19')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x39
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x49
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x59
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x69
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'i')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'i')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'i')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x79
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x89
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x89')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x89')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x89')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x99
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xA9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xB9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControl15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xC9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControlALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xD9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_BPSKDemControlVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xF9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x0A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\n')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x1A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x1a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x1a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x1a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x2A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'*')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'*')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'*')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x3A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x4A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x5A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x6A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'j')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'j')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'j')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x7A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait15Standard(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x8A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x8a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x8a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x8a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait15Fast(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0x9A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xAA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xaa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xaa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xaa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xBA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xba')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xba')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xba')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWait15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xCA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xca')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xca')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xca')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWaitALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xDA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xda')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xda')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xda')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc_RxWaitVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x01
    ValueKey = 0xFA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xfa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xfa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xfa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
class Registers_Pn_TxMode14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'`')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'p')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxMode14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxModeALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxModeVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'A')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxMode14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxModeALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxModeVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'B')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'R')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x62
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSel14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSelALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxSelVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'C')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x63
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b's')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThreshold14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThresholdALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RxThresholdVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x64
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b't')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_Demod14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_DemodALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_DemodVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'E')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x55
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'U')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'U')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'U')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x65
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x75
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'u')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFC14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFCALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_MifNFCVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x46
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'F')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x56
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'V')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'V')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'V')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x66
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'f')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x76
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'v')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'v')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'v')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCV14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCVALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ManualRCVVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x47
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'G')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x57
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'W')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'W')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'W')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x67
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'g')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'g')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'g')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x77
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'w')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'w')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'w')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeB14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeBALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TypeBVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x18')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'H')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x58
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'X')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'X')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'X')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x68
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'h')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'h')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'h')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x78
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'x')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'x')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'x')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOff14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOffALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOffVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x19')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x39
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x49
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'I')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x59
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x69
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'i')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'i')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'i')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x79
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xA9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWith14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xB9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWithALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xD9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModWithVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xF9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x0A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\n')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x1A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x2A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'*')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'*')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'*')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x3A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b':')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b':')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b':')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x4A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'J')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'J')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'J')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x5A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x6A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'j')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'j')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'j')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x7A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xAA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xaa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xaa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xaa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhase14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xBA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xba')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xba')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xba')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhaseALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xDA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xda')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xda')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xda')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_TxBitPhaseVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xFA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x0B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x1B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x2B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'+')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'+')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'+')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x3B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b';')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b';')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b';')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x4B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'K')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'K')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'K')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x5B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'[')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'[')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'[')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x6B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'k')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'k')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'k')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x7B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'{')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'{')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'{')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xAB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xab')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xab')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xab')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xBB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbb')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbb')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbb')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfgALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xDB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdb')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdb')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdb')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_RFCfgVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xFB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfb')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfb')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfb')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x0C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x1C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x2C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b',')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b',')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b',')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x3C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'<')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'<')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'<')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x4C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'L')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'L')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'L')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x5C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\\')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\\')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\\')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x6C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'l')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'l')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'l')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x7C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'|')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'|')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'|')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xAC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xac')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xac')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xac')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOn14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xBC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbc')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbc')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbc')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOnALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xDC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdc')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdc')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdc')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_GsNOnVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xFC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfc')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfc')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfc')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x0D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x1D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1d')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1d')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1d')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x2D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'-')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'-')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'-')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x3D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'=')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'=')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'=')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x4D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'M')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'M')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'M')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x5D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b']')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b']')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b']')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x6D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'm')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'm')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'm')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x7D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'}')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'}')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'}')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xAD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xad')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xad')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xad')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsP14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xBD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsPALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xDD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_CWGsPVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xFD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x0E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x1E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x2E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'.')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'.')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'.')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x3E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'>')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'>')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'>')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x4E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'N')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'N')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'N')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x5E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'^')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'^')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'^')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x6E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'n')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0x7E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'~')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'~')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'~')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xAE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xae')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xae')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xae')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsP14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xBE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbe')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbe')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbe')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsPALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xDE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xde')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xde')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xde')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Pn_ModGsPVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x11
    ValueKey = 0xFE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfe')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfe')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfe')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
class Registers_Rc663_TxAmpReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'`')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'p')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x80
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x80')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x80')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x80')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxAmpRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'A')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x81
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x81')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x81')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x81')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxDataModWithRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'B')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'R')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x62
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x82
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x82')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x82')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x82')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxThresholdRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'C')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x63
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b's')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x83
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x83')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x83')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x83')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxAnaRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x64
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b't')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x84
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x84')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x84')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x84')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxModeRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'E')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x55
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'U')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'U')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'U')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x65
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x75
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'u')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x85
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x85')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x85')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x85')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxConRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x46
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'F')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x56
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'V')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'V')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'V')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x66
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'f')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x76
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'v')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'v')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'v')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x86
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x86')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x86')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x86')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_TxlRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x47
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'G')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x57
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'W')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'W')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'W')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x67
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'g')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'g')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'g')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x77
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'w')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'w')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'w')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x87
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x87')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x87')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x87')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RxWaitRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x18')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'H')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x58
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'X')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'X')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'X')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x68
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'h')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'h')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'h')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x78
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'x')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'x')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'x')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x88
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x88')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x88')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x88')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_RcvRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14A848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14A424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x19')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14A212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14A106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x39
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14B848(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x49
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'I')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14B424(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x59
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14B212(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x69
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'i')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'i')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'i')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14B106(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x79
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg15(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0x89
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x89')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x89')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x89')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14A(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xA9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutReg14B(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xB9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutRegALL(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xD9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Registers_Rc663_SigOutRegVOLATILE(ConfigValue):
    MasterKey = 0x07
    SubKey = 0x22
    ValueKey = 0xF9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project(ConfigValue):
    MasterKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
class Project_VhlSettings(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
class Project_VhlSettings_ScanCardFamilies(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_ForceReselect(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings_ForceReselect_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_VhlSettings_ForceReselect_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_VhlSettings_ForceReselect_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_VhlSettings_ForceReselect_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Project_VhlSettings_ForceReselect_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_VhlSettings_ForceReselect_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_DelayRequestATS(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_DelayPerformPPS(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_MaxBaudrateIso14443A(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> MaxBaudrateIso14443:
        _recv_buffer = BytesIO(frame)
        _Value = MaxBaudrateIso14443_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> MaxBaudrateIso14443:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: MaxBaudrateIso14443) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x10')
        _send_buffer.write(MaxBaudrateIso14443_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: MaxBaudrateIso14443) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_MaxBaudrateIso14443B(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> MaxBaudrateIso14443:
        _recv_buffer = BytesIO(frame)
        _Value = MaxBaudrateIso14443_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> MaxBaudrateIso14443:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: MaxBaudrateIso14443) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b' ')
        _send_buffer.write(MaxBaudrateIso14443_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: MaxBaudrateIso14443) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_HighPrioTaglist(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[CardType]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _HighPrioTag = CardType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _Value.append(_HighPrioTag)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> List[CardType]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: List[CardType]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'!')
        for _Value_Entry in Value:
            _HighPrioTag = _Value_Entry
            _send_buffer.write(CardType_Parser.as_value(_HighPrioTag).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: List[CardType]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_HighPrioDelay(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_HandleLegicCTCAsSinglePrimeTransponder(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings_HandleLegicCTCAsSinglePrimeTransponder_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_VhlSettings_HandleLegicCTCAsSinglePrimeTransponder_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_VhlSettings_HandleLegicCTCAsSinglePrimeTransponder_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_VhlSettings_HandleLegicCTCAsSinglePrimeTransponder_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'#')
        _send_buffer.write(Project_VhlSettings_HandleLegicCTCAsSinglePrimeTransponder_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_VhlSettings_HandleLegicCTCAsSinglePrimeTransponder_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_PrioritizeCardFamilies(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x06')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_PrioritizationTriggeringCardFamilies(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x07')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_PrioritizeDelay(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_ConfCardCardFamilies(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings_DesfireEV1RetryLoopTime(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Time = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Time
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Time: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'$')
        _send_buffer.write(Time.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Time: int) -> None:
        frame = self.build_frame(Time=Time)
        self.execute(frame)
class Project_VhlSettings_Iso14aVasup(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x02
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings_Iso14aVasup_Result:
        _recv_buffer = BytesIO(frame)
        _FormatVersion = safe_read_int_from_buffer(_recv_buffer, 1)
        _TerminalInfo_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _VasSupported = bool((_TerminalInfo_int >> 7) & 0b1)
        _AuthUserRequested = bool((_TerminalInfo_int >> 6) & 0b1)
        _TerminalTypeDataLength = (_TerminalInfo_int >> 0) & 0b1111
        _TerminalType = safe_read_int_from_buffer(_recv_buffer, 2)
        _TCI = _recv_buffer.read(-1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Project_VhlSettings_Iso14aVasup_Result(_FormatVersion, _VasSupported, _AuthUserRequested, _TerminalTypeDataLength, _TerminalType, _TCI)
    def get(self, ) -> Project_VhlSettings_Iso14aVasup_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, FormatVersion: int, VasSupported: bool, AuthUserRequested: bool, TerminalTypeDataLength: int, TerminalType: int, TCI: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'%')
        _send_buffer.write(FormatVersion.to_bytes(length=1, byteorder='big'))
        _var_0000_int = 0
        _var_0000_int |= (int(VasSupported) & 0b1) << 7
        _var_0000_int |= (int(AuthUserRequested) & 0b1) << 6
        _var_0000_int |= (TerminalTypeDataLength & 0b1111) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(TerminalType.to_bytes(length=2, byteorder='big'))
        _send_buffer.write(TCI)
        return _send_buffer.getvalue()
    def __call__(self, FormatVersion: int, VasSupported: bool, AuthUserRequested: bool, TerminalTypeDataLength: int, TerminalType: int, TCI: bytes) -> None:
        frame = self.build_frame(FormatVersion=FormatVersion, VasSupported=VasSupported, AuthUserRequested=AuthUserRequested, TerminalTypeDataLength=TerminalTypeDataLength, TerminalType=TerminalType, TCI=TCI)
        self.execute(frame)
class Project_VhlSettingsLegic(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
class Project_VhlSettingsLegic_RfStdList(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x43
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettingsLegic_RfStdList_RfStds:
        _recv_buffer = BytesIO(frame)
        _RfStds = Project_VhlSettingsLegic_RfStdList_RfStds_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _RfStds
    def get(self, ) -> Project_VhlSettingsLegic_RfStdList_RfStds:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, RfStds: Project_VhlSettingsLegic_RfStdList_RfStds) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Project_VhlSettingsLegic_RfStdList_RfStds_Parser.as_value(RfStds).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, RfStds: Project_VhlSettingsLegic_RfStdList_RfStds) -> None:
        frame = self.build_frame(RfStds=RfStds)
        self.execute(frame)
class Project_VhlSettingsLegic_TxpType(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x43
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettingsLegic_TxpType_LegicTxpTypes:
        _recv_buffer = BytesIO(frame)
        _LegicTxpTypes = Project_VhlSettingsLegic_TxpType_LegicTxpTypes_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _LegicTxpTypes
    def get(self, ) -> Project_VhlSettingsLegic_TxpType_LegicTxpTypes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, LegicTxpTypes: Project_VhlSettingsLegic_TxpType_LegicTxpTypes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Project_VhlSettingsLegic_TxpType_LegicTxpTypes_Parser.as_value(LegicTxpTypes).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, LegicTxpTypes: Project_VhlSettingsLegic_TxpType_LegicTxpTypes) -> None:
        frame = self.build_frame(LegicTxpTypes=LegicTxpTypes)
        self.execute(frame)
class Project_VhlSettingsLegic_TxpFamily(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x43
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettingsLegic_TxpFamily_LegicTxpFamilies:
        _recv_buffer = BytesIO(frame)
        _LegicTxpFamilies = Project_VhlSettingsLegic_TxpFamily_LegicTxpFamilies_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _LegicTxpFamilies
    def get(self, ) -> Project_VhlSettingsLegic_TxpFamily_LegicTxpFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, LegicTxpFamilies: Project_VhlSettingsLegic_TxpFamily_LegicTxpFamilies) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'C')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Project_VhlSettingsLegic_TxpFamily_LegicTxpFamilies_Parser.as_value(LegicTxpFamilies).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, LegicTxpFamilies: Project_VhlSettingsLegic_TxpFamily_LegicTxpFamilies) -> None:
        frame = self.build_frame(LegicTxpFamilies=LegicTxpFamilies)
        self.execute(frame)
class Project_HidSam(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
class Project_HidSam_Confcard(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x51
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_HidSam_Confcard_Result:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _HidConfigurationCard = bool((_Value_int >> 1) & 0b1)
        _HidPreparationCard = bool((_Value_int >> 0) & 0b1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Project_HidSam_Confcard_Result(_HidConfigurationCard, _HidPreparationCard)
    def get(self, ) -> Project_HidSam_Confcard_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HidConfigurationCard: bool, HidPreparationCard: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x01')
        _var_0000_int = 0
        _var_0000_int |= (int(HidConfigurationCard) & 0b1) << 1
        _var_0000_int |= (int(HidPreparationCard) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, HidConfigurationCard: bool, HidPreparationCard: bool) -> None:
        frame = self.build_frame(HidConfigurationCard=HidConfigurationCard, HidPreparationCard=HidPreparationCard)
        self.execute(frame)
class Project_HidSam_ScanTime(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x51
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_HidSam_Retries(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x51
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'Q')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
class Project_VhlSettings125Khz_ScanCardTypesPart1(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardTypes125KhzPart1:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _TTF = bool((_Value_int >> 15) & 0b1)
        _Hitag2B = bool((_Value_int >> 14) & 0b1)
        _Hitag2M = bool((_Value_int >> 13) & 0b1)
        _Hitag1S = bool((_Value_int >> 12) & 0b1)
        _HidIoprox = bool((_Value_int >> 11) & 0b1)
        _HidProx = bool((_Value_int >> 10) & 0b1)
        _HidAwid = bool((_Value_int >> 9) & 0b1)
        _HidIndala = bool((_Value_int >> 8) & 0b1)
        _Quadrakey = bool((_Value_int >> 7) & 0b1)
        _Keri = bool((_Value_int >> 6) & 0b1)
        _HidProx32 = bool((_Value_int >> 5) & 0b1)
        _Pyramid = bool((_Value_int >> 4) & 0b1)
        _EM4450 = bool((_Value_int >> 3) & 0b1)
        _EM4100 = bool((_Value_int >> 1) & 0b1)
        _EM4205 = bool((_Value_int >> 0) & 0b1)
        _Value = CardTypes125KhzPart1(_TTF, _Hitag2B, _Hitag2M, _Hitag1S, _HidIoprox, _HidProx, _HidAwid, _HidIndala, _Quadrakey, _Keri, _HidProx32, _Pyramid, _EM4450, _EM4100, _EM4205)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardTypes125KhzPart1:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardTypes125KhzPart1, CardTypes125KhzPart1_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x00')
        if isinstance(Value, dict):
            Value = CardTypes125KhzPart1(**Value)
        Value_int = 0
        Value_int |= (int(Value.TTF) & 0b1) << 15
        Value_int |= (int(Value.Hitag2B) & 0b1) << 14
        Value_int |= (int(Value.Hitag2M) & 0b1) << 13
        Value_int |= (int(Value.Hitag1S) & 0b1) << 12
        Value_int |= (int(Value.HidIoprox) & 0b1) << 11
        Value_int |= (int(Value.HidProx) & 0b1) << 10
        Value_int |= (int(Value.HidAwid) & 0b1) << 9
        Value_int |= (int(Value.HidIndala) & 0b1) << 8
        Value_int |= (int(Value.Quadrakey) & 0b1) << 7
        Value_int |= (int(Value.Keri) & 0b1) << 6
        Value_int |= (int(Value.HidProx32) & 0b1) << 5
        Value_int |= (int(Value.Pyramid) & 0b1) << 4
        Value_int |= (int(Value.EM4450) & 0b1) << 3
        Value_int |= (int(Value.EM4100) & 0b1) << 1
        Value_int |= (int(Value.EM4205) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardTypes125KhzPart1, CardTypes125KhzPart1_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_ScanCardTypesPart2(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardTypes125KhzPart2:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _Idteck = bool((_Value_int >> 4) & 0b1)
        _Cotag = bool((_Value_int >> 3) & 0b1)
        _HidIndalaSecure = bool((_Value_int >> 2) & 0b1)
        _GProx = bool((_Value_int >> 1) & 0b1)
        _SecuraKey = bool((_Value_int >> 0) & 0b1)
        _Value = CardTypes125KhzPart2(_Idteck, _Cotag, _HidIndalaSecure, _GProx, _SecuraKey)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardTypes125KhzPart2:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardTypes125KhzPart2, CardTypes125KhzPart2_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x16')
        if isinstance(Value, dict):
            Value = CardTypes125KhzPart2(**Value)
        Value_int = 0
        Value_int |= (int(Value.Idteck) & 0b1) << 4
        Value_int |= (int(Value.Cotag) & 0b1) << 3
        Value_int |= (int(Value.HidIndalaSecure) & 0b1) << 2
        Value_int |= (int(Value.GProx) & 0b1) << 1
        Value_int |= (int(Value.SecuraKey) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardTypes125KhzPart2, CardTypes125KhzPart2_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_TTFModType(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_TTFModType_TTFMod:
        _recv_buffer = BytesIO(frame)
        _TTFMod = Project_VhlSettings125Khz_TTFModType_TTFMod_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _TTFMod
    def get(self, ) -> Project_VhlSettings125Khz_TTFModType_TTFMod:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, TTFMod: Project_VhlSettings125Khz_TTFModType_TTFMod) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Project_VhlSettings125Khz_TTFModType_TTFMod_Parser.as_value(TTFMod).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, TTFMod: Project_VhlSettings125Khz_TTFModType_TTFMod) -> None:
        frame = self.build_frame(TTFMod=TTFMod)
        self.execute(frame)
class Project_VhlSettings125Khz_TTFBaudrate(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_TTFBaudrate_TTFBaud:
        _recv_buffer = BytesIO(frame)
        _TTFBaud = Project_VhlSettings125Khz_TTFBaudrate_TTFBaud_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _TTFBaud
    def get(self, ) -> Project_VhlSettings125Khz_TTFBaudrate_TTFBaud:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, TTFBaud: Project_VhlSettings125Khz_TTFBaudrate_TTFBaud) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Project_VhlSettings125Khz_TTFBaudrate_TTFBaud_Parser.as_value(TTFBaud).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, TTFBaud: Project_VhlSettings125Khz_TTFBaudrate_TTFBaud) -> None:
        frame = self.build_frame(TTFBaud=TTFBaud)
        self.execute(frame)
class Project_VhlSettings125Khz_TTFHeaderLength(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_TTFHeader(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_TTFDataLength(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_TTFOkCounter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_IndaspDecode(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x07')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_IndaspParityCheck(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_IndaspParityCheck_ParityDisable:
        _recv_buffer = BytesIO(frame)
        _ParityDisable = Project_VhlSettings125Khz_IndaspParityCheck_ParityDisable_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ParityDisable
    def get(self, ) -> Project_VhlSettings125Khz_IndaspParityCheck_ParityDisable:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, ParityDisable: Project_VhlSettings125Khz_IndaspParityCheck_ParityDisable) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Project_VhlSettings125Khz_IndaspParityCheck_ParityDisable_Parser.as_value(ParityDisable).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, ParityDisable: Project_VhlSettings125Khz_IndaspParityCheck_ParityDisable) -> None:
        frame = self.build_frame(ParityDisable=ParityDisable)
        self.execute(frame)
class Project_VhlSettings125Khz_IndaspOkCounter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\t')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Project_VhlSettings125Khz_AwidOkCounter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x0A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\n')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Project_VhlSettings125Khz_HidProxOkCounter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x0B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0b')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Project_VhlSettings125Khz_QuadrakeyOkCounter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x0C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0c')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Project_VhlSettings125Khz_IoproxOkCounter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x0D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\r')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Project_VhlSettings125Khz_TTFReadStartpos(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x0E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0e')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_HidProxSerialNrFormat(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x0F
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_HidProxSerialNrFormat_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_VhlSettings125Khz_HidProxSerialNrFormat_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_VhlSettings125Khz_HidProxSerialNrFormat_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_VhlSettings125Khz_HidProxSerialNrFormat_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x0f')
        _send_buffer.write(Project_VhlSettings125Khz_HidProxSerialNrFormat_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_VhlSettings125Khz_HidProxSerialNrFormat_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_ModType(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_ModType_Mod:
        _recv_buffer = BytesIO(frame)
        _Mod = Project_VhlSettings125Khz_ModType_Mod_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Mod
    def get(self, ) -> Project_VhlSettings125Khz_ModType_Mod:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Mod: Project_VhlSettings125Khz_ModType_Mod) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Project_VhlSettings125Khz_ModType_Mod_Parser.as_value(Mod).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Mod: Project_VhlSettings125Khz_ModType_Mod) -> None:
        frame = self.build_frame(Mod=Mod)
        self.execute(frame)
class Project_VhlSettings125Khz_BaudRate(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_BaudRate_Baud:
        _recv_buffer = BytesIO(frame)
        _Baud = Project_VhlSettings125Khz_BaudRate_Baud_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Baud
    def get(self, ) -> Project_VhlSettings125Khz_BaudRate_Baud:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Baud: Project_VhlSettings125Khz_BaudRate_Baud) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Project_VhlSettings125Khz_BaudRate_Baud_Parser.as_value(Baud).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Baud: Project_VhlSettings125Khz_BaudRate_Baud) -> None:
        frame = self.build_frame(Baud=Baud)
        self.execute(frame)
class Project_VhlSettings125Khz_GenericOkCounter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _OkCounter = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _OkCounter
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, OkCounter: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'\x17')
        _send_buffer.write(OkCounter.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, OkCounter: int) -> None:
        frame = self.build_frame(OkCounter=OkCounter)
        self.execute(frame)
class Project_VhlSettings125Khz_SnrVersionCotag(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _SnrVersion = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SnrVersion
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SnrVersion: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b' ')
        _send_buffer.write(SnrVersion.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, SnrVersion: int) -> None:
        frame = self.build_frame(SnrVersion=SnrVersion)
        self.execute(frame)
class Project_VhlSettings125Khz_SnrVersionIdteck(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _SnrVersion = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SnrVersion
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SnrVersion: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'!')
        _send_buffer.write(SnrVersion.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, SnrVersion: int) -> None:
        frame = self.build_frame(SnrVersion=SnrVersion)
        self.execute(frame)
class Project_VhlSettings125Khz_EM4100SerialNrFormat(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_EM4100SerialNrFormat_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_VhlSettings125Khz_EM4100SerialNrFormat_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_VhlSettings125Khz_EM4100SerialNrFormat_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_VhlSettings125Khz_EM4100SerialNrFormat_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'"')
        _send_buffer.write(Project_VhlSettings125Khz_EM4100SerialNrFormat_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_VhlSettings125Khz_EM4100SerialNrFormat_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_AwidSerialNrFormat(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_AwidSerialNrFormat_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_VhlSettings125Khz_AwidSerialNrFormat_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_VhlSettings125Khz_AwidSerialNrFormat_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_VhlSettings125Khz_AwidSerialNrFormat_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'#')
        _send_buffer.write(Project_VhlSettings125Khz_AwidSerialNrFormat_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_VhlSettings125Khz_AwidSerialNrFormat_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_IoProxSerialNrFormat(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_IoProxSerialNrFormat_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_VhlSettings125Khz_IoProxSerialNrFormat_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_VhlSettings125Khz_IoProxSerialNrFormat_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_VhlSettings125Khz_IoProxSerialNrFormat_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'$')
        _send_buffer.write(Project_VhlSettings125Khz_IoProxSerialNrFormat_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_VhlSettings125Khz_IoProxSerialNrFormat_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_VhlSettings125Khz_PyramidSerialNrFormat(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x42
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_VhlSettings125Khz_PyramidSerialNrFormat_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_VhlSettings125Khz_PyramidSerialNrFormat_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_VhlSettings125Khz_PyramidSerialNrFormat_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_VhlSettings125Khz_PyramidSerialNrFormat_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'B')
        _send_buffer.write(b'%')
        _send_buffer.write(Project_VhlSettings125Khz_PyramidSerialNrFormat_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_VhlSettings125Khz_PyramidSerialNrFormat_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_SamAVx(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
class Project_SamAVx_PowerUpState(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_SamAVx_PowerUpState_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_SamAVx_PowerUpState_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_SamAVx_PowerUpState_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_SamAVx_PowerUpState_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Project_SamAVx_PowerUpState_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_SamAVx_PowerUpState_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_SamAVx_UnlockKeyNr(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_SamAVx_UnlockKeyVersion(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_SamAVx_UnlockKeyCryptoMemoryIdx(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x84
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CryptoMemoryIndex:
        _recv_buffer = BytesIO(frame)
        _Page = safe_read_int_from_buffer(_recv_buffer, 1)
        _Idx = safe_read_int_from_buffer(_recv_buffer, 1)
        _CryptoMemoryIdx = CryptoMemoryIndex(_Page, _Idx)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _CryptoMemoryIdx
    def get(self, ) -> CryptoMemoryIndex:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, CryptoMemoryIdx: Union[CryptoMemoryIndex, CryptoMemoryIndex_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        if isinstance(CryptoMemoryIdx, dict):
            CryptoMemoryIdx = CryptoMemoryIndex(**CryptoMemoryIdx)
        _Page, _Idx = CryptoMemoryIdx
        _send_buffer.write(_Page.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_Idx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, CryptoMemoryIdx: Union[CryptoMemoryIndex, CryptoMemoryIndex_Dict]) -> None:
        frame = self.build_frame(CryptoMemoryIdx=CryptoMemoryIdx)
        self.execute(frame)
class Project_SamAVx_AuthKeyNr(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_SamAVx_AuthKeyVersion(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_SamAVx_AuthKeyCryptoMemoryIdx(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x87
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CryptoMemoryIndex:
        _recv_buffer = BytesIO(frame)
        _Page = safe_read_int_from_buffer(_recv_buffer, 1)
        _Idx = safe_read_int_from_buffer(_recv_buffer, 1)
        _CryptoMemoryIdx = CryptoMemoryIndex(_Page, _Idx)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _CryptoMemoryIdx
    def get(self, ) -> CryptoMemoryIndex:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, CryptoMemoryIdx: Union[CryptoMemoryIndex, CryptoMemoryIndex_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        if isinstance(CryptoMemoryIdx, dict):
            CryptoMemoryIdx = CryptoMemoryIndex(**CryptoMemoryIdx)
        _Page, _Idx = CryptoMemoryIdx
        _send_buffer.write(_Page.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_Idx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, CryptoMemoryIdx: Union[CryptoMemoryIndex, CryptoMemoryIndex_Dict]) -> None:
        frame = self.build_frame(CryptoMemoryIdx=CryptoMemoryIdx)
        self.execute(frame)
class Project_SamAVx_SecureMessaging(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x01
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_SamAVx_SecureMessaging_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_SamAVx_SecureMessaging_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_SamAVx_SecureMessaging_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_SamAVx_SecureMessaging_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Project_SamAVx_SecureMessaging_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_SamAVx_SecureMessaging_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_CryptoKey(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x30
    def delete(self, CryptoKey_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if CryptoKey_ndx < 0 or CryptoKey_ndx >= 16:
            raise IndexError(CryptoKey_ndx)
        _send_buffer.write((48 + CryptoKey_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
class Project_CryptoKey_Entry(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x30
    ValueKey = 0x80
    def delete(self, CryptoKey_ndx: int, Entry_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        if CryptoKey_ndx < 0 or CryptoKey_ndx >= 16:
            raise IndexError(CryptoKey_ndx)
        _send_buffer.write((48 + CryptoKey_ndx).to_bytes(1, byteorder='big'))
        if Entry_ndx < 0 or Entry_ndx >= 64:
            raise IndexError(Entry_ndx)
        _send_buffer.write((128 + Entry_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_CryptoKey_Entry_Result:
        _recv_buffer = BytesIO(frame)
        _KeySettings_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _IsVersion = bool((_KeySettings_int >> 7) & 0b1)
        _IsDivInfo = bool((_KeySettings_int >> 6) & 0b1)
        _IsDivInfoVhl = bool((_KeySettings_int >> 5) & 0b1)
        _DenyFormat = bool((_KeySettings_int >> 2) & 0b1)
        _DenyWrite = bool((_KeySettings_int >> 1) & 0b1)
        _DenyRead = bool((_KeySettings_int >> 0) & 0b1)
        _KeySettings = KeyAccessRights_KeySettings(_IsVersion, _IsDivInfo, _IsDivInfoVhl, _DenyFormat, _DenyWrite, _DenyRead)
        if _IsVersion:
            _Version = safe_read_int_from_buffer(_recv_buffer, 1)
        else:
            _Version = None
        if _IsDivInfo:
            _DiversificationMode = KeyAccessRights_DiversificationMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _DivIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        else:
            _DiversificationMode = None
            _DivIdx = None
        _AccessRights = KeyAccessRights(_KeySettings, _Version, _DiversificationMode, _DivIdx)
        _Algorithm = CryptoAlgorithm_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _Key_bytes = _recv_buffer.read(-1)
        _Key = _Key_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Project_CryptoKey_Entry_Result(_AccessRights, _Algorithm, _Key)
    def get(self, CryptoKey_ndx: int, Entry_ndx: int) -> Project_CryptoKey_Entry_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        if CryptoKey_ndx < 0 or CryptoKey_ndx >= 16:
            raise IndexError(CryptoKey_ndx)
        _send_buffer.write((48 + CryptoKey_ndx).to_bytes(1, byteorder='big'))
        if Entry_ndx < 0 or Entry_ndx >= 64:
            raise IndexError(Entry_ndx)
        _send_buffer.write((128 + Entry_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, CryptoKey_ndx: int, Entry_ndx: int, AccessRights: Union[KeyAccessRights, KeyAccessRights_Dict], Algorithm: CryptoAlgorithm, Key: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        if CryptoKey_ndx < 0 or CryptoKey_ndx >= 16:
            raise IndexError(CryptoKey_ndx)
        _send_buffer.write((48 + CryptoKey_ndx).to_bytes(1, byteorder='big'))
        if Entry_ndx < 0 or Entry_ndx >= 64:
            raise IndexError(Entry_ndx)
        _send_buffer.write((128 + Entry_ndx).to_bytes(1, byteorder='big'))
        if isinstance(AccessRights, dict):
            AccessRights = KeyAccessRights(**AccessRights)
        _KeySettings, _Version, _DiversificationMode, _DivIdx = AccessRights
        if isinstance(_KeySettings, dict):
            _KeySettings = KeyAccessRights_KeySettings(**_KeySettings)
        _KeySettings_int = 0
        _KeySettings_int |= (int(_KeySettings.IsVersion) & 0b1) << 7
        _KeySettings_int |= (int(_KeySettings.IsDivInfo) & 0b1) << 6
        _KeySettings_int |= (int(_KeySettings.IsDivInfoVhl) & 0b1) << 5
        _KeySettings_int |= (int(_KeySettings.DenyFormat) & 0b1) << 2
        _KeySettings_int |= (int(_KeySettings.DenyWrite) & 0b1) << 1
        _KeySettings_int |= (int(_KeySettings.DenyRead) & 0b1) << 0
        _send_buffer.write(_KeySettings_int.to_bytes(length=1, byteorder='big'))
        if _KeySettings.IsVersion:
            if _Version is None:
                raise TypeError("missing a required argument: '_Version'")
            _send_buffer.write(_Version.to_bytes(length=1, byteorder='big'))
        if _KeySettings.IsDivInfo:
            if _DiversificationMode is None:
                raise TypeError("missing a required argument: '_DiversificationMode'")
            if _DivIdx is None:
                raise TypeError("missing a required argument: '_DivIdx'")
            _send_buffer.write(KeyAccessRights_DiversificationMode_Parser.as_value(_DiversificationMode).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_DivIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(CryptoAlgorithm_Parser.as_value(Algorithm).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(Key.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, CryptoKey_ndx: int, Entry_ndx: int, AccessRights: Union[KeyAccessRights, KeyAccessRights_Dict], Algorithm: CryptoAlgorithm, Key: str) -> None:
        frame = self.build_frame(CryptoKey_ndx=CryptoKey_ndx, Entry_ndx=Entry_ndx, AccessRights=AccessRights, Algorithm=Algorithm, Key=Key)
        self.execute(frame)
class Project_DiversificationData(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
class Project_DiversificationData_Entry(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x40
    ValueKey = 0x00
    def delete(self, Entry_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'@')
        if Entry_ndx < 0 or Entry_ndx >= 32:
            raise IndexError(Entry_ndx)
        _send_buffer.write((0 + Entry_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, Entry_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'@')
        if Entry_ndx < 0 or Entry_ndx >= 32:
            raise IndexError(Entry_ndx)
        _send_buffer.write((0 + Entry_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Entry_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'@')
        if Entry_ndx < 0 or Entry_ndx >= 32:
            raise IndexError(Entry_ndx)
        _send_buffer.write((0 + Entry_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Entry_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Entry_ndx=Entry_ndx, Value=Value)
        self.execute(frame)
class Project_SamAVxKeySettings(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
class Project_SamAVxKeySettings_Index(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x41
    ValueKey = 0x00
    def delete(self, Index_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'A')
        if Index_ndx < 0 or Index_ndx >= 128:
            raise IndexError(Index_ndx)
        _send_buffer.write((0 + Index_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[Project_SamAVxKeySettings_Index_KeySettingsList_Entry]:
        _recv_buffer = BytesIO(frame)
        _KeySettingsList = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _KeyVersion = safe_read_int_from_buffer(_recv_buffer, 1)
            _DiversificationMode = Project_SamAVxKeySettings_Index_DiversificationMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _DivIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _KeySettingsList_Entry = Project_SamAVxKeySettings_Index_KeySettingsList_Entry(_KeyVersion, _DiversificationMode, _DivIdx)
            _KeySettingsList.append(_KeySettingsList_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _KeySettingsList
    def get(self, Index_ndx: int) -> List[Project_SamAVxKeySettings_Index_KeySettingsList_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'A')
        if Index_ndx < 0 or Index_ndx >= 128:
            raise IndexError(Index_ndx)
        _send_buffer.write((0 + Index_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Index_ndx: int, KeySettingsList: List[Project_SamAVxKeySettings_Index_KeySettingsList_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'A')
        if Index_ndx < 0 or Index_ndx >= 128:
            raise IndexError(Index_ndx)
        _send_buffer.write((0 + Index_ndx).to_bytes(1, byteorder='big'))
        for _KeySettingsList_Entry in KeySettingsList:
            _KeyVersion, _DiversificationMode, _DivIdx = _KeySettingsList_Entry
            _send_buffer.write(_KeyVersion.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(Project_SamAVxKeySettings_Index_DiversificationMode_Parser.as_value(_DiversificationMode).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_DivIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Index_ndx: int, KeySettingsList: List[Project_SamAVxKeySettings_Index_KeySettingsList_Entry]) -> None:
        frame = self.build_frame(Index_ndx=Index_ndx, KeySettingsList=KeySettingsList)
        self.execute(frame)
class Project_Bluetooth(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
class Project_Bluetooth_DiscoveryMode(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_Bluetooth_DiscoveryMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_Bluetooth_DiscoveryMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_Bluetooth_DiscoveryMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_Bluetooth_DiscoveryMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'!')
        _send_buffer.write(Project_Bluetooth_DiscoveryMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_Bluetooth_DiscoveryMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_ConnectionMode(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_Bluetooth_ConnectionMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_Bluetooth_ConnectionMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_Bluetooth_ConnectionMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_Bluetooth_ConnectionMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'"')
        _send_buffer.write(Project_Bluetooth_ConnectionMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_Bluetooth_ConnectionMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_AdvertisementData(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_ScanResponseData(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_MinAdvertisingInterval(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_MaxAdvertisingInterval(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_AdvertizingChannels(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_Bluetooth_AdvertizingChannels_Result:
        _recv_buffer = BytesIO(frame)
        _ChannelMap_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _Channel39 = bool((_ChannelMap_int >> 2) & 0b1)
        _Channel38 = bool((_ChannelMap_int >> 1) & 0b1)
        _Channel37 = bool((_ChannelMap_int >> 0) & 0b1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Project_Bluetooth_AdvertizingChannels_Result(_Channel39, _Channel38, _Channel37)
    def get(self, ) -> Project_Bluetooth_AdvertizingChannels_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Channel39: bool, Channel38: bool, Channel37: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b"'")
        _var_0000_int = 0
        _var_0000_int |= (int(Channel39) & 0b1) << 2
        _var_0000_int |= (int(Channel38) & 0b1) << 1
        _var_0000_int |= (int(Channel37) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Channel39: bool, Channel38: bool, Channel37: bool) -> None:
        frame = self.build_frame(Channel39=Channel39, Channel38=Channel38, Channel37=Channel37)
        self.execute(frame)
class Project_Bluetooth_MinConnectionInterval(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_MaxConnectionInterval(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_ConnectionSupervisionTimeout(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x2A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'*')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'*')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'*')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_DeviceNameLegacy(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'0')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_Appearance(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Bluetooth_AdvertizedDeviceName(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x52
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'R')
        _send_buffer.write(b'2')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_Mce(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
class Project_Mce_Mode(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x54
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'T')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_Mce_Mode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_Mce_Mode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_Mce_Mode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'T')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_Mce_Mode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'T')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Project_Mce_Mode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_Mce_Mode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
class Project_MobileId_Mode(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_MobileId_Mode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_MobileId_Mode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_MobileId_Mode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_MobileId_Mode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Project_MobileId_Mode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_MobileId_Mode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_DisplayName(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_TriggerFromDistance(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_MobileId_TriggerFromDistance_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_MobileId_TriggerFromDistance_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_MobileId_TriggerFromDistance_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_MobileId_TriggerFromDistance_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Project_MobileId_TriggerFromDistance_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_MobileId_TriggerFromDistance_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_ConvenientAccess(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_MobileId_ConvenientAccess_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_MobileId_ConvenientAccess_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_MobileId_ConvenientAccess_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_MobileId_ConvenientAccess_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Project_MobileId_ConvenientAccess_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_MobileId_ConvenientAccess_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_AdvertisementFilter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_MobileId_AdvertisementFilter_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_MobileId_AdvertisementFilter_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_MobileId_AdvertisementFilter_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_MobileId_AdvertisementFilter_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Project_MobileId_AdvertisementFilter_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_MobileId_AdvertisementFilter_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_RssiCorrectionConvenientAccess(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_DetectionRssiFilter(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Project_MobileId_DetectionRssiFilter_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Project_MobileId_DetectionRssiFilter_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Project_MobileId_DetectionRssiFilter_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Project_MobileId_DetectionRssiFilter_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Project_MobileId_DetectionRssiFilter_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Project_MobileId_DetectionRssiFilter_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_MsgType(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> MessageType:
        _recv_buffer = BytesIO(frame)
        _Value = MessageType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> MessageType:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: MessageType) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x11')
        _send_buffer.write(MessageType_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: MessageType) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_OnMatchEvent(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> BaltechScript:
        _recv_buffer = BytesIO(frame)
        _Value = BaltechScript(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> BaltechScript:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[BaltechScript, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        _send_buffer.write(b'\x12')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[BaltechScript, bytes]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Project_MobileId_Key(ConfigValue):
    MasterKey = 0x08
    SubKey = 0x53
    ValueKey = 0x80
    def delete(self, Key_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        if Key_ndx < 0 or Key_ndx >= 32:
            raise IndexError(Key_ndx)
        _send_buffer.write((128 + Key_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Key_bytes = _recv_buffer.read(16)
        _Key = _Key_bytes.decode('ascii')
        if len(_Key) != 16:
            raise PayloadTooShortError(16 - len(_Key))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Key
    def get(self, Key_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        if Key_ndx < 0 or Key_ndx >= 32:
            raise IndexError(Key_ndx)
        _send_buffer.write((128 + Key_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Key_ndx: int, Key: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(b'S')
        if Key_ndx < 0 or Key_ndx >= 32:
            raise IndexError(Key_ndx)
        _send_buffer.write((128 + Key_ndx).to_bytes(1, byteorder='big'))
        if len(Key) != 16:
            raise ValueError(Key)
        _send_buffer.write(Key.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Key_ndx: int, Key: str) -> None:
        frame = self.build_frame(Key_ndx=Key_ndx, Key=Key)
        self.execute(frame)
class ProjectRegisters(ConfigValue):
    MasterKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
class ProjectRegisters_Rc(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
class ProjectRegisters_Rc_TxControl14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'p')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x80
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x80')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x80')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x80')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x90
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x90')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControl15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControlALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TxControlVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'A')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x81
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x81')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x81')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x81')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x91
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x91')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductance15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductanceALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_CwConductanceVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'B')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'R')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x62
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x82
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x82')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x82')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x82')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x92
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x92')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductance15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductanceALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModConductanceVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'C')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x63
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b's')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x83
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x83')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x83')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x83')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x93
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x93')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidth15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x64
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b't')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x84
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x84')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x94
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x94')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOF15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOFALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_ModWidthSOFVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'E')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x55
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'U')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'U')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'U')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x65
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x75
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'u')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x85
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x85')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x85')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x85')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x95
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x95')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFraming15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFramingALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_TypeBFramingVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x46
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'F')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x56
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'V')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'V')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'V')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x66
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'f')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x76
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'v')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl115Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x86
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x86')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x86')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x86')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl115Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x96
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x96')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl114B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl115(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl1ALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxControl1VOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x47
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'G')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x57
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'W')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'W')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'W')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x67
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'g')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'g')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'g')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x77
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'w')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x87
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x87')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x97
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x97')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhase15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhaseALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BitPhaseVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x18')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'H')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x58
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'X')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'X')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'X')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x68
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'h')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'h')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'h')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x78
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'x')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x88
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x88')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x88')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x88')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x98
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x98')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThreshold15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThresholdALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxThresholdVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x19')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x39
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x49
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'I')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x59
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x69
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'i')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'i')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'i')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x79
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x89
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x89')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x89')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x89')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x99
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x99')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xA9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xa9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xB9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xb9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControl15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xC9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xc9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControlALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xD9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xd9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_BPSKDemControlVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xF9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xf9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x0A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\n')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x1A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x1a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x1a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x1a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x2A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'*')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'*')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'*')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x3A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b':')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x4A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'J')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x5A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'Z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x6A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'j')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'j')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'j')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x7A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait15Standard(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x8A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x8a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x8a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x8a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait15Fast(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0x9A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x9a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xAA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xaa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xaa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xaa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xBA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xba')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xba')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xba')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWait15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xCA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xca')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xca')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xca')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWaitALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xDA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xda')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xda')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xda')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc_RxWaitVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x01
    ValueKey = 0xFA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xfa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xfa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\xfa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
class ProjectRegisters_Pn_TxMode14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'`')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'p')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxMode14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxModeALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxModeVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'A')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxMode14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxModeALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxModeVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'B')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'R')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x62
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSel14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSelALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxSelVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'C')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x63
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b's')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThreshold14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThresholdALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RxThresholdVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x64
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b't')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_Demod14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_DemodALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_DemodVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'E')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x55
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'U')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'U')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'U')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x65
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x75
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'u')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFC14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFCALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_MifNFCVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x46
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'F')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x56
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'V')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'V')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'V')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x66
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'f')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x76
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'v')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'v')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'v')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCV14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCVALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ManualRCVVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x47
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'G')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x57
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'W')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'W')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'W')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x67
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'g')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'g')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'g')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x77
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'w')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'w')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'w')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeB14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeBALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TypeBVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x18')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'H')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x58
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'X')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'X')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'X')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x68
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'h')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'h')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'h')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x78
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'x')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'x')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'x')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOff14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOffALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOffVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x19')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x39
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x49
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'I')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x59
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x69
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'i')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'i')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'i')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x79
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xA9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xa9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWith14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xB9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xb9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWithALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xD9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xd9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModWithVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xF9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xf9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x0A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\n')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x1A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x2A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'*')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'*')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'*')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x3A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b':')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b':')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b':')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x4A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'J')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'J')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'J')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x5A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'Z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x6A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'j')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'j')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'j')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x7A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'z')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'z')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'z')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xAA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xaa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xaa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xaa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhase14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xBA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xba')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xba')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xba')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhaseALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xDA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xda')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xda')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xda')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_TxBitPhaseVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xFA
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfa')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfa')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfa')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x0B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x1B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x2B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'+')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'+')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'+')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x3B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b';')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b';')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b';')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x4B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'K')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'K')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'K')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x5B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'[')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'[')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'[')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x6B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'k')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'k')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'k')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x7B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'{')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'{')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'{')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xAB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xab')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xab')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xab')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xBB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbb')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbb')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbb')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfgALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xDB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdb')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdb')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdb')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_RFCfgVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xFB
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfb')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfb')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfb')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x0C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x1C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x2C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b',')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b',')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b',')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x3C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'<')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'<')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'<')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x4C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'L')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'L')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'L')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x5C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\\')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\\')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\\')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x6C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'l')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'l')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'l')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x7C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'|')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'|')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'|')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xAC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xac')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xac')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xac')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOn14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xBC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbc')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbc')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbc')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOnALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xDC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdc')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdc')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdc')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_GsNOnVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xFC
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfc')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfc')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfc')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x0D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x1D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1d')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1d')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1d')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x2D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'-')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'-')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'-')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x3D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'=')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'=')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'=')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x4D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'M')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'M')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'M')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x5D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b']')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b']')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b']')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x6D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'm')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'm')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'm')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x7D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'}')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'}')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'}')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xAD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xad')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xad')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xad')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsP14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xBD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsPALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xDD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xdd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_CWGsPVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xFD
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x0E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x0e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x1E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\x1e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x2E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'.')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'.')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'.')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x3E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'>')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'>')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'>')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x4E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'N')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'N')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'N')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x5E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'^')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'^')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'^')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x6E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'n')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'n')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'n')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0x7E
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'~')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'~')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'~')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xAE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xae')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xae')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xae')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsP14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xBE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbe')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbe')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xbe')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsPALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xDE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xde')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xde')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xde')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Pn_ModGsPVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x11
    ValueKey = 0xFE
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfe')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfe')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'\x11')
        _send_buffer.write(b'\xfe')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
class ProjectRegisters_Rc663_TxAmpReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'`')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'p')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x80
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x80')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x80')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x80')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxAmpRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF0
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf0')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'A')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'q')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x81
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x81')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x81')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x81')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxDataModWithRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF1
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf1')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'B')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'R')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x62
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'b')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'r')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x82
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x82')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x82')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x82')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxThresholdRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF2
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf2')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'C')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x63
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'c')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b's')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x83
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x83')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x83')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x83')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxAnaRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF3
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf3')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x64
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'd')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b't')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x84
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x84')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x84')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x84')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxModeRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf4')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x15
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x15')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'E')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x55
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'U')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'U')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'U')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x65
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'e')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x75
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'u')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x85
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x85')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x85')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x85')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxConRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf5')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x16
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x16')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x46
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'F')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x56
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'V')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'V')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'V')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x66
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'f')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x76
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'v')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'v')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'v')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x86
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x86')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x86')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x86')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_TxlRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF6
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x07')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x17
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x17')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x47
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'G')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x57
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'W')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'W')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'W')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x67
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'g')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'g')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'g')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x77
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'w')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'w')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'w')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x87
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x87')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x87')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x87')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RxWaitRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF7
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf7')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x18
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x18')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x48
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'H')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x58
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'X')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'X')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'X')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x68
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'h')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'h')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'h')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x78
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'x')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'x')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'x')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x88
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x88')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x88')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x88')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_RcvRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF8
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf8')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14A848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x09
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\t')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\t')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\t')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14A424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x19
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x19')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x19')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x19')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14A212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14A106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x39
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14B848(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x49
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'I')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14B424(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x59
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'Y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14B212(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x69
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'i')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'i')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'i')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14B106(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x79
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'y')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg15(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0x89
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x89')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x89')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\x89')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14A(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xA9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xa9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutReg14B(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xB9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xb9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutRegALL(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xD9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xd9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Rc663_SigOutRegVOLATILE(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x22
    ValueKey = 0xF9
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'"')
        _send_buffer.write(b'\xf9')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
class ProjectRegisters_Htrc110_MainfilterGainHTG8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainHTG16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x10')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainHTG32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainHTG64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'0')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainEM8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'@')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainEM16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainEM32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'`')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainEM64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x70
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'p')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainPSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x80
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x80')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x80')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x80')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_MainfilterGainFSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x90
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x90')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x90')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x90')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpHTG8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpHTG16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x11
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x11')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpHTG32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpHTG64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpEM8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'A')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpEM16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'Q')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpEM32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpEM64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x71
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'q')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpPSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x81
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x81')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x81')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x81')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SmartcompLpFSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x91
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x91')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x91')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x91')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseHTG8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseHTG16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x12
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x12')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseHTG32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseHTG64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseEM8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x42
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'B')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseEM16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x52
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'R')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseEM32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x62
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'b')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseEM64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x72
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'r')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhasePSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x82
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x82')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x82')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x82')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_SamplingPhaseFSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x92
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x92')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x92')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x92')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelHTG8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelHTG16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelHTG32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelHTG64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'3')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelEM8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x43
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'C')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelEM16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelEM32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x63
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'c')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelEM64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x73
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b's')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelPSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x83
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x83')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x83')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x83')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcLevelFSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x93
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x93')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x93')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x93')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystHTG8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystHTG16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystHTG32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystHTG64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'4')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystEM8(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x44
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'D')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystEM16(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystEM32(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x64
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'd')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'd')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'd')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystEM64(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x74
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b't')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystPSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x84
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x84')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x84')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x84')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class ProjectRegisters_Htrc110_AcHystFSK(ConfigValue):
    MasterKey = 0x09
    SubKey = 0x24
    ValueKey = 0x94
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x94')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x94')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\t')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x94')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols(ConfigValue):
    MasterKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
class Protocols_BrpSerial(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
class Protocols_BrpSerial_Baudrate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Baudrate:
        _recv_buffer = BytesIO(frame)
        _Value = Baudrate_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 2))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Baudrate:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Baudrate = "Baud115200") -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Baudrate_Parser.as_value(Value).to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Baudrate = "Baud115200") -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpSerial_Parity(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Parity:
        _recv_buffer = BytesIO(frame)
        _Value = Parity_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Parity:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Parity) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Parity_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Parity) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpSerial_InterbyteTimeout(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_BrpSerial_InterbyteTimeout_Result:
        _recv_buffer = BytesIO(frame)
        _Timeout = safe_read_int_from_buffer(_recv_buffer, 2)
        _LegacyFormat = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Protocols_BrpSerial_InterbyteTimeout_Result(_Timeout, _LegacyFormat)
    def get(self, ) -> Protocols_BrpSerial_InterbyteTimeout_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Timeout: int, LegacyFormat: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Timeout.to_bytes(length=2, byteorder='big'))
        _send_buffer.write(LegacyFormat.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Timeout: int, LegacyFormat: int) -> None:
        frame = self.build_frame(Timeout=Timeout, LegacyFormat=LegacyFormat)
        self.execute(frame)
class Protocols_BrpSerial_CmdWorkInterval(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpSerial_RepeatModeMinDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpSerial_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_BrpSerial_AutoRunCommand(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x03
    ValueKey = 0x50
    def delete(self, AutoRunCommand_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> AutoRunCommand:
        _recv_buffer = BytesIO(frame)
        _RunMode = AutoRunCommand_RunMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _DeviceCode = safe_read_int_from_buffer(_recv_buffer, 1)
        _CommandCode = safe_read_int_from_buffer(_recv_buffer, 1)
        _Parameter_bytes = _recv_buffer.read(-1)
        _Parameter = _Parameter_bytes.decode('ascii')
        _Value = AutoRunCommand(_RunMode, _DeviceCode, _CommandCode, _Parameter)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, AutoRunCommand_ndx: int) -> AutoRunCommand:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, AutoRunCommand_ndx: int, Value: Union[AutoRunCommand, AutoRunCommand_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        if isinstance(Value, dict):
            Value = AutoRunCommand(**Value)
        _RunMode, _DeviceCode, _CommandCode, _Parameter = Value
        _send_buffer.write(AutoRunCommand_RunMode_Parser.as_value(_RunMode).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_DeviceCode.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_CommandCode.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_Parameter.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, AutoRunCommand_ndx: int, Value: Union[AutoRunCommand, AutoRunCommand_Dict]) -> None:
        frame = self.build_frame(AutoRunCommand_ndx=AutoRunCommand_ndx, Value=Value)
        self.execute(frame)
class Protocols_BrpHid(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
class Protocols_BrpHid_CmdWorkInterval(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpHid_RepeatModeMinDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpHid_UsbVendorName(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpHid_UsbProductName(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpHid_UsbSerialNumber(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpHid_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_BrpHid_AutoRunCommand(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x05
    ValueKey = 0x50
    def delete(self, AutoRunCommand_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> AutoRunCommand:
        _recv_buffer = BytesIO(frame)
        _RunMode = AutoRunCommand_RunMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _DeviceCode = safe_read_int_from_buffer(_recv_buffer, 1)
        _CommandCode = safe_read_int_from_buffer(_recv_buffer, 1)
        _Parameter_bytes = _recv_buffer.read(-1)
        _Parameter = _Parameter_bytes.decode('ascii')
        _Value = AutoRunCommand(_RunMode, _DeviceCode, _CommandCode, _Parameter)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, AutoRunCommand_ndx: int) -> AutoRunCommand:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, AutoRunCommand_ndx: int, Value: Union[AutoRunCommand, AutoRunCommand_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x05')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        if isinstance(Value, dict):
            Value = AutoRunCommand(**Value)
        _RunMode, _DeviceCode, _CommandCode, _Parameter = Value
        _send_buffer.write(AutoRunCommand_RunMode_Parser.as_value(_RunMode).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_DeviceCode.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_CommandCode.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_Parameter.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, AutoRunCommand_ndx: int, Value: Union[AutoRunCommand, AutoRunCommand_Dict]) -> None:
        frame = self.build_frame(AutoRunCommand_ndx=AutoRunCommand_ndx, Value=Value)
        self.execute(frame)
class Protocols_SNet(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x10
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
class Protocols_SNet_BusAddress(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x10
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_SNet_DeviceType(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x10
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_SNet_DeviceType_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_SNet_DeviceType_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_SNet_DeviceType_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_SNet_DeviceType_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        _send_buffer.write(b'!')
        _send_buffer.write(Protocols_SNet_DeviceType_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_SNet_DeviceType_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_SNet_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x10
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x10')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_BrpTcp(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
class Protocols_BrpTcp_CmdWorkInterval(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x13
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x13')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_RepeatModeMinDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x14
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'\x14')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpPort(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpHost(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpHostPort(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpAlternateHost(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpAlternateHostPort(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'$')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpAutoCloseTimeout(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpOutgoingPort(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpConnectTrialMinDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'(')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpConnectTrialMaxDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpSoftResetDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x2A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'*')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'*')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'*')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_TcpMaskLinkChangeEventDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x2B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'+')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'+')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        _send_buffer.write(b'+')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_SlpAttributes(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x30
    def delete(self, SlpAttributes_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if SlpAttributes_ndx < 0 or SlpAttributes_ndx >= 16:
            raise IndexError(SlpAttributes_ndx)
        _send_buffer.write((48 + SlpAttributes_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, SlpAttributes_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if SlpAttributes_ndx < 0 or SlpAttributes_ndx >= 16:
            raise IndexError(SlpAttributes_ndx)
        _send_buffer.write((48 + SlpAttributes_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SlpAttributes_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if SlpAttributes_ndx < 0 or SlpAttributes_ndx >= 16:
            raise IndexError(SlpAttributes_ndx)
        _send_buffer.write((48 + SlpAttributes_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, SlpAttributes_ndx: int, Value: str) -> None:
        frame = self.build_frame(SlpAttributes_ndx=SlpAttributes_ndx, Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_BrpTcp_AutoRunCommand(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x06
    ValueKey = 0x50
    def delete(self, AutoRunCommand_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> AutoRunCommand:
        _recv_buffer = BytesIO(frame)
        _RunMode = AutoRunCommand_RunMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _DeviceCode = safe_read_int_from_buffer(_recv_buffer, 1)
        _CommandCode = safe_read_int_from_buffer(_recv_buffer, 1)
        _Parameter_bytes = _recv_buffer.read(-1)
        _Parameter = _Parameter_bytes.decode('ascii')
        _Value = AutoRunCommand(_RunMode, _DeviceCode, _CommandCode, _Parameter)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, AutoRunCommand_ndx: int) -> AutoRunCommand:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, AutoRunCommand_ndx: int, Value: Union[AutoRunCommand, AutoRunCommand_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x06')
        if AutoRunCommand_ndx < 0 or AutoRunCommand_ndx >= 16:
            raise IndexError(AutoRunCommand_ndx)
        _send_buffer.write((80 + AutoRunCommand_ndx).to_bytes(1, byteorder='big'))
        if isinstance(Value, dict):
            Value = AutoRunCommand(**Value)
        _RunMode, _DeviceCode, _CommandCode, _Parameter = Value
        _send_buffer.write(AutoRunCommand_RunMode_Parser.as_value(_RunMode).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_DeviceCode.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_CommandCode.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(_Parameter.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, AutoRunCommand_ndx: int, Value: Union[AutoRunCommand, AutoRunCommand_Dict]) -> None:
        frame = self.build_frame(AutoRunCommand_ndx=AutoRunCommand_ndx, Value=Value)
        self.execute(frame)
class Protocols_Wiegand(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
class Protocols_Wiegand_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_Wiegand_MessageLength(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Wiegand_BitOrder(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Wiegand_BitOrder_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Wiegand_BitOrder_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Wiegand_BitOrder_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Wiegand_BitOrder_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Protocols_Wiegand_BitOrder_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Wiegand_BitOrder_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Wiegand_PinMessageFormat(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Wiegand_PinMessageFormat_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Wiegand_PinMessageFormat_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Wiegand_PinMessageFormat_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Wiegand_PinMessageFormat_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'3')
        _send_buffer.write(Protocols_Wiegand_PinMessageFormat_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Wiegand_PinMessageFormat_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Wiegand_PulseWidth(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Wiegand_PulseInterval(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Wiegand_Mode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x20
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Wiegand_Mode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Wiegand_Mode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Wiegand_Mode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Wiegand_Mode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b' ')
        _send_buffer.write(b'\x06')
        _send_buffer.write(Protocols_Wiegand_Mode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Wiegand_Mode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_RawSerial(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
class Protocols_RawSerial_Baudrate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x23
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Baudrate:
        _recv_buffer = BytesIO(frame)
        _Value = Baudrate_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 2))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Baudrate:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Baudrate = "Baud115200") -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Baudrate_Parser.as_value(Value).to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Baudrate = "Baud115200") -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_RawSerial_Parity(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x23
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Parity:
        _recv_buffer = BytesIO(frame)
        _Value = Parity_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Parity:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Parity) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Parity_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Parity) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_RawSerial_BitsPerByte(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x23
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_RawSerial_Channel(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x23
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_RawSerial_Channel_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_RawSerial_Channel_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_RawSerial_Channel_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_RawSerial_Channel_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        _send_buffer.write(b'!')
        _send_buffer.write(Protocols_RawSerial_Channel_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_RawSerial_Channel_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_RawSerial_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x23
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'#')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_LowLevelIoPorts(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
class Protocols_LowLevelIoPorts_PhysicalPinMap(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x24
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[IoPort]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _PhysicalPin = IoPort_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _Value.append(_PhysicalPin)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> List[IoPort]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: List[IoPort]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'$')
        _send_buffer.write(b'\x04')
        for _Value_Entry in Value:
            _PhysicalPin = _Value_Entry
            _send_buffer.write(IoPort_Parser.as_value(_PhysicalPin).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: List[IoPort]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_MagstripeEmulation(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
class Protocols_MagstripeEmulation_Encoding(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x21
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_MagstripeEmulation_Encoding_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_MagstripeEmulation_Encoding_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_MagstripeEmulation_Encoding_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_MagstripeEmulation_Encoding_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'!')
        _send_buffer.write(b'\x02')
        _send_buffer.write(Protocols_MagstripeEmulation_Encoding_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_MagstripeEmulation_Encoding_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
class Protocols_Network_IpAddress(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b' ')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_IpSubnetMask(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_IpGateway(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_IpDnsServer(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x23
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'#')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_DhcpMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x24
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_DhcpMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_DhcpMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_DhcpMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_DhcpMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'$')
        _send_buffer.write(Protocols_Network_DhcpMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_DhcpMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_DhcpLastAssignedIp(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x25
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'%')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'%')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'%')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_DhcpVendorClassIdentifier(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'&')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_LinkLocalLastAssignedIp(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b"'")
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_LinkLocalMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_LinkLocalMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_LinkLocalMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_LinkLocalMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_LinkLocalMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'(')
        _send_buffer.write(Protocols_Network_LinkLocalMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_LinkLocalMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_LinkLocalAcquireDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x29
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b')')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b')')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b')')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_DetectIpEnable(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x2A
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'*')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_DetectIpEnable_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_DetectIpEnable_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_DetectIpEnable_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'*')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_DetectIpEnable_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'*')
        _send_buffer.write(Protocols_Network_DetectIpEnable_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_DetectIpEnable_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_ResolverEnable(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x2B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'+')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_ResolverEnable_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_ResolverEnable_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_ResolverEnable_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'+')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_ResolverEnable_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'+')
        _send_buffer.write(Protocols_Network_ResolverEnable_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_ResolverEnable_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_ResolverInterval(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x2C
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b',')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b',')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b',')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_UdpIntrospecEnable(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x2D
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'-')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_UdpIntrospecEnable_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_UdpIntrospecEnable_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_UdpIntrospecEnable_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'-')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_UdpIntrospecEnable_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'-')
        _send_buffer.write(Protocols_Network_UdpIntrospecEnable_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_UdpIntrospecEnable_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpEnable(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x30
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_SlpEnable_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_SlpEnable_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_SlpEnable_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_SlpEnable_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'0')
        _send_buffer.write(Protocols_Network_SlpEnable_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_SlpEnable_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpScope(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x31
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'1')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpDirectoryAgent(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x32
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'2')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpActiveDiscovery(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x33
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_SlpActiveDiscovery_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_SlpActiveDiscovery_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_SlpActiveDiscovery_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_SlpActiveDiscovery_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'3')
        _send_buffer.write(Protocols_Network_SlpActiveDiscovery_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_SlpActiveDiscovery_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpPassiveDiscovery(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x34
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_SlpPassiveDiscovery_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_SlpPassiveDiscovery_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_SlpPassiveDiscovery_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_SlpPassiveDiscovery_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'4')
        _send_buffer.write(Protocols_Network_SlpPassiveDiscovery_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_SlpPassiveDiscovery_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpMulticastTtl(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x35
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'5')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpRegistratonLifetime(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'6')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_SlpUseBroadcast(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x37
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_SlpUseBroadcast_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_SlpUseBroadcast_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_SlpUseBroadcast_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_SlpUseBroadcast_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'7')
        _send_buffer.write(Protocols_Network_SlpUseBroadcast_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_SlpUseBroadcast_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_RecoveryPointStatus(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_RecoveryPointStatus_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_RecoveryPointStatus_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_RecoveryPointStatus_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_RecoveryPointStatus_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'8')
        _send_buffer.write(Protocols_Network_RecoveryPointStatus_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_RecoveryPointStatus_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_NicNetworkPortSpeedDuplexMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x40
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_NicNetworkPortSpeedDuplexMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_NicNetworkPortSpeedDuplexMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_NicNetworkPortSpeedDuplexMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_NicNetworkPortSpeedDuplexMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'@')
        _send_buffer.write(Protocols_Network_NicNetworkPortSpeedDuplexMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_NicNetworkPortSpeedDuplexMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_NicFlowControl(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x41
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_NicFlowControl_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_NicFlowControl_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_NicFlowControl_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_NicFlowControl_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'A')
        _send_buffer.write(Protocols_Network_NicFlowControl_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_NicFlowControl_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_NicPrinterPortSpeedDuplexMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x45
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_NicPrinterPortSpeedDuplexMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_NicPrinterPortSpeedDuplexMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_NicPrinterPortSpeedDuplexMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_NicPrinterPortSpeedDuplexMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'E')
        _send_buffer.write(Protocols_Network_NicPrinterPortSpeedDuplexMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_NicPrinterPortSpeedDuplexMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_WlanSsid(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x50
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'P')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_WlanEncryptionMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x51
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Network_WlanEncryptionMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Network_WlanEncryptionMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Network_WlanEncryptionMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Network_WlanEncryptionMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'Q')
        _send_buffer.write(Protocols_Network_WlanEncryptionMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Network_WlanEncryptionMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_WlanKey(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x82
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'\x82')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'\x82')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'\x82')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_WlanUserName(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x53
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'S')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Network_WlanDomainName(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x34
    ValueKey = 0x54
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'4')
        _send_buffer.write(b'T')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Value: str) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_KeyboardEmulation(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x2B
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        self.execute(_send_buffer.getvalue())
class Protocols_KeyboardEmulation_RegisterInterface(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x2B
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_KeyboardEmulation_RegisterInterface_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_KeyboardEmulation_RegisterInterface_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_KeyboardEmulation_RegisterInterface_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_KeyboardEmulation_RegisterInterface_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Protocols_KeyboardEmulation_RegisterInterface_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_KeyboardEmulation_RegisterInterface_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_KeyboardEmulation_ScancodesMap(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x2B
    ValueKey = 0x02
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[Protocols_KeyboardEmulation_ScancodesMap_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _AsciiCode = safe_read_int_from_buffer(_recv_buffer, 1)
            _ScanCode = safe_read_int_from_buffer(_recv_buffer, 1)
            _ModifierKeys_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _Shift = bool((_ModifierKeys_int >> 7) & 0b1)
            _Ctrl = bool((_ModifierKeys_int >> 6) & 0b1)
            _AltGr = bool((_ModifierKeys_int >> 5) & 0b1)
            _Value_Entry = Protocols_KeyboardEmulation_ScancodesMap_Value_Entry(_AsciiCode, _ScanCode, _Shift, _Ctrl, _AltGr)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> List[Protocols_KeyboardEmulation_ScancodesMap_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: List[Protocols_KeyboardEmulation_ScancodesMap_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x02')
        for _Value_Entry in Value:
            _AsciiCode, _ScanCode, _Shift, _Ctrl, _AltGr = _Value_Entry
            _send_buffer.write(_AsciiCode.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_ScanCode.to_bytes(length=1, byteorder='big'))
            _var_0000_int = 0
            _var_0000_int |= (int(_Shift) & 0b1) << 7
            _var_0000_int |= (int(_Ctrl) & 0b1) << 6
            _var_0000_int |= (int(_AltGr) & 0b1) << 5
            _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: List[Protocols_KeyboardEmulation_ScancodesMap_Value_Entry]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_KeyboardEmulation_KeypressDelay(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x2B
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_KeyboardEmulation_UsbInterfaceSubClass(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x2B
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_KeyboardEmulation_UsbInterfaceSubClass_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_KeyboardEmulation_UsbInterfaceSubClass_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_KeyboardEmulation_UsbInterfaceSubClass_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_KeyboardEmulation_UsbInterfaceSubClass_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Protocols_KeyboardEmulation_UsbInterfaceSubClass_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_KeyboardEmulation_UsbInterfaceSubClass_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_KeyboardEmulation_UsbInterfaceOrder(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x2B
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_KeyboardEmulation_UsbInterfaceOrder_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_KeyboardEmulation_UsbInterfaceOrder_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_KeyboardEmulation_UsbInterfaceOrder_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_KeyboardEmulation_UsbInterfaceOrder_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        _send_buffer.write(b'\x05')
        _send_buffer.write(Protocols_KeyboardEmulation_UsbInterfaceOrder_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_KeyboardEmulation_UsbInterfaceOrder_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_KeyboardEmulation_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x2B
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'+')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_Ccid(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
class Protocols_Ccid_InterfaceMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x36
    ValueKey = 0x01
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Ccid_InterfaceMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Ccid_InterfaceMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Ccid_InterfaceMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Ccid_InterfaceMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'\x01')
        _send_buffer.write(Protocols_Ccid_InterfaceMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Ccid_InterfaceMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Ccid_CardTypeMask(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x36
    ValueKey = 0x20
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardFamilies:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 2)
        _LEGICPrime = bool((_Value_int >> 11) & 0b1)
        _BluetoothMce = bool((_Value_int >> 10) & 0b1)
        _Khz125Part2 = bool((_Value_int >> 9) & 0b1)
        _Srix = bool((_Value_int >> 8) & 0b1)
        _Khz125Part1 = bool((_Value_int >> 7) & 0b1)
        _Felica = bool((_Value_int >> 6) & 0b1)
        _IClass = bool((_Value_int >> 5) & 0b1)
        _IClassIso14B = bool((_Value_int >> 4) & 0b1)
        _Iso14443B = bool((_Value_int >> 3) & 0b1)
        _Iso15693 = bool((_Value_int >> 2) & 0b1)
        _Iso14443A = bool((_Value_int >> 0) & 0b1)
        _Value = CardFamilies(_LEGICPrime, _BluetoothMce, _Khz125Part2, _Srix, _Khz125Part1, _Felica, _IClass, _IClassIso14B, _Iso14443B, _Iso15693, _Iso14443A)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardFamilies:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b' ')
        if isinstance(Value, dict):
            Value = CardFamilies(**Value)
        Value_int = 0
        Value_int |= (int(Value.LEGICPrime) & 0b1) << 11
        Value_int |= (int(Value.BluetoothMce) & 0b1) << 10
        Value_int |= (int(Value.Khz125Part2) & 0b1) << 9
        Value_int |= (int(Value.Srix) & 0b1) << 8
        Value_int |= (int(Value.Khz125Part1) & 0b1) << 7
        Value_int |= (int(Value.Felica) & 0b1) << 6
        Value_int |= (int(Value.IClass) & 0b1) << 5
        Value_int |= (int(Value.IClassIso14B) & 0b1) << 4
        Value_int |= (int(Value.Iso14443B) & 0b1) << 3
        Value_int |= (int(Value.Iso15693) & 0b1) << 2
        Value_int |= (int(Value.Iso14443A) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[CardFamilies, CardFamilies_Dict] = CardFamilies.All()) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Ccid_ForceApduCardType(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x36
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardType:
        _recv_buffer = BytesIO(frame)
        _Value = CardType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> CardType:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: CardType = "Default") -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'!')
        _send_buffer.write(CardType_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: CardType = "Default") -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Ccid_LedControl(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x36
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Ccid_LedControl_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Ccid_LedControl_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Ccid_LedControl_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Ccid_LedControl_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'6')
        _send_buffer.write(b'"')
        _send_buffer.write(Protocols_Ccid_LedControl_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Ccid_LedControl_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Osdp(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
class Protocols_Osdp_BaudRate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0x00
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Baudrate:
        _recv_buffer = BytesIO(frame)
        _Value = Baudrate_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 2))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Baudrate:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Baudrate = "Baud115200") -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\x00')
        _send_buffer.write(Baudrate_Parser.as_value(Value).to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Baudrate = "Baud115200") -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Osdp_Address(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0x21
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'!')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Osdp_CharTimeout(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0x22
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'"')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: int) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Osdp_SCBKeyDefault(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0xA4
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\xa4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Osdp_SCBKeyDefault_Result:
        _recv_buffer = BytesIO(frame)
        _DiversifyFlag = Protocols_Osdp_SCBKeyDefault_DiversifyFlag_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _SCBKD_bytes = _recv_buffer.read(-1)
        _SCBKD = _SCBKD_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Protocols_Osdp_SCBKeyDefault_Result(_DiversifyFlag, _SCBKD)
    def get(self, ) -> Protocols_Osdp_SCBKeyDefault_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\xa4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, DiversifyFlag: Protocols_Osdp_SCBKeyDefault_DiversifyFlag, SCBKD: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\xa4')
        _send_buffer.write(Protocols_Osdp_SCBKeyDefault_DiversifyFlag_Parser.as_value(DiversifyFlag).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(SCBKD.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, DiversifyFlag: Protocols_Osdp_SCBKeyDefault_DiversifyFlag, SCBKD: str) -> None:
        frame = self.build_frame(DiversifyFlag=DiversifyFlag, SCBKD=SCBKD)
        self.execute(frame)
class Protocols_Osdp_SCBKey(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0xA5
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\xa5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Osdp_SCBKey_Result:
        _recv_buffer = BytesIO(frame)
        _DiversifyFlag = Protocols_Osdp_SCBKey_DiversifyFlag_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _SCBK_bytes = _recv_buffer.read(-1)
        _SCBK = _SCBK_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return Protocols_Osdp_SCBKey_Result(_DiversifyFlag, _SCBK)
    def get(self, ) -> Protocols_Osdp_SCBKey_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\xa5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, DiversifyFlag: Protocols_Osdp_SCBKey_DiversifyFlag, SCBK: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'\xa5')
        _send_buffer.write(Protocols_Osdp_SCBKey_DiversifyFlag_Parser.as_value(DiversifyFlag).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(SCBK.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, DiversifyFlag: Protocols_Osdp_SCBKey_DiversifyFlag, SCBK: str) -> None:
        frame = self.build_frame(DiversifyFlag=DiversifyFlag, SCBK=SCBK)
        self.execute(frame)
class Protocols_Osdp_SecureInstallMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0x26
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'&')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Osdp_SecureInstallMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Osdp_SecureInstallMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Osdp_SecureInstallMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'&')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Osdp_SecureInstallMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b'&')
        _send_buffer.write(Protocols_Osdp_SecureInstallMode_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Osdp_SecureInstallMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Osdp_DataMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0x27
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b"'")
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Protocols_Osdp_DataMode_Value:
        _recv_buffer = BytesIO(frame)
        _Value = Protocols_Osdp_DataMode_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 2))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> Protocols_Osdp_DataMode_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b"'")
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Protocols_Osdp_DataMode_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        _send_buffer.write(b"'")
        _send_buffer.write(Protocols_Osdp_DataMode_Value_Parser.as_value(Value).to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Protocols_Osdp_DataMode_Value) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_Osdp_HostMsgFormatTemplate(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x38
    ValueKey = 0x40
    def delete(self, HostMsgFormatTemplate_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, HostMsgFormatTemplate_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'8')
        if HostMsgFormatTemplate_ndx < 0 or HostMsgFormatTemplate_ndx >= 4:
            raise IndexError(HostMsgFormatTemplate_ndx)
        _send_buffer.write((64 + HostMsgFormatTemplate_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, HostMsgFormatTemplate_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(HostMsgFormatTemplate_ndx=HostMsgFormatTemplate_ndx, Value=Value)
        self.execute(frame)
class Protocols_HttpsClient(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
class Protocols_HttpsClient_AuthUrl(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    ValueKey = 0x01
    def delete(self, AuthUrl_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        if AuthUrl_ndx < 0 or AuthUrl_ndx >= 2:
            raise IndexError(AuthUrl_ndx)
        _send_buffer.write((1 + AuthUrl_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Url_bytes = _recv_buffer.read(-1)
        _Url = _Url_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Url
    def get(self, AuthUrl_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        if AuthUrl_ndx < 0 or AuthUrl_ndx >= 2:
            raise IndexError(AuthUrl_ndx)
        _send_buffer.write((1 + AuthUrl_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, AuthUrl_ndx: int, Url: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        if AuthUrl_ndx < 0 or AuthUrl_ndx >= 2:
            raise IndexError(AuthUrl_ndx)
        _send_buffer.write((1 + AuthUrl_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(Url.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, AuthUrl_ndx: int, Url: str) -> None:
        frame = self.build_frame(AuthUrl_ndx=AuthUrl_ndx, Url=Url)
        self.execute(frame)
class Protocols_HttpsClient_ConfigUrl(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Url_bytes = _recv_buffer.read(-1)
        _Url = _Url_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Url
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Url: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x03')
        _send_buffer.write(Url.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Url: str) -> None:
        frame = self.build_frame(Url=Url)
        self.execute(frame)
class Protocols_HttpsClient_UpdateUrl(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    ValueKey = 0x04
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x04')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Url_bytes = _recv_buffer.read(-1)
        _Url = _Url_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Url
    def get(self, ) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x04')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Url: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x04')
        _send_buffer.write(Url.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, Url: str) -> None:
        frame = self.build_frame(Url=Url)
        self.execute(frame)
class Protocols_HttpsClient_UpdateTime(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    ValueKey = 0x06
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x06')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _SecondsSinceMidnight = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SecondsSinceMidnight
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x06')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, SecondsSinceMidnight: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x06')
        _send_buffer.write(SecondsSinceMidnight.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, SecondsSinceMidnight: int) -> None:
        frame = self.build_frame(SecondsSinceMidnight=SecondsSinceMidnight)
        self.execute(frame)
class Protocols_HttpsClient_UpdateTimeSpread(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _MaxSeconds = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _MaxSeconds
    def get(self, ) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, MaxSeconds: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x07')
        _send_buffer.write(MaxSeconds.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, MaxSeconds: int) -> None:
        frame = self.build_frame(MaxSeconds=MaxSeconds)
        self.execute(frame)
class Protocols_HttpsClient_InitialEncryptedAuthToken(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    ValueKey = 0x08
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x08')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bytes:
        _recv_buffer = BytesIO(frame)
        _Token = _recv_buffer.read(-1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Token
    def get(self, ) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x08')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Token: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        _send_buffer.write(b'\x08')
        _send_buffer.write(Token)
        return _send_buffer.getvalue()
    def __call__(self, Token: bytes) -> None:
        frame = self.build_frame(Token=Token)
        self.execute(frame)
class Protocols_HttpsClient_RootCertServer(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x28
    ValueKey = 0x20
    def delete(self, RootCertServer_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        if RootCertServer_ndx < 0 or RootCertServer_ndx >= 50:
            raise IndexError(RootCertServer_ndx)
        _send_buffer.write((32 + RootCertServer_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bytes:
        _recv_buffer = BytesIO(frame)
        _CertPart = _recv_buffer.read(-1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _CertPart
    def get(self, RootCertServer_ndx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        if RootCertServer_ndx < 0 or RootCertServer_ndx >= 50:
            raise IndexError(RootCertServer_ndx)
        _send_buffer.write((32 + RootCertServer_ndx).to_bytes(1, byteorder='big'))
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, RootCertServer_ndx: int, CertPart: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'(')
        if RootCertServer_ndx < 0 or RootCertServer_ndx >= 50:
            raise IndexError(RootCertServer_ndx)
        _send_buffer.write((32 + RootCertServer_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(CertPart)
        return _send_buffer.getvalue()
    def __call__(self, RootCertServer_ndx: int, CertPart: bytes) -> None:
        frame = self.build_frame(RootCertServer_ndx=RootCertServer_ndx, CertPart=CertPart)
        self.execute(frame)
class Protocols_AccessConditionBitsStd(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
class Protocols_AccessConditionBitsStd_BrpOverSerial(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    ValueKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x03')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x03')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsStd_BrpOverHid(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    ValueKey = 0x05
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x05')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x05')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x05')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsStd_BrpOverCdc(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    ValueKey = 0x07
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x07')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x07')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x07')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsStd_BrpOverOsdp(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'8')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsStd_AutoreadTask(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    ValueKey = 0x5F
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'_')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'_')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'_')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsStd_Ccid(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    ValueKey = 0x36
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'6')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsStd_Tcp(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x60
    ValueKey = 0x86
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x86')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x86')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'`')
        _send_buffer.write(b'\x86')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsAlt(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x61
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
class Protocols_AccessConditionBitsAlt_BrpOverOsdpLimited(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x61
    ValueKey = 0x38
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(b'8')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class Protocols_AccessConditionBitsAlt_TcpMaintenanceMode(ConfigValue):
    MasterKey = 0x01
    SubKey = 0x61
    ValueKey = 0x86
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(b'\x86')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> HostSecurityAccessConditionBits:
        _recv_buffer = BytesIO(frame)
        _Value_int = safe_read_int_from_buffer(_recv_buffer, 4)
        _EthernetAccess = bool((_Value_int >> 28) & 0b1)
        _AutoreadAccess = bool((_Value_int >> 27) & 0b1)
        _CryptoAccess = bool((_Value_int >> 26) & 0b1)
        _Bf2Upload = bool((_Value_int >> 25) & 0b1)
        _ExtendedAccess = bool((_Value_int >> 24) & 0b1)
        _FlashFileSystemWrite = bool((_Value_int >> 23) & 0b1)
        _FlashFileSystemRead = bool((_Value_int >> 22) & 0b1)
        _RtcWrite = bool((_Value_int >> 21) & 0b1)
        _VhlExchangeapdu = bool((_Value_int >> 20) & 0b1)
        _VhlFormat = bool((_Value_int >> 19) & 0b1)
        _VhlWrite = bool((_Value_int >> 18) & 0b1)
        _VhlRead = bool((_Value_int >> 17) & 0b1)
        _VhlSelect = bool((_Value_int >> 16) & 0b1)
        _ExtSamAccess = bool((_Value_int >> 15) & 0b1)
        _HfLowlevelAccess = bool((_Value_int >> 14) & 0b1)
        _GuiAccess = bool((_Value_int >> 13) & 0b1)
        _IoPortWrite = bool((_Value_int >> 12) & 0b1)
        _IoPortRead = bool((_Value_int >> 11) & 0b1)
        _ConfigReset = bool((_Value_int >> 10) & 0b1)
        _ConfigWrite = bool((_Value_int >> 9) & 0b1)
        _ConfigRead = bool((_Value_int >> 8) & 0b1)
        _SysReset = bool((_Value_int >> 7) & 0b1)
        _SetAccessConditionMask2 = bool((_Value_int >> 6) & 0b1)
        _SetAccessConditionMask1 = bool((_Value_int >> 5) & 0b1)
        _SetAccessConditionMask0 = bool((_Value_int >> 4) & 0b1)
        _SetKey3 = bool((_Value_int >> 3) & 0b1)
        _SetKey2 = bool((_Value_int >> 2) & 0b1)
        _SetKey1 = bool((_Value_int >> 1) & 0b1)
        _FactoryReset = bool((_Value_int >> 0) & 0b1)
        _Value = HostSecurityAccessConditionBits(_EthernetAccess, _AutoreadAccess, _CryptoAccess, _Bf2Upload, _ExtendedAccess, _FlashFileSystemWrite, _FlashFileSystemRead, _RtcWrite, _VhlExchangeapdu, _VhlFormat, _VhlWrite, _VhlRead, _VhlSelect, _ExtSamAccess, _HfLowlevelAccess, _GuiAccess, _IoPortWrite, _IoPortRead, _ConfigReset, _ConfigWrite, _ConfigRead, _SysReset, _SetAccessConditionMask2, _SetAccessConditionMask1, _SetAccessConditionMask0, _SetKey3, _SetKey2, _SetKey1, _FactoryReset)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, ) -> HostSecurityAccessConditionBits:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(b'\x86')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'a')
        _send_buffer.write(b'\x86')
        if isinstance(Value, dict):
            Value = HostSecurityAccessConditionBits(**Value)
        Value_int = 0
        Value_int |= (int(Value.EthernetAccess) & 0b1) << 28
        Value_int |= (int(Value.AutoreadAccess) & 0b1) << 27
        Value_int |= (int(Value.CryptoAccess) & 0b1) << 26
        Value_int |= (int(Value.Bf2Upload) & 0b1) << 25
        Value_int |= (int(Value.ExtendedAccess) & 0b1) << 24
        Value_int |= (int(Value.FlashFileSystemWrite) & 0b1) << 23
        Value_int |= (int(Value.FlashFileSystemRead) & 0b1) << 22
        Value_int |= (int(Value.RtcWrite) & 0b1) << 21
        Value_int |= (int(Value.VhlExchangeapdu) & 0b1) << 20
        Value_int |= (int(Value.VhlFormat) & 0b1) << 19
        Value_int |= (int(Value.VhlWrite) & 0b1) << 18
        Value_int |= (int(Value.VhlRead) & 0b1) << 17
        Value_int |= (int(Value.VhlSelect) & 0b1) << 16
        Value_int |= (int(Value.ExtSamAccess) & 0b1) << 15
        Value_int |= (int(Value.HfLowlevelAccess) & 0b1) << 14
        Value_int |= (int(Value.GuiAccess) & 0b1) << 13
        Value_int |= (int(Value.IoPortWrite) & 0b1) << 12
        Value_int |= (int(Value.IoPortRead) & 0b1) << 11
        Value_int |= (int(Value.ConfigReset) & 0b1) << 10
        Value_int |= (int(Value.ConfigWrite) & 0b1) << 9
        Value_int |= (int(Value.ConfigRead) & 0b1) << 8
        Value_int |= (int(Value.SysReset) & 0b1) << 7
        Value_int |= (int(Value.SetAccessConditionMask2) & 0b1) << 6
        Value_int |= (int(Value.SetAccessConditionMask1) & 0b1) << 5
        Value_int |= (int(Value.SetAccessConditionMask0) & 0b1) << 4
        Value_int |= (int(Value.SetKey3) & 0b1) << 3
        Value_int |= (int(Value.SetKey2) & 0b1) << 2
        Value_int |= (int(Value.SetKey1) & 0b1) << 1
        Value_int |= (int(Value.FactoryReset) & 0b1) << 0
        _send_buffer.write(Value_int.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, Value: Union[HostSecurityAccessConditionBits, HostSecurityAccessConditionBits_Dict]) -> None:
        frame = self.build_frame(Value=Value)
        self.execute(frame)
class VhlCfg(ConfigValue):
    MasterKey = 0x03
    def delete(self, ) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        self.execute(_send_buffer.getvalue())
class VhlCfg_File(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        self.execute(_send_buffer.getvalue())
class VhlCfg_File_AreaList125(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x52
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'R')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_AreaList125_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _PageAddress = safe_read_int_from_buffer(_recv_buffer, 1)
            _PageNr = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value_Entry = VhlCfg_File_AreaList125_Value_Entry(_PageAddress, _PageNr)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_AreaList125_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'R')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_AreaList125_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'R')
        for _Value_Entry in Value:
            _PageAddress, _PageNr = _Value_Entry
            _send_buffer.write(_PageAddress.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_PageNr.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_AreaList125_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_Secret125(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0xBA
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xba')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Secret_bytes = _recv_buffer.read(-1)
        _Secret = _Secret_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Secret
    def get(self, File_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xba')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Secret: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xba')
        _send_buffer.write(Secret.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Secret: str) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Secret=Secret)
        self.execute(frame)
class VhlCfg_File_DesfireAid(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x38
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 4)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'8')
        _send_buffer.write(Value.to_bytes(length=4, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_DesfireKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0xB9
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xb9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_DesfireKeyList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _KeySettings_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _IsVersion = bool((_KeySettings_int >> 7) & 0b1)
            _IsDivInfo = bool((_KeySettings_int >> 6) & 0b1)
            _IsDivInfoVhl = bool((_KeySettings_int >> 5) & 0b1)
            _DenyFormat = bool((_KeySettings_int >> 2) & 0b1)
            _DenyWrite = bool((_KeySettings_int >> 1) & 0b1)
            _DenyRead = bool((_KeySettings_int >> 0) & 0b1)
            _KeySettings = KeyAccessRights_KeySettings(_IsVersion, _IsDivInfo, _IsDivInfoVhl, _DenyFormat, _DenyWrite, _DenyRead)
            if _IsVersion:
                _Version = safe_read_int_from_buffer(_recv_buffer, 1)
            else:
                _Version = None
            if _IsDivInfo:
                _DiversificationMode = KeyAccessRights_DiversificationMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
                _DivIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            else:
                _DiversificationMode = None
                _DivIdx = None
            _AccessRights = KeyAccessRights(_KeySettings, _Version, _DiversificationMode, _DivIdx)
            _Algorithm = CryptoAlgorithm_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            if _Algorithm == "DES":
                _DesKey = _recv_buffer.read(8)
                if len(_DesKey) != 8:
                    raise PayloadTooShortError(8 - len(_DesKey))
            else:
                _DesKey = None
            if _Algorithm == "ThreeKeyTripleDES":
                _ThreeKeyTripleDESKey = _recv_buffer.read(24)
                if len(_ThreeKeyTripleDESKey) != 24:
                    raise PayloadTooShortError(24 - len(_ThreeKeyTripleDESKey))
            else:
                _ThreeKeyTripleDESKey = None
            if _Algorithm == "TripleDES" or _Algorithm == "AES":
                _TripleDesAesKey = _recv_buffer.read(16)
                if len(_TripleDesAesKey) != 16:
                    raise PayloadTooShortError(16 - len(_TripleDesAesKey))
            else:
                _TripleDesAesKey = None
            if _Algorithm == "MifareClassic":
                _MifareClassicKey = _recv_buffer.read(6)
                if len(_MifareClassicKey) != 6:
                    raise PayloadTooShortError(6 - len(_MifareClassicKey))
            else:
                _MifareClassicKey = None
            _Value_Entry = VhlCfg_File_DesfireKeyList_Value_Entry(_AccessRights, _Algorithm, _DesKey, _ThreeKeyTripleDESKey, _TripleDesAesKey, _MifareClassicKey)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_DesfireKeyList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xb9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_DesfireKeyList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xb9')
        for _Value_Entry in Value:
            _AccessRights, _Algorithm, _DesKey, _ThreeKeyTripleDESKey, _TripleDesAesKey, _MifareClassicKey = _Value_Entry
            if isinstance(_AccessRights, dict):
                _AccessRights = KeyAccessRights(**_AccessRights)
            _KeySettings, _Version, _DiversificationMode, _DivIdx = _AccessRights
            if isinstance(_KeySettings, dict):
                _KeySettings = KeyAccessRights_KeySettings(**_KeySettings)
            _KeySettings_int = 0
            _KeySettings_int |= (int(_KeySettings.IsVersion) & 0b1) << 7
            _KeySettings_int |= (int(_KeySettings.IsDivInfo) & 0b1) << 6
            _KeySettings_int |= (int(_KeySettings.IsDivInfoVhl) & 0b1) << 5
            _KeySettings_int |= (int(_KeySettings.DenyFormat) & 0b1) << 2
            _KeySettings_int |= (int(_KeySettings.DenyWrite) & 0b1) << 1
            _KeySettings_int |= (int(_KeySettings.DenyRead) & 0b1) << 0
            _send_buffer.write(_KeySettings_int.to_bytes(length=1, byteorder='big'))
            if _KeySettings.IsVersion:
                if _Version is None:
                    raise TypeError("missing a required argument: '_Version'")
                _send_buffer.write(_Version.to_bytes(length=1, byteorder='big'))
            if _KeySettings.IsDivInfo:
                if _DiversificationMode is None:
                    raise TypeError("missing a required argument: '_DiversificationMode'")
                if _DivIdx is None:
                    raise TypeError("missing a required argument: '_DivIdx'")
                _send_buffer.write(KeyAccessRights_DiversificationMode_Parser.as_value(_DiversificationMode).to_bytes(length=1, byteorder='big'))
                _send_buffer.write(_DivIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(CryptoAlgorithm_Parser.as_value(_Algorithm).to_bytes(length=1, byteorder='big'))
            if _Algorithm == "DES":
                if _DesKey is None:
                    raise TypeError("missing a required argument: '_DesKey'")
                if len(_DesKey) != 8:
                    raise ValueError(_DesKey)
                _send_buffer.write(_DesKey)
            if _Algorithm == "ThreeKeyTripleDES":
                if _ThreeKeyTripleDESKey is None:
                    raise TypeError("missing a required argument: '_ThreeKeyTripleDESKey'")
                if len(_ThreeKeyTripleDESKey) != 24:
                    raise ValueError(_ThreeKeyTripleDESKey)
                _send_buffer.write(_ThreeKeyTripleDESKey)
            if _Algorithm == "TripleDES" or _Algorithm == "AES":
                if _TripleDesAesKey is None:
                    raise TypeError("missing a required argument: '_TripleDesAesKey'")
                if len(_TripleDesAesKey) != 16:
                    raise ValueError(_TripleDesAesKey)
                _send_buffer.write(_TripleDesAesKey)
            if _Algorithm == "MifareClassic":
                if _MifareClassicKey is None:
                    raise TypeError("missing a required argument: '_MifareClassicKey'")
                if len(_MifareClassicKey) != 6:
                    raise ValueError(_MifareClassicKey)
                _send_buffer.write(_MifareClassicKey)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_DesfireKeyList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_DesfireFileDesc(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x3A
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b':')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[DesfireFileDescription]:
        _recv_buffer = BytesIO(frame)
        _DesfireFileDescList = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _FileNo = safe_read_int_from_buffer(_recv_buffer, 1)
            _FileCommunicationSecurity = DesfireFileDescription_FileCommunicationSecurity_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _FileType = DesfireFileDescription_FileType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _ReadKeyNo = safe_read_int_from_buffer(_recv_buffer, 1)
            _WriteKeyNo = safe_read_int_from_buffer(_recv_buffer, 1)
            _Offset = safe_read_int_from_buffer(_recv_buffer, 2)
            _Length = safe_read_int_from_buffer(_recv_buffer, 2)
            _ReadKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _WriteKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _AccessRightsLowByte = safe_read_int_from_buffer(_recv_buffer, 1)
            _ChangeKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _FileSize = safe_read_int_from_buffer(_recv_buffer, 2)
            _IsoFid = safe_read_int_from_buffer(_recv_buffer, 2)
            _DesfireFileDesc = DesfireFileDescription(_FileNo, _FileCommunicationSecurity, _FileType, _ReadKeyNo, _WriteKeyNo, _Offset, _Length, _ReadKeyIdx, _WriteKeyIdx, _AccessRightsLowByte, _ChangeKeyIdx, _FileSize, _IsoFid)
            _DesfireFileDescList.append(_DesfireFileDesc)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _DesfireFileDescList
    def get(self, File_ndx: int) -> List[DesfireFileDescription]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b':')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, DesfireFileDescList: List[DesfireFileDescription]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b':')
        for _DesfireFileDescList_Entry in DesfireFileDescList:
            _DesfireFileDesc = _DesfireFileDescList_Entry
            if isinstance(_DesfireFileDesc, dict):
                _DesfireFileDesc = DesfireFileDescription(**_DesfireFileDesc)
            _FileNo, _FileCommunicationSecurity, _FileType, _ReadKeyNo, _WriteKeyNo, _Offset, _Length, _ReadKeyIdx, _WriteKeyIdx, _AccessRightsLowByte, _ChangeKeyIdx, _FileSize, _IsoFid = _DesfireFileDesc
            _send_buffer.write(_FileNo.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(DesfireFileDescription_FileCommunicationSecurity_Parser.as_value(_FileCommunicationSecurity).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(DesfireFileDescription_FileType_Parser.as_value(_FileType).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_ReadKeyNo.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_WriteKeyNo.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_Offset.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_Length.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_ReadKeyIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_WriteKeyIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_AccessRightsLowByte.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_ChangeKeyIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_FileSize.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_IsoFid.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, DesfireFileDescList: List[DesfireFileDescription]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, DesfireFileDescList=DesfireFileDescList)
        self.execute(frame)
class VhlCfg_File_DesfirePiccMasterKeys(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x3B
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b';')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[DesfireKeyIdx]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _PiccMasterkeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value.append(_PiccMasterkeyIdx)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[DesfireKeyIdx]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b';')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[DesfireKeyIdx]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b';')
        for _Value_Entry in Value:
            _PiccMasterkeyIdx = _Value_Entry
            _send_buffer.write(_PiccMasterkeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[DesfireKeyIdx]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_DesfireProtocol(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x3C
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'<')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireProtocol_ProtocolMode:
        _recv_buffer = BytesIO(frame)
        _ProtocolMode = VhlCfg_File_DesfireProtocol_ProtocolMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ProtocolMode
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireProtocol_ProtocolMode:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'<')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ProtocolMode: VhlCfg_File_DesfireProtocol_ProtocolMode) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'<')
        _send_buffer.write(VhlCfg_File_DesfireProtocol_ProtocolMode_Parser.as_value(ProtocolMode).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ProtocolMode: VhlCfg_File_DesfireProtocol_ProtocolMode) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ProtocolMode=ProtocolMode)
        self.execute(frame)
class VhlCfg_File_DesfireFormatMasterPiccKeySettings(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x3D
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'=')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireFormatMasterPiccKeySettings_Result:
        _recv_buffer = BytesIO(frame)
        _MasterPiccKeySettings_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _ConfigurationChangeable = bool((_MasterPiccKeySettings_int >> 3) & 0b1)
        _AllowCreateDeleteApp = bool((_MasterPiccKeySettings_int >> 2) & 0b1)
        _FreeDirectoryList = bool((_MasterPiccKeySettings_int >> 1) & 0b1)
        _AllowChangeMasterPiccKey = bool((_MasterPiccKeySettings_int >> 0) & 0b1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_DesfireFormatMasterPiccKeySettings_Result(_ConfigurationChangeable, _AllowCreateDeleteApp, _FreeDirectoryList, _AllowChangeMasterPiccKey)
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireFormatMasterPiccKeySettings_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'=')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ConfigurationChangeable: bool, AllowCreateDeleteApp: bool, FreeDirectoryList: bool, AllowChangeMasterPiccKey: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'=')
        _var_0000_int = 0
        _var_0000_int |= (int(ConfigurationChangeable) & 0b1) << 3
        _var_0000_int |= (int(AllowCreateDeleteApp) & 0b1) << 2
        _var_0000_int |= (int(FreeDirectoryList) & 0b1) << 1
        _var_0000_int |= (int(AllowChangeMasterPiccKey) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ConfigurationChangeable: bool, AllowCreateDeleteApp: bool, FreeDirectoryList: bool, AllowChangeMasterPiccKey: bool) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ConfigurationChangeable=ConfigurationChangeable, AllowCreateDeleteApp=AllowCreateDeleteApp, FreeDirectoryList=FreeDirectoryList, AllowChangeMasterPiccKey=AllowChangeMasterPiccKey)
        self.execute(frame)
class VhlCfg_File_DesfireFormatPiccDefaultKey(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x3E
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'>')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[DesfireKeyIdx]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _CardDefaultKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value.append(_CardDefaultKeyIdx)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[DesfireKeyIdx]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'>')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[DesfireKeyIdx]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'>')
        for _Value_Entry in Value:
            _CardDefaultKeyIdx = _Value_Entry
            _send_buffer.write(_CardDefaultKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[DesfireKeyIdx]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_DesfireFormatPiccConfig(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x3F
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'?')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireFormatPiccConfig_ConfigurationSettings:
        _recv_buffer = BytesIO(frame)
        _ConfigurationSettings = VhlCfg_File_DesfireFormatPiccConfig_ConfigurationSettings_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ConfigurationSettings
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireFormatPiccConfig_ConfigurationSettings:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'?')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ConfigurationSettings: VhlCfg_File_DesfireFormatPiccConfig_ConfigurationSettings) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'?')
        _send_buffer.write(VhlCfg_File_DesfireFormatPiccConfig_ConfigurationSettings_Parser.as_value(ConfigurationSettings).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ConfigurationSettings: VhlCfg_File_DesfireFormatPiccConfig_ConfigurationSettings) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ConfigurationSettings=ConfigurationSettings)
        self.execute(frame)
class VhlCfg_File_DesfireFormatPiccATS(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x40
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'@')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _ATS_bytes = _recv_buffer.read(-1)
        _ATS = _ATS_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ATS
    def get(self, File_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'@')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ATS: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'@')
        _send_buffer.write(ATS.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ATS: str) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ATS=ATS)
        self.execute(frame)
class VhlCfg_File_DesfireFormatAppMasterkeyIdx(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x41
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'A')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[DesfireKeyIdx]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _ApplicationKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value.append(_ApplicationKeyIdx)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[DesfireKeyIdx]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'A')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[DesfireKeyIdx]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'A')
        for _Value_Entry in Value:
            _ApplicationKeyIdx = _Value_Entry
            _send_buffer.write(_ApplicationKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[DesfireKeyIdx]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_DesfireMapKeyidx(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x42
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'B')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_DesfireMapKeyidx_KeyidxMapList_Entry]:
        _recv_buffer = BytesIO(frame)
        _KeyidxMapList = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Keyidx = safe_read_int_from_buffer(_recv_buffer, 1)
            _KeyidxMsb = safe_read_int_from_buffer(_recv_buffer, 2)
            _KeyidxLsb = safe_read_int_from_buffer(_recv_buffer, 1)
            _KeyidxMapList_Entry = VhlCfg_File_DesfireMapKeyidx_KeyidxMapList_Entry(_Keyidx, _KeyidxMsb, _KeyidxLsb)
            _KeyidxMapList.append(_KeyidxMapList_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _KeyidxMapList
    def get(self, File_ndx: int) -> List[VhlCfg_File_DesfireMapKeyidx_KeyidxMapList_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'B')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, KeyidxMapList: List[VhlCfg_File_DesfireMapKeyidx_KeyidxMapList_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'B')
        for _KeyidxMapList_Entry in KeyidxMapList:
            _Keyidx, _KeyidxMsb, _KeyidxLsb = _KeyidxMapList_Entry
            _send_buffer.write(_Keyidx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_KeyidxMsb.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_KeyidxLsb.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, KeyidxMapList: List[VhlCfg_File_DesfireMapKeyidx_KeyidxMapList_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, KeyidxMapList=KeyidxMapList)
        self.execute(frame)
class VhlCfg_File_DesfireFormatResetPicc(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x43
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'C')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireFormatResetPicc_ResetPicc:
        _recv_buffer = BytesIO(frame)
        _ResetPicc = VhlCfg_File_DesfireFormatResetPicc_ResetPicc_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ResetPicc
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireFormatResetPicc_ResetPicc:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'C')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ResetPicc: VhlCfg_File_DesfireFormatResetPicc_ResetPicc) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'C')
        _send_buffer.write(VhlCfg_File_DesfireFormatResetPicc_ResetPicc_Parser.as_value(ResetPicc).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ResetPicc: VhlCfg_File_DesfireFormatResetPicc_ResetPicc) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ResetPicc=ResetPicc)
        self.execute(frame)
class VhlCfg_File_DesfireFormatAppKeySettings(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x44
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'D')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireFormatAppKeySettings_Result:
        _recv_buffer = BytesIO(frame)
        _KS1_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _ConfigurationChangeable = bool((_KS1_int >> 3) & 0b1)
        _AllowCreateDeleteFile = bool((_KS1_int >> 2) & 0b1)
        _AllowDirectoryList = bool((_KS1_int >> 1) & 0b1)
        _AllowChangeAppMasterKey = bool((_KS1_int >> 0) & 0b1)
        _KS2_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _AES = bool((_KS2_int >> 7) & 0b1)
        _ThreeKeyTripleDES = bool((_KS2_int >> 6) & 0b1)
        _UseIsofileIDs = bool((_KS2_int >> 5) & 0b1)
        _KS3Presence = bool((_KS2_int >> 4) & 0b1)
        if _KS3Presence:
            _KS3_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _AppSpecificCapabilityData = bool((_KS3_int >> 2) & 0b1)
            _AppSpecificVcKeys = bool((_KS3_int >> 1) & 0b1)
        else:
            _AppSpecificCapabilityData = None
            _AppSpecificVcKeys = None
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_DesfireFormatAppKeySettings_Result(_ConfigurationChangeable, _AllowCreateDeleteFile, _AllowDirectoryList, _AllowChangeAppMasterKey, _AES, _ThreeKeyTripleDES, _UseIsofileIDs, _KS3Presence, _AppSpecificCapabilityData, _AppSpecificVcKeys)
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireFormatAppKeySettings_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'D')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ConfigurationChangeable: bool, AllowCreateDeleteFile: bool, AllowDirectoryList: bool, AllowChangeAppMasterKey: bool, AES: bool, ThreeKeyTripleDES: bool, UseIsofileIDs: bool, KS3Presence: bool, AppSpecificCapabilityData: Optional[bool] = None, AppSpecificVcKeys: Optional[bool] = None) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'D')
        _var_0000_int = 0
        _var_0000_int |= (int(ConfigurationChangeable) & 0b1) << 3
        _var_0000_int |= (int(AllowCreateDeleteFile) & 0b1) << 2
        _var_0000_int |= (int(AllowDirectoryList) & 0b1) << 1
        _var_0000_int |= (int(AllowChangeAppMasterKey) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        _var_0001_int = 0
        _var_0001_int |= (int(AES) & 0b1) << 7
        _var_0001_int |= (int(ThreeKeyTripleDES) & 0b1) << 6
        _var_0001_int |= (int(UseIsofileIDs) & 0b1) << 5
        _var_0001_int |= (int(KS3Presence) & 0b1) << 4
        _send_buffer.write(_var_0001_int.to_bytes(length=1, byteorder='big'))
        if KS3Presence:
            if AppSpecificCapabilityData is None:
                raise TypeError("missing a required argument: 'AppSpecificCapabilityData'")
            if AppSpecificVcKeys is None:
                raise TypeError("missing a required argument: 'AppSpecificVcKeys'")
            _var_0002_int = 0
            _var_0002_int |= (int(AppSpecificCapabilityData) & 0b1) << 2
            _var_0002_int |= (int(AppSpecificVcKeys) & 0b1) << 1
            _send_buffer.write(_var_0002_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ConfigurationChangeable: bool, AllowCreateDeleteFile: bool, AllowDirectoryList: bool, AllowChangeAppMasterKey: bool, AES: bool, ThreeKeyTripleDES: bool, UseIsofileIDs: bool, KS3Presence: bool, AppSpecificCapabilityData: Optional[bool] = None, AppSpecificVcKeys: Optional[bool] = None) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ConfigurationChangeable=ConfigurationChangeable, AllowCreateDeleteFile=AllowCreateDeleteFile, AllowDirectoryList=AllowDirectoryList, AllowChangeAppMasterKey=AllowChangeAppMasterKey, AES=AES, ThreeKeyTripleDES=ThreeKeyTripleDES, UseIsofileIDs=UseIsofileIDs, KS3Presence=KS3Presence, AppSpecificCapabilityData=AppSpecificCapabilityData, AppSpecificVcKeys=AppSpecificVcKeys)
        self.execute(frame)
class VhlCfg_File_DesfireFormatAppIsoFileID(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x45
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'E')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _FID = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _FID
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'E')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, FID: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'E')
        _send_buffer.write(FID.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, FID: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, FID=FID)
        self.execute(frame)
class VhlCfg_File_DesfireFormatAppIsoFileDFName(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x46
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'F')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _ApplicationName_bytes = _recv_buffer.read(-1)
        _ApplicationName = _ApplicationName_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ApplicationName
    def get(self, File_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'F')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ApplicationName: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'F')
        _send_buffer.write(ApplicationName.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ApplicationName: str) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ApplicationName=ApplicationName)
        self.execute(frame)
class VhlCfg_File_DesfireFormatAppChangeKeys(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x47
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'G')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_DesfireFormatAppChangeKeys_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _KeyNo = safe_read_int_from_buffer(_recv_buffer, 1)
            _CurrentKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _NewKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value_Entry = VhlCfg_File_DesfireFormatAppChangeKeys_Value_Entry(_KeyNo, _CurrentKeyIdx, _NewKeyIdx)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_DesfireFormatAppChangeKeys_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'G')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_DesfireFormatAppChangeKeys_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'G')
        for _Value_Entry in Value:
            _KeyNo, _CurrentKeyIdx, _NewKeyIdx = _Value_Entry
            _send_buffer.write(_KeyNo.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_CurrentKeyIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_NewKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_DesfireFormatAppChangeKeys_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_DesfireFormatAppChangeKeyIdx(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x48
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'H')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> DesfireKeyIdx:
        _recv_buffer = BytesIO(frame)
        _ApplicationChangeKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ApplicationChangeKeyIdx
    def get(self, File_ndx: int) -> DesfireKeyIdx:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'H')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ApplicationChangeKeyIdx: DesfireKeyIdx) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'H')
        _send_buffer.write(ApplicationChangeKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ApplicationChangeKeyIdx: DesfireKeyIdx) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ApplicationChangeKeyIdx=ApplicationChangeKeyIdx)
        self.execute(frame)
class VhlCfg_File_DesfireRandomIdKey(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x49
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'I')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireRandomIdKey_Result:
        _recv_buffer = BytesIO(frame)
        _ReadIdKeyNo = safe_read_int_from_buffer(_recv_buffer, 1)
        _ReadIdKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_DesfireRandomIdKey_Result(_ReadIdKeyNo, _ReadIdKeyIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireRandomIdKey_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'I')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ReadIdKeyNo: int = 0, ReadIdKeyIdx: int = 192) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'I')
        _send_buffer.write(ReadIdKeyNo.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(ReadIdKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ReadIdKeyNo: int = 0, ReadIdKeyIdx: int = 192) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ReadIdKeyNo=ReadIdKeyNo, ReadIdKeyIdx=ReadIdKeyIdx)
        self.execute(frame)
class VhlCfg_File_DesfireEv2FormatPiccKeys(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x4A
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'J')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_DesfireEv2FormatPiccKeys_PiccLevelKeylist_Entry]:
        _recv_buffer = BytesIO(frame)
        _PiccLevelKeylist = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _KeyNo = safe_read_int_from_buffer(_recv_buffer, 1)
            _PiccCurKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _PiccNewKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _PiccLevelKeylist_Entry = VhlCfg_File_DesfireEv2FormatPiccKeys_PiccLevelKeylist_Entry(_KeyNo, _PiccCurKeyIdx, _PiccNewKeyIdx)
            _PiccLevelKeylist.append(_PiccLevelKeylist_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _PiccLevelKeylist
    def get(self, File_ndx: int) -> List[VhlCfg_File_DesfireEv2FormatPiccKeys_PiccLevelKeylist_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'J')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, PiccLevelKeylist: List[VhlCfg_File_DesfireEv2FormatPiccKeys_PiccLevelKeylist_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'J')
        for _PiccLevelKeylist_Entry in PiccLevelKeylist:
            _KeyNo, _PiccCurKeyIdx, _PiccNewKeyIdx = _PiccLevelKeylist_Entry
            _send_buffer.write(_KeyNo.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_PiccCurKeyIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_PiccNewKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, PiccLevelKeylist: List[VhlCfg_File_DesfireEv2FormatPiccKeys_PiccLevelKeylist_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, PiccLevelKeylist=PiccLevelKeylist)
        self.execute(frame)
class VhlCfg_File_DesfireEv2FormatAppKeysetParams(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x4B
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'K')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireEv2FormatAppKeysetParams_Result:
        _recv_buffer = BytesIO(frame)
        _KeysetVersion = safe_read_int_from_buffer(_recv_buffer, 1)
        _NoKeysets = safe_read_int_from_buffer(_recv_buffer, 1)
        _MaxKeySize = VhlCfg_File_DesfireEv2FormatAppKeysetParams_MaxKeySize_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _KeysetSettings = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_DesfireEv2FormatAppKeysetParams_Result(_KeysetVersion, _NoKeysets, _MaxKeySize, _KeysetSettings)
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireEv2FormatAppKeysetParams_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'K')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, KeysetVersion: int, NoKeysets: int, MaxKeySize: VhlCfg_File_DesfireEv2FormatAppKeysetParams_MaxKeySize, KeysetSettings: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'K')
        _send_buffer.write(KeysetVersion.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(NoKeysets.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(VhlCfg_File_DesfireEv2FormatAppKeysetParams_MaxKeySize_Parser.as_value(MaxKeySize).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(KeysetSettings.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, KeysetVersion: int, NoKeysets: int, MaxKeySize: VhlCfg_File_DesfireEv2FormatAppKeysetParams_MaxKeySize, KeysetSettings: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, KeysetVersion=KeysetVersion, NoKeysets=NoKeysets, MaxKeySize=MaxKeySize, KeysetSettings=KeysetSettings)
        self.execute(frame)
class VhlCfg_File_DesfireEv2FormatAppDAM(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x4C
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'L')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireEv2FormatAppDAM_Result:
        _recv_buffer = BytesIO(frame)
        _SlotNumber = safe_read_int_from_buffer(_recv_buffer, 1)
        _SlotVersion = safe_read_int_from_buffer(_recv_buffer, 1)
        _QuotaLimit = safe_read_int_from_buffer(_recv_buffer, 2)
        _EncApplicationKey = _recv_buffer.read(32)
        if len(_EncApplicationKey) != 32:
            raise PayloadTooShortError(32 - len(_EncApplicationKey))
        _DamMac = _recv_buffer.read(8)
        if len(_DamMac) != 8:
            raise PayloadTooShortError(8 - len(_DamMac))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_DesfireEv2FormatAppDAM_Result(_SlotNumber, _SlotVersion, _QuotaLimit, _EncApplicationKey, _DamMac)
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireEv2FormatAppDAM_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'L')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, SlotNumber: int, SlotVersion: int, QuotaLimit: int, EncApplicationKey: bytes, DamMac: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'L')
        _send_buffer.write(SlotNumber.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(SlotVersion.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(QuotaLimit.to_bytes(length=2, byteorder='big'))
        if len(EncApplicationKey) != 32:
            raise ValueError(EncApplicationKey)
        _send_buffer.write(EncApplicationKey)
        if len(DamMac) != 8:
            raise ValueError(DamMac)
        _send_buffer.write(DamMac)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, SlotNumber: int, SlotVersion: int, QuotaLimit: int, EncApplicationKey: bytes, DamMac: bytes) -> None:
        frame = self.build_frame(File_ndx=File_ndx, SlotNumber=SlotNumber, SlotVersion=SlotVersion, QuotaLimit=QuotaLimit, EncApplicationKey=EncApplicationKey, DamMac=DamMac)
        self.execute(frame)
class VhlCfg_File_DesfireEv2FormatAppKeysetKeylist(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x4D
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'M')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_DesfireEv2FormatAppKeysetKeylist_KeysetList_Entry]:
        _recv_buffer = BytesIO(frame)
        _KeysetList = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Keyset = safe_read_int_from_buffer(_recv_buffer, 1)
            _KeysetVersion = safe_read_int_from_buffer(_recv_buffer, 1)
            _KeysetType = VhlCfg_File_DesfireEv2FormatAppKeysetKeylist_KeysetType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _KeyList_len = safe_read_int_from_buffer(_recv_buffer, 1)
            _KeyList = []  # type: ignore[var-annotated,unused-ignore]
            while not len(_KeyList) >= _KeyList_len:
                _KeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
                _KeyList.append(_KeyIdx)
            if len(_KeyList) != _KeyList_len:
                raise PayloadTooShortError(_KeyList_len - len(_KeyList))
            _KeysetList_Entry = VhlCfg_File_DesfireEv2FormatAppKeysetKeylist_KeysetList_Entry(_Keyset, _KeysetVersion, _KeysetType, _KeyList)
            _KeysetList.append(_KeysetList_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _KeysetList
    def get(self, File_ndx: int) -> List[VhlCfg_File_DesfireEv2FormatAppKeysetKeylist_KeysetList_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'M')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, KeysetList: List[VhlCfg_File_DesfireEv2FormatAppKeysetKeylist_KeysetList_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'M')
        for _KeysetList_Entry in KeysetList:
            _Keyset, _KeysetVersion, _KeysetType, _KeyList = _KeysetList_Entry
            _send_buffer.write(_Keyset.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_KeysetVersion.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(VhlCfg_File_DesfireEv2FormatAppKeysetKeylist_KeysetType_Parser.as_value(_KeysetType).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(int(len(_KeyList)).to_bytes(1, byteorder='big'))
            for _KeyList_Entry in _KeyList:
                _KeyIdx = _KeyList_Entry
                _send_buffer.write(_KeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, KeysetList: List[VhlCfg_File_DesfireEv2FormatAppKeysetKeylist_KeysetList_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, KeysetList=KeysetList)
        self.execute(frame)
class VhlCfg_File_DesfireEv2FormatAppSwitchKeyset(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x4E
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'N')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireEv2FormatAppSwitchKeyset_Result:
        _recv_buffer = BytesIO(frame)
        _Keyset = safe_read_int_from_buffer(_recv_buffer, 1)
        _KeyNr = safe_read_int_from_buffer(_recv_buffer, 1)
        _RollKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_DesfireEv2FormatAppSwitchKeyset_Result(_Keyset, _KeyNr, _RollKeyIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireEv2FormatAppSwitchKeyset_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'N')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Keyset: int, KeyNr: int, RollKeyIdx: DesfireKeyIdx) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'N')
        _send_buffer.write(Keyset.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(KeyNr.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(RollKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Keyset: int, KeyNr: int, RollKeyIdx: DesfireKeyIdx) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Keyset=Keyset, KeyNr=KeyNr, RollKeyIdx=RollKeyIdx)
        self.execute(frame)
class VhlCfg_File_DesfireProxcheck(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x4F
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'O')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> DesfireKeyIdx:
        _recv_buffer = BytesIO(frame)
        _ProxcheckKeyidx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _ProxcheckKeyidx
    def get(self, File_ndx: int) -> DesfireKeyIdx:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'O')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ProxcheckKeyidx: DesfireKeyIdx) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'O')
        _send_buffer.write(ProxcheckKeyidx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ProxcheckKeyidx: DesfireKeyIdx) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ProxcheckKeyidx=ProxcheckKeyidx)
        self.execute(frame)
class VhlCfg_File_DesfireVcsParams(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x50
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'P')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_DesfireVcsParams_Result:
        _recv_buffer = BytesIO(frame)
        _VcsOptions_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _PrependUidBeforeMacDivData = bool((_VcsOptions_int >> 2) & 0b1)
        _RejectCardsWithoutValidIid = bool((_VcsOptions_int >> 1) & 0b1)
        _ForceAuthToCard = bool((_VcsOptions_int >> 0) & 0b1)
        _DfName_len = safe_read_int_from_buffer(_recv_buffer, 1)
        _DfName = _recv_buffer.read(_DfName_len)
        if len(_DfName) != _DfName_len:
            raise PayloadTooShortError(_DfName_len - len(_DfName))
        _VcsEncKeyidx = safe_read_int_from_buffer(_recv_buffer, 1)
        _VcsMacKeyidx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_DesfireVcsParams_Result(_PrependUidBeforeMacDivData, _RejectCardsWithoutValidIid, _ForceAuthToCard, _DfName, _VcsEncKeyidx, _VcsMacKeyidx)
    def get(self, File_ndx: int) -> VhlCfg_File_DesfireVcsParams_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'P')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, PrependUidBeforeMacDivData: bool, RejectCardsWithoutValidIid: bool, ForceAuthToCard: bool, DfName: bytes, VcsEncKeyidx: DesfireKeyIdx, VcsMacKeyidx: DesfireKeyIdx) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'P')
        _var_0000_int = 0
        _var_0000_int |= (int(PrependUidBeforeMacDivData) & 0b1) << 2
        _var_0000_int |= (int(RejectCardsWithoutValidIid) & 0b1) << 1
        _var_0000_int |= (int(ForceAuthToCard) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(int(len(DfName)).to_bytes(1, byteorder='big'))
        _send_buffer.write(DfName)
        _send_buffer.write(VcsEncKeyidx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(VcsMacKeyidx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, PrependUidBeforeMacDivData: bool, RejectCardsWithoutValidIid: bool, ForceAuthToCard: bool, DfName: bytes, VcsEncKeyidx: DesfireKeyIdx, VcsMacKeyidx: DesfireKeyIdx) -> None:
        frame = self.build_frame(File_ndx=File_ndx, PrependUidBeforeMacDivData=PrependUidBeforeMacDivData, RejectCardsWithoutValidIid=RejectCardsWithoutValidIid, ForceAuthToCard=ForceAuthToCard, DfName=DfName, VcsEncKeyidx=VcsEncKeyidx, VcsMacKeyidx=VcsMacKeyidx)
        self.execute(frame)
class VhlCfg_File_DesfireEV2FormatFileMultAccessCond(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x51
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'Q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_DesfireEV2FormatFileMultAccessCond_FileList_Entry]:
        _recv_buffer = BytesIO(frame)
        _FileList = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _FileNr = safe_read_int_from_buffer(_recv_buffer, 1)
            _AccessCondList_len = safe_read_int_from_buffer(_recv_buffer, 1)
            _AccessCondList = []  # type: ignore[var-annotated,unused-ignore]
            while not len(_AccessCondList) >= _AccessCondList_len:
                _AccessCond = safe_read_int_from_buffer(_recv_buffer, 2)
                _AccessCondList.append(_AccessCond)
            if len(_AccessCondList) != _AccessCondList_len:
                raise PayloadTooShortError(_AccessCondList_len - len(_AccessCondList))
            _FileList_Entry = VhlCfg_File_DesfireEV2FormatFileMultAccessCond_FileList_Entry(_FileNr, _AccessCondList)
            _FileList.append(_FileList_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _FileList
    def get(self, File_ndx: int) -> List[VhlCfg_File_DesfireEV2FormatFileMultAccessCond_FileList_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'Q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, FileList: List[VhlCfg_File_DesfireEV2FormatFileMultAccessCond_FileList_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'Q')
        for _FileList_Entry in FileList:
            _FileNr, _AccessCondList = _FileList_Entry
            _send_buffer.write(_FileNr.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(int(len(_AccessCondList)).to_bytes(1, byteorder='big'))
            for _AccessCondList_Entry in _AccessCondList:
                _AccessCond = _AccessCondList_Entry
                _send_buffer.write(_AccessCond.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, FileList: List[VhlCfg_File_DesfireEV2FormatFileMultAccessCond_FileList_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, FileList=FileList)
        self.execute(frame)
class VhlCfg_File_ForceCardSM(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x53
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'S')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_ForceCardSM_MinimumSM:
        _recv_buffer = BytesIO(frame)
        _MinimumSM = VhlCfg_File_ForceCardSM_MinimumSM_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _MinimumSM
    def get(self, File_ndx: int) -> VhlCfg_File_ForceCardSM_MinimumSM:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'S')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, MinimumSM: VhlCfg_File_ForceCardSM_MinimumSM) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'S')
        _send_buffer.write(VhlCfg_File_ForceCardSM_MinimumSM_Parser.as_value(MinimumSM).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, MinimumSM: VhlCfg_File_ForceCardSM_MinimumSM) -> None:
        frame = self.build_frame(File_ndx=File_ndx, MinimumSM=MinimumSM)
        self.execute(frame)
class VhlCfg_File_DesfireDiversificationData(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x5B
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'[')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> Template:
        _recv_buffer = BytesIO(frame)
        _Value = Template(_recv_buffer.read())
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> Template:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'[')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: Union[Template, bytes]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'[')
        _send_buffer.write(bytes(Value))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: Union[Template, bytes]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_FelicaSystemCode(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x70
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'p')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _SystemCode = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SystemCode
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'p')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, SystemCode: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'p')
        _send_buffer.write(SystemCode.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, SystemCode: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, SystemCode=SystemCode)
        self.execute(frame)
class VhlCfg_File_FelicaServiceCodeList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x71
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'q')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[int]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _ServiceCode = safe_read_int_from_buffer(_recv_buffer, 2)
            _Value.append(_ServiceCode)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[int]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'q')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[int]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'q')
        for _Value_Entry in Value:
            _ServiceCode = _Value_Entry
            _send_buffer.write(_ServiceCode.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[int]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_FelicaAreaList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x72
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'r')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_FelicaAreaList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _BlockAddress = safe_read_int_from_buffer(_recv_buffer, 1)
            _BlockNr = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value_Entry = VhlCfg_File_FelicaAreaList_Value_Entry(_BlockAddress, _BlockNr)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_FelicaAreaList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'r')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_FelicaAreaList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'r')
        for _Value_Entry in Value:
            _BlockAddress, _BlockNr = _Value_Entry
            _send_buffer.write(_BlockAddress.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_BlockNr.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_FelicaAreaList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_FidoRpid(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x73
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b's')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bytes:
        _recv_buffer = BytesIO(frame)
        _Rpid = _recv_buffer.read(-1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Rpid
    def get(self, File_ndx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b's')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Rpid: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b's')
        _send_buffer.write(Rpid)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Rpid: bytes) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Rpid=Rpid)
        self.execute(frame)
class VhlCfg_File_FidoPublicKey(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x74
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b't')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bytes:
        _recv_buffer = BytesIO(frame)
        _PublicKey = _recv_buffer.read(65)
        if len(_PublicKey) != 65:
            raise PayloadTooShortError(65 - len(_PublicKey))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _PublicKey
    def get(self, File_ndx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b't')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, PublicKey: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b't')
        if len(PublicKey) != 65:
            raise ValueError(PublicKey)
        _send_buffer.write(PublicKey)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, PublicKey: bytes) -> None:
        frame = self.build_frame(File_ndx=File_ndx, PublicKey=PublicKey)
        self.execute(frame)
class VhlCfg_File_IntIndFileDescList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x54
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'T')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_IntIndFileDescList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _FileSpecifier = FileType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _FileId_len = safe_read_int_from_buffer(_recv_buffer, 1)
            _FileId_bytes = _recv_buffer.read(_FileId_len)
            _FileId = _FileId_bytes.decode('ascii')
            if len(_FileId) != _FileId_len:
                raise PayloadTooShortError(_FileId_len - len(_FileId))
            _Value_Entry = VhlCfg_File_IntIndFileDescList_Value_Entry(_FileSpecifier, _FileId)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_IntIndFileDescList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'T')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_IntIndFileDescList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'T')
        for _Value_Entry in Value:
            _FileSpecifier, _FileId = _Value_Entry
            _send_buffer.write(FileType_Parser.as_value(_FileSpecifier).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(int(len(_FileId)).to_bytes(1, byteorder='big'))
            _send_buffer.write(_FileId.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_IntIndFileDescList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_IntIndSegment(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x55
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'U')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_IntIndSegment_Result:
        _recv_buffer = BytesIO(frame)
        _FileOffset = safe_read_int_from_buffer(_recv_buffer, 2)
        _FileLength = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_IntIndSegment_Result(_FileOffset, _FileLength)
    def get(self, File_ndx: int) -> VhlCfg_File_IntIndSegment_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'U')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, FileOffset: int, FileLength: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'U')
        _send_buffer.write(FileOffset.to_bytes(length=2, byteorder='big'))
        _send_buffer.write(FileLength.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, FileOffset: int, FileLength: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, FileOffset=FileOffset, FileLength=FileLength)
        self.execute(frame)
class VhlCfg_File_IntIndKeyIdx(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x56
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'V')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_IntIndKeyIdx_Result:
        _recv_buffer = BytesIO(frame)
        _MemoryType = safe_read_int_from_buffer(_recv_buffer, 1)
        _KeyIndex = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_IntIndKeyIdx_Result(_MemoryType, _KeyIndex)
    def get(self, File_ndx: int) -> VhlCfg_File_IntIndKeyIdx_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'V')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, MemoryType: int, KeyIndex: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'V')
        _send_buffer.write(MemoryType.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(KeyIndex.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, MemoryType: int, KeyIndex: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, MemoryType=MemoryType, KeyIndex=KeyIndex)
        self.execute(frame)
class VhlCfg_File_IntIndRecordNumber(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x57
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'W')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _RecordNumber = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _RecordNumber
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'W')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, RecordNumber: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'W')
        _send_buffer.write(RecordNumber.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, RecordNumber: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, RecordNumber=RecordNumber)
        self.execute(frame)
class VhlCfg_File_IntIndOnReadSelectOnly(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x58
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'X')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_IntIndOnReadSelectOnly_Value:
        _recv_buffer = BytesIO(frame)
        _Value = VhlCfg_File_IntIndOnReadSelectOnly_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> VhlCfg_File_IntIndOnReadSelectOnly_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'X')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: VhlCfg_File_IntIndOnReadSelectOnly_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'X')
        _send_buffer.write(VhlCfg_File_IntIndOnReadSelectOnly_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: VhlCfg_File_IntIndOnReadSelectOnly_Value) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_IntIndTimeout(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x59
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'Y')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Timeout = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Timeout
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'Y')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Timeout: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'Y')
        _send_buffer.write(Timeout.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Timeout: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Timeout=Timeout)
        self.execute(frame)
class VhlCfg_File_Iso15Afi(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x30
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'0')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _AFI = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _AFI
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'0')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, AFI: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'0')
        _send_buffer.write(AFI.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, AFI: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, AFI=AFI)
        self.execute(frame)
class VhlCfg_File_Iso15DsfId(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x31
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'1')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _DSFID = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _DSFID
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'1')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, DSFID: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'1')
        _send_buffer.write(DSFID.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, DSFID: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, DSFID=DSFID)
        self.execute(frame)
class VhlCfg_File_Iso15BlockList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x33
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'3')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_Iso15BlockList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _StartBlock = safe_read_int_from_buffer(_recv_buffer, 1)
            _NumberOfBlocks = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value_Entry = VhlCfg_File_Iso15BlockList_Value_Entry(_StartBlock, _NumberOfBlocks)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_Iso15BlockList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'3')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_Iso15BlockList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'3')
        for _Value_Entry in Value:
            _StartBlock, _NumberOfBlocks = _Value_Entry
            _send_buffer.write(_StartBlock.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_NumberOfBlocks.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_Iso15BlockList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_Iso15BlockSize(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x34
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'4')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _BlockSize = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _BlockSize
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'4')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, BlockSize: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'4')
        _send_buffer.write(BlockSize.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, BlockSize: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, BlockSize=BlockSize)
        self.execute(frame)
class VhlCfg_File_Iso15WriteOptFlag(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x35
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'5')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_Iso15WriteOptFlag_Value:
        _recv_buffer = BytesIO(frame)
        _Value = VhlCfg_File_Iso15WriteOptFlag_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> VhlCfg_File_Iso15WriteOptFlag_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'5')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: VhlCfg_File_Iso15WriteOptFlag_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'5')
        _send_buffer.write(VhlCfg_File_Iso15WriteOptFlag_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: VhlCfg_File_Iso15WriteOptFlag_Value) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_Iso15ReadCmd(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x36
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'6')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_Iso15ReadCmd_Value:
        _recv_buffer = BytesIO(frame)
        _Value = VhlCfg_File_Iso15ReadCmd_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> VhlCfg_File_Iso15ReadCmd_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'6')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: VhlCfg_File_Iso15ReadCmd_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'6')
        _send_buffer.write(VhlCfg_File_Iso15ReadCmd_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: VhlCfg_File_Iso15ReadCmd_Value) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_Iso15WriteCmd(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x37
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'7')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_Iso15WriteCmd_Value:
        _recv_buffer = BytesIO(frame)
        _Value = VhlCfg_File_Iso15WriteCmd_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> VhlCfg_File_Iso15WriteCmd_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'7')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: VhlCfg_File_Iso15WriteCmd_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'7')
        _send_buffer.write(VhlCfg_File_Iso15WriteCmd_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: VhlCfg_File_Iso15WriteCmd_Value) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_Iso15ExtendedBlockList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x32
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'2')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_Iso15ExtendedBlockList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _StartBlock = safe_read_int_from_buffer(_recv_buffer, 2)
            _NumberOfBlocks = safe_read_int_from_buffer(_recv_buffer, 2)
            _Value_Entry = VhlCfg_File_Iso15ExtendedBlockList_Value_Entry(_StartBlock, _NumberOfBlocks)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_Iso15ExtendedBlockList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'2')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_Iso15ExtendedBlockList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'2')
        for _Value_Entry in Value:
            _StartBlock, _NumberOfBlocks = _Value_Entry
            _send_buffer.write(_StartBlock.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_NumberOfBlocks.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_Iso15ExtendedBlockList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_LegicSegmentListLegacy(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x20
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b' ')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_LegicSegmentListLegacy_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _SegmentIdAndAdr_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _AdvantAddressMode = bool((_SegmentIdAndAdr_int >> 7) & 0b1)
            _StampSearch = bool((_SegmentIdAndAdr_int >> 0) & 0b1)
            _SegmentIdAndAdr = SegmentIdentificationAndAddressing(_AdvantAddressMode, _StampSearch)
            _SegmentInformation_bytes = _recv_buffer.read(1)
            _SegmentInformation = _SegmentInformation_bytes.decode('ascii')
            if len(_SegmentInformation) != 1:
                raise PayloadTooShortError(1 - len(_SegmentInformation))
            _Value_Entry = VhlCfg_File_LegicSegmentListLegacy_Value_Entry(_SegmentIdAndAdr, _SegmentInformation)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_LegicSegmentListLegacy_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b' ')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_LegicSegmentListLegacy_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b' ')
        for _Value_Entry in Value:
            _SegmentIdAndAdr, _SegmentInformation = _Value_Entry
            if isinstance(_SegmentIdAndAdr, dict):
                _SegmentIdAndAdr = SegmentIdentificationAndAddressing(**_SegmentIdAndAdr)
            _SegmentIdAndAdr_int = 0
            _SegmentIdAndAdr_int |= (int(_SegmentIdAndAdr.AdvantAddressMode) & 0b1) << 7
            _SegmentIdAndAdr_int |= (int(_SegmentIdAndAdr.StampSearch) & 0b1) << 0
            _send_buffer.write(_SegmentIdAndAdr_int.to_bytes(length=1, byteorder='big'))
            if len(_SegmentInformation) != 1:
                raise ValueError(_SegmentInformation)
            _send_buffer.write(_SegmentInformation.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_LegicSegmentListLegacy_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_LegicLengthList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x21
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'!')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[int]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Length = safe_read_int_from_buffer(_recv_buffer, 2)
            _Value.append(_Length)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[int]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'!')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[int]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'!')
        for _Value_Entry in Value:
            _Length = _Value_Entry
            _send_buffer.write(_Length.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[int]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_LegicAddressList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x22
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'"')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[AddressAndEnableCRC]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Address_int = safe_read_int_from_buffer(_recv_buffer, 2)
            _EnableCRC = bool((_Address_int >> 15) & 0b1)
            _Address = AddressAndEnableCRC(_EnableCRC)
            _Value.append(_Address)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[AddressAndEnableCRC]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'"')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[AddressAndEnableCRC]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'"')
        for _Value_Entry in Value:
            _Address = _Value_Entry
            if isinstance(_Address, dict):
                _Address = AddressAndEnableCRC(**_Address)
            _Address_int = 0
            _Address_int |= (int(_Address.EnableCRC) & 0b1) << 15
            _send_buffer.write(_Address_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[AddressAndEnableCRC]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_LegicCRCAddressList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x23
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'#')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[CRCAddressAndCRCType]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Address_int = safe_read_int_from_buffer(_recv_buffer, 2)
            _CRC16bit = bool((_Address_int >> 15) & 0b1)
            _Address = CRCAddressAndCRCType(_CRC16bit)
            _Value.append(_Address)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[CRCAddressAndCRCType]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'#')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[CRCAddressAndCRCType]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'#')
        for _Value_Entry in Value:
            _Address = _Value_Entry
            if isinstance(_Address, dict):
                _Address = CRCAddressAndCRCType(**_Address)
            _Address_int = 0
            _Address_int |= (int(_Address.CRC16bit) & 0b1) << 15
            _send_buffer.write(_Address_int.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[CRCAddressAndCRCType]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_LegicSegmentTypeList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x24
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'$')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_LegicSegmentTypeList_Value:
        _recv_buffer = BytesIO(frame)
        _Value = VhlCfg_File_LegicSegmentTypeList_Value_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> VhlCfg_File_LegicSegmentTypeList_Value:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'$')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: VhlCfg_File_LegicSegmentTypeList_Value) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'$')
        _send_buffer.write(VhlCfg_File_LegicSegmentTypeList_Value_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: VhlCfg_File_LegicSegmentTypeList_Value) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_LegicApplicationSegmentList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x28
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'(')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_LegicApplicationSegmentList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _SegmentIdAndAdr_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _AdvantAddressMode = bool((_SegmentIdAndAdr_int >> 7) & 0b1)
            _StampSearch = bool((_SegmentIdAndAdr_int >> 0) & 0b1)
            _SegmentIdAndAdr = SegmentIdentificationAndAddressing(_AdvantAddressMode, _StampSearch)
            _SegmentInformation_len = safe_read_int_from_buffer(_recv_buffer, 1)
            _SegmentInformation_bytes = _recv_buffer.read(_SegmentInformation_len)
            _SegmentInformation = _SegmentInformation_bytes.decode('ascii')
            if len(_SegmentInformation) != _SegmentInformation_len:
                raise PayloadTooShortError(_SegmentInformation_len - len(_SegmentInformation))
            _Value_Entry = VhlCfg_File_LegicApplicationSegmentList_Value_Entry(_SegmentIdAndAdr, _SegmentInformation)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_LegicApplicationSegmentList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'(')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_LegicApplicationSegmentList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'(')
        for _Value_Entry in Value:
            _SegmentIdAndAdr, _SegmentInformation = _Value_Entry
            if isinstance(_SegmentIdAndAdr, dict):
                _SegmentIdAndAdr = SegmentIdentificationAndAddressing(**_SegmentIdAndAdr)
            _SegmentIdAndAdr_int = 0
            _SegmentIdAndAdr_int |= (int(_SegmentIdAndAdr.AdvantAddressMode) & 0b1) << 7
            _SegmentIdAndAdr_int |= (int(_SegmentIdAndAdr.StampSearch) & 0b1) << 0
            _send_buffer.write(_SegmentIdAndAdr_int.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(int(len(_SegmentInformation)).to_bytes(1, byteorder='big'))
            _send_buffer.write(_SegmentInformation.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_LegicApplicationSegmentList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareMode(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x10
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x10')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifareMode_AccessMode:
        _recv_buffer = BytesIO(frame)
        _AccessMode = VhlCfg_File_MifareMode_AccessMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _AccessMode
    def get(self, File_ndx: int) -> VhlCfg_File_MifareMode_AccessMode:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x10')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, AccessMode: VhlCfg_File_MifareMode_AccessMode) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x10')
        _send_buffer.write(VhlCfg_File_MifareMode_AccessMode_Parser.as_value(AccessMode).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, AccessMode: VhlCfg_File_MifareMode_AccessMode) -> None:
        frame = self.build_frame(File_ndx=File_ndx, AccessMode=AccessMode)
        self.execute(frame)
class VhlCfg_File_MifarePlusMadKeyBIndex(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x91
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x91')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifarePlusMadKeyBIndex_Result:
        _recv_buffer = BytesIO(frame)
        _MadKeyBMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _MadKeyBIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_MifarePlusMadKeyBIndex_Result(_MadKeyBMemoryType, _MadKeyBIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_MifarePlusMadKeyBIndex_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x91')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, MadKeyBMemoryType: MifarePlusKeyMemoryType, MadKeyBIdx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x91')
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(MadKeyBMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MadKeyBIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, MadKeyBMemoryType: MifarePlusKeyMemoryType, MadKeyBIdx: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, MadKeyBMemoryType=MadKeyBMemoryType, MadKeyBIdx=MadKeyBIdx)
        self.execute(frame)
class VhlCfg_File_MifareKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x95
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x95')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_MifareKeyList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _AccessLimitations_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _DenyTransferToSecureMemory = bool((_AccessLimitations_int >> 4) & 0b1)
            _DenyChangeKey = bool((_AccessLimitations_int >> 2) & 0b1)
            _DenyWrite = bool((_AccessLimitations_int >> 1) & 0b1)
            _DenyRead = bool((_AccessLimitations_int >> 0) & 0b1)
            _Key = _recv_buffer.read(6)
            if len(_Key) != 6:
                raise PayloadTooShortError(6 - len(_Key))
            _Value_Entry = VhlCfg_File_MifareKeyList_Value_Entry(_DenyTransferToSecureMemory, _DenyChangeKey, _DenyWrite, _DenyRead, _Key)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_MifareKeyList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x95')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_MifareKeyList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x95')
        for _Value_Entry in Value:
            _DenyTransferToSecureMemory, _DenyChangeKey, _DenyWrite, _DenyRead, _Key = _Value_Entry
            _var_0000_int = 0
            _var_0000_int |= (int(_DenyTransferToSecureMemory) & 0b1) << 4
            _var_0000_int |= (int(_DenyChangeKey) & 0b1) << 2
            _var_0000_int |= (int(_DenyWrite) & 0b1) << 1
            _var_0000_int |= (int(_DenyRead) & 0b1) << 0
            _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
            if len(_Key) != 6:
                raise ValueError(_Key)
            _send_buffer.write(_Key)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_MifareKeyList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareTransferToSecureMemory(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x96
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x96')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifareTransferToSecureMemory_TransferKeys:
        _recv_buffer = BytesIO(frame)
        _TransferKeys = VhlCfg_File_MifareTransferToSecureMemory_TransferKeys_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _TransferKeys
    def get(self, File_ndx: int) -> VhlCfg_File_MifareTransferToSecureMemory_TransferKeys:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x96')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, TransferKeys: VhlCfg_File_MifareTransferToSecureMemory_TransferKeys) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x96')
        _send_buffer.write(VhlCfg_File_MifareTransferToSecureMemory_TransferKeys_Parser.as_value(TransferKeys).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, TransferKeys: VhlCfg_File_MifareTransferToSecureMemory_TransferKeys) -> None:
        frame = self.build_frame(File_ndx=File_ndx, TransferKeys=TransferKeys)
        self.execute(frame)
class VhlCfg_File_MifareMadAid(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x18
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x18')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _AID = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _AID
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x18')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, AID: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x18')
        _send_buffer.write(AID.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, AID: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, AID=AID)
        self.execute(frame)
class VhlCfg_File_MifarePlusAesKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x99
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x99')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_MifarePlusAesKeyList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _AccessLimitations_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _DenyChangeKey = bool((_AccessLimitations_int >> 2) & 0b1)
            _DenyWrite = bool((_AccessLimitations_int >> 1) & 0b1)
            _DenyRead = bool((_AccessLimitations_int >> 0) & 0b1)
            _Key = _recv_buffer.read(6)
            if len(_Key) != 6:
                raise PayloadTooShortError(6 - len(_Key))
            _Value_Entry = VhlCfg_File_MifarePlusAesKeyList_Value_Entry(_DenyChangeKey, _DenyWrite, _DenyRead, _Key)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_MifarePlusAesKeyList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x99')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_MifarePlusAesKeyList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x99')
        for _Value_Entry in Value:
            _DenyChangeKey, _DenyWrite, _DenyRead, _Key = _Value_Entry
            _var_0000_int = 0
            _var_0000_int |= (int(_DenyChangeKey) & 0b1) << 2
            _var_0000_int |= (int(_DenyWrite) & 0b1) << 1
            _var_0000_int |= (int(_DenyRead) & 0b1) << 0
            _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
            if len(_Key) != 6:
                raise ValueError(_Key)
            _send_buffer.write(_Key)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_MifarePlusAesKeyList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareSectorList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x17
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x17')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[int]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Sector = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value.append(_Sector)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[int]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x17')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[int]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x17')
        for _Value_Entry in Value:
            _Sector = _Value_Entry
            _send_buffer.write(_Sector.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[int]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareFormatAsMad2(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x14
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x14')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bool:
        _recv_buffer = BytesIO(frame)
        _FormatAsMad2 = bool(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _FormatAsMad2
    def get(self, File_ndx: int) -> bool:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x14')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, FormatAsMad2: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x14')
        _send_buffer.write(FormatAsMad2.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, FormatAsMad2: bool) -> None:
        frame = self.build_frame(File_ndx=File_ndx, FormatAsMad2=FormatAsMad2)
        self.execute(frame)
class VhlCfg_File_MifarePlusKeyAssignment(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x90
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x90')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_MifarePlusKeyAssignment_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _FlagByte_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _WriteWithKeyB = bool((_FlagByte_int >> 1) & 0b1)
            _ReadWithKeyB = bool((_FlagByte_int >> 0) & 0b1)
            _KeyAMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _KeyAIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _KeyBMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _KeyBIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _ACBytes = _recv_buffer.read(5)
            if len(_ACBytes) != 5:
                raise PayloadTooShortError(5 - len(_ACBytes))
            _Value_Entry = VhlCfg_File_MifarePlusKeyAssignment_Value_Entry(_WriteWithKeyB, _ReadWithKeyB, _KeyAMemoryType, _KeyAIdx, _KeyBMemoryType, _KeyBIdx, _ACBytes)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_MifarePlusKeyAssignment_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x90')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_MifarePlusKeyAssignment_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x90')
        for _Value_Entry in Value:
            _WriteWithKeyB, _ReadWithKeyB, _KeyAMemoryType, _KeyAIdx, _KeyBMemoryType, _KeyBIdx, _ACBytes = _Value_Entry
            _var_0000_int = 0
            _var_0000_int |= (int(_WriteWithKeyB) & 0b1) << 1
            _var_0000_int |= (int(_ReadWithKeyB) & 0b1) << 0
            _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(_KeyAMemoryType).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_KeyAIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(_KeyBMemoryType).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_KeyBIdx.to_bytes(length=1, byteorder='big'))
            if len(_ACBytes) != 5:
                raise ValueError(_ACBytes)
            _send_buffer.write(_ACBytes)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_MifarePlusKeyAssignment_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifarePlusCommunicationMode(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x1B
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifarePlusCommunicationMode_Result:
        _recv_buffer = BytesIO(frame)
        _SL3CommunicationMode_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _ReadNoMacOnCommand = bool((_SL3CommunicationMode_int >> 2) & 0b1)
        _ReadPlain = bool((_SL3CommunicationMode_int >> 1) & 0b1)
        _ReadNoMacOnResponse = bool((_SL3CommunicationMode_int >> 0) & 0b1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_MifarePlusCommunicationMode_Result(_ReadNoMacOnCommand, _ReadPlain, _ReadNoMacOnResponse)
    def get(self, File_ndx: int) -> VhlCfg_File_MifarePlusCommunicationMode_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ReadNoMacOnCommand: bool, ReadPlain: bool, ReadNoMacOnResponse: bool) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1b')
        _var_0000_int = 0
        _var_0000_int |= (int(ReadNoMacOnCommand) & 0b1) << 2
        _var_0000_int |= (int(ReadPlain) & 0b1) << 1
        _var_0000_int |= (int(ReadNoMacOnResponse) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ReadNoMacOnCommand: bool, ReadPlain: bool, ReadNoMacOnResponse: bool) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ReadNoMacOnCommand=ReadNoMacOnCommand, ReadPlain=ReadPlain, ReadNoMacOnResponse=ReadNoMacOnResponse)
        self.execute(frame)
class VhlCfg_File_MifarePlusProxyimityCheck(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x93
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x93')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifarePlusProxyimityCheck_Result:
        _recv_buffer = BytesIO(frame)
        _ProxCheckKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _ProxCheckKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_MifarePlusProxyimityCheck_Result(_ProxCheckKeyMemoryType, _ProxCheckKeyIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_MifarePlusProxyimityCheck_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x93')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, ProxCheckKeyMemoryType: MifarePlusKeyMemoryType, ProxCheckKeyIdx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x93')
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(ProxCheckKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(ProxCheckKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, ProxCheckKeyMemoryType: MifarePlusKeyMemoryType, ProxCheckKeyIdx: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, ProxCheckKeyMemoryType=ProxCheckKeyMemoryType, ProxCheckKeyIdx=ProxCheckKeyIdx)
        self.execute(frame)
class VhlCfg_File_MifareVcsParams(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x16
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x16')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifareVcsParams_Result:
        _recv_buffer = BytesIO(frame)
        _VcsOptions_int = safe_read_int_from_buffer(_recv_buffer, 1)
        _PrependUidBeforeMacDivData = bool((_VcsOptions_int >> 2) & 0b1)
        _RejectCardsWithoutValidIid = bool((_VcsOptions_int >> 1) & 0b1)
        _ForceAuthToCard = bool((_VcsOptions_int >> 0) & 0b1)
        _DfName_len = safe_read_int_from_buffer(_recv_buffer, 1)
        _DfName = _recv_buffer.read(_DfName_len)
        if len(_DfName) != _DfName_len:
            raise PayloadTooShortError(_DfName_len - len(_DfName))
        _MifareVcsEncKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _MifareVcsEncKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _MifareVcsMacKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _MifareVcsMacKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_MifareVcsParams_Result(_PrependUidBeforeMacDivData, _RejectCardsWithoutValidIid, _ForceAuthToCard, _DfName, _MifareVcsEncKeyMemoryType, _MifareVcsEncKeyIdx, _MifareVcsMacKeyMemoryType, _MifareVcsMacKeyIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_MifareVcsParams_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x16')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, PrependUidBeforeMacDivData: bool, RejectCardsWithoutValidIid: bool, ForceAuthToCard: bool, DfName: bytes, MifareVcsEncKeyMemoryType: MifarePlusKeyMemoryType, MifareVcsEncKeyIdx: int, MifareVcsMacKeyMemoryType: MifarePlusKeyMemoryType, MifareVcsMacKeyIdx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x16')
        _var_0000_int = 0
        _var_0000_int |= (int(PrependUidBeforeMacDivData) & 0b1) << 2
        _var_0000_int |= (int(RejectCardsWithoutValidIid) & 0b1) << 1
        _var_0000_int |= (int(ForceAuthToCard) & 0b1) << 0
        _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(int(len(DfName)).to_bytes(1, byteorder='big'))
        _send_buffer.write(DfName)
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(MifareVcsEncKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifareVcsEncKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(MifareVcsMacKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifareVcsMacKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, PrependUidBeforeMacDivData: bool, RejectCardsWithoutValidIid: bool, ForceAuthToCard: bool, DfName: bytes, MifareVcsEncKeyMemoryType: MifarePlusKeyMemoryType, MifareVcsEncKeyIdx: int, MifareVcsMacKeyMemoryType: MifarePlusKeyMemoryType, MifareVcsMacKeyIdx: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, PrependUidBeforeMacDivData=PrependUidBeforeMacDivData, RejectCardsWithoutValidIid=RejectCardsWithoutValidIid, ForceAuthToCard=ForceAuthToCard, DfName=DfName, MifareVcsEncKeyMemoryType=MifareVcsEncKeyMemoryType, MifareVcsEncKeyIdx=MifareVcsEncKeyIdx, MifareVcsMacKeyMemoryType=MifareVcsMacKeyMemoryType, MifareVcsMacKeyIdx=MifareVcsMacKeyIdx)
        self.execute(frame)
class VhlCfg_File_MifarePlusFormatOriginalKeyIdx(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x92
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x92')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_MifarePlusFormatOriginalKeyIdx_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _UseKeyB_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _FormatWithKeyB = bool((_UseKeyB_int >> 0) & 0b1)
            _OriginalKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _OriginalKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value_Entry = VhlCfg_File_MifarePlusFormatOriginalKeyIdx_Value_Entry(_FormatWithKeyB, _OriginalKeyMemoryType, _OriginalKeyIdx)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_MifarePlusFormatOriginalKeyIdx_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x92')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_MifarePlusFormatOriginalKeyIdx_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x92')
        for _Value_Entry in Value:
            _FormatWithKeyB, _OriginalKeyMemoryType, _OriginalKeyIdx = _Value_Entry
            _var_0000_int = 0
            _var_0000_int |= (int(_FormatWithKeyB) & 0b1) << 0
            _send_buffer.write(_var_0000_int.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(_OriginalKeyMemoryType).to_bytes(length=1, byteorder='big'))
            _send_buffer.write(_OriginalKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_MifarePlusFormatOriginalKeyIdx_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifarePlusKeyIdxOffset(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x1C
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1c')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _KeyIdxOffset = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _KeyIdxOffset
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1c')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, KeyIdxOffset: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1c')
        _send_buffer.write(KeyIdxOffset.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, KeyIdxOffset: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, KeyIdxOffset=KeyIdxOffset)
        self.execute(frame)
class VhlCfg_File_MifarePlusFormatLevelSwitchKeyIdx(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x1D
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1d')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifarePlusFormatLevelSwitchKeyIdx_Result:
        _recv_buffer = BytesIO(frame)
        _NewSecurityLevel = safe_read_int_from_buffer(_recv_buffer, 1)
        _LevelSwitchKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _LevelSwitchKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_MifarePlusFormatLevelSwitchKeyIdx_Result(_NewSecurityLevel, _LevelSwitchKeyMemoryType, _LevelSwitchKeyIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_MifarePlusFormatLevelSwitchKeyIdx_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1d')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, NewSecurityLevel: int, LevelSwitchKeyMemoryType: MifarePlusKeyMemoryType, LevelSwitchKeyIdx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1d')
        _send_buffer.write(NewSecurityLevel.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(LevelSwitchKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(LevelSwitchKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, NewSecurityLevel: int, LevelSwitchKeyMemoryType: MifarePlusKeyMemoryType, LevelSwitchKeyIdx: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, NewSecurityLevel=NewSecurityLevel, LevelSwitchKeyMemoryType=LevelSwitchKeyMemoryType, LevelSwitchKeyIdx=LevelSwitchKeyIdx)
        self.execute(frame)
class VhlCfg_File_MifarePlusFormatCardConfigurationKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x1E
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifarePlusFormatCardConfigurationKeyList_Result:
        _recv_buffer = BytesIO(frame)
        _OldCardConfigurationKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _OldCardConfigurationKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _NewCardConfigurationKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _NewCardConfigurationKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _SelectVirtualCardKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _SelectVirtualCardKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _VirtualCardEncryptionKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _VirtualCardEncryptionKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _VirtualCardMacKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _VirtualCardMacKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _FieldConfigurationBlockKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _FieldConfigurationBlockKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_MifarePlusFormatCardConfigurationKeyList_Result(_OldCardConfigurationKeyMemoryType, _OldCardConfigurationKeyIdx, _NewCardConfigurationKeyMemoryType, _NewCardConfigurationKeyIdx, _SelectVirtualCardKeyMemoryType, _SelectVirtualCardKeyIdx, _VirtualCardEncryptionKeyMemoryType, _VirtualCardEncryptionKeyIdx, _VirtualCardMacKeyMemoryType, _VirtualCardMacKeyIdx, _FieldConfigurationBlockKeyMemoryType, _FieldConfigurationBlockKeyIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_MifarePlusFormatCardConfigurationKeyList_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, OldCardConfigurationKeyMemoryType: MifarePlusKeyMemoryType, OldCardConfigurationKeyIdx: int, NewCardConfigurationKeyMemoryType: MifarePlusKeyMemoryType, NewCardConfigurationKeyIdx: int, SelectVirtualCardKeyMemoryType: MifarePlusKeyMemoryType, SelectVirtualCardKeyIdx: int, VirtualCardEncryptionKeyMemoryType: MifarePlusKeyMemoryType, VirtualCardEncryptionKeyIdx: int, VirtualCardMacKeyMemoryType: MifarePlusKeyMemoryType, VirtualCardMacKeyIdx: int, FieldConfigurationBlockKeyMemoryType: MifarePlusKeyMemoryType, FieldConfigurationBlockKeyIdx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1e')
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(OldCardConfigurationKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(OldCardConfigurationKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(NewCardConfigurationKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(NewCardConfigurationKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(SelectVirtualCardKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(SelectVirtualCardKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(VirtualCardEncryptionKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(VirtualCardEncryptionKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(VirtualCardMacKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(VirtualCardMacKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(FieldConfigurationBlockKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(FieldConfigurationBlockKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, OldCardConfigurationKeyMemoryType: MifarePlusKeyMemoryType, OldCardConfigurationKeyIdx: int, NewCardConfigurationKeyMemoryType: MifarePlusKeyMemoryType, NewCardConfigurationKeyIdx: int, SelectVirtualCardKeyMemoryType: MifarePlusKeyMemoryType, SelectVirtualCardKeyIdx: int, VirtualCardEncryptionKeyMemoryType: MifarePlusKeyMemoryType, VirtualCardEncryptionKeyIdx: int, VirtualCardMacKeyMemoryType: MifarePlusKeyMemoryType, VirtualCardMacKeyIdx: int, FieldConfigurationBlockKeyMemoryType: MifarePlusKeyMemoryType, FieldConfigurationBlockKeyIdx: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, OldCardConfigurationKeyMemoryType=OldCardConfigurationKeyMemoryType, OldCardConfigurationKeyIdx=OldCardConfigurationKeyIdx, NewCardConfigurationKeyMemoryType=NewCardConfigurationKeyMemoryType, NewCardConfigurationKeyIdx=NewCardConfigurationKeyIdx, SelectVirtualCardKeyMemoryType=SelectVirtualCardKeyMemoryType, SelectVirtualCardKeyIdx=SelectVirtualCardKeyIdx, VirtualCardEncryptionKeyMemoryType=VirtualCardEncryptionKeyMemoryType, VirtualCardEncryptionKeyIdx=VirtualCardEncryptionKeyIdx, VirtualCardMacKeyMemoryType=VirtualCardMacKeyMemoryType, VirtualCardMacKeyIdx=VirtualCardMacKeyIdx, FieldConfigurationBlockKeyMemoryType=FieldConfigurationBlockKeyMemoryType, FieldConfigurationBlockKeyIdx=FieldConfigurationBlockKeyIdx)
        self.execute(frame)
class VhlCfg_File_MifarePlusFormatCardMasterKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x15
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x15')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> VhlCfg_File_MifarePlusFormatCardMasterKeyList_Result:
        _recv_buffer = BytesIO(frame)
        _OldCardMasterKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _OldCardMasterKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _NewCardMasterKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _NewCardMasterKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _CardConfigurationKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _CardConfigurationKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _InstallationIDKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _InstallationIDKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _ATSKeyMemoryType = MifarePlusKeyMemoryType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _ATSKeyIdx = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return VhlCfg_File_MifarePlusFormatCardMasterKeyList_Result(_OldCardMasterKeyMemoryType, _OldCardMasterKeyIdx, _NewCardMasterKeyMemoryType, _NewCardMasterKeyIdx, _CardConfigurationKeyMemoryType, _CardConfigurationKeyIdx, _InstallationIDKeyMemoryType, _InstallationIDKeyIdx, _ATSKeyMemoryType, _ATSKeyIdx)
    def get(self, File_ndx: int) -> VhlCfg_File_MifarePlusFormatCardMasterKeyList_Result:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x15')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, OldCardMasterKeyMemoryType: MifarePlusKeyMemoryType, OldCardMasterKeyIdx: int, NewCardMasterKeyMemoryType: MifarePlusKeyMemoryType, NewCardMasterKeyIdx: int, CardConfigurationKeyMemoryType: MifarePlusKeyMemoryType, CardConfigurationKeyIdx: int, InstallationIDKeyMemoryType: MifarePlusKeyMemoryType, InstallationIDKeyIdx: int, ATSKeyMemoryType: MifarePlusKeyMemoryType, ATSKeyIdx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x15')
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(OldCardMasterKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(OldCardMasterKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(NewCardMasterKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(NewCardMasterKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(CardConfigurationKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(CardConfigurationKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(InstallationIDKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(InstallationIDKeyIdx.to_bytes(length=1, byteorder='big'))
        _send_buffer.write(MifarePlusKeyMemoryType_Parser.as_value(ATSKeyMemoryType).to_bytes(length=1, byteorder='big'))
        _send_buffer.write(ATSKeyIdx.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, OldCardMasterKeyMemoryType: MifarePlusKeyMemoryType, OldCardMasterKeyIdx: int, NewCardMasterKeyMemoryType: MifarePlusKeyMemoryType, NewCardMasterKeyIdx: int, CardConfigurationKeyMemoryType: MifarePlusKeyMemoryType, CardConfigurationKeyIdx: int, InstallationIDKeyMemoryType: MifarePlusKeyMemoryType, InstallationIDKeyIdx: int, ATSKeyMemoryType: MifarePlusKeyMemoryType, ATSKeyIdx: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, OldCardMasterKeyMemoryType=OldCardMasterKeyMemoryType, OldCardMasterKeyIdx=OldCardMasterKeyIdx, NewCardMasterKeyMemoryType=NewCardMasterKeyMemoryType, NewCardMasterKeyIdx=NewCardMasterKeyIdx, CardConfigurationKeyMemoryType=CardConfigurationKeyMemoryType, CardConfigurationKeyIdx=CardConfigurationKeyIdx, InstallationIDKeyMemoryType=InstallationIDKeyMemoryType, InstallationIDKeyIdx=InstallationIDKeyIdx, ATSKeyMemoryType=ATSKeyMemoryType, ATSKeyIdx=ATSKeyIdx)
        self.execute(frame)
class VhlCfg_File_MifareClassicFormatSectorTrailer(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x9E
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9e')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _SectorTrailer_bytes = _recv_buffer.read(-1)
        _SectorTrailer = _SectorTrailer_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _SectorTrailer
    def get(self, File_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9e')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, SectorTrailer: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9e')
        _send_buffer.write(SectorTrailer.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, SectorTrailer: str) -> None:
        frame = self.build_frame(File_ndx=File_ndx, SectorTrailer=SectorTrailer)
        self.execute(frame)
class VhlCfg_File_MifareClassicKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x94
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x94')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[str]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Key_bytes = _recv_buffer.read(6)
            _Key = _Key_bytes.decode('ascii')
            if len(_Key) != 6:
                raise PayloadTooShortError(6 - len(_Key))
            _Value.append(_Key)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[str]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x94')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[str]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x94')
        for _Value_Entry in Value:
            _Key = _Value_Entry
            if len(_Key) != 6:
                raise ValueError(_Key)
            _send_buffer.write(_Key.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[str]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareClassicBlockList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x11
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x11')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[int]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _BlockNumber = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value.append(_BlockNumber)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[int]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x11')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[int]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x11')
        for _Value_Entry in Value:
            _BlockNumber = _Value_Entry
            _send_buffer.write(_BlockNumber.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[int]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareClassicReadKeyAssignment(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x12
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x12')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[MifareClassicVhlKeyAssignment]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Key_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _Secure = bool((_Key_int >> 7) & 0b1)
            _KeyB = bool((_Key_int >> 6) & 0b1)
            _Key = MifareClassicVhlKeyAssignment(_Secure, _KeyB)
            _Value.append(_Key)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[MifareClassicVhlKeyAssignment]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x12')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[MifareClassicVhlKeyAssignment]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x12')
        for _Value_Entry in Value:
            _Key = _Value_Entry
            if isinstance(_Key, dict):
                _Key = MifareClassicVhlKeyAssignment(**_Key)
            _Key_int = 0
            _Key_int |= (int(_Key.Secure) & 0b1) << 7
            _Key_int |= (int(_Key.KeyB) & 0b1) << 6
            _send_buffer.write(_Key_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[MifareClassicVhlKeyAssignment]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareClassicWriteKeyAssignment(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x13
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x13')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[MifareClassicVhlKeyAssignment]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _Key_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _Secure = bool((_Key_int >> 7) & 0b1)
            _KeyB = bool((_Key_int >> 6) & 0b1)
            _Key = MifareClassicVhlKeyAssignment(_Secure, _KeyB)
            _Value.append(_Key)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[MifareClassicVhlKeyAssignment]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x13')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[MifareClassicVhlKeyAssignment]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x13')
        for _Value_Entry in Value:
            _Key = _Value_Entry
            if isinstance(_Key, dict):
                _Key = MifareClassicVhlKeyAssignment(**_Key)
            _Key_int = 0
            _Key_int |= (int(_Key.Secure) & 0b1) << 7
            _Key_int |= (int(_Key.KeyB) & 0b1) << 6
            _send_buffer.write(_Key_int.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[MifareClassicVhlKeyAssignment]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareClassicFormatOriginalKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x9D
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9d')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_MifareClassicFormatOriginalKeyList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _AuthenticationKeyAssignment = VhlCfg_File_MifareClassicFormatOriginalKeyList_AuthenticationKeyAssignment_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            _Key = _recv_buffer.read(6)
            if len(_Key) != 6:
                raise PayloadTooShortError(6 - len(_Key))
            _Value_Entry = VhlCfg_File_MifareClassicFormatOriginalKeyList_Value_Entry(_AuthenticationKeyAssignment, _Key)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_MifareClassicFormatOriginalKeyList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9d')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_MifareClassicFormatOriginalKeyList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9d')
        for _Value_Entry in Value:
            _AuthenticationKeyAssignment, _Key = _Value_Entry
            _send_buffer.write(VhlCfg_File_MifareClassicFormatOriginalKeyList_AuthenticationKeyAssignment_Parser.as_value(_AuthenticationKeyAssignment).to_bytes(length=1, byteorder='big'))
            if len(_Key) != 6:
                raise ValueError(_Key)
            _send_buffer.write(_Key)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_MifareClassicFormatOriginalKeyList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_MifareClassicMadKeyB(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x9A
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _MadKeyB_bytes = _recv_buffer.read(-1)
        _MadKeyB = _MadKeyB_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _MadKeyB
    def get(self, File_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, MadKeyB: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x9a')
        _send_buffer.write(MadKeyB.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, MadKeyB: str) -> None:
        frame = self.build_frame(File_ndx=File_ndx, MadKeyB=MadKeyB)
        self.execute(frame)
class VhlCfg_File_MifareClassicFormatSectorList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x1F
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1f')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[int]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _SectorNumber = safe_read_int_from_buffer(_recv_buffer, 1)
            _Value.append(_SectorNumber)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[int]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1f')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[int]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x1f')
        for _Value_Entry in Value:
            _SectorNumber = _Value_Entry
            _send_buffer.write(_SectorNumber.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[int]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_PivPublicKey(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x75
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'u')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bytes:
        _recv_buffer = BytesIO(frame)
        _PublicKey = _recv_buffer.read(65)
        if len(_PublicKey) != 65:
            raise PayloadTooShortError(65 - len(_PublicKey))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _PublicKey
    def get(self, File_ndx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'u')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, PublicKey: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'u')
        if len(PublicKey) != 65:
            raise ValueError(PublicKey)
        _send_buffer.write(PublicKey)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, PublicKey: bytes) -> None:
        frame = self.build_frame(File_ndx=File_ndx, PublicKey=PublicKey)
        self.execute(frame)
class VhlCfg_File_UltralightBlockList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x60
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'`')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[int]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _BlockDescription = safe_read_int_from_buffer(_recv_buffer, 2)
            _Value.append(_BlockDescription)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[int]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'`')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[int]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'`')
        for _Value_Entry in Value:
            _BlockDescription = _Value_Entry
            _send_buffer.write(_BlockDescription.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[int]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_UltralightKeyIdx(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x61
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'a')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 2)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'a')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'a')
        _send_buffer.write(Value.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_UltralightExtendedBlockList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x62
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'b')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_UltralightExtendedBlockList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _StartBlock = safe_read_int_from_buffer(_recv_buffer, 2)
            _NumberOfBlocks = safe_read_int_from_buffer(_recv_buffer, 2)
            _Value_Entry = VhlCfg_File_UltralightExtendedBlockList_Value_Entry(_StartBlock, _NumberOfBlocks)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_UltralightExtendedBlockList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'b')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_UltralightExtendedBlockList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'b')
        for _Value_Entry in Value:
            _StartBlock, _NumberOfBlocks = _Value_Entry
            _send_buffer.write(_StartBlock.to_bytes(length=2, byteorder='big'))
            _send_buffer.write(_NumberOfBlocks.to_bytes(length=2, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_UltralightExtendedBlockList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_UltralightKeyList(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0xA8
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xa8')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> List[VhlCfg_File_UltralightKeyList_Value_Entry]:
        _recv_buffer = BytesIO(frame)
        _Value = []  # type: ignore[var-annotated,unused-ignore]
        while not _recv_buffer.tell() >= len(_recv_buffer.getvalue()):
            _KeySettings_int = safe_read_int_from_buffer(_recv_buffer, 1)
            _IsVersion = bool((_KeySettings_int >> 7) & 0b1)
            _IsDivInfo = bool((_KeySettings_int >> 6) & 0b1)
            _IsDivInfoVhl = bool((_KeySettings_int >> 5) & 0b1)
            _DenyFormat = bool((_KeySettings_int >> 2) & 0b1)
            _DenyWrite = bool((_KeySettings_int >> 1) & 0b1)
            _DenyRead = bool((_KeySettings_int >> 0) & 0b1)
            _KeySettings = KeyAccessRights_KeySettings(_IsVersion, _IsDivInfo, _IsDivInfoVhl, _DenyFormat, _DenyWrite, _DenyRead)
            if _IsVersion:
                _Version = safe_read_int_from_buffer(_recv_buffer, 1)
            else:
                _Version = None
            if _IsDivInfo:
                _DiversificationMode = KeyAccessRights_DiversificationMode_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
                _DivIdx = safe_read_int_from_buffer(_recv_buffer, 1)
            else:
                _DiversificationMode = None
                _DivIdx = None
            _AccessRights = KeyAccessRights(_KeySettings, _Version, _DiversificationMode, _DivIdx)
            _Algorithm = CryptoAlgorithm_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
            if _Algorithm == "TripleDES" or _Algorithm == "AES":
                _TripleDesAesKey = _recv_buffer.read(16)
                if len(_TripleDesAesKey) != 16:
                    raise PayloadTooShortError(16 - len(_TripleDesAesKey))
            else:
                _TripleDesAesKey = None
            _Value_Entry = VhlCfg_File_UltralightKeyList_Value_Entry(_AccessRights, _Algorithm, _TripleDesAesKey)
            _Value.append(_Value_Entry)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> List[VhlCfg_File_UltralightKeyList_Value_Entry]:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xa8')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: List[VhlCfg_File_UltralightKeyList_Value_Entry]) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xa8')
        for _Value_Entry in Value:
            _AccessRights, _Algorithm, _TripleDesAesKey = _Value_Entry
            if isinstance(_AccessRights, dict):
                _AccessRights = KeyAccessRights(**_AccessRights)
            _KeySettings, _Version, _DiversificationMode, _DivIdx = _AccessRights
            if isinstance(_KeySettings, dict):
                _KeySettings = KeyAccessRights_KeySettings(**_KeySettings)
            _KeySettings_int = 0
            _KeySettings_int |= (int(_KeySettings.IsVersion) & 0b1) << 7
            _KeySettings_int |= (int(_KeySettings.IsDivInfo) & 0b1) << 6
            _KeySettings_int |= (int(_KeySettings.IsDivInfoVhl) & 0b1) << 5
            _KeySettings_int |= (int(_KeySettings.DenyFormat) & 0b1) << 2
            _KeySettings_int |= (int(_KeySettings.DenyWrite) & 0b1) << 1
            _KeySettings_int |= (int(_KeySettings.DenyRead) & 0b1) << 0
            _send_buffer.write(_KeySettings_int.to_bytes(length=1, byteorder='big'))
            if _KeySettings.IsVersion:
                if _Version is None:
                    raise TypeError("missing a required argument: '_Version'")
                _send_buffer.write(_Version.to_bytes(length=1, byteorder='big'))
            if _KeySettings.IsDivInfo:
                if _DiversificationMode is None:
                    raise TypeError("missing a required argument: '_DiversificationMode'")
                if _DivIdx is None:
                    raise TypeError("missing a required argument: '_DivIdx'")
                _send_buffer.write(KeyAccessRights_DiversificationMode_Parser.as_value(_DiversificationMode).to_bytes(length=1, byteorder='big'))
                _send_buffer.write(_DivIdx.to_bytes(length=1, byteorder='big'))
            _send_buffer.write(CryptoAlgorithm_Parser.as_value(_Algorithm).to_bytes(length=1, byteorder='big'))
            if _Algorithm == "TripleDES" or _Algorithm == "AES":
                if _TripleDesAesKey is None:
                    raise TypeError("missing a required argument: '_TripleDesAesKey'")
                if len(_TripleDesAesKey) != 16:
                    raise ValueError(_TripleDesAesKey)
                _send_buffer.write(_TripleDesAesKey)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: List[VhlCfg_File_UltralightKeyList_Value_Entry]) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_UltralightPassword(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0xA9
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xa9')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> bytes:
        _recv_buffer = BytesIO(frame)
        _Password_len = safe_read_int_from_buffer(_recv_buffer, 1)
        _Password = _recv_buffer.read(_Password_len)
        if len(_Password) != _Password_len:
            raise PayloadTooShortError(_Password_len - len(_Password))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Password
    def get(self, File_ndx: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xa9')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Password: bytes) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\xa9')
        _send_buffer.write(int(len(Password)).to_bytes(1, byteorder='big'))
        _send_buffer.write(Password)
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Password: bytes) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Password=Password)
        self.execute(frame)
class VhlCfg_File_Filename(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x00
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x00')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> str:
        _recv_buffer = BytesIO(frame)
        _Value_bytes = _recv_buffer.read(-1)
        _Value = _Value_bytes.decode('ascii')
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> str:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x00')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: str) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x00')
        _send_buffer.write(Value.encode("ascii"))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: str) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_CardType(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x01
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x01')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> CardType:
        _recv_buffer = BytesIO(frame)
        _Value = CardType_Parser.as_literal(safe_read_int_from_buffer(_recv_buffer, 1))
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> CardType:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x01')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: CardType = "Default") -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x01')
        _send_buffer.write(CardType_Parser.as_value(Value).to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: CardType = "Default") -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)
class VhlCfg_File_RetryCnt(ConfigValue):
    MasterKey = 0x03
    SubKey = 0x00
    ValueKey = 0x02
    def delete(self, File_ndx: int) -> None:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x02')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x02')
        self.execute(_send_buffer.getvalue())
    def parse_frame(self, frame: bytes) -> int:
        _recv_buffer = BytesIO(frame)
        _Value = safe_read_int_from_buffer(_recv_buffer, 1)
        _additional_data = _recv_buffer.read()
        if _additional_data:
            raise PayloadTooLongError(_additional_data)
        return _Value
    def get(self, File_ndx: int) -> int:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x00')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x02')
        response_frame = self.execute(_send_buffer.getvalue())
        return self.parse_frame(response_frame)
    def build_frame(self, File_ndx: int, Value: int) -> bytes:
        _send_buffer = BytesIO()
        _send_buffer.write(b'\x01')
        _send_buffer.write(b'\x03')
        if File_ndx < 0 or File_ndx >= 252:
            raise IndexError(File_ndx)
        _send_buffer.write((0 + File_ndx).to_bytes(1, byteorder='big'))
        _send_buffer.write(b'\x02')
        _send_buffer.write(Value.to_bytes(length=1, byteorder='big'))
        return _send_buffer.getvalue()
    def __call__(self, File_ndx: int, Value: int) -> None:
        frame = self.build_frame(File_ndx=File_ndx, Value=Value)
        self.execute(frame)