name: CI - Main branch

on:
  push:
    branches:
      - main

jobs:
  test-and-coverage:
    name: Run tests and collect coverage
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        arch: [x64, arm64]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup QEMU (for ARM on Ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install -e '.[tests]'

      - name: Run tests
        run: pytest --cov --cov-report=xml

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-publish:
    name: Build and publish package
    needs: test-and-coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: pip install -e '.[build]'

      - name: Set up Git user
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'actions@github.com'

      - name: Checkout main branch
        run: |
          git fetch origin main
          git checkout FETCH_HEAD

      - name: Increment version and create tag
        run: |
          # Fetch existing tags
          git fetch --tags

          # Get the latest tag
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Latest tag: $latest_tag"

          # Default to patch increment
          increment="patch"

          # Check for keywords
          if [[ $* == *"--major"* ]]; then
            increment="major"
          elif [[ $* == *"--minor"* ]]; then
            increment="minor"
          fi

          echo "Increment type: $increment"

          # Parse the latest tag into components (strip 'v')
          version=${latest_tag#v}
          IFS='.' read -ra ADDR <<< "$version"

          major=${ADDR[0]}
          minor=${ADDR[1]}
          patch=${ADDR[2]}

          # Increment based on the type
          if [[ $increment == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ $increment == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          # Construct the new version
          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"

          # Configure git and create the tag
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag -a "$new_version" -m "Version $new_version"
          git push origin "$new_version"

      - name: Build package
        run: |
          python -m build

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI }}
        run: |
          python -m twine upload dist/*
