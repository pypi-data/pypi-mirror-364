# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].294464167929664161872895623237303491582
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nUse the available tools to answer.\\n</instructions>\\n\\nProvide your output as a JSON containing the following fields:\\n<json_fields>\\n[\\"steps\\"]\\n</json_fields>\\n\\nHere are the properties for each field:\\n<json_field_properties>\\n{\\n  \\"steps\\": {\\n    \\"items\\": {\\n      \\"$ref\\": \\"#/$defs/Step\\"\\n    },\\n    \\"type\\": \\"array\\"\\n  },\\n  \\"$defs\\": {\\n    \\"Step\\": {\\n      \\"number\\": {\\n        \\"type\\": \\"integer\\"\\n      },\\n      \\"description\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  }\\n}\\n</json_field_properties>\\nStart your response with `{` and end it with `}`.\\nYour output will be passed to json.loads() to convert it to a Python object.\\nMake sure it only contains valid JSON."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.95e-05,
          'gen_ai.usage.input_tokens': 395,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8134457126082289908,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932258200000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6882544488212009249,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931820960000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-14T08:08:52-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'PHBLIwcqy',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3319886123357757801,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932266949000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 6882544488212009249,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932258892000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.79e-05,
          'gen_ai.usage.input_tokens': 479,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4863000480206210155,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932766140000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6882544488212009249,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932267379000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'Bet05ksDg',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5926007777930704677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932768360000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 6882544488212009249,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932766422000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.1e-05,
          'gen_ai.usage.input_tokens': 510,
          'gen_ai.usage.output_cost': 1.38e-05,
          'gen_ai.usage.output_tokens': 46,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3040007084773696253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494933408885000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6882544488212009249,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932768632000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6882544488212009249,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 294464167929664161872895623237303491582,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494933513486000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931817961000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].332564221719475577882108057083681340876
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.78e-05,
          'gen_ai.usage.input_tokens': 678,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7058395287292920526,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494929944987000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4822894852901253163,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494929228690000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-07-14T08:08:49-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None, meta=None)] structuredContent=None isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'htJg5wzN3',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13157400790727968936,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494929954290000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 15887967810509581888,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494929945885000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.049999999999999e-05,
          'gen_ai.usage.input_tokens': 805,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14708864655440777047,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494930374601000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4822894852901253163,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494929955677000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'StWWZwQR0',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13692174372564753391,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494930375463000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 16403323259278573128,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930374792000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": {"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.379999999999999e-05,
          'gen_ai.usage.input_tokens': 838,
          'gen_ai.usage.output_cost': 1.68e-05,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12716353873772305850,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931920237000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 4822894852901253163,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930375961000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.call.id': 'xTUq93X8u',
          'gen_ai.tool.description': '''
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
            Args:
                answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                    {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
            Returns:
                A dictionary with the following keys:
                    - success: True if the output is valid, False otherwise.
                    - result: The final output if success is True, otherwise an error message.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2096902760036830967,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931921226000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 15333287112604458690,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931920386000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1257978904123857743,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 332564221719475577882108057083681340876,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931921319000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494929225639000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].9002218614103301129880725683107320972
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.41e-05,
          'gen_ai.usage.input_tokens': 241,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10539588922905134047,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931447498000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930736265000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-14T08:08:51-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2756326673644379454,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931457718000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931451738000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.25e-05,
          'gen_ai.usage.input_tokens': 325,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5721240668628164531,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932393912000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931460004000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9081900601920099036,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932400857000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932397837000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Extracted the year from the current time.
            3. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.6e-05,
          'gen_ai.usage.input_tokens': 360,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3806864827295875436,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934724427000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932403941000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Extracted the year from the current time."
                },
                {
                  "number": 3,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.35e-05,
          'gen_ai.usage.input_tokens': 335,
          'gen_ai.usage.output_cost': 2.6099999999999997e-05,
          'gen_ai.usage.output_tokens': 87,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4577035281628853543,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494936360033000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934726293000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 271510782303709780,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 9002218614103301129880725683107320972,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494936360194000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930733116000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].211389727683138987992717353838941752407
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.03e-05,
          'gen_ai.usage.input_tokens': 203,
          'gen_ai.usage.output_cost': 1.1099999999999999e-05,
          'gen_ai.usage.output_tokens': 37,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9550086832136734483,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934623475000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934125859000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-14T08:08:54-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8829449506325049096,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934853823000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934624388000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.97e-05,
          'gen_ai.usage.input_tokens': 297,
          'gen_ai.usage.output_cost': 9.9e-06,
          'gen_ai.usage.output_tokens': 33,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8637576039515737230,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494935205567000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934854678000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3814433069978128781,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494935206949000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494935206089000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.2e-05,
          'gen_ai.usage.input_tokens': 320,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 96,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9103015691252978772,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494935879171000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494935207426000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year (2025) to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year (2025) to a file.\\"}]}"}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict[str, str | bool | dict[str, typing.Any] | list[typing.Any]]
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
                Args:
                    answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                        {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
                Returns:
                    A dictionary with the following keys:
                        - success: True if the output is valid, False otherwise.
                        - result: The final output if success is True, otherwise an error message.
            
                
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7995561545845967729,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494935880948000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494935879730000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Get current time in the America/New_York timezone.
            2. Write the year (2025) to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.4399999999999995e-05,
          'gen_ai.usage.input_tokens': 444,
          'gen_ai.usage.output_cost': 1.0199999999999999e-05,
          'gen_ai.usage.output_tokens': 34,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14755491724255999313,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494936369059000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494935881413000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Write the year (2025) to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 1.71e-05,
          'gen_ai.usage.input_tokens': 171,
          'gen_ai.usage.output_cost': 1.98e-05,
          'gen_ai.usage.output_tokens': 66,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5910039255939696255,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494937958559000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494936370994000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3577328038177543435,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 211389727683138987992717353838941752407,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494937958983000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934124244000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].87991041781888203782092672951835518514
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.", "role": "user"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.4699999999999996e-05,
          'gen_ai.usage.input_tokens': 447,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 651388875576976777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931193687000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17700730060412036331,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930378918000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-07-14T08:08:51-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null,"meta":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6351776643949174004,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494931198241000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 17700730060412036331,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931194788000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.52e-05,
          'gen_ai.usage.input_tokens': 552,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18376183439063437944,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932257976000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17700730060412036331,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494931200275000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11630815276125478583,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932261651000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 17700730060412036331,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932259699000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11630815276125478583,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494932261651000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 17700730060412036331,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932259699000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone"}, {"number": 2, "description": "Write the year to a file"}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.85e-05,
          'gen_ai.usage.input_tokens': 585,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15342955788549462933,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934620928000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17700730060412036331,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494932266760000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17700730060412036331,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87991041781888203782092672951835518514,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934621795000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494930376796000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].143161946655370643657199608812052806800
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "New task:\\nFind what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.89e-05,
          'gen_ai.usage.input_tokens': 689,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15915961411281050558,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494940258128000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 170306632561980253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494939685240000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-14T08:09:00-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10453329986869723905,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494940262305000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 170306632561980253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494940258961000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.25e-05,
          'gen_ai.usage.input_tokens': 825,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2533464849714488917,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494940819728000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 170306632561980253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494940262500000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18309790047677641474,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494940820757000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 170306632561980253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494940819929000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"{\\\\\\"steps\\\\\\": [{\\\\\\"number\\\\\\": 1, \\\\\\"description\\\\\\": \\\\\\"Get current time in the America/New_York timezone.\\\\\\"}, {\\\\\\"number\\\\\\": 2, \\\\\\"description\\\\\\": \\\\\\"Write the year 2025 to a file.\\\\\\"}]}\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 9.059999999999999e-05,
          'gen_ai.usage.input_tokens': 906,
          'gen_ai.usage.output_cost': 1.8299999999999998e-05,
          'gen_ai.usage.output_tokens': 61,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15244005617073207009,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494943043810000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 170306632561980253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494940821187000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year 2025 to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year 2025 to a file.\\"}]}"}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7058386778102745694,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494943046709000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 170306632561980253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494943044330000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 170306632561980253,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 143161946655370643657199608812052806800,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494943046969000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494939684896000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].100311340495081271650825954680837528327
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.4999999999999998e-05,
          'gen_ai.usage.input_tokens': 250,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9322570122257614575,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934187573000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2323635976958799854,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494933081800000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-14T08:08:54-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15653263782249568074,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934190510000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 2323635976958799854,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934187705000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.36e-05,
          'gen_ai.usage.input_tokens': 336,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15872743394545706680,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934622908000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2323635976958799854,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934190570000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8600208354028024003,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494934624399000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 2323635976958799854,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934623047000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Extracted the year from the current time.
            3. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.71e-05,
          'gen_ai.usage.input_tokens': 371,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14294063399985510937,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494937966947000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2323635976958799854,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494934624474000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Extracted the year from the current time."
                },
                {
                  "number": 3,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.48e-05,
          'gen_ai.usage.input_tokens': 548,
          'gen_ai.usage.output_cost': 2.6099999999999997e-05,
          'gen_ai.usage.output_tokens': 87,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8873039334632167816,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494942299046000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2323635976958799854,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494937968332000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2323635976958799854,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 100311340495081271650825954680837528327,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752494942299148000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752494933081699000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
