# Agent Information
agent:
  name: {{ project_name }}
  description: {{ description }}
  version: 0.3.0

# Enterprise plugins configuration with AgentUp Security Framework
plugins:
  - plugin_id: echo
    name: Echo
    description: Echo back user input with optional formatting
    tags: [echo, basic, simple]
    input_mode: text
    output_mode: text
    keywords: [echo, repeat, say]
    patterns: ['^echo ', '^repeat ', '^say ']
    routing_mode: direct
    priority: 50
    capabilities:
      - capability_id: echo_response
        required_scopes: ["api:read"]  # Basic read access for text processing
  - plugin_id: ai_assistant
    name: AI Assistant
    description: AI-powered assistant for various tasks
    tags: [ai, assistant, helper]
    # No keywords or patterns defined, only available via AI routing
    input_mode: text
    output_mode: text
    priority: 100
    middleware_override:
      - name: "rate_limited"
        params:
          requests_per_minute: 20  # Conservative rate for AI operations
      - name: "timed"
        params: {}
      # No caching for AI to ensure fresh responses


# Enterprise AgentUp Security Framework configuration
security:
{% if has_auth %}
  enabled: true   # Authentication enabled for full template
  type: {{ feature_config.get('auth', 'api_key') }}
  auth:
{% if feature_config.get('auth') == 'jwt' %}
    jwt:
      secret_key: "{{ generate_jwt_secret() }}"
      algorithm: "HS256"
      issuer: "{{ project_name_snake }}"
      audience: "a2a-clients"
{% elif feature_config.get('auth') == 'oauth2' %}
    oauth2:   # Enterprise-grade OAuth2 authentication
{% if feature_config.get('oauth2_provider') == 'github' %}
      # GitHub OAuth2 configuration (introspection-based)
      validation_strategy: "introspection"
      
      # GitHub token introspection endpoint
      introspection_endpoint: "https://api.github.com/applications/{CLIENT_ID}/token"
      
      # Your GitHub OAuth app credentials
      client_id: "${GITHUB_CLIENT_ID}"
      client_secret: "${GITHUB_CLIENT_SECRET}"
      
      # Required GitHub scopes
      required_scopes: ["user", "user:email", "read:org"]
{% elif feature_config.get('oauth2_provider') == 'google' %}
      # Google OAuth2 configuration (JWT-based)
      validation_strategy: "jwt"
      jwks_url: "https://www.googleapis.com/oauth2/v3/certs"
      jwt_algorithm: "RS256"
      jwt_issuer: "https://accounts.google.com"
      jwt_audience: "${GOOGLE_CLIENT_ID}"
      required_scopes: ["openid", "email", "profile"]
{% elif feature_config.get('oauth2_provider') == 'keycloak' %}
      # Keycloak OAuth2 configuration (JWT-based)
      validation_strategy: "jwt"
      jwks_url: "${KEYCLOAK_JWKS_URL:https://your-keycloak.com/auth/realms/your-realm/protocol/openid_connect/certs}"
      jwt_algorithm: "RS256"
      jwt_issuer: "${KEYCLOAK_ISSUER:https://your-keycloak.com/auth/realms/your-realm}"
      jwt_audience: "${KEYCLOAK_CLIENT_ID}"
      required_scopes: ["openid", "profile", "groups"]
{% else %}
      # Generic OAuth2 configuration (configurable)
      validation_strategy: "${OAUTH2_VALIDATION_STRATEGY:jwt}"
      
      # For JWT validation
      jwks_url: "${OAUTH2_JWKS_URL:https://your-provider.com/.well-known/jwks.json}"
      jwt_algorithm: "${OAUTH2_JWT_ALGORITHM:RS256}"
      jwt_issuer: "${OAUTH2_JWT_ISSUER:https://your-provider.com}"
      jwt_audience: "${OAUTH2_JWT_AUDIENCE:{{ project_name }}}"
      
      # For introspection validation (alternative)
      introspection_endpoint: "${OAUTH2_INTROSPECTION_ENDPOINT}"
      client_id: "${OAUTH2_CLIENT_ID}"
      client_secret: "${OAUTH2_CLIENT_SECRET}"
      
      # Required scopes
      required_scopes: ["openid", "profile"]
{% endif %}
{% else %}
    # Default to API key authentication for enterprise
    api_key:
      header_name: "X-API-Key"
      location: "header"
      keys:
        - key: "{{ generate_api_key() }}"
          scopes: ["api:read", "api:write", "system:read", "files:read"]
        - key: "{{ generate_api_key() }}"
          scopes: ["admin"]  # Admin key
{% endif %}
  # Example scope hierarchy with fine-grained permissions
  scope_hierarchy:
    # Administrative scopes
    admin: ["*"]
    system:admin: ["system:write", "system:read", "files:admin"]
    api:admin: ["api:write", "api:read", "network:admin"]

    # Functional scopes
    files:admin: ["files:write", "files:read", "files:sensitive"]
    files:write: ["files:read"]
    files:sensitive: ["files:read"]

    # API access scopes
    api:write: ["api:read"]
    api:external: ["api:read"]

    # AI-specific scopes
    ai:admin: ["ai:execute", "ai:train", "ai:model:admin"]
    ai:execute: ["ai:model:read"]
    ai:train: ["ai:execute", "ai:model:write"]

    # Enterprise scopes
    enterprise:admin: ["enterprise:write", "enterprise:read", "api:admin"]
    enterprise:write: ["enterprise:read", "api:write"]
    enterprise:read: ["api:read"]

    # Base scopes
    api:read: []
    files:read: []
    system:read: []
{% else %}
  enabled: false
{% endif %}

# AI configuration
{% if ai_provider_config %}
ai_provider:
    provider: {{ ai_provider_config.provider }}
{% if ai_provider_config.provider == 'openai' %}
    api_key: ${OPENAI_API_KEY}
    model: {{ ai_provider_config.model | default('gpt-4o-mini') }}
{% elif ai_provider_config.provider == 'anthropic' %}
    api_key: ${ANTHROPIC_API_KEY}
    model: {{ ai_provider_config.model | default('claude-3-5-sonnet-20241022') }}
{% elif ai_provider_config.provider == 'ollama' %}
    model: {{ ai_provider_config.model | default('llama3') }}
    base_url: ${OLLAMA_BASE_URL:http://localhost:11434/v1}
{% endif %}
    temperature: 0.7
    max_tokens: 1000
    top_p: 1.0
{% endif %}

# AI system prompt and configuration
{% if ai_provider_config %}
ai:
  enabled: true
  system_prompt: |
    You are an advanced AI agent created by AgentUp with access to comprehensive functions and enterprise capabilities.

    Your role:
    - Understand complex user requests and break them down into actionable steps
    - Use the appropriate functions and tools to complete  tasks
    - Handle structured data and various content types
    - Maintain conversation context and state across extended interactions
    - Integrate with external services and APIs when needed
    - Provide detailed, accurate responses with proper error handling

    Capabilities include:
    - Advanced document processing and analysis
    - Structured content understanding and analysis
    - Integration with external APIs and services
    - State management and conversation persistence
    - Enterprise-grade security and authentication
    - MCP (Model Context Protocol) integration

    When handling requests:
    1. Analyze the request and determine the best approach
    2. Use appropriate functions in logical sequence
    3. Handle errors gracefully and provide helpful feedback
    4. Synthesize results into comprehensive, actionable responses
    5. Maintain professional communication throughout

    Always prioritize accuracy, security, and user experience.
{% else %}
ai:
  enabled: false
{% endif %}

# Cache configuration
{% if has_middleware and 'cache' in feature_config.get('middleware', []) %}
cache:
{% if feature_config.get('cache_backend') == 'valkey' %}
  type: valkey
  config:
    url: '${VALKEY_CACHE_URL:valkey://localhost:6379}'
    db: 1                    # Use DB 1 for cache (DB 0 for state)
    max_connections: 20
    retry_on_timeout: true
    default_ttl: 300         # Default TTL for cache items in seconds (5 minutes)
{% else %}
  type: memory
  config:
    max_size: 1000           # Maximum number of items in memory cache
    default_ttl: 300         # Default TTL for cache items in seconds (5 minutes)
{% endif %}
{% endif %}


# Model Context Protocol configuration - Full enterprise setup
mcp:
  enabled: true
  client:
    enabled: true
    servers:
      - name: filesystem
        command: npx
        args: ['-y', '@modelcontextprotocol/server-filesystem', '/']
        env: {}
  # Expose as an MCP server for external access
  server:
    enabled: true
    name: {{ project_name }}-mcp-server
    expose_handlers: true
    expose_resources: [agent_status, agent_capabilities]
    port: 8001

# Routing configuration
routing:
{% if ai_provider_config %}
  default_mode: ai  # Use AI routing when AI provider is configured
{% else %}
  default_mode: ai  # Use AI routing for full template by default
{% endif %}
  fallback_capability: ai_assistant
  fallback_enabled: true

# Enterprise context-aware middleware configuration
middleware:
  - name: timed
    params: {}
{% if has_middleware and 'cache' in feature_config.get('middleware', []) %}
  - name: cached
    params:
      ttl: 600  # 10 minutes for enterprise
      cache_errors: false  # Don't cache errors in production
      # Enterprise context-aware caching
      plugin_specific_ttl:
        local: 300        # 5 minutes for local plugins
        network: 1800     # 30 minutes for network plugins (longer for enterprise)
        hybrid: 600       # 10 minutes for hybrid plugins
        ai_function: 120  # 2 minutes for AI functions (fresher responses)
        core: 3600        # 1 hour for core functions
{% endif %}
{% if has_middleware and 'rate_limit' in feature_config.get('middleware', []) %}
  - name: rate_limited
    params:
      requests_per_minute: 120  # Higher rate for enterprise
      burst_size: 30           # Allow burst traffic
      # Enterprise plugin-specific rate limiting
      plugin_specific_limits:
        local: 200             # High rate for local plugins
        network: 60            # Moderate rate for network plugins
        hybrid: 120            # Standard enterprise rate
        ai_function: 30        # Conservative rate for AI operations
        core: 500              # Very high rate for core functions
{% endif %}
{% if has_middleware and 'retry' in feature_config.get('middleware', []) %}
  - name: retryable
    params:
      max_retries: 5         # More retries for enterprise reliability
      backoff_factor: 2.0    # Exponential backoff
      max_delay: 60.0        # Max 60 seconds between retries
      # Enterprise plugin-specific retry configuration
      plugin_compatibility:
        local: false           # Local plugins rarely need retries
        network: true          # Network plugins benefit from retries
        hybrid: true           # Hybrid plugins may need retries
        ai_function: false     # AI functions need specialized retry logic
        core: false            # Core functions should be reliable
{% endif %}

# Push notifications configuration
{% if has_push_notifications %}
push_notifications:
  enabled: true
{% if feature_config.get('push_backend') == 'valkey' %}
  backend: valkey              # Options: memory, valkey
  key_prefix: "agentup:push:" # Valkey key prefix for push configs
  validate_urls: {{ feature_config.get('push_validate_urls', true) }}         # Enable webhook URL validation for security
  retry_attempts: 3           # Number of retry attempts for failed webhooks
  timeout: 30                 # Webhook request timeout in seconds
{% else %}
  backend: memory             # Simple memory backend
  validate_urls: {{ feature_config.get('push_validate_urls', false) }}
{% endif %}
{% else %}
push_notifications:
  enabled: false
{% endif %}


# State management configuration
{% if has_state_management %}
state_management:
  enabled: true
{% if state_backend == 'valkey' %}
  backend: valkey          # Distributed state backend for production
  ttl: 7200                # 2 hours expiration
  config:
    url: '${VALKEY_STATE_URL:valkey://localhost:6379}'
    key_prefix: "agentup:state:"
{% elif state_backend == 'memory' %}
  backend: memory          # In-memory state backend for development
  ttl: 3600                # 1 hour expiration
  config: {}
{% elif state_backend == 'file' %}
  backend: file            # File-based state backend for local development
  ttl: 7200                # 2 hours expiration
  config:
    storage_dir: "./conversation_states"
{% endif %}
  # Skill-specific state overrides
  skill_overrides:
    ai_assistant:
      enabled: true
      ttl: 86400           # 24 hours for AI conversations

{% endif %}

# Logging configuration - Full enterprise setup
logging:
  enabled: true
  level: "INFO"
  format: "json"  # JSON format for production logging and log aggregation

  # Console output settings
  console:
    enabled: true
    colors: false  # Disable colors in production

  # File logging enabled for production
  file:
    enabled: true
    path: "logs/{{ project_name_snake }}.log"
    rotation: "100 MB"
    retention: "30 days"
    compression: true

  # Advanced features for production
  correlation_id: true        # Essential for distributed tracing
  request_logging: true       # Important for monitoring and debugging

  # Module-specific log levels for fine-tuned control
  modules:
    uvicorn: "INFO"
    httpx: "WARNING"
    valkey: "WARNING"
    mcp: "INFO"
    plugins: "INFO"

  # Uvicorn integration for production
  uvicorn:
    access_log: true
    disable_default_handlers: true
    use_colors: false

# Development configuration
# WARNING: These features can be security risks and should NEVER be enabled in production
development:
{% if feature_config.get('development_enabled') %}
  enabled: true  # Development features enabled
  
  # Filesystem plugin loading
  # This allows loading arbitrary Python code from the filesystem
  filesystem_plugins:
    enabled: {{ feature_config.get('filesystem_plugins_enabled', false) }}
{% if feature_config.get('filesystem_plugins_enabled') %}
    allowed_directories:
      - {{ feature_config.get('plugin_directory', '~/.agentup/plugins') }}  # User-specified directory
{% else %}
    allowed_directories:
      - ~/.agentup/plugins  # Default directory
{% endif %}
    # Security enhancements:
    # require_signature: true  # Require cryptographic signatures
    # allowed_plugins: []      # Whitelist specific plugin files
    # watch_for_changes: true  # Auto-reload on file changes
    # log_level: DEBUG        # Extra logging for plugin loading
    
  # Other development features
  debug_mode: true          # Enable debug endpoints and verbose logging
  hot_reload: false         # Auto-reload on code changes
  profiling: false          # Enable performance profiling
  unsafe_features:
    allow_eval: false       # Allow eval() in plugins
    allow_exec: false       # Allow exec() in plugins
    allow_shell: false      # Allow shell command execution
{% else %}
  enabled: false  # Master switch for ALL development features
  
  # Filesystem plugin loading
  # This allows loading arbitrary Python code from the filesystem, NEVER enable in production
  filesystem_plugins:
    enabled: false  # Default: disabled for security
    allowed_directories:
      - ~/.agentup/plugins  # Directories to scan for plugins
    # Security enhancements:
    # require_signature: true  # Require cryptographic signatures
    # allowed_plugins: []      # Whitelist specific plugin files
    # watch_for_changes: true  # Auto-reload on file changes
    # log_level: DEBUG        # Extra logging for plugin loading
    
  # Other development features
  debug_mode: false         # Enable debug endpoints and verbose logging
  hot_reload: false         # Auto-reload on code changes
  profiling: false          # Enable performance profiling
  unsafe_features:
    allow_eval: false       # Allow eval() in plugins
    allow_exec: false       # Allow exec() in plugins
    allow_shell: false      # Allow shell command execution
{% endif %}