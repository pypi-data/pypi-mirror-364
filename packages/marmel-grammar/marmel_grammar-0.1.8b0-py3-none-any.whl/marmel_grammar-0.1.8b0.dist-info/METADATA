Metadata-Version: 2.4
Name: marmel-grammar
Version: 0.1.8b0
Summary: –°–∞–º–∞—è –º–æ—â–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä—É—Å—Å–∫–æ–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Python
Home-page: https://t.me/dev_marmel
Author: Dev-Marmel
Author-email: marmelgpt@gmail.com
Project-URL: Bug Reports, https://t.me/dev_marmel
Project-URL: Source, https://t.me/dev_marmel
Project-URL: Documentation, https://t.me/dev_marmel
Project-URL: Telegram, https://t.me/dev_marmel
Keywords: russian,morphology,declension,grammar,transliteration,names,verbs,linguistic
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Natural Language :: Russian
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Provides-Extra: telegram
Requires-Dist: python-telegram-bot>=20.0; extra == "telegram"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-python
Dynamic: summary

# üöÄ MARMEL-GRAMMAR v0.1.8b

**–°–∞–º–∞—è –º–æ—â–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä—É—Å—Å–∫–æ–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Python!**

[![Python](https://img.shields.io/badge/Python-3.11+-blue.svg)](https://python.org)
[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
[![Status](https://img.shields.io/badge/Status-TOP%201%20üèÜ-gold.svg)](https://replit.com)
[![Version](https://img.shields.io/badge/Version-0.1.8b-orange.svg)](https://pypi.org/project/marmel-grammar)

---

## üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã

**–°–æ–∑–¥–∞—Ç–µ–ª—å:** Dev-Marmel  
**Telegram:** [@dev_marmel](https://t.me/dev_marmel)  
**–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:** marmel_grammar  
**Email:** marmelgpt@gmail.com

> üí´ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ **Telegram** –∏ **PyPI** - –Ω–∏–∫–∞–∫–∏—Ö GitHub'–æ–≤!

---

## üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –ß–µ—Ä–µ–∑ pip:
```bash
pip install marmel-grammar
```

### –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
```python
from marmel_grammar import MarmelGrammar
grammar = MarmelGrammar()
print(grammar.asc("–ú–∞—Ä–∏—è", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å"))  # –ú–∞—Ä–∏—è —Ç–∞–Ω—Ü–µ–≤–∞–ª–∞
```

---

## ‚ö° –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏—à–∫–∏

- üéØ **–£–ú–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø `asc()`** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ —Ä–æ–¥—É!
- üåç **–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è** - –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞ –≤ —Ä—É—Å—Å–∫–∏–µ
- üìö **–°–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–º—ë–Ω** –ø–æ –≤—Å–µ–º 6 –ø–∞–¥–µ–∂–∞–º
- üîÑ **–°–ø—Ä—è–∂–µ–Ω–∏–µ –≥–ª–∞–≥–æ–ª–æ–≤** —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ–¥–∞
- ü§ñ **–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–¥–∞** –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
- ‚ú® **–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏—Ö–æ–≤** –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- üìä **–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞** - –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
- ‚ö° **–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- üé™ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤** - –¥–∞–∂–µ —Ç–µ—Ö, —á—Ç–æ –Ω–µ –≤ –±–∞–∑–µ!

---

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```python
from marmel_grammar import MarmelGrammar

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
grammar = MarmelGrammar()

# üéØ –ì–õ–ê–í–ù–ê–Ø –§–ò–®–ö–ê - —Ñ—É–Ω–∫—Ü–∏—è asc()!
print(grammar.asc("–ú–∞—Ä–∏—è", "–ø—É–∫–Ω—É—Ç—å"))     # –ú–∞—Ä–∏—è –ø—É–∫–Ω—É–ª–∞
print(grammar.asc("–ò–≤–∞–Ω", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å"))    # –ò–≤–∞–Ω —Ç–∞–Ω—Ü–µ–≤–∞–ª  
print(grammar.asc("–°–∞—à–∞", "—Ä–∞–±–æ—Ç–∞—Ç—å"))     # –°–∞—à–∞ —Ä–∞–±–æ—Ç–∞–ª (—É–Ω–∏—Å–µ–∫—Å‚Üí–º—É–∂)

# –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
print(grammar.transliterate_to_russian("Alexander"))  # –ê–ª–µ–∫—Å–∞–Ω–¥—Ä
print(grammar.transliterate_to_russian("Gazenvagen")) # –ì–∞–∑–µ–Ω–≤–∞–≥–µ–Ω

# –°–∫–ª–æ–Ω–µ–Ω–∏–µ
print(grammar.decline("–ò–≤–∞–Ω", "gen"))    # –ò–≤–∞–Ω–∞
print(grammar.decline("–ú–∞—Ä–∏—è", "dat"))   # –ú–∞—Ä–∏–∏
print(grammar.decline("–°–∞—à–∞", "acc"))    # –°–∞—à—É (—É–Ω–∏—Å–µ–∫—Å)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
print(grammar.make_sentence("–ú–∞—Ä–∏—è", "—á–∏—Ç–∞—Ç—å", "–∫–Ω–∏–≥–∞"))  
# –ú–∞—Ä–∏—è —á–∏—Ç–∞–ª–∞ –∫–Ω–∏–≥—É.
```

---

## üéØ –§—É–Ω–∫—Ü–∏—è `asc()` - –ì–õ–ê–í–ù–ê–Ø –§–ò–®–ö–ê!

–°–∞–º–∞—è –∫—Ä—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–ª–æ–Ω—è–µ—Ç –∏–º—è + –≥–ª–∞–≥–æ–ª –ø–æ —Ä–æ–¥—É:

```python
# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
grammar.asc("–ú–∞—Ä–∏—è", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å")      # –ú–∞—Ä–∏—è —Ç–∞–Ω—Ü–µ–≤–∞–ª–∞
grammar.asc("–ò–≤–∞–Ω", "–ø–µ—Ç—å")            # –ò–≤–∞–Ω –ø–µ–ª
grammar.asc("–°–∞—à–∞", "—Ä–∞–±–æ—Ç–∞—Ç—å")        # –°–∞—à–∞ —Ä–∞–±–æ—Ç–∞–ª
grammar.asc("–ê–Ω–Ω–∞", "–ø—É–∫–Ω—É—Ç—å")         # –ê–Ω–Ω–∞ –ø—É–∫–Ω—É–ª–∞

# –° –ª—é–±—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ!)
grammar.asc("–ï–ª–µ–Ω–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å")  # –ï–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞
grammar.asc("–ú–∞–∫—Å–∏–º", "–∫–æ–¥–∏—Ç—å")         # –ú–∞–∫—Å–∏–º –∫–æ–¥–∏–ª
grammar.asc("–î–∞—Ä—å—è", "—Å—Ç—Ä–∏–º–∏—Ç—å")        # –î–∞—Ä—å—è —Å—Ç—Ä–∏–º–∏–ª–∞

# –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
grammar.asc("–ú–∞—Ä–∏—è", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å", "present")  # –ú–∞—Ä–∏—è —Ç–∞–Ω—Ü—É–µ—Ç
grammar.asc("–ò–≤–∞–Ω", "—Ä–∞–±–æ—Ç–∞—Ç—å", "present")    # –ò–≤–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
```

### –°–∏–Ω—Ç–∞–∫—Å–∏—Å:
```python
asc(name: str, verb: str, tense: str = 'past') -> str
```

---

## üìñ –ö–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã

### üèóÔ∏è –ö–ª–∞—Å—Å `MarmelGrammar`

–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–æ–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–µ–π.

#### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
```python
grammar = MarmelGrammar()
```

#### –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞:
- `GENDER_EXCEPTIONS: Dict[str, str]` - –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–¥–∞
- `NAMES: Dict[str, Dict[str, str]]]` - —Å–ª–æ–≤–∞—Ä—å –∏–º—ë–Ω —Å –ø–∞–¥–µ–∂–∞–º–∏
- `VERBS: Dict[str, Dict[str, Dict[str, str]]]` - –≥–ª–∞–≥–æ–ª—ã —Å —Ñ–æ—Ä–º–∞–º–∏
- `TRANSLATIONS: Dict[str, str]` - —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
- `SPECIAL_NAMES: Dict[str, str]` - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
- `TRANSLIT_MAP: Dict[str, str]` - –∫–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏

---

### üìù –ú–µ—Ç–æ–¥—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏

#### `transliterate_to_russian(text: str) -> str`
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ —Ä—É—Å—Å–∫–∏–π.

```python
grammar.transliterate_to_russian("John")      # –î–∂–æ–Ω
grammar.transliterate_to_russian("Vladimir")  # –í–ª–∞–¥–∏–º–∏—Ä
grammar.transliterate_to_russian("Alexander") # –ê–ª–µ–∫—Å–∞–Ω–¥—Ä
```

#### `transliterate_to_english(text: str) -> str`
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.

```python
grammar.transliterate_to_english("–í–ª–∞–¥–∏–º–∏—Ä")  # Vladimir
```

---

### üìö –ú–µ—Ç–æ–¥—ã —Å–∫–ª–æ–Ω–µ–Ω–∏—è

#### `detect_gender(name: str) -> str`
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–¥ –∏–º–µ–Ω–∏: 'male', 'female', 'unisex'.

```python
grammar.detect_gender("–ò–≤–∞–Ω")     # male
grammar.detect_gender("–ú–∞—Ä–∏—è")    # female  
grammar.detect_gender("–°–∞—à–∞")     # unisex
```

#### `decline(name: str, case: str, gender: str = None) -> str`
–°–∫–ª–æ–Ω—è–µ—Ç –∏–º—è –ø–æ –ø–∞–¥–µ–∂–∞–º.

**–ü–∞–¥–µ–∂–∏:**
- `nom` - –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π (–∫—Ç–æ? —á—Ç–æ?)
- `gen` - —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (–∫–æ–≥–æ? —á–µ–≥–æ?)
- `dat` - –¥–∞—Ç–µ–ª—å–Ω—ã–π (–∫–æ–º—É? —á–µ–º—É?)
- `acc` - –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π (–∫–æ–≥–æ? —á—Ç–æ?)
- `ins` - —Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π (–∫–µ–º? —á–µ–º?)
- `prep` - –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π (–æ –∫–æ–º? –æ —á—ë–º?)

```python
grammar.decline("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "gen")   # –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞
grammar.decline("–ê–Ω–Ω–∞", "dat")        # –ê–Ω–Ω–µ
grammar.decline("–°–∞—à–∞", "ins")        # –°–∞—à–µ–π
```

#### `get_all_forms(name: str) -> Dict[str, str]`
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–∞–¥–µ–∂–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–º–µ–Ω–∏.

```python
forms = grammar.get_all_forms("–ò–≤–∞–Ω")
# {'nom': '–ò–≤–∞–Ω', 'gen': '–ò–≤–∞–Ω–∞', 'dat': '–ò–≤–∞–Ω—É', ...}
```

---

### üîÑ –ú–µ—Ç–æ–¥—ã —Å–ø—Ä—è–∂–µ–Ω–∏—è

#### `conjugate(verb: str, tense: str, subject: str) -> str`
–°–ø—Ä—è–≥–∞–µ—Ç –≥–ª–∞–≥–æ–ª –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º –∏ –ª–∏—Ü–∞–º.

**–í—Ä–µ–º–µ–Ω–∞:**
- `past` - –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
- `present` - –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è

```python
# –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
grammar.conjugate("–¥–µ–ª–∞—Ç—å", "past", "–û–Ω")    # –¥–µ–ª–∞–ª
grammar.conjugate("–¥–µ–ª–∞—Ç—å", "past", "–û–Ω–∞")   # –¥–µ–ª–∞–ª–∞
grammar.conjugate("–ø–∏—Å–∞—Ç—å", "past", "–°–∞—à–∞")  # –ø–∏—Å–∞–ª (—É–Ω–∏—Å–µ–∫—Å‚Üí–º—É–∂)

# –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
grammar.conjugate("—Ä–∞–±–æ—Ç–∞—Ç—å", "present", "—è")    # —Ä–∞–±–æ—Ç–∞—é
grammar.conjugate("—á–∏—Ç–∞—Ç—å", "present", "—Ç—ã")     # —á–∏—Ç–∞–µ—à—å
grammar.conjugate("–≥–æ–≤–æ—Ä–∏—Ç—å", "present", "–æ–Ω–∏")  # –≥–æ–≤–æ—Ä—è—Ç
```

#### `smart_conjugate(verb: str, subject: str, tense: str = 'past') -> str`
–£–º–Ω–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ!

```python
grammar.smart_conjugate("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å", "–ú–∞—Ä–∏—è")  # –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª–∞
grammar.smart_conjugate("–∫–æ–¥–∏—Ç—å", "–ò–≤–∞–Ω")            # –∫–æ–¥–∏–ª
```

---

### üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

#### `make_sentence(subj: str, verb: str, obj: str, tense: str = 'past') -> str`
–°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.

```python
grammar.make_sentence("–ú–∞—Ä–∏—è", "—á–∏—Ç–∞—Ç—å", "–∫–Ω–∏–≥–∞")    # –ú–∞—Ä–∏—è —á–∏—Ç–∞–ª–∞ –∫–Ω–∏–≥—É.
grammar.make_sentence("–ò–≤–∞–Ω", "–ø–æ–∫—É–ø–∞—Ç—å", "–º–∞—à–∏–Ω–∞")  # –ò–≤–∞–Ω –ø–æ–∫—É–ø–∞–ª –º–∞—à–∏–Ω—É.
```

#### `advanced_sentence(subj: str, verb: str, obj: str, adjective: str = None, tense: str = 'past') -> str`
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏.

```python
grammar.advanced_sentence("–ê–Ω–Ω–∞", "—á–∏—Ç–∞—Ç—å", "–∫–Ω–∏–≥–∞", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è")
# –ê–Ω–Ω–∞ —á–∏—Ç–∞–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–Ω–∏–≥—É.
```

---

### üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã

#### `create_poem(name: str, verb: str) -> str`
–°–æ–∑–¥–∞—ë—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞–¥–µ–∂–µ–π.

```python
print(grammar.create_poem("–ú–∞—Ä–∏—è", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å"))
```

```
–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ –ú–∞—Ä–∏—è:

–£ –ú–∞—Ä–∏–∏ –µ—Å—Ç—å –º–µ—á—Ç–∞,
–ö –ú–∞—Ä–∏–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ,
–í—Å–µ –≤–∏–¥—è—Ç –ú–∞—Ä–∏—é –≤ –¥–µ–ª–µ,
–° –ú–∞—Ä–∏–µ–π —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ,
–û –ú–∞—Ä–∏–∏ –≥–æ–≤–æ—Ä—è—Ç —Å –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ–º!

–ú–∞—Ä–∏—è —Ç–∞–Ω—Ü—É–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
```

#### `smart_verb_suggestion(name: str) -> List[str]`
–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ—Ä–∞–∑ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏.

```python
suggestions = grammar.smart_verb_suggestion("–ê–Ω–Ω–∞")
# ['–ê–Ω–Ω–∞ —Ç–∞–Ω—Ü–µ–≤–∞–ª–∞', '–ê–Ω–Ω–∞ –ø–µ–ª–∞', '–ê–Ω–Ω–∞ —á–∏—Ç–∞–ª–∞', ...]
```

---

### üîß –£—Ç–∏–ª–∏—Ç—ã

#### `batch_transliterate(names: List[str]) -> Dict[str, str]`
–ú–∞—Å—Å–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏–º—ë–Ω.

```python
names = ["Alexander", "Maria", "John"]
result = grammar.batch_transliterate(names)
# {'Alexander': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', 'Maria': '–ú–∞—Ä–∏—è', 'John': '–î–∂–æ–Ω'}
```

#### `name_statistics() -> Dict[str, int]`
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–º—ë–Ω.

```python
stats = grammar.name_statistics()
# {'male_names': 15, 'female_names': 15, 'unisex_names': 4, ...}
```

#### `add_name(name: str, gender: str, cases: Dict[str, str])`
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

```python
cases = {
    'nom': '–ú–∞–∫—Å–∏–º', 'gen': '–ú–∞–∫—Å–∏–º–∞', 'dat': '–ú–∞–∫—Å–∏–º—É',
    'acc': '–ú–∞–∫—Å–∏–º–∞', 'ins': '–ú–∞–∫—Å–∏–º–æ–º', 'prep': '–ú–∞–∫—Å–∏–º–µ'
}
grammar.add_name('–ú–∞–∫—Å–∏–º', 'male', cases)
```

---

## ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Telegram –±–æ—Ç–µ

### –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä:

```python
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from marmel_grammar import MarmelGrammar

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
grammar = MarmelGrammar()

async def start(update: Update, context):
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å MARMEL-GRAMMAR!\n"
        "–û—Ç–ø—Ä–∞–≤—å –∏–º—è –∏ –≥–ª–∞–≥–æ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–ú–∞—Ä–∏—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å"
    )

async def handle_message(update: Update, context):
    text = update.message.text.strip()

    try:
        parts = text.split()
        if len(parts) >= 2:
            name = parts[0]
            verb = parts[1]
            result = grammar.asc(name, verb)
            await update.message.reply_text(f"‚ú® {result}")
        else:
            await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –∏–º—è –∏ –≥–ª–∞–≥–æ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def transliterate_command(update: Update, context):
    if context.args:
        english_name = " ".join(context.args)
        russian_name = grammar.transliterate_to_russian(english_name)
        await update.message.reply_text(f"üåç {english_name} ‚Üí {russian_name}")
    else:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /translit Alexander")

def main():
    application = Application.builder().token("YOUR_BOT_TOKEN").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("translit", transliterate_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()
```

### –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç —Å –º–µ–Ω—é:

```python
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from marmel_grammar import MarmelGrammar

grammar = MarmelGrammar()

async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üéØ –°–∫–ª–æ–Ω–µ–Ω–∏–µ (asc)", callback_data='asc')],
        [InlineKeyboardButton("üåç –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è", callback_data='translit')],
        [InlineKeyboardButton("üìö –í—Å–µ –ø–∞–¥–µ–∂–∏", callback_data='decline')],
        [InlineKeyboardButton("üé® –°—Ç–∏—Ö", callback_data='poem')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üöÄ MARMEL-GRAMMAR BOT\n\n–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'asc':
        await query.edit_message_text(
            "üéØ –û—Ç–ø—Ä–∞–≤—å –∏–º—è –∏ –≥–ª–∞–≥–æ–ª:\n–ü—Ä–∏–º–µ—Ä: –ú–∞—Ä–∏—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å"
        )
        context.user_data['mode'] = 'asc'
    elif query.data == 'translit':
        await query.edit_message_text(
            "üåç –û—Ç–ø—Ä–∞–≤—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è:\n–ü—Ä–∏–º–µ—Ä: Alexander"
        )
        context.user_data['mode'] = 'translit'
    elif query.data == 'decline':
        await query.edit_message_text(
            "üìö –û—Ç–ø—Ä–∞–≤—å –∏–º—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è:\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω"
        )
        context.user_data['mode'] = 'decline'
    elif query.data == 'poem':
        await query.edit_message_text(
            "üé® –û—Ç–ø—Ä–∞–≤—å –∏–º—è –∏ –≥–ª–∞–≥–æ–ª –¥–ª—è —Å—Ç–∏—Ö–∞:\n–ü—Ä–∏–º–µ—Ä: –ú–∞—Ä–∏—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å"
        )
        context.user_data['mode'] = 'poem'

async def handle_text(update: Update, context):
    mode = context.user_data.get('mode', 'asc')
    text = update.message.text.strip()

    try:
        if mode == 'asc':
            parts = text.split()
            if len(parts) >= 2:
                result = grammar.asc(parts[0], parts[1])
                await update.message.reply_text(f"‚ú® {result}")
            else:
                await update.message.reply_text("–ù—É–∂–Ω–æ –∏–º—è –∏ –≥–ª–∞–≥–æ–ª!")

        elif mode == 'translit':
            result = grammar.transliterate_to_russian(text)
            await update.message.reply_text(f"üåç {text} ‚Üí {result}")

        elif mode == 'decline':
            forms = grammar.get_all_forms(text)
            result = "\n".join([f"{case}: {form}" for case, form in forms.items()])
            await update.message.reply_text(f"üìö –°–∫–ª–æ–Ω–µ–Ω–∏–µ {text}:\n\n{result}")

        elif mode == 'poem':
            parts = text.split()
            if len(parts) >= 2:
                poem = grammar.create_poem(parts[0], parts[1])
                await update.message.reply_text(f"üé®\n{poem}")
            else:
                await update.message.reply_text("–ù—É–∂–Ω–æ –∏–º—è –∏ –≥–ª–∞–≥–æ–ª!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    application = Application.builder().token("YOUR_BOT_TOKEN").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    application.run_polling()

if __name__ == '__main__':
    main()
```

---

## üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

### –ò–º–µ–Ω–∞ –≤ –±–∞–∑–µ:

**–ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ (15+):**
- –ò–≤–∞–Ω, –ü—ë—Ç—Ä, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –ú–∏—Ö–∞–∏–ª, –°–µ—Ä–≥–µ–π, –î–º–∏—Ç—Ä–∏–π, –ê–Ω–¥—Ä–µ–π
- –ú–∞–∫—Å–∏–º, –í–ª–∞–¥–∏–º–∏—Ä, –ù–∏–∫–æ–ª–∞–π, –ê–ª–µ–∫—Å–µ–π, –ê—Ä—Ç—ë–º, –î–µ–Ω–∏—Å, –ê–Ω—Ç–æ–Ω, –í–∏–∫—Ç–æ—Ä, –ï–≤–≥–µ–Ω–∏–π

**–ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ (15+):**
- –ú–∞—Ä–∏—è, –ê–Ω–Ω–∞, –ï–ª–µ–Ω–∞, –û–ª—å–≥–∞, –¢–∞—Ç—å—è–Ω–∞, –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞, –°–≤–µ—Ç–ª–∞–Ω–∞
- –ò—Ä–∏–Ω–∞, –ù–∞—Ç–∞–ª—å—è, –Æ–ª–∏—è, –í–∏–∫—Ç–æ—Ä–∏—è, –ê–Ω–∞—Å—Ç–∞—Å–∏—è, –î–∞—Ä—å—è, –ü–æ–ª–∏–Ω–∞, –ê–ª–∏–Ω–∞

**–£–Ω–∏—Å–µ–∫—Å –∏–º–µ–Ω–∞ (4+):**
- –°–∞—à–∞, –ñ–µ–Ω—è, –í–∞–ª—è, –®—É—Ä–∞

### –ì–ª–∞–≥–æ–ª—ã –≤ –±–∞–∑–µ (20+):

- **–ë–∞–∑–æ–≤—ã–µ:** –¥–µ–ª–∞—Ç—å, –ø–∏—Å–∞—Ç—å, —á–∏—Ç–∞—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞—Ç—å, –∏–∑—É—á–∞—Ç—å
- **–î–≤–∏–∂–µ–Ω–∏–µ:** —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, –ø–µ—Ç—å, –±–µ–≥–∞—Ç—å, –ø–ª–∞–≤–∞—Ç—å
- **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** —Å–ø–∞—Ç—å, —Å–º–µ—è—Ç—å—Å—è, –ø–ª–∞–∫–∞—Ç—å, –¥—É–º–∞—Ç—å, –º–µ—á—Ç–∞—Ç—å
- **–î–µ–π—Å—Ç–≤–∏—è:** –∫—É—à–∞—Ç—å, –∏–≥—Ä–∞—Ç—å, –ª—é–±–∏—Ç—å, —É—á–∏—Ç—å, –ø–æ–∫—É–ø–∞—Ç—å, –≥–æ—Ç–æ–≤–∏—Ç—å
- **–û—Å–æ–±—ã–µ:** –ø—É–∫–Ω—É—Ç—å üòÑ

---

## üî• –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã:

```python
from marmel_grammar import MarmelGrammar
grammar = MarmelGrammar()

# –û—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
print(grammar.asc("–ú–∞—Ä–∏—è", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å"))    # –ú–∞—Ä–∏—è —Ç–∞–Ω—Ü–µ–≤–∞–ª–∞
print(grammar.asc("–ò–≤–∞–Ω", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å")) # –ò–≤–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª
print(grammar.asc("–°–∞—à–∞", "–ø–µ—Ç—å", "present"))  # –°–∞—à–∞ –ø–æ—ë—Ç

# –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
english_names = ["Alexander", "Maria", "John", "Gazenvagen"]
for name in english_names:
    russian = grammar.transliterate_to_russian(name)
    print(f"{name} ‚Üí {russian}")

# –°–∫–ª–æ–Ω–µ–Ω–∏–µ
name = "–ê–Ω–Ω–∞"
for case in ['nom', 'gen', 'dat', 'acc', 'ins', 'prep']:
    form = grammar.decline(name, case)
    print(f"{case}: {form}")
```

### –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:

```python
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
grammar.add_name("–ë–æ–≥–¥–∞–Ω", "male", {
    'nom': '–ë–æ–≥–¥–∞–Ω', 'gen': '–ë–æ–≥–¥–∞–Ω–∞', 'dat': '–ë–æ–≥–¥–∞–Ω—É',
    'acc': '–ë–æ–≥–¥–∞–Ω–∞', 'ins': '–ë–æ–≥–¥–∞–Ω–æ–º', 'prep': '–ë–æ–≥–¥–∞–Ω–µ'
})

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = grammar.name_statistics()
print(f"–í—Å–µ–≥–æ –∏–º—ë–Ω: {stats['total_names']}")
print(f"–ì–ª–∞–≥–æ–ª–æ–≤: {stats['verbs']}")

# –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
context = grammar.analyze_context("–ö–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å —Å–æ–±–∞–∫–æ–π")
print(context)  # {'animal': 1.7, 'person': 0, 'object': 0}
```

---

## üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã

### –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ—Ä–∞–∑:

```python
from marmel_grammar import MarmelGrammar
import random

grammar = MarmelGrammar()

names = ["–ú–∞—Ä–∏—è", "–ò–≤–∞–Ω", "–°–∞—à–∞", "–ê–Ω–Ω–∞", "–ú–∞–∫—Å–∏–º"]
verbs = ["—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å", "–ø–µ—Ç—å", "—Ä–∞–±–æ—Ç–∞—Ç—å", "–∏–≥—Ä–∞—Ç—å", "—Å–º–µ—è—Ç—å—Å—è", "–º–µ—á—Ç–∞—Ç—å"]

print("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã:")
for _ in range(5):
    name = random.choice(names)
    verb = random.choice(verbs)
    phrase = grammar.asc(name, verb)
    print(f"‚Ä¢ {phrase}")
```

### –°–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –ø–∞–¥–µ–∂–∞–º:

```python
def show_all_cases(name):
    print(f"\nüìö –°–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ '{name}':")
    print("-" * 30)

    cases_names = {
        'nom': '–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π', 'gen': '–†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π', 
        'dat': '–î–∞—Ç–µ–ª—å–Ω—ã–π', 'acc': '–í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π',
        'ins': '–¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', 'prep': '–ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π'
    }

    for case, case_name in cases_names.items():
        form = grammar.decline(name, case)
        print(f"{case_name:12} ({case}): {form}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
show_all_cases("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä")
show_all_cases("–ú–∞—Ä–∏—è")
show_all_cases("–°–∞—à–∞")
```

---

## üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

MARMEL-GRAMMAR –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:

- **LRU Cache** –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫** –≤ —Å–ª–æ–≤–∞—Ä—è—Ö
- **–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏**
- **–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π** –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫

```python
import time
from marmel_grammar import MarmelGrammar

grammar = MarmelGrammar()

# –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
start_time = time.time()
for i in range(1000):
    grammar.asc("–ú–∞—Ä–∏—è", "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å")
    grammar.decline("–ò–≤–∞–Ω", "gen")
    grammar.transliterate_to_russian("Alexander")

end_time = time.time()
print(f"1000 –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {end_time - start_time:.4f} —Å–µ–∫—É–Ω–¥")
```

---

## üêõ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö

–ù–∞—à–ª–∏ –±–∞–≥? –ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è? –ü–∏—à–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é:

**Telegram:** [@dev_marmel](https://t.me/dev_marmel)  
**Email:** marmelgpt@gmail.com

---

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –≤ –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö!

---

## üîÆ –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è

- üåü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
- üî§ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏–º—ë–Ω –∏ –≥–ª–∞–≥–æ–ª–æ–≤  
- üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
- ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏—Ö–æ–≤
- üì± GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

---

## üíé –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

**MARMEL-GRAMMAR** - —ç—Ç–æ —Å–∞–º–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–æ–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–µ–π! 

üéØ **–ì–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞** - —Ñ—É–Ω–∫—Ü–∏—è `asc()` –∫–æ—Ç–æ—Ä–∞—è —É–º–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç –ª—é–±—ã–µ –∏–º–µ–Ω–∞ —Å –ª—é–±—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! üöÄ

---

**–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è by Dev-Marmel**  
**Telegram:** [@dev_marmel](https://t.me/dev_marmel)
