import re
import subprocess
import tempfile
from pathlib import Path
from textwrap import dedent


def run_minify_cli(
    input_file: Path, output_file: Path, *flags: str
) -> subprocess.CompletedProcess[str]:
    """
    Helper to run the minify CLI with given flags.
    """
    cmd = ["uv", "run", "minify-tw-html", str(input_file), str(output_file)] + list(flags)
    return subprocess.run(cmd, capture_output=True, text=True, cwd=Path(__file__).parent.parent)


def test_cli_comprehensive():
    """Comprehensive test covering all CLI scenarios and edge cases."""

    # Test case 1: Basic HTML minification (no Tailwind)
    basic_html = dedent("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Test HTML</title>
            <style>
                body { margin: 0; padding: 20px; }
                .test-class { background-color: #f0f0f0; padding: 10px; }
            </style>
        </head>
        <body>
            <!-- This comment should be removed -->
            <div class="test-class">
                <h1>Test Header</h1>
                <p>This is a test paragraph.</p>
                <button onclick="testFunction()">Click Me</button>
            </div>
            <script>
                function testFunction() {
                    console.log('Hello from test function!');
                    return 'Some return value';
                }
            </script>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "basic.html"
        output_file = Path(tmpdir) / "basic_output.html"

        input_file.write_text(basic_html)

        result = run_minify_cli(input_file, output_file, "--verbose")

        assert result.returncode == 0
        assert output_file.exists()
        assert output_file.stat().st_size > 0
        assert "No Tailwind v4 CDN script found" in result.stderr
        assert re.search(r"HTML minified: \d+ bytes → \d+ bytes", result.stderr)

        output_content = output_file.read_text()
        assert "<!-- This comment should be removed -->" not in output_content
        assert "margin:0" in output_content  # CSS should be minified
        assert ".test-class" in output_content  # Custom CSS class preserved

        # Test: Verify version comment is present
        assert "<!-- generated by minify-tw-html" in output_content

    # Test case 2: Tailwind CDN script detection and replacement
    tailwind_cdn_html = dedent("""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Tailwind CDN Test</title>
            <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
        </head>
        <body>
            <div class="bg-blue-500 text-white p-4 rounded-lg">
                <h1 class="text-2xl font-bold">Hello Tailwind!</h1>
                <p class="text-sm opacity-80">Testing Tailwind compilation.</p>
            </div>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "tailwind_cdn.html"
        output_file = Path(tmpdir) / "tailwind_cdn_output.html"

        input_file.write_text(tailwind_cdn_html)

        result = run_minify_cli(input_file, output_file, "--verbose")

        assert result.returncode == 0
        assert output_file.exists()
        assert output_file.stat().st_size > 0
        assert "Tailwind v4 CDN script detected" in result.stderr
        assert re.search(
            r"Tailwind CSS compiled, HTML minified: \d+ bytes → \d+ bytes", result.stderr
        )

        output_content = output_file.read_text()
        assert "@tailwindcss/browser" not in output_content
        assert "<style>" in output_content
        assert "tailwindcss" in output_content.lower()

        # Verify specific Tailwind classes are compiled and present
        assert "bg-blue-500" in output_content  # Original class should still be in HTML
        print(
            f"CDN CSS sample: {output_content[output_content.find('<style>') : output_content.find('<style>') + 200]}"
        )

        # Verify that actual CSS rules are generated (not just the classes in HTML)
        css_content = output_content[
            output_content.find("<style>") : output_content.find("</style>")
        ]
        assert "tailwindcss" in css_content  # Should contain Tailwind header
        assert "box-sizing:border-box" in css_content  # Should contain reset styles

    # Test case 3: --tailwind flag forces compilation without CDN
    tailwind_forced_html = dedent("""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Forced Tailwind Test</title>
        </head>
        <body>
            <div class="bg-green-500 text-white p-4 rounded-lg">
                <h1 class="text-2xl font-bold">Forced Tailwind!</h1>
                <p class="text-sm opacity-90">Testing forced compilation.</p>
            </div>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "forced.html"
        output_file = Path(tmpdir) / "forced_output.html"

        input_file.write_text(tailwind_forced_html)

        result = run_minify_cli(input_file, output_file, "--tailwind", "--verbose")

        assert result.returncode == 0
        assert output_file.exists()
        assert output_file.stat().st_size > 0
        assert "Forcing Tailwind CSS compilation (--tailwind flag used)" in result.stderr
        assert re.search(
            r"Tailwind CSS compiled, HTML minified: \d+ bytes → \d+ bytes", result.stderr
        )

        output_content = output_file.read_text()
        assert "<head><style>" in output_content
        assert "tailwindcss" in output_content.lower()

        # Verify forced compilation includes expected classes
        assert "bg-green-500" in output_content
        print(
            f"Forced CSS sample: {output_content[output_content.find('<style>') : output_content.find('<style>') + 200]}"
        )

        # Verify CSS content is actually generated
        css_content = output_content[
            output_content.find("<style>") : output_content.find("</style>")
        ]
        assert "tailwindcss" in css_content  # Should contain Tailwind header
        assert "box-sizing:border-box" in css_content  # Should contain reset styles

    # Test case 4: --no_minify preserves formatting
    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "no_minify.html"
        output_file = Path(tmpdir) / "no_minify_output.html"

        input_file.write_text(tailwind_cdn_html)

        result = run_minify_cli(input_file, output_file, "--no_minify", "--verbose")

        assert result.returncode == 0
        assert output_file.exists()
        assert output_file.stat().st_size > 0
        assert "Tailwind CSS compiled:" in result.stderr
        assert "no minification" in result.stderr
        assert re.search(r"Tailwind CSS compiled: \d+ bytes → \d+ bytes", result.stderr)

        output_content = output_file.read_text()
        assert "\n" in output_content  # Formatting preserved

    # Test case 5: --tailwind + --no_minify combination
    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "forced_no_minify.html"
        output_file = Path(tmpdir) / "forced_no_minify_output.html"

        input_file.write_text(tailwind_forced_html)

        result = run_minify_cli(input_file, output_file, "--tailwind", "--no_minify", "--verbose")

        assert result.returncode == 0
        assert "Forcing Tailwind CSS compilation (--tailwind flag used)" in result.stderr
        assert "no minification" in result.stderr

        output_content = output_file.read_text()
        assert "\n" in output_content
        assert "<head><style>" in output_content

    # Test case 6: HTML without <head> tag (edge case)
    no_head_html = dedent("""
        <!DOCTYPE html>
        <html lang="en">
        <body>
            <div class="bg-indigo-500 text-white p-4">
                <h1 class="text-2xl font-bold">No Head Tag</h1>
                <p class="text-sm">Testing CSS injection.</p>
            </div>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "no_head.html"
        output_file = Path(tmpdir) / "no_head_output.html"

        input_file.write_text(no_head_html)

        result = run_minify_cli(input_file, output_file, "--tailwind", "--verbose")

        assert result.returncode == 0
        assert output_file.stat().st_size > 10
        assert "Forcing Tailwind CSS compilation" in result.stderr

        output_content = output_file.read_text()
        assert "<head><style>" in output_content

    # Test case 7: Older Tailwind versions should be ignored
    old_tailwind_html = dedent("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Old Tailwind</title>
            <script src="https://cdn.tailwindcss.com"></script>
        </head>
        <body>
            <div class="bg-blue-500 p-4">Old Tailwind v3</div>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "old_tailwind.html"
        output_file = Path(tmpdir) / "old_tailwind_output.html"

        input_file.write_text(old_tailwind_html)

        result = run_minify_cli(input_file, output_file, "--verbose")

        assert result.returncode == 0
        assert output_file.stat().st_size > 0
        assert "No Tailwind v4 CDN script found" in result.stderr
        assert "Tailwind CSS compiled" not in result.stderr

        output_content = output_file.read_text()
        assert "cdn.tailwindcss.com" in output_content  # Old CDN preserved

    # Test case 8: --tailwind works even with existing CDN (should use CDN detection)
    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "both_cdn_and_flag.html"
        output_file = Path(tmpdir) / "both_cdn_and_flag_output.html"

        input_file.write_text(tailwind_cdn_html)

        result = run_minify_cli(input_file, output_file, "--tailwind", "--verbose")

        assert result.returncode == 0
        assert "Tailwind v4 CDN script detected" in result.stderr
        assert "Forcing Tailwind CSS compilation" not in result.stderr

        output_content = output_file.read_text()
        assert "@tailwindcss/browser" not in output_content
        assert "<style>" in output_content

    # Test case 9: Verify specific Tailwind utility classes are properly compiled
    utility_test_html = dedent("""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Utility Classes Test</title>
        </head>
        <body>
            <div class="flex items-center justify-center min-h-screen bg-gradient-to-r from-blue-500 to-purple-600">
                <div class="max-w-md mx-auto bg-white rounded-xl shadow-lg p-6">
                    <h1 class="text-3xl font-bold text-gray-900 mb-4">Utility Test</h1>
                    <p class="text-gray-600 leading-relaxed">Testing various utility classes</p>
                    <button class="mt-4 px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-semibold rounded">
                        Click me
                    </button>
                </div>
            </div>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "utilities.html"
        output_file = Path(tmpdir) / "utilities_output.html"

        input_file.write_text(utility_test_html)

        result = run_minify_cli(input_file, output_file, "--tailwind", "--verbose")

        assert result.returncode == 0
        assert output_file.exists()
        assert output_file.stat().st_size > 10
        assert "Forcing Tailwind CSS compilation" in result.stderr

        output_content = output_file.read_text()
        assert "<head><style>" in output_content

        # Verify the original classes remain in HTML
        assert "flex items-center" in output_content
        assert "bg-gradient-to-r from-blue-500 to-purple-600" in output_content
        assert "hover:bg-blue-700" in output_content

        print(
            f"Utilities CSS sample: {output_content[output_content.find('<style>') : output_content.find('<style>') + 300]}"
        )
        print("Sample HTML classes: flex items-center, bg-gradient-to-r, hover:bg-blue-700")

        # Verify CSS content contains expected Tailwind styles
        css_content = output_content[
            output_content.find("<style>") : output_content.find("</style>")
        ]
        assert "tailwindcss" in css_content  # Tailwind header
        assert "box-sizing:border-box" in css_content  # Reset styles

    # Test case 10: Simple focused test with basic utilities
    simple_test_html = dedent("""
        <!DOCTYPE html>
        <html>
        <head><title>Simple</title></head>
        <body>
            <div class="p-4 text-white bg-blue-500">Simple test</div>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "simple.html"
        output_file = Path(tmpdir) / "simple_output.html"

        input_file.write_text(simple_test_html)

        result = run_minify_cli(input_file, output_file, "--tailwind")

        assert result.returncode == 0
        assert output_file.exists()
        assert output_file.stat().st_size > 10

        output_content = output_file.read_text()
        assert "<head><style>" in output_content
        assert "p-4 text-white bg-blue-500" in output_content  # Classes preserved in HTML

        # Verify core Tailwind CSS is present
        css_content = output_content[
            output_content.find("<style>") : output_content.find("</style>")
        ]
        assert len(css_content) > 1000  # Should be substantial CSS content
        assert "tailwindcss" in css_content
        assert "border-box" in css_content  # Core reset styles

        print(f"Simple test - CSS length: {len(css_content)} characters")
        print("Simple test - Contains classes: p-4, text-white, bg-blue-500")

    # Test case 11: Verify custom CSS and Tailwind utility classes work together
    custom_and_tailwind_html = dedent("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Custom CSS and Tailwind Test</title>
            <style>
                /* Custom CSS classes should be preserved */
                .my-custom-class {
                    background: linear-gradient(45deg, #ff6b6b, #feca57);
                    border: 2px solid #333;
                }
                .special-font {
                    font-family: Georgia, serif;
                    letter-spacing: 0.05em;
                }
            </style>
        </head>
        <body class="bg-gray-100 p-8">
            <div class="my-custom-class p-4 rounded-lg">
                <h1 class="text-2xl font-bold text-white special-font">Custom + Tailwind</h1>
                <p class="text-white opacity-90 mt-2">This uses both custom CSS and Tailwind utilities.</p>
            </div>
            <div class="mt-4 bg-white p-6 rounded-xl shadow-lg">
                <h2 class="text-xl font-semibold text-gray-800">Pure Tailwind</h2>
                <p class="text-gray-600 mt-2">This only uses Tailwind utility classes.</p>
            </div>
        </body>
        </html>
    """).strip()

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = Path(tmpdir) / "custom_tailwind.html"
        output_file = Path(tmpdir) / "custom_tailwind_output.html"

        input_file.write_text(custom_and_tailwind_html)

        result = run_minify_cli(input_file, output_file, "--tailwind", "--verbose")

        assert result.returncode == 0
        output_content = output_file.read_text()

        # Verify custom CSS classes are preserved
        assert ".my-custom-class" in output_content
        assert ".special-font" in output_content
        assert (
            "linear-gradient(45deg,#ff6b6b,#feca57)" in output_content
            or "linear-gradient" in output_content
        )
        assert "Georgia" in output_content or "font-family" in output_content

        # Verify Tailwind classes in HTML are preserved
        assert "bg-gray-100" in output_content
        assert "text-2xl font-bold" in output_content
        assert "rounded-xl shadow-lg" in output_content

        # Verify Tailwind CSS was injected
        css_content = output_content[
            output_content.find("<style>") : output_content.find("</style>")
        ]
        assert "tailwindcss" in css_content

        print("Custom CSS + Tailwind test passed!")

    # Test case 12: Test @apply directives and CSS extraction using the modern example
    modern_example_path = Path(__file__).parent / "test_modern_tailwind.html"
    if modern_example_path.exists():
        with tempfile.TemporaryDirectory() as tmpdir:
            output_file = Path(tmpdir) / "modern_output.html"

            result = run_minify_cli(modern_example_path, output_file, "--verbose")

            assert result.returncode == 0
            assert output_file.exists()
            assert output_file.stat().st_size > 10000  # Should be substantial due to CSS
            assert "Tailwind v4 CDN script detected" in result.stderr

            output_content = output_file.read_text()

            # Verify @apply directives were expanded
            assert ".btn-primary" in output_content
            assert ".btn-secondary" in output_content
            assert ".card" in output_content
            assert ".input-field" in output_content

            # Verify custom CSS was preserved
            assert ".gradient-hero" in output_content
            assert ".accent-button" in output_content
            assert ".fade-in" in output_content
            assert "@keyframes shimmer" in output_content
            assert "@keyframes fadeIn" in output_content

            # Verify CSS variables are preserved
            assert (
                "--accent-color:#10b981" in output_content
                or "--accent-color: #10b981" in output_content
            )

            # Verify no CDN script remains
            assert "@tailwindcss/browser" not in output_content
            assert len(output_content.split("\n")) <= 3  # Minified but may contain doctype+comment

            print("Modern Tailwind example with @apply directives test passed!")
