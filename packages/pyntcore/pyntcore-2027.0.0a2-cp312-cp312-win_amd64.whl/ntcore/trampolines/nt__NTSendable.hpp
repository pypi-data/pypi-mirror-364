// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <networktables/NTSendable.h>

// from extra_includes
#include <networktables/NTSendableBuilder.h>

#include <trampolines/wpi__Sendable.hpp>

namespace nt {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_NTSendable :
  wpi::PyTrampolineCfg_Sendable<
  CfgBase
  >
{
  using Base = nt::NTSendable;
  using override_base_InitSendable_RTNTSendableBuilder = nt::NTSendable;
  using override_base_InitSendable_RTSendableBuilder = nt::NTSendable;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_NTSendable =
  wpi::PyTrampoline_Sendable<
    PyTrampolineBase
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_NTSendable : PyTrampolineBase_NTSendable<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_NTSendable<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_NTSendable;

  #ifndef SWGEN_DISABLE_InitSendable_RTNTSendableBuilder
    void InitSendable(NTSendableBuilder& builder) override {
      auto custom_fn = [&](py::function fn) {
        auto builderHandle = py::cast(builder, py::return_value_policy::reference);
        fn(builderHandle);
      }
      ;
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_CUSTOM_NAME(NTSendable, PYBIND11_TYPE(void), LookupBase,
        "initSendable", InitSendable, builder);
    }
  #endif

  #ifndef SWGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
      auto custom_fn = [&](py::function fn) {
        auto builderHandle = py::cast(builder, py::return_value_policy::reference);
        fn(builderHandle);
      }
      ;
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
      SEMIWRAP_OVERRIDE_CUSTOM_IMPL(PYBIND11_TYPE(void), LookupBase,
        "initSendable", InitSendable, builder);
      return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    }
  #endif
};

}; // namespace nt
