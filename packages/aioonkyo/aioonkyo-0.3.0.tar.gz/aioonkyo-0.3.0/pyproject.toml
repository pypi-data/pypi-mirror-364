[project]
name = "aioonkyo"
version = "0.3.0"
authors = [{ name = "Artur Pragacz" }]
description = "A library for controlling Onkyo AV receivers."
readme = "README.md"
license = "GPL-3.0-only"
license-files = ["LICEN[CS]E*"]
keywords = ["onkyo", "eiscp", "receiver", "asyncio"]
classifiers = [
	"Operating System :: OS Independent",
	"Programming Language :: Python :: 3.13",
]
requires-python = ">=3.13"
dependencies = []

[project.urls]
Homepage = "https://github.com/arturpragacz/aioonkyo"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [ #
	"mypy>=1.16.0",
	"ruff>=0.11.0",
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
	"ALL", # we enable all the rules to stay up-to-date

	# these ones were reviewed and we definitely want enabled
	"A", # flake8-builtins
	"ANN", # flake8-annotations
	"ARG", # flake8-unused-arguments
	"ASYNC", # flake8-async
	"B", # flake8-bugbear
	"BLE", # flake8-blind-except
	"C4", # flake8-comprehensions
	"C90", # mccabe
	"COM", # flake8-commas
	"D", # pydocstyle
	"DTZ", # flake8-datetimez
	"E", # pycodestyle (Error)
	"F", # Pyflakes
	"FIX", # flake8-fixme
	"FBT", # flake8-boolean-trap
	"FLY", # flynt
	"FURB", # refurb
	"G", # flake8-logging-format
	"I", # isort
	"ICN", # flake8-import-conventions
	"INP", # flake8-no-pep420
	"INT", # flake8-gettext
	"ISC", # flake8-implicit-str-concat
	"LOG", # flake8-logging
	"N", # pep8-naming
	"PERF", # Perflint
	"PGH", # pygrep-hooks
	"PIE", # flake8-pie
	"PL", # pylint
	"PT", # flake8-pytest-style
	"PTH", # flake8-use-pathlib
	"PYI", # flake8-pyi
	"RET", # flake8-return
	"RSE", # flake8-raise
	"RUF", # Ruff-specific rules
	"S", # flake8-bandit
	"SIM", # flake8-simplify
	"SLF", # flake8-self
	"T10", # flake8-debugger
	"T20", # flake8-print
	"TC", # flake8-type-checking
	"TID", # flake8-tidy-imports
	"TRY", # tryceratops
	"UP", # pyupgrade
	"W", # pycodestyle (Warning)
]
ignore = [
	"B020", # Loop control variable {name} overrides iterable it iterates
	"CPY001", # Missing copyright notice at top of file
	"D202", # No blank lines allowed after function docstring (found {num_lines})
	"D203", # 1 blank line required before class docstring
	"D213", # Multi-line docstring summary should start at the second line
	"DOC", # pydoclint
	"EM", # flake8-errmsg
	"ERA", # eradicate (Found commented-out code)
	"PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
	"PT011", # pytest.raises({exception}) is too broad, set the `match` parameter or use a more specific exception
	"RUF022", # __all__ is not sorted
	"SIM108", # Use ternary operator {contents} instead of if-else-block
	"TC001", # Move application import {} into a type-checking block
	"TC002", # Move third-party import {} into a type-checking block
	"TC003", # Move standard library import {} into a type-checking block
	"TC006", # Add quotes to type expression in typing.cast()
	"TD", # flake8-todos  # we already have FIX, which warns on any TODO at all
	"TRY003", # Avoid specifying long messages outside the exception class
	"TRY400", # Use logging.exception instead of logging.error

	### May conflict with the formatter ###
	"COM812", # Trailing comma missing  # redundant
	"COM819", # Trailing comma prohibited  # redundant
	"D206", # Docstring should be indented with spaces, not tabs
	"D300", # Use triple double quotes """  # redundant
	"E111", # Indentation is not a multiple of {indent_width}
	"E114", # Indentation is not a multiple of {indent_width} (comment)
	"E117", # Over-indented (comment)  # redundant
	"W191", # Indentation contains tabs
	"Q", # flake8-quotes  # redundant

	### deprecated ###
	"UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"src/aioonkyo/export/**.py" = ["F401", "PLC0414", "TID252"]
"src/aioonkyo/instruction.py" = ["D101", "D102", "D105", "UP040"]
"src/aioonkyo/message.py" = ["D101", "D102", "D105"]
"src/aioonkyo/message_code.py" = ["D101", "D105"]
"src/aioonkyo/parameter.py" = ["D101", "D102", "D105"]
"src/aioonkyo/status.py" = ["D101", "D102", "D105", "UP040"]

[tool.ruff.lint.pycodestyle]
max-line-length = 110

[tool.mypy]
# python_version = "3.13"
packages = "aioonkyo"
strict = true
local_partial_types = true
strict_bytes = true
warn_unreachable = true
enable_error_code = "deprecated, ignore-without-code, redundant-self, truthy-iterable"
