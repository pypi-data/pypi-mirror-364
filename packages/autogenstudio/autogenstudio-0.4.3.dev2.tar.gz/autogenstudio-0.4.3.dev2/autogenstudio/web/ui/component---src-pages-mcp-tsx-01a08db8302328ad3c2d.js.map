{"version":3,"file":"component---src-pages-mcp-tsx-01a08db8302328ad3c2d.js","mappings":"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","sources":["webpack://autogentstudio/./node_modules/lucide-react/dist/esm/icons/globe.js","webpack://autogentstudio/./node_modules/lucide-react/dist/esm/icons/refresh-cw.js","webpack://autogentstudio/./node_modules/@heroicons/react/24/outline/esm/ExclamationTriangleIcon.js","webpack://autogentstudio/./src/components/views/mcp/sidebar.tsx","webpack://autogentstudio/./src/components/views/mcp/detail.tsx","webpack://autogentstudio/./src/components/views/mcp/manager.tsx","webpack://autogentstudio/./src/pages/mcp.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.460.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Globe = createLucideIcon(\"Globe\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20\", key: \"13o1zl\" }],\n  [\"path\", { d: \"M2 12h20\", key: \"9i4pu4\" }]\n]);\n\nexport { Globe as default };\n//# sourceMappingURL=globe.js.map\n","/**\n * @license lucide-react v0.460.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst RefreshCw = createLucideIcon(\"RefreshCw\", [\n  [\"path\", { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\"path\", { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n]);\n\nexport { RefreshCw as default };\n//# sourceMappingURL=refresh-cw.js.map\n","import * as React from \"react\";\nfunction ExclamationTriangleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ExclamationTriangleIcon);\nexport default ForwardRef;","import React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport { Button, Tooltip, Select } from \"antd\";\nimport {\n  PanelLeftClose,\n  PanelLeftOpen,\n  Package,\n  RefreshCw,\n  Info,\n  Globe,\n} from \"lucide-react\";\nimport { appContext } from \"../../../hooks/provider\";\nimport { mcpAPI } from \"./api\";\nimport type {\n  Gallery,\n  Component,\n  McpWorkbenchConfig,\n} from \"../../types/datamodel\";\nimport { getRelativeTimeString } from \"../atoms\";\nimport Icon from \"../../icons\";\nimport { ExclamationTriangleIcon } from \"@heroicons/react/24/outline\";\n\nconst { Option } = Select;\n\ninterface McpSidebarProps {\n  isOpen: boolean;\n  onToggle: () => void;\n  onSelectWorkbench: (\n    workbench: Component<McpWorkbenchConfig> | null,\n    galleryId?: number,\n    workbenchIndex?: number\n  ) => void;\n  isLoading?: boolean;\n  currentWorkbench: Component<McpWorkbenchConfig> | null;\n  onGalleryUpdate?: (gallery: Gallery) => void;\n}\n\nexport const McpSidebar: React.FC<McpSidebarProps> = ({\n  isOpen,\n  onToggle,\n  onSelectWorkbench,\n  isLoading = false,\n  currentWorkbench,\n  onGalleryUpdate,\n}) => {\n  const [galleries, setGalleries] = useState<Gallery[]>([]);\n  const [selectedGallery, setSelectedGallery] = useState<Gallery | null>(null);\n  const [mcpWorkbenches, setMcpWorkbenches] = useState<\n    Component<McpWorkbenchConfig>[]\n  >([]);\n  const [selectedWorkbenchIndex, setSelectedWorkbenchIndex] =\n    useState<number>(-1);\n  const [loadingGalleries, setLoadingGalleries] = useState(false);\n\n  const { user } = useContext(appContext);\n\n  // Helper function to get a unique React key for rendering\n  const getWorkbenchKey = (\n    workbench: Component<McpWorkbenchConfig>,\n    index: number\n  ) => {\n    // Use a hash of the workbench config plus index to ensure uniqueness\n    const configStr = JSON.stringify(workbench.config);\n    return `${workbench.provider}-${\n      workbench.label || \"unnamed\"\n    }-${configStr.slice(0, 20)}-${index}`;\n  };\n\n  // Handle gallery selection\n  const handleGallerySelect = useCallback((gallery: Gallery) => {\n    setSelectedGallery(gallery);\n    if (gallery.id) {\n      localStorage.setItem(\"mcp-view-gallery\", gallery.id.toString());\n    }\n\n    // Extract MCP workbenches from the selected gallery\n    const workbenches = mcpAPI.extractMcpWorkbenches(gallery);\n    setMcpWorkbenches(workbenches);\n    // Reset selection - let the effect handle workbench selection\n    setSelectedWorkbenchIndex(-1);\n  }, []);\n\n  // Load galleries on component mount\n  const loadGalleries = useCallback(async () => {\n    if (!user?.id) return;\n\n    try {\n      setLoadingGalleries(true);\n      const galleriesData = await mcpAPI.listGalleries(user.id);\n      setGalleries(galleriesData);\n\n      // Select gallery based on URL params first, then localStorage, then first gallery\n      const params = new URLSearchParams(window.location.search);\n      const urlGalleryId = params.get(\"galleryId\");\n      const savedGalleryId = localStorage.getItem(\"mcp-view-gallery\");\n      let galleryToSelect = galleriesData[0];\n\n      if (urlGalleryId) {\n        // Prioritize URL parameter\n        const urlGallery = galleriesData.find(\n          (g) => g.id?.toString() === urlGalleryId\n        );\n        if (urlGallery) {\n          galleryToSelect = urlGallery;\n        }\n      } else if (savedGalleryId) {\n        // Fall back to localStorage\n        const savedGallery = galleriesData.find(\n          (g) => g.id?.toString() === savedGalleryId\n        );\n        if (savedGallery) {\n          galleryToSelect = savedGallery;\n        }\n      }\n\n      if (galleryToSelect) {\n        // Set gallery and workbenches, but don't trigger selection here\n        setSelectedGallery(galleryToSelect);\n        if (galleryToSelect.id) {\n          localStorage.setItem(\n            \"mcp-view-gallery\",\n            galleryToSelect.id.toString()\n          );\n        }\n\n        const workbenches = mcpAPI.extractMcpWorkbenches(galleryToSelect);\n        setMcpWorkbenches(workbenches);\n\n        // Let the effect below handle the workbench selection\n      }\n    } catch (error) {\n      console.error(\"Failed to load galleries:\", error);\n    } finally {\n      setLoadingGalleries(false);\n    }\n  }, [user?.id]);\n\n  useEffect(() => {\n    loadGalleries();\n  }, [loadGalleries]);\n\n  // Handle workbench selection after galleries/workbenches are loaded\n  useEffect(() => {\n    if (mcpWorkbenches.length > 0 && selectedGallery && !loadingGalleries) {\n      // Check for URL parameters to restore workbench selection\n      const params = new URLSearchParams(window.location.search);\n      const urlGalleryId = params.get(\"galleryId\");\n      const urlWorkbenchIndex = params.get(\"workbenchIndex\");\n\n      let indexToSelect = 0; // Default to first workbench\n\n      // If URL params match current gallery, try to select the specified workbench\n      if (\n        urlGalleryId &&\n        urlWorkbenchIndex &&\n        selectedGallery.id?.toString() === urlGalleryId\n      ) {\n        const urlIndex = parseInt(urlWorkbenchIndex);\n        if (urlIndex >= 0 && urlIndex < mcpWorkbenches.length) {\n          indexToSelect = urlIndex;\n        }\n      }\n\n      // Only update if selection has changed\n      if (selectedWorkbenchIndex !== indexToSelect) {\n        setSelectedWorkbenchIndex(indexToSelect);\n        onSelectWorkbench(\n          mcpWorkbenches[indexToSelect],\n          selectedGallery.id,\n          indexToSelect\n        );\n      }\n    } else if (\n      mcpWorkbenches.length === 0 &&\n      selectedWorkbenchIndex !== -1 &&\n      !loadingGalleries\n    ) {\n      // No workbenches available, clear selection\n      setSelectedWorkbenchIndex(-1);\n      onSelectWorkbench(null);\n    }\n  }, [mcpWorkbenches, selectedGallery, onSelectWorkbench, loadingGalleries]); // Add loadingGalleries to prevent premature execution\n\n  // Render collapsed state\n  if (!isOpen) {\n    return (\n      <div className=\"h-full border-r border-secondary\">\n        <div className=\"p-2 -ml-2\">\n          <Tooltip title={`MCP Workbenches (${mcpWorkbenches.length})`}>\n            <button\n              onClick={onToggle}\n              className=\"p-2 rounded-md hover:bg-secondary hover:text-accent text-secondary transition-colors focus:outline-none focus:ring-2 focus:ring-accent focus:ring-opacity-50\"\n            >\n              <PanelLeftOpen strokeWidth={1.5} className=\"h-6 w-6\" />\n            </button>\n          </Tooltip>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full border-r border-secondary bg-primary\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between pt-0 p-4 pl-2 pr-2 border-b border-secondary\">\n        <div className=\"flex sticky items-center gap-2\">\n          <span className=\"text-primary font-medium\">MCP Playground</span>\n          <span className=\"px-2 py-0.5 text-xs bg-accent/10 text-accent rounded\">\n            {mcpWorkbenches.length}\n          </span>\n        </div>\n        <Tooltip title=\"Close Sidebar\">\n          <button\n            onClick={onToggle}\n            className=\"p-2 rounded-md hover:bg-secondary hover:text-accent text-secondary transition-colors focus:outline-none focus:ring-2 focus:ring-accent focus:ring-opacity-50\"\n          >\n            <PanelLeftClose strokeWidth={1.5} className=\"h-6 w-6\" />\n          </button>\n        </Tooltip>\n      </div>\n\n      {/* Gallery Selection */}\n      <div className=\"p-4 pl-2 border-b border-secondary\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm text-secondary\">Gallery</span>\n          <Tooltip title=\"Refresh galleries\">\n            <Button\n              size=\"small\"\n              icon={\n                loadingGalleries ? (\n                  <RefreshCw className=\"w-3 h-3 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"w-3 h-3\" />\n                )\n              }\n              className=\"border-0 hover:bg-secondary\"\n              onClick={loadGalleries}\n              disabled={loadingGalleries}\n            />\n          </Tooltip>\n        </div>\n        <Select\n          className=\"w-full\"\n          placeholder=\"Select a gallery\"\n          value={selectedGallery?.id}\n          onChange={(galleryId) => {\n            const gallery = galleries.find((g) => g.id === galleryId);\n            if (gallery) handleGallerySelect(gallery);\n          }}\n          loading={loadingGalleries}\n        >\n          {galleries.map((gallery) => (\n            <Option key={gallery.id} value={gallery.id}>\n              <div className=\"flex items-center gap-2\">\n                <Package className=\"w-3 h-3\" />\n                <span>{gallery.config.name}</span>\n                {gallery.config.url && (\n                  <Globe className=\"w-3 h-3 text-secondary\" />\n                )}\n              </div>\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      {/* Section Label */}\n      <div className=\"py-2 flex text-sm text-secondary px-4\">\n        <div className=\"flex\">\n          MCP Workbenches\n          {isLoading && <RefreshCw className=\"w-4 h-4 ml-2 animate-spin\" />}\n        </div>\n      </div>\n\n      {/* Workbenches List */}\n      {!selectedGallery && (\n        <div className=\"p-2 mr-2 text-center text-secondary text-sm border border-dashed rounded mx-4\">\n          <Info className=\"w-4 h-4 inline-block mr-1.5 -mt-0.5\" />\n          Select a gallery to view MCP workbenches\n        </div>\n      )}\n\n      {selectedGallery && mcpWorkbenches.length === 0 && (\n        <div className=\"p-2 mr-2 text-center text-secondary text-sm border border-dashed rounded ml-2\">\n          <Info className=\"w-4 h-4 inline-block mr-1.5 -mt-0.5\" />\n          No MCP workbenches found in this gallery\n        </div>\n      )}\n\n      <div className=\"scroll overflow-y-auto h-[calc(100%-230px)]\">\n        {mcpWorkbenches.map((workbench, index) => {\n          const workbenchKey = getWorkbenchKey(workbench, index);\n          const isSelected = index === selectedWorkbenchIndex;\n\n          return (\n            <div key={workbenchKey} className=\"relative border-secondary\">\n              <div\n                className={`absolute top-1 left-0.5 z-50 h-[calc(100%-8px)] w-1 bg-opacity-80 rounded ${\n                  isSelected ? \"bg-accent\" : \"bg-tertiary\"\n                }`}\n              />\n              <div\n                className={`group ml-1 flex flex-col p-3 rounded-l cursor-pointer hover:bg-secondary ${\n                  isSelected\n                    ? \"border-accent bg-secondary\"\n                    : \"border-transparent\"\n                }`}\n                onClick={() => {\n                  setSelectedWorkbenchIndex(index);\n                  onSelectWorkbench(workbench, selectedGallery?.id, index);\n                }}\n              >\n                {/* Workbench Name and Actions Row */}\n                <div className=\"flex items-center justify-between min-w-0\">\n                  <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                    <Icon\n                      icon=\"mcp\"\n                      size={4}\n                      className=\"w-4 h-4 text-accent flex-shrink-0\"\n                    />\n                    <div className=\"truncate flex-1 text-sm\">\n                      <span className=\"font-medium\">{workbench.label}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Workbench Details */}\n                <div className=\"mt-1 text-sm text-secondary\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"truncate text-xs\">\n                      {workbench.config.server_params?.type?.replace(\n                        \"ServerParams\",\n                        \"\"\n                      ) || \"Unknown Type\"}\n                    </span>\n                  </div>\n                  {/* {workbench.description && (\n                    <div className=\"mt-1 text-xs text-secondary truncate\">\n                      {workbench.description}\n                    </div>\n                  )} */}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Footer */}\n      {selectedGallery && (\n        <div className=\"p-3 border-t border-secondary text-sm text-secondary\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"truncate flex-1\">\n              {selectedGallery.config.name}\n            </span>\n            <span className=\"ml-2 flex-shrink-0\">\n              {mcpWorkbenches.length} MCP workbench\n              {mcpWorkbenches.length !== 1 ? \"es\" : \"\"}\n            </span>\n          </div>\n          {selectedGallery.updated_at && (\n            <div className=\"text-xs text-tertiary mt-1\">\n              Updated {getRelativeTimeString(selectedGallery.updated_at)}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default McpSidebar;\n","import React from \"react\";\nimport { Card, Button, Alert, Badge, Descriptions } from \"antd\";\nimport {\n  Server,\n  Play,\n  Settings,\n  CheckCircle,\n  XCircle,\n  Info,\n} from \"lucide-react\";\nimport type { Component, McpWorkbenchConfig } from \"../../types/datamodel\";\nimport { WorkbenchFields } from \"../teambuilder/builder/component-editor/fields/workbench\";\n\ninterface McpDetailProps {\n  workbench: Component<McpWorkbenchConfig>;\n  onTestConnection: () => void;\n}\n\nconst McpDetail: React.FC<McpDetailProps> = ({\n  workbench,\n  onTestConnection,\n}) => {\n  const serverParams = workbench.config.server_params;\n  const serverType =\n    serverParams?.type?.replace(\"ServerParams\", \"\") || \"Unknown\";\n\n  return (\n    <div className=\"  \">\n      <WorkbenchFields\n        component={workbench}\n        defaultPanelKey={[\"testing\"]}\n        readonly\n        onChange={() => {\n          // In the playground, we don't allow editing - this is read-only\n          // The user would need to go to the Team Builder to make changes\n        }}\n      />\n    </div>\n  );\n};\n\nexport default McpDetail;\n","import React, { useCallback, useEffect, useState, useContext } from \"react\";\nimport { message } from \"antd\";\nimport { ChevronRight } from \"lucide-react\";\nimport { appContext } from \"../../../hooks/provider\";\nimport McpSidebar from \"./sidebar\";\nimport McpDetail from \"./detail\";\nimport { mcpAPI } from \"./api\";\nimport { galleryAPI } from \"../gallery/api\";\nimport type {\n  Gallery,\n  Component,\n  McpWorkbenchConfig,\n} from \"../../types/datamodel\";\nimport { ExclamationTriangleIcon } from \"@heroicons/react/24/outline\";\n\nconst McpManager: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentWorkbench, setCurrentWorkbench] =\n    useState<Component<McpWorkbenchConfig> | null>(null);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(() => {\n    if (typeof window !== \"undefined\") {\n      const stored = localStorage.getItem(\"mcpSidebar\");\n      return stored !== null ? JSON.parse(stored) : true;\n    }\n    return true;\n  });\n\n  const { user } = useContext(appContext);\n  const [messageApi, contextHolder] = message.useMessage();\n\n  // Persist sidebar state\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      localStorage.setItem(\"mcpSidebar\", JSON.stringify(isSidebarOpen));\n    }\n  }, [isSidebarOpen]);\n\n  // Handle initial URL params\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const galleryId = params.get(\"galleryId\");\n    const workbenchIndex = params.get(\"workbenchIndex\");\n\n    if (galleryId && workbenchIndex && !currentWorkbench) {\n      // Pass URL params to sidebar to handle initial selection\n      // The sidebar will handle the actual workbench loading based on these params\n    }\n  }, [currentWorkbench]);\n\n  // Handle browser back/forward\n  useEffect(() => {\n    const handleLocationChange = () => {\n      const params = new URLSearchParams(window.location.search);\n      const galleryId = params.get(\"galleryId\");\n      const workbenchIndex = params.get(\"workbenchIndex\");\n\n      if (!galleryId || !workbenchIndex) {\n        // No URL params, clear current workbench\n        if (currentWorkbench) {\n          setCurrentWorkbench(null);\n        }\n      }\n    };\n\n    window.addEventListener(\"popstate\", handleLocationChange);\n    return () => window.removeEventListener(\"popstate\", handleLocationChange);\n  }, [currentWorkbench]);\n\n  const handleSelectWorkbench = (\n    workbench: Component<McpWorkbenchConfig> | null,\n    galleryId?: number,\n    workbenchIndex?: number\n  ) => {\n    setCurrentWorkbench(workbench);\n\n    // Update URL when a workbench is selected\n    if (workbench && galleryId !== undefined && workbenchIndex !== undefined) {\n      const params = new URLSearchParams(window.location.search);\n      params.set(\"galleryId\", galleryId.toString());\n      params.set(\"workbenchIndex\", workbenchIndex.toString());\n      window.history.pushState({}, \"\", `?${params.toString()}`);\n    } else if (!workbench) {\n      // Clear URL params when no workbench is selected\n      window.history.pushState({}, \"\", window.location.pathname);\n    }\n  };\n\n  const handleGalleryUpdate = async (updatedGallery: Gallery) => {\n    if (!user?.id || !updatedGallery.id) return;\n\n    try {\n      setIsLoading(true);\n      // Sanitize the gallery data by removing timestamps that shouldn't be updated\n      const sanitizedUpdates = {\n        ...updatedGallery,\n        created_at: undefined,\n        updated_at: undefined,\n      };\n      await galleryAPI.updateGallery(\n        updatedGallery.id,\n        sanitizedUpdates,\n        user.id\n      );\n      messageApi.success(\"Gallery updated successfully\");\n    } catch (error) {\n      console.error(\"Failed to update gallery:\", error);\n      messageApi.error(\"Failed to update gallery\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTestConnection = async (\n    workbench: Component<McpWorkbenchConfig>\n  ) => {\n    try {\n      setIsLoading(true);\n      const isConnected = await mcpAPI.testMcpConnection(workbench);\n\n      if (isConnected) {\n        messageApi.success(\"Connection test successful\");\n      } else {\n        messageApi.error(\"Connection test failed\");\n      }\n    } catch (error) {\n      console.error(\"Connection test failed:\", error);\n      messageApi.error(\"Connection test failed\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!user?.id) {\n    return (\n      <div className=\"flex items-center justify-center h-[calc(100vh-120px)] text-secondary\">\n        Please log in to use the MCP Playground\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative flex h-full w-full\">\n      {contextHolder}\n\n      {/* Sidebar */}\n      <div\n        className={`absolute left-0 top-0 h-full transition-all duration-200 ease-in-out ${\n          isSidebarOpen ? \"w-64\" : \"w-12\"\n        }`}\n      >\n        <McpSidebar\n          isOpen={isSidebarOpen}\n          onToggle={() => setIsSidebarOpen(!isSidebarOpen)}\n          onSelectWorkbench={handleSelectWorkbench}\n          isLoading={isLoading}\n          currentWorkbench={currentWorkbench}\n          onGalleryUpdate={handleGalleryUpdate}\n        />\n      </div>\n\n      {/* Main Content */}\n      <div\n        className={`flex-1 transition-all -mr-6 duration-200 ${\n          isSidebarOpen ? \"ml-64\" : \"ml-12\"\n        }`}\n      >\n        <div className=\"p-4 pt-2  h-[calc(100%-60px)]\">\n          <div className=\"text-xs text-secondary mb-4 border border-dashed rounded-md p-2 \">\n            <ExclamationTriangleIcon className=\"w-4 h-4 inline-block mr-1 text-warning text-orange-500\" />{\" \"}\n            MCP Playground is an experimental view for testing MCP Servers in\n            your Gallery{\" \"}\n          </div>\n          {/* Breadcrumb */}\n          <div className=\"flex items-center gap-2 mb-4 text-sm\">\n            <span className=\"text-primary font-medium\">MCP Playground</span>\n            {currentWorkbench && (\n              <>\n                <ChevronRight className=\"w-4 h-4 text-secondary\" />\n                <span className=\"text-secondary\">{currentWorkbench.label}</span>\n              </>\n            )}\n          </div>\n\n          {/* Content Area */}\n          {isLoading && !currentWorkbench ? (\n            <div className=\"flex items-center justify-center h-[calc(100vh-120px)] text-secondary\">\n              Loading...\n            </div>\n          ) : currentWorkbench ? (\n            <div className=\" h-[calc(100vh-235px)]    scroll overflow-auto\">\n              {\" \"}\n              <McpDetail\n                workbench={currentWorkbench}\n                onTestConnection={() => handleTestConnection(currentWorkbench)}\n              />\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-[calc(100vh-120px)] text-secondary\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-medium mb-2\">\n                  Welcome to MCP Playground\n                </h3>\n                <p className=\"text-secondary mb-4\">\n                  Select an MCP workbench from the sidebar to start testing\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default McpManager;\n","import * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql } from \"gatsby\";\nimport McpManager from \"../components/views/mcp/manager\";\n\n// markup\nconst McpPage = ({ data }: any) => {\n  return (\n    <Layout meta={data.site.siteMetadata} title=\"MCP Playground\" link={\"/mcp\"}>\n      <main style={{ height: \"100%\" }} className=\"h-full\">\n        <McpManager />\n      </main>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query McpPageQuery {\n    site {\n      siteMetadata {\n        description\n        title\n      }\n    }\n  }\n`;\n\nexport default McpPage;\n"],"names":["Globe","cx","cy","r","key","d","RefreshCw","ExclamationTriangleIcon","title","titleId","props","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","ForwardRef","Option","Select","_ref","isOpen","onToggle","onSelectWorkbench","isLoading","currentWorkbench","onGalleryUpdate","galleries","setGalleries","useState","selectedGallery","setSelectedGallery","mcpWorkbenches","setMcpWorkbenches","selectedWorkbenchIndex","setSelectedWorkbenchIndex","loadingGalleries","setLoadingGalleries","user","useContext","appContext","handleGallerySelect","useCallback","gallery","localStorage","setItem","toString","workbenches","mcpAPI","extractMcpWorkbenches","loadGalleries","async","galleriesData","listGalleries","urlGalleryId","URLSearchParams","window","location","search","get","savedGalleryId","getItem","galleryToSelect","urlGallery","find","g","_g$id","savedGallery","_g$id2","error","console","useEffect","length","_selectedGallery$id","params","urlWorkbenchIndex","indexToSelect","urlIndex","parseInt","React","className","Tooltip","onClick","PanelLeftClose","Button","size","icon","disabled","placeholder","value","onChange","galleryId","loading","map","Package","config","name","url","Info","workbench","index","_workbench$config$ser","_workbench$config$ser2","workbenchKey","getWorkbenchKey","configStr","JSON","stringify","provider","label","slice","isSelected","Icon","server_params","type","replace","updated_at","getRelativeTimeString","PanelLeftOpen","_serverParams$type","onTestConnection","serverParams","WorkbenchFields","component","defaultPanelKey","readonly","McpManager","setIsLoading","setCurrentWorkbench","isSidebarOpen","setIsSidebarOpen","stored","parse","messageApi","contextHolder","message","useMessage","handleLocationChange","workbenchIndex","addEventListener","removeEventListener","McpSidebar","handleSelectWorkbench","undefined","set","history","pushState","pathname","updatedGallery","sanitizedUpdates","created_at","galleryAPI","updateGallery","success","ChevronRight","McpDetail","testMcpConnection","handleTestConnection","data","Layout","meta","site","siteMetadata","link","style","height"],"sourceRoot":""}