[project]
name = "mosaico"
version = "0.6.0"
description = "Open-source video generation framework"
authors = [
    { name = "Leonardo Diegues", email = "leonardo.diegues@grupofolha.com.br" },
    { name = "Lucas Golino", email = "lucas@golinux.space" },
]
readme = "README.md"
requires-python = ">=3.10,<3.14"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: GNU General Public License (GPL)",
    "Operating System :: OS Independent",
    "Topic :: Multimedia",
    "Topic :: Multimedia :: Video :: Non-Linear Editor",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis",
    "Topic :: Text Processing :: Fonts",

]
dependencies = [
    "pydantic",
    "pyyaml",
    "moviepy>=2",
    "opencv-python>=4.10.0.84",
    "findsystemfontsfilename>=0.3.0",
    "pydub>=0.25.1",
    "pydantic-extra-types>=2.9.0",
    "pycountry>=24.6.1",
    "tinytag>=1.10.1",
    "fsspec>=2024.10.0",
    "audioop-lts>=0.2.1;python_version >= '3.13'",
    "instructor>=1.7.2",
    "litellm>=1.61.0",
    "pydantic-settings>=2.8.0",
    "deprecated>=1.2.18",
]

[project.scripts]
mosaico = "mosaico.cli:entrypoint"

[project.optional-dependencies]
cli = ["click>=8.1.7"]
assemblyai = ["assemblyai>=0.34.0"]
elevenlabs = ["elevenlabs>=1.9.0"]
openai = ["openai>=1.68.0"]
langchain = ["langchain>=0.3.7"]
haystack = ["haystack-ai>=2.6.1"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "types-pyyaml>=6.0.12.20240808",
    "typing-extensions>=4.12.2",
    "ruff>=0.6.2",
    "mypy>=1.11.2",
    "pre-commit>=4.0.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.39",
    "mkdocstrings-python>=1.11.1",
    "griffe>=1.3.2",
    "mkdocs-redirects>=1.2.1",
    "mike>=2.1.3",
    "mkdocstrings>=0.26.1",
    "black>=24.10.0",
    "mkdocs-print-site-plugin>=2.6.0",
    "mkdocs-static-i18n>=1.2.3",
]

[tool.ruff]
fix = true
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
    "ASYNC", # flake8-async
    "C4",    # flake8-comprehensions
    "C90",   # McCabe cyclomatic complexity
    "E501",  # Long lines
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "INT",   # flake8-gettext
    "PERF",  # Perflint
    "PL",    # Pylint
    "Q",     # flake8-quotes
    "SIM",   # flake8-simplify
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "TID",   # flake8-tidy-imports
    "W",     # pycodestyle
    "YTT",   # flake8-2020
    "I",     # isort
    # built-in shadowing
    "A001", # builtin-variable-shadowing
    "A002", # builtin-argument-shadowing
    "A003", # builtin-attribute-shadowing
    # docstring rules
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D209", # Closing triple quotes go to new line
    "D205", # 1 blank line required between summary line and description
    "D213", # summary lines must be positioned on the second physical line of the docstring
    "D417", # undocumented-parameter
    "D419", # undocumented-returns
]
ignore = [
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PERF401", # Use a list comprehension to create a transformed list
    "PLR1714", # repeated-equality-comparison
    "PLR5501", # collapsible-else-if
    "PLW0603", # global-statement
    "PLW1510", # subprocess-run-without-check
    "PLW2901", # redefined-loop-name
    "SIM108",  # if-else-block-instead-of-if-exp
    "SIM115",  # open-file-with-context-handler
    "SIM118",  # in-dict-keys
]

[tool.ruff.lint.per-file-ignores]
"src/mosaico/config.py" = ["ARG003", "S104", "D102", "D106"]
"src/mosaico/assets/factory.py" = ["A002"]
"src/mosaico/video/project_builder.py" = ["C901", "PLR0912"]
"src/mosaico/speech_synthesizers/*.py" = ["D102"]
"src/mosaico/types.py" = ["D102"]
"src/mosaico/**/prompts.py" = ["E501"]
"src/mosaico/transcription_aligners/genai.py" = ["E501"]
"cookbook/*.py" = ["F821"]
"tests/*.py" = ["S101", "D", "E501", "ARG001", "PLR2004"]
"e2e/*.py" = ["S101", "D", "ARG001", "PLR2004"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.isort]
known-first-party = ["mosaico"]
lines-after-imports = 2

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.pyright]
venvPath = "."
venv = ".venv"

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "--cov=mosaico",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--junitxml=report.xml",
]

[tool.coverage.paths]
mosaico = ["src/mosaico"]

[tool.coverage.run]
source = ["src/mosaico"]
omit = [
    "src/mosaico/__main__.py",
    "src/mosaico/cli.py",
    "src/mosaico/version.py",
    "src/mosaico/**/protocol.py",
]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "def __init__",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "@overload",
]
