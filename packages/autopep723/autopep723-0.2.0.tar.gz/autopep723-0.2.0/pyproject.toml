[project]
name = "autopep723"
version = "0.2.0"
description = "Auto-generate PEP 723 metadata for Python scripts by analyzing imports"
readme = "README.md"
authors = [{ name = "Martín Gaitán", email = "gaitan@gmail.com" }]
license = "MIT"
requires-python = ">=3.9"
dependencies = []

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.12.4",
    "pre-commit>=3.6.0",
    "pytest-cov>=6.2.1",
]

[project.scripts]
autopep723 = "autopep723:main"

[build-system]
requires = ["uv_build>=0.8.0,<0.9"]
build-backend = "uv_build"

[dependency-groups]
docs = ["myst-parser>=3.0.1", "sphinx>=7.4.7", "sphinxcontrib-mermaid>=1.0.0"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",
    "W",      # pycodestyle (E, W) https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "F",      # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "I",      # isort
    "C90",    # https://docs.astral.sh/ruff/rules/#mccabe-c90
    "UP",     # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "RUF",    # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "T10",    # remove pdbs
    "ISC",    # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "SIM",    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "B",      # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4",     # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "PIE",    # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "FURB",   # https://docs.astral.sh/ruff/rules/#refurb-furb
    "TID252", # https://docs.astral.sh/ruff/rules/relative-imports/
]

[tool.pytest.ini_options]
addopts = [
    "--cov=src/autopep723",
    "--cov-report=term-missing",
    "--cov-fail-under=99.5",
    "--strict-markers",          # Fail if markers are not registered in pytest configuration
    "--strict-config",           # Fail if there are errors in pytest configuration
    "-ra",                       # Show extra test summary info for all except passed tests
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
