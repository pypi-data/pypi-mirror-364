{"version":3,"file":"4394.611b02f033ee07db.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-code-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-template.ts","webpack://knx-frontend/./homeassistant-frontend/src/util/documentation-url.ts"],"sourcesContent":["import type {\n  Completion,\n  CompletionContext,\n  CompletionResult,\n  CompletionSource,\n} from \"@codemirror/autocomplete\";\nimport type { Extension, TransactionSpec } from \"@codemirror/state\";\nimport type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport type { HassEntities } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { css, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\nconst renderIcon = (completion: Completion) => {\n  const icon = document.createElement(\"ha-icon\");\n  icon.icon = completion.label;\n  return icon;\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  public hass?: HomeAssistant;\n\n  // eslint-disable-next-line lit/no-native-attributes\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ attribute: \"read-only\", type: Boolean }) public readOnly = false;\n\n  @property({ type: Boolean }) public linewrap = false;\n\n  @property({ type: Boolean, attribute: \"autocomplete-entities\" })\n  public autocompleteEntities = false;\n\n  @property({ type: Boolean, attribute: \"autocomplete-icons\" })\n  public autocompleteIcons = false;\n\n  @property({ type: Boolean }) public error = false;\n\n  @state() private _value = \"\";\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  private _iconList?: Completion[];\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.highlightingFor(\n      this.codemirror.state,\n      [this._loadedCodeMirror.tags.comment]\n    );\n    return !!this.renderRoot.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    // Force update on reconnection so editor is recreated\n    if (this.hasUpdated) {\n      this.requestUpdate();\n    }\n    this.addEventListener(\"keydown\", stopPropagation);\n    // This is unreachable as editor will not exist yet,\n    // but focus should not behave like this for good a11y.\n    // (@steverep to fix in autofocus PR)\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"keydown\", stopPropagation);\n    this.updateComplete.then(() => {\n      this.codemirror!.destroy();\n      delete this.codemirror;\n    });\n  }\n\n  // Ensure CodeMirror module is loaded before any update\n  protected override async scheduleUpdate() {\n    this._loadedCodeMirror ??= await import(\"../resources/codemirror\");\n    super.scheduleUpdate();\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n    if (!this.codemirror) {\n      this._createCodeMirror();\n      return;\n    }\n    const transactions: TransactionSpec[] = [];\n    if (changedProps.has(\"mode\")) {\n      transactions.push({\n        effects: [\n          this._loadedCodeMirror!.langCompartment!.reconfigure(this._mode),\n          this._loadedCodeMirror!.foldingCompartment.reconfigure(\n            this._getFoldingExtensions()\n          ),\n        ],\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      transactions.push({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"linewrap\")) {\n      transactions.push({\n        effects: this._loadedCodeMirror!.linewrapCompartment!.reconfigure(\n          this.linewrap ? this._loadedCodeMirror!.EditorView.lineWrapping : []\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      transactions.push({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (transactions.length > 0) {\n      this.codemirror.dispatch(...transactions);\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private _createCodeMirror() {\n    if (!this._loadedCodeMirror) {\n      throw new Error(\"Cannot create editor before CodeMirror is loaded\");\n    }\n    const extensions: Extension[] = [\n      this._loadedCodeMirror.lineNumbers(),\n      this._loadedCodeMirror.history(),\n      this._loadedCodeMirror.drawSelection(),\n      this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n      this._loadedCodeMirror.rectangularSelection(),\n      this._loadedCodeMirror.crosshairCursor(),\n      this._loadedCodeMirror.highlightSelectionMatches(),\n      this._loadedCodeMirror.highlightActiveLine(),\n      this._loadedCodeMirror.indentationMarkers({\n        thickness: 0,\n        activeThickness: 1,\n        colors: {\n          activeLight: \"var(--secondary-text-color)\",\n          activeDark: \"var(--secondary-text-color)\",\n        },\n      }),\n      this._loadedCodeMirror.keymap.of([\n        ...this._loadedCodeMirror.defaultKeymap,\n        ...this._loadedCodeMirror.searchKeymap,\n        ...this._loadedCodeMirror.historyKeymap,\n        ...this._loadedCodeMirror.tabKeyBindings,\n        saveKeyBinding,\n      ]),\n      this._loadedCodeMirror.langCompartment.of(this._mode),\n      this._loadedCodeMirror.haTheme,\n      this._loadedCodeMirror.haSyntaxHighlighting,\n      this._loadedCodeMirror.readonlyCompartment.of(\n        this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n      ),\n      this._loadedCodeMirror.linewrapCompartment.of(\n        this.linewrap ? this._loadedCodeMirror.EditorView.lineWrapping : []\n      ),\n      this._loadedCodeMirror.EditorView.updateListener.of(this._onUpdate),\n      this._loadedCodeMirror.foldingCompartment.of(\n        this._getFoldingExtensions()\n      ),\n    ];\n\n    if (!this.readOnly) {\n      const completionSources: CompletionSource[] = [];\n      if (this.autocompleteEntities && this.hass) {\n        completionSources.push(this._entityCompletions.bind(this));\n      }\n      if (this.autocompleteIcons) {\n        completionSources.push(this._mdiCompletions.bind(this));\n      }\n      if (completionSources.length > 0) {\n        extensions.push(\n          this._loadedCodeMirror.autocompletion({\n            override: completionSources,\n            maxRenderedOptions: 10,\n          })\n        );\n      }\n    }\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions,\n      }),\n      parent: this.renderRoot,\n    });\n  }\n\n  private _getStates = memoizeOne((states: HassEntities): Completion[] => {\n    if (!states) {\n      return [];\n    }\n    const options = Object.keys(states).map((key) => ({\n      type: \"variable\",\n      label: key,\n      detail: states[key].attributes.friendly_name,\n      info: `State: ${states[key].state}`,\n    }));\n\n    return options;\n  });\n\n  private _entityCompletions(\n    context: CompletionContext\n  ): CompletionResult | null | Promise<CompletionResult | null> {\n    const entityWord = context.matchBefore(/[a-z_]{3,}\\.\\w*/);\n\n    if (\n      !entityWord ||\n      (entityWord.from === entityWord.to && !context.explicit)\n    ) {\n      return null;\n    }\n\n    const states = this._getStates(this.hass!.states);\n\n    if (!states || !states.length) {\n      return null;\n    }\n\n    return {\n      from: Number(entityWord.from),\n      options: states,\n      validFor: /^[a-z_]{3,}\\.\\w*$/,\n    };\n  }\n\n  private _getIconItems = async (): Promise<Completion[]> => {\n    if (!this._iconList) {\n      let iconList: {\n        name: string;\n        keywords: string[];\n      }[];\n      if (__SUPERVISOR__) {\n        iconList = [];\n      } else {\n        iconList = (await import(\"../../build/mdi/iconList.json\")).default;\n      }\n\n      this._iconList = iconList.map((icon) => ({\n        type: \"variable\",\n        label: `mdi:${icon.name}`,\n        detail: icon.keywords.join(\", \"),\n        info: renderIcon,\n      }));\n    }\n\n    return this._iconList;\n  };\n\n  private async _mdiCompletions(\n    context: CompletionContext\n  ): Promise<CompletionResult | null> {\n    const match = context.matchBefore(/mdi:\\S*/);\n\n    if (!match || (match.from === match.to && !context.explicit)) {\n      return null;\n    }\n\n    const iconItems = await this._getIconItems();\n\n    return {\n      from: Number(match.from),\n      options: iconItems,\n      validFor: /^mdi:\\S*$/,\n    };\n  }\n\n  private _onUpdate = (update: ViewUpdate): void => {\n    if (!update.docChanged) {\n      return;\n    }\n    this._value = update.state.doc.toString();\n    fireEvent(this, \"value-changed\", { value: this._value });\n  };\n\n  private _getFoldingExtensions = (): Extension => {\n    if (this.mode === \"yaml\") {\n      return [\n        this._loadedCodeMirror!.foldGutter(),\n        this._loadedCodeMirror!.foldingOnIndent,\n      ];\n    }\n\n    return [];\n  };\n\n  static styles = css`\n    :host(.error-state) .cm-gutters {\n      border-color: var(--error-state-color, red);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { css, html, nothing, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../ha-code-editor\";\nimport \"../ha-input-helper-text\";\nimport \"../ha-alert\";\n\nconst WARNING_STRINGS = [\"template:\", \"sensor:\", \"state:\", \"trigger: template\"];\n\n@customElement(\"ha-selector-template\")\nexport class HaTemplateSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private warn: string | undefined = undefined;\n\n  protected render() {\n    return html`\n      ${this.warn\n        ? html`<ha-alert alert-type=\"warning\"\n            >${this.hass.localize(\n              \"ui.components.selectors.template.yaml_warning\",\n              { string: this.warn }\n            )}\n            <br />\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(\n                this.hass,\n                \"/docs/configuration/templating/\"\n              )}\n              >${this.hass.localize(\n                \"ui.components.selectors.template.learn_more\"\n              )}</a\n            ></ha-alert\n          >`\n        : nothing}\n      ${this.label\n        ? html`<p>${this.label}${this.required ? \"*\" : \"\"}</p>`\n        : nothing}\n      <ha-code-editor\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${this.value}\n        .readOnly=${this.disabled}\n        autofocus\n        autocomplete-entities\n        autocomplete-icons\n        @value-changed=${this._handleChange}\n        dir=\"ltr\"\n        linewrap\n      ></ha-code-editor>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : nothing}\n    `;\n  }\n\n  private _handleChange(ev) {\n    let value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    this.warn = WARNING_STRINGS.find((str) => value.includes(str));\n    if (value === \"\" && !this.required) {\n      value = undefined;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static styles = css`\n    p {\n      margin-top: 0;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-template\": HaTemplateSelector;\n  }\n}\n","import type { HomeAssistant } from \"../types\";\n\nexport const documentationUrl = (hass: HomeAssistant, path: string) =>\n  `https://${\n    hass.config.version.includes(\"b\")\n      ? \"rc\"\n      : hass.config.version.includes(\"dev\")\n        ? \"next\"\n        : \"www\"\n  }.home-assistant.io${path}`;\n"],"names":["saveKeyBinding","key","run","view","fireEvent","dom","renderIcon","completion","icon","document","createElement","label","HaCodeEditor","ReactiveElement","value","this","_value","codemirror","state","doc","toString","hasComments","_loadedCodeMirror","className","highlightingFor","tags","comment","renderRoot","querySelector","connectedCallback","super","hasUpdated","requestUpdate","addEventListener","stopPropagation","autofocus","focus","disconnectedCallback","removeEventListener","updateComplete","then","destroy","scheduleUpdate","update","changedProps","_createCodeMirror","transactions","has","push","effects","langCompartment","reconfigure","_mode","foldingCompartment","_getFoldingExtensions","readonlyCompartment","EditorView","editable","of","readOnly","linewrapCompartment","linewrap","lineWrapping","changes","from","to","length","insert","dispatch","classList","toggle","error","langs","mode","Error","extensions","lineNumbers","history","drawSelection","EditorState","allowMultipleSelections","rectangularSelection","crosshairCursor","highlightSelectionMatches","highlightActiveLine","indentationMarkers","thickness","activeThickness","colors","activeLight","activeDark","keymap","defaultKeymap","searchKeymap","historyKeymap","tabKeyBindings","haTheme","haSyntaxHighlighting","updateListener","_onUpdate","completionSources","autocompleteEntities","hass","_entityCompletions","bind","autocompleteIcons","_mdiCompletions","autocompletion","override","maxRenderedOptions","create","parent","context","entityWord","matchBefore","explicit","states","_getStates","Number","options","validFor","match","iconItems","_getIconItems","args","memoizeOne","Object","keys","map","type","detail","attributes","friendly_name","info","_iconList","iconList","default","name","keywords","join","docChanged","foldGutter","foldingOnIndent","styles","css","Boolean","attribute","WARNING_STRINGS","HaTemplateSelector","LitElement","render","html","warn","localize","string","documentationUrl","nothing","required","disabled","_handleChange","helper","ev","target","find","str","includes","undefined","path","config","version"],"mappings":"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"}