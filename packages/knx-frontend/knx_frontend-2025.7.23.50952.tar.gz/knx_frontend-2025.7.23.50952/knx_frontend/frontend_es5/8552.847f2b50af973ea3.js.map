{"version":3,"file":"8552.847f2b50af973ea3.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-entity-attribute-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-attribute.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { LitElement, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { computeAttributeNameDisplay } from \"../../common/entity/compute_attribute_display\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\n@customElement(\"ha-entity-attribute-picker\")\nclass HaEntityAttributePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public entityId?: string;\n\n  /**\n   * List of attributes to be hidden.\n   * @type {Array}\n   * @attr hide-attributes\n   */\n  @property({ type: Array, attribute: \"hide-attributes\" })\n  public hideAttributes?: string[];\n\n  // eslint-disable-next-line lit/no-native-attributes\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-value\" })\n  public allowCustomValue;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) private _comboBox!: HaComboBox;\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_opened\") && this._opened) {\n      const entityState = this.entityId\n        ? this.hass.states[this.entityId]\n        : undefined;\n      (this._comboBox as any).items = entityState\n        ? Object.keys(entityState.attributes)\n            .filter((key) => !this.hideAttributes?.includes(key))\n            .map((key) => ({\n              value: key,\n              label: computeAttributeNameDisplay(\n                this.hass.localize,\n                entityState,\n                this.hass.entities,\n                key\n              ),\n            }))\n        : [];\n    }\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const stateObj = this.hass.states[this.entityId!] as HassEntity | undefined;\n\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .value=${this.value\n          ? stateObj\n            ? computeAttributeNameDisplay(\n                this.hass.localize,\n                stateObj,\n                this.hass.entities,\n                this.value\n              )\n            : this.value\n          : \"\"}\n        .autofocus=${this.autofocus}\n        .label=${this.label ??\n        this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        )}\n        .disabled=${this.disabled || !this.entityId}\n        .required=${this.required}\n        .helper=${this.helper}\n        .allowCustomValue=${this.allowCustomValue}\n        item-value-path=\"value\"\n        item-label-path=\"label\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    this.value = ev.detail.value;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-attribute-picker\": HaEntityAttributePicker;\n  }\n}\n","import type { PropertyValues } from \"lit\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { AttributeSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-entity-attribute-picker\";\n\n@customElement(\"ha-selector-attribute\")\nexport class HaSelectorAttribute extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: AttributeSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    filter_entity?: string;\n  };\n\n  protected render() {\n    return html`\n      <ha-entity-attribute-picker\n        .hass=${this.hass}\n        .entityId=${this.selector.attribute?.entity_id ||\n        this.context?.filter_entity}\n        .hideAttributes=${this.selector.attribute?.hide_attributes}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        allow-custom-value\n      ></ha-entity-attribute-picker>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (\n      // No need to filter value if no value\n      !this.value ||\n      // Only adjust value if we used the context\n      this.selector.attribute?.entity_id ||\n      // Only check if context has changed\n      !changedProps.has(\"context\")\n    ) {\n      return;\n    }\n\n    const oldContext = changedProps.get(\"context\") as this[\"context\"];\n\n    if (\n      !this.context ||\n      !oldContext ||\n      oldContext.filter_entity === this.context.filter_entity\n    ) {\n      return;\n    }\n\n    // Validate that that the attribute is still valid for this entity, else unselect.\n    let invalid = false;\n    if (this.context.filter_entity) {\n      const stateObj = this.hass.states[this.context.filter_entity];\n\n      if (!(stateObj && this.value in stateObj.attributes)) {\n        invalid = true;\n      }\n    } else {\n      invalid = this.value !== undefined;\n    }\n\n    if (invalid) {\n      fireEvent(this, \"value-changed\", {\n        value: undefined,\n      });\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-attribute\": HaSelectorAttribute;\n  }\n}\n"],"names":["HaEntityAttributePicker","LitElement","shouldUpdate","changedProps","has","_opened","updated","entityState","entityId","hass","states","undefined","this","_comboBox","items","Object","keys","attributes","filter","key","_this$hideAttributes","hideAttributes","includes","map","value","label","computeAttributeNameDisplay","localize","entities","render","_this$label","nothing","stateObj","html","_t","_","autofocus","disabled","required","helper","allowCustomValue","_openedChanged","_valueChanged","ev","detail","args","attribute","type","Array","Boolean","HaSelectorAttribute","_this$selector$attrib","_this$context","_this$selector$attrib2","selector","entity_id","context","filter_entity","hide_attributes","_this$selector$attrib3","super","oldContext","get","invalid","fireEvent"],"mappings":"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"}