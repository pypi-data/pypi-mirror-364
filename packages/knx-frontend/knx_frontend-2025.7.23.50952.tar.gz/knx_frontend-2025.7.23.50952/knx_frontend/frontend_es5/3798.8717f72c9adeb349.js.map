{"version":3,"file":"3798.8717f72c9adeb349.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button-toggle-group.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-button-toggle.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport type { Button } from \"@material/mwc-button/mwc-button\";\nimport type { TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, queryAll } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { ToggleButton } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-button-toggle-group\")\nexport class HaButtonToggleGroup extends LitElement {\n  @property({ attribute: false }) public buttons!: ToggleButton[];\n\n  @property() public active?: string;\n\n  @property({ attribute: \"full-width\", type: Boolean })\n  public fullWidth = false;\n\n  @property({ type: Boolean }) public dense = false;\n\n  @queryAll(\"mwc-button\") private _buttons?: Button[];\n\n  protected render(): TemplateResult {\n    return html`\n      <div>\n        ${this.buttons.map((button) =>\n          button.iconPath\n            ? html`<ha-icon-button\n                .label=${button.label}\n                .path=${button.iconPath}\n                .value=${button.value}\n                ?active=${this.active === button.value}\n                @click=${this._handleClick}\n              ></ha-icon-button>`\n            : html`<mwc-button\n                style=${styleMap({\n                  width: this.fullWidth\n                    ? `${100 / this.buttons.length}%`\n                    : \"initial\",\n                })}\n                outlined\n                .dense=${this.dense}\n                .value=${button.value}\n                ?active=${this.active === button.value}\n                @click=${this._handleClick}\n                >${button.label}</mwc-button\n              >`\n        )}\n      </div>\n    `;\n  }\n\n  protected updated() {\n    // Work around Safari default margin that is not reset in mwc-button as of aug 2021\n    this._buttons?.forEach(async (button) => {\n      await button.updateComplete;\n      (\n        button.shadowRoot!.querySelector(\"button\") as HTMLButtonElement\n      ).style.margin = \"0\";\n    });\n  }\n\n  private _handleClick(ev): void {\n    this.active = ev.currentTarget.value;\n    fireEvent(this, \"value-changed\", { value: this.active });\n  }\n\n  static styles = css`\n    div {\n      display: flex;\n      --mdc-icon-button-size: var(--button-toggle-size, 36px);\n      --mdc-icon-size: var(--button-toggle-icon-size, 20px);\n      direction: ltr;\n    }\n    mwc-button {\n      flex: 1;\n      --mdc-shape-small: 0;\n      --mdc-button-outline-width: 1px 0 1px 1px;\n      --mdc-button-outline-color: var(--primary-color);\n    }\n    ha-icon-button {\n      border: 1px solid var(--primary-color);\n      border-right-width: 0px;\n    }\n    ha-icon-button,\n    mwc-button {\n      position: relative;\n      cursor: pointer;\n    }\n    ha-icon-button::before,\n    mwc-button::before {\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      position: absolute;\n      background-color: var(--primary-color);\n      opacity: 0;\n      pointer-events: none;\n      content: \"\";\n      transition:\n        opacity 15ms linear,\n        background-color 15ms linear;\n    }\n    ha-icon-button[active]::before,\n    mwc-button[active]::before {\n      opacity: 1;\n    }\n    ha-icon-button[active] {\n      --icon-primary-color: var(--text-primary-color);\n    }\n    mwc-button[active] {\n      --mdc-theme-primary: var(--text-primary-color);\n    }\n    ha-icon-button:first-child,\n    mwc-button:first-child {\n      --mdc-shape-small: 4px 0 0 4px;\n      border-radius: 4px 0 0 4px;\n      --mdc-button-outline-width: 1px;\n    }\n    mwc-button:first-child::before {\n      border-radius: 4px 0 0 4px;\n    }\n    ha-icon-button:last-child,\n    mwc-button:last-child {\n      border-radius: 0 4px 4px 0;\n      border-right-width: 1px;\n      --mdc-shape-small: 0 4px 4px 0;\n      --mdc-button-outline-width: 1px;\n    }\n    mwc-button:last-child::before {\n      border-radius: 0 4px 4px 0;\n    }\n    ha-icon-button:only-child,\n    mwc-button:only-child {\n      --mdc-shape-small: 4px;\n      border-right-width: 1px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-toggle-group\": HaButtonToggleGroup;\n  }\n}\n","import { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport type { ButtonToggleSelector, SelectOption } from \"../../data/selector\";\nimport type { HomeAssistant, ToggleButton } from \"../../types\";\nimport \"../ha-button-toggle-group\";\n\n@customElement(\"ha-selector-button_toggle\")\nexport class HaButtonToggleSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ButtonToggleSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: false })\n  public localizeValue?: (key: string) => string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    const options =\n      this.selector.button_toggle?.options?.map((option) =>\n        typeof option === \"object\"\n          ? (option as SelectOption)\n          : ({ value: option, label: option } as SelectOption)\n      ) || [];\n\n    const translationKey = this.selector.button_toggle?.translation_key;\n\n    if (this.localizeValue && translationKey) {\n      options.forEach((option) => {\n        const localizedLabel = this.localizeValue!(\n          `${translationKey}.options.${option.value}`\n        );\n        if (localizedLabel) {\n          option.label = localizedLabel;\n        }\n      });\n    }\n\n    if (this.selector.button_toggle?.sort) {\n      options.sort((a, b) =>\n        caseInsensitiveStringCompare(\n          a.label,\n          b.label,\n          this.hass.locale.language\n        )\n      );\n    }\n\n    const toggleButtons: ToggleButton[] = options.map((item: SelectOption) => ({\n      label: item.label,\n      value: item.value,\n    }));\n\n    return html`\n      ${this.label}\n      <ha-button-toggle-group\n        .buttons=${toggleButtons}\n        .active=${this.value}\n        @value-changed=${this._valueChanged}\n      ></ha-button-toggle-group>\n    `;\n  }\n\n  private _valueChanged(ev) {\n    ev.stopPropagation();\n\n    const value = ev.detail?.value || ev.target.value;\n    if (this.disabled || value === undefined || value === (this.value ?? \"\")) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: value,\n    });\n  }\n\n  static styles = css`\n    :host {\n      position: relative;\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      gap: 8px;\n      align-items: center;\n    }\n    @media all and (max-width: 600px) {\n      ha-button-toggle-group {\n        flex: 1;\n      }\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-button_toggle\": HaButtonToggleSelector;\n  }\n}\n"],"names":["HaButtonToggleGroup","LitElement","render","html","_t","_","buttons","map","button","iconPath","_t2","label","value","active","_handleClick","_t3","styleMap","width","fullWidth","length","dense","updated","_this$_buttons","this","_buttons","forEach","updateComplete","shadowRoot","querySelector","style","margin","ev","currentTarget","fireEvent","args","styles","css","_t4","attribute","type","Boolean","HaButtonToggleSelector","_this$selector$button","_this$selector$button2","_this$selector$button3","options","selector","button_toggle","option","translationKey","translation_key","localizeValue","localizedLabel","sort","a","b","caseInsensitiveStringCompare","hass","locale","language","toggleButtons","item","_valueChanged","_ev$detail","_this$value","stopPropagation","detail","target","disabled","undefined","required"],"mappings":"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"}