{"version":3,"file":"6728.e2b3078bdc649af6.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-hls-player.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/config-flow/previews/flow-preview-generic.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/config-flow/previews/flow-preview-generic_camera.ts"],"sourcesContent":["import type HlsType from \"hls.js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport { fetchStreamUrl } from \"../data/camera\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-alert\";\n\ntype HlsLite = Omit<\n  HlsType,\n  \"subtitleTrackController\" | \"audioTrackController\" | \"emeController\"\n>;\n\n@customElement(\"ha-hls-player\")\nclass HaHLSPlayer extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityid?: string;\n\n  @property() public url?: string;\n\n  @property({ attribute: \"poster-url\" }) public posterUrl?: string;\n\n  @property({ attribute: false }) public aspectRatio?: number;\n\n  @property({ attribute: false }) public fitMode?: \"cover\" | \"contain\" | \"fill\";\n\n  @property({ type: Boolean, attribute: \"controls\" })\n  public controls = false;\n\n  @property({ type: Boolean, attribute: \"muted\" })\n  public muted = false;\n\n  @property({ type: Boolean, attribute: \"autoplay\" })\n  public autoPlay = false;\n\n  @property({ type: Boolean, attribute: \"playsinline\" })\n  public playsInline = false;\n\n  @property({ type: Boolean, attribute: \"allow-exoplayer\" })\n  public allowExoPlayer = false;\n\n  // don't cache this, as we remove it on disconnects\n  @query(\"video\") private _videoEl!: HTMLVideoElement;\n\n  @state() private _error?: string;\n\n  @state() private _errorIsFatal = false;\n\n  @state() private _url!: string;\n\n  private _hlsPolyfillInstance?: HlsLite;\n\n  private _exoPlayer = false;\n\n  private static streamCount = 0;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    HaHLSPlayer.streamCount += 1;\n    if (this.hasUpdated) {\n      this._resetError();\n      this._startHls();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    HaHLSPlayer.streamCount -= 1;\n    this._cleanUp();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this._error\n        ? html`<ha-alert\n            alert-type=\"error\"\n            class=${this._errorIsFatal ? \"fatal\" : \"retry\"}\n          >\n            ${this._error}\n          </ha-alert>`\n        : \"\"}\n      ${!this._errorIsFatal\n        ? html`<video\n            .poster=${this.posterUrl}\n            ?autoplay=${this.autoPlay}\n            .muted=${this.muted}\n            ?playsinline=${this.playsInline}\n            ?controls=${this.controls}\n            @loadeddata=${this._loadedData}\n            style=${styleMap({\n              height: this.aspectRatio == null ? \"100%\" : \"auto\",\n              aspectRatio: this.aspectRatio,\n              objectFit: this.fitMode,\n            })}\n          ></video>`\n        : \"\"}\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    const entityChanged = changedProps.has(\"entityid\");\n    const urlChanged = changedProps.has(\"url\");\n\n    if (entityChanged) {\n      this._getStreamUrlFromEntityId();\n    } else if (urlChanged && this.url) {\n      this._cleanUp();\n      this._resetError();\n      this._url = this.url;\n      this._startHls();\n    }\n  }\n\n  private async _getStreamUrlFromEntityId(): Promise<void> {\n    this._cleanUp();\n    this._resetError();\n\n    if (!isComponentLoaded(this.hass!, \"stream\")) {\n      this._setFatalError(\"Streaming component is not loaded.\");\n      return;\n    }\n\n    if (!this.entityid) {\n      return;\n    }\n    try {\n      const { url } = await fetchStreamUrl(this.hass!, this.entityid);\n\n      this._url = this.hass.hassUrl(url);\n      this._cleanUp();\n      this._resetError();\n      this._startHls();\n    } catch (err: any) {\n      // Fails if we were unable to get a stream\n      // eslint-disable-next-line\n      console.error(err);\n\n      fireEvent(this, \"streams\", { hasAudio: false, hasVideo: false });\n    }\n  }\n\n  private async _startHls(): Promise<void> {\n    const masterPlaylistPromise = fetch(this._url);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const Hls: typeof HlsType = (await import(\"hls.js/dist/hls.light.mjs\"))\n      .default;\n\n    if (!this.isConnected) {\n      return;\n    }\n\n    let hlsSupported = Hls.isSupported();\n\n    if (!hlsSupported) {\n      hlsSupported =\n        this._videoEl.canPlayType(\"application/vnd.apple.mpegurl\") !== \"\";\n    }\n\n    if (!hlsSupported) {\n      this._setFatalError(\n        this.hass.localize(\"ui.components.media-browser.video_not_supported\")\n      );\n      return;\n    }\n\n    const useExoPlayer =\n      this.allowExoPlayer && this.hass.auth.external?.config.hasExoPlayer;\n    const masterPlaylist = await (await masterPlaylistPromise).text();\n\n    if (!this.isConnected) {\n      return;\n    }\n\n    // Parse playlist assuming it is a master playlist. Match group 1 and 2 are codec, match group 3 is regular playlist url\n    // See https://tools.ietf.org/html/rfc8216 for HLS spec details\n    const playlistRegexp =\n      /#EXT-X-STREAM-INF:.*?(?:CODECS=\".*?([^.]*)?\\..*?,([^.]*)?\\..*?\".*?)?(?:\\n|\\r\\n)(.+)/g;\n    const match = playlistRegexp.exec(masterPlaylist);\n    const matchTwice = playlistRegexp.exec(masterPlaylist);\n\n    // Get the regular playlist url from the input (master) playlist, falling back to the input playlist if necessary\n    // This avoids the player having to load and parse the master playlist again before loading the regular playlist\n    let playlist_url: string;\n    if (match !== null && matchTwice === null) {\n      // Only send the regular playlist url if we match exactly once\n      playlist_url = new URL(match[3], this._url).href;\n    } else {\n      playlist_url = this._url;\n    }\n\n    const codecs = match ? `${match[1]},${match[2]}` : undefined;\n\n    this._reportStreams(codecs);\n\n    // If codec is HEVC and ExoPlayer is supported, use ExoPlayer.\n    if (\n      useExoPlayer &&\n      (codecs?.includes(\"hevc\") || codecs?.includes(\"hev1\"))\n    ) {\n      this._renderHLSExoPlayer(playlist_url);\n    } else if (Hls.isSupported()) {\n      this._renderHLSPolyfill(this._videoEl, Hls, playlist_url);\n    } else {\n      this._renderHLSNative(this._videoEl, playlist_url);\n    }\n  }\n\n  private async _renderHLSExoPlayer(url: string) {\n    this._exoPlayer = true;\n    window.addEventListener(\"resize\", this._resizeExoPlayer);\n    this.updateComplete.then(() => nextRender()).then(this._resizeExoPlayer);\n    this._videoEl.style.visibility = \"hidden\";\n    await this.hass!.auth.external!.fireMessage({\n      type: \"exoplayer/play_hls\",\n      payload: {\n        url,\n        muted: this.muted,\n      },\n    });\n  }\n\n  private _resizeExoPlayer = () => {\n    if (!this._videoEl) {\n      return;\n    }\n    const rect = this._videoEl.getBoundingClientRect();\n    this.hass!.auth.external!.fireMessage({\n      type: \"exoplayer/resize\",\n      payload: {\n        left: rect.left,\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n      },\n    });\n  };\n\n  private _isLLHLSSupported(): boolean {\n    // LL-HLS keeps multiple requests in flight, which can run into browser limitations without\n    // an http/2 proxy to pipeline requests. However, a small number of streams active at\n    // once should be OK.\n    // The stream count may be incremented multiple times before this function is called to check\n    // the count e.g. when loading a page with many streams on it. The race can work in our favor\n    // so we now have a better idea on if we'll use too many browser connections later.\n    if (HaHLSPlayer.streamCount <= 2) {\n      return true;\n    }\n    if (\n      !(\"performance\" in window) ||\n      performance.getEntriesByType(\"resource\").length === 0\n    ) {\n      return false;\n    }\n    const perfEntry = performance.getEntriesByType(\n      \"resource\"\n    )[0] as PerformanceResourceTiming;\n    return \"nextHopProtocol\" in perfEntry && perfEntry.nextHopProtocol === \"h2\";\n  }\n\n  private async _renderHLSPolyfill(\n    videoEl: HTMLVideoElement,\n    Hls: typeof HlsType,\n    url: string\n  ) {\n    const hls = new Hls({\n      backBufferLength: 60,\n      fragLoadingTimeOut: 30000,\n      manifestLoadingTimeOut: 30000,\n      levelLoadingTimeOut: 30000,\n      maxLiveSyncPlaybackRate: 2,\n      lowLatencyMode: this._isLLHLSSupported(),\n    });\n    this._hlsPolyfillInstance = hls;\n    hls.attachMedia(videoEl);\n    hls.on(Hls.Events.MEDIA_ATTACHED, () => {\n      this._resetError();\n      hls.loadSource(url);\n    });\n    hls.on(Hls.Events.FRAG_LOADED, (_event, _data: any) => {\n      this._resetError();\n    });\n    hls.on(Hls.Events.ERROR, (_event, data: any) => {\n      // Some errors are recovered automatically by the hls player itself, and the others handled\n      // in this function require special actions to recover. Errors retried in this function\n      // are done with backoff to not cause unnecessary failures.\n      if (!data.fatal) {\n        return;\n      }\n      if (data.type === Hls.ErrorTypes.NETWORK_ERROR) {\n        switch (data.details) {\n          case Hls.ErrorDetails.MANIFEST_LOAD_ERROR: {\n            let error = \"Error starting stream, see logs for details\";\n            if (\n              data.response !== undefined &&\n              data.response.code !== undefined\n            ) {\n              if (data.response.code >= 500) {\n                error += \" (Server failure)\";\n              } else if (data.response.code >= 400) {\n                error += \" (Stream never started)\";\n              } else {\n                error += \" (\" + data.response.code + \")\";\n              }\n            }\n            this._setRetryableError(error);\n            break;\n          }\n          case Hls.ErrorDetails.MANIFEST_LOAD_TIMEOUT:\n            this._setRetryableError(\"Timeout while starting stream\");\n            break;\n          default:\n            this._setRetryableError(\"Stream network error\");\n            break;\n        }\n        hls.startLoad();\n      } else if (data.type === Hls.ErrorTypes.MEDIA_ERROR) {\n        this._setRetryableError(\"Error with media stream contents\");\n        hls.recoverMediaError();\n      } else {\n        this._setFatalError(\"Error playing stream\");\n      }\n    });\n  }\n\n  private async _renderHLSNative(videoEl: HTMLVideoElement, url: string) {\n    videoEl.src = url;\n    videoEl.addEventListener(\"loadedmetadata\", () => {\n      videoEl.play();\n    });\n  }\n\n  private _cleanUp() {\n    if (this._hlsPolyfillInstance) {\n      this._hlsPolyfillInstance.destroy();\n      this._hlsPolyfillInstance = undefined;\n    }\n    if (this._exoPlayer) {\n      window.removeEventListener(\"resize\", this._resizeExoPlayer);\n      this.hass!.auth.external!.fireMessage({ type: \"exoplayer/stop\" });\n      this._exoPlayer = false;\n    }\n    if (this._videoEl) {\n      this._videoEl.removeAttribute(\"src\");\n      this._videoEl.load();\n    }\n  }\n\n  private _resetError() {\n    this._error = undefined;\n    this._errorIsFatal = false;\n  }\n\n  private _setFatalError(errorMessage: string) {\n    this._error = errorMessage;\n    this._errorIsFatal = true;\n    fireEvent(this, \"streams\", { hasAudio: false, hasVideo: false });\n  }\n\n  private _setRetryableError(errorMessage: string) {\n    this._error = errorMessage;\n    this._errorIsFatal = false;\n    fireEvent(this, \"streams\", { hasAudio: false, hasVideo: false });\n  }\n\n  private _reportStreams(codecs?: string) {\n    const codec = codecs?.split(\",\");\n    fireEvent(this, \"streams\", {\n      hasAudio: codec?.includes(\"mp4a\") ?? false,\n      hasVideo: codec?.includes(\"mp4a\")\n        ? codec?.length > 1\n        : Boolean(codec?.length),\n    });\n  }\n\n  private _loadedData() {\n    fireEvent(this, \"load\");\n  }\n\n  static styles = css`\n    :host,\n    video {\n      display: block;\n    }\n\n    video {\n      width: 100%;\n      max-height: var(--video-max-height, calc(100vh - 97px));\n    }\n\n    .fatal {\n      display: block;\n      padding: 100px 16px;\n    }\n\n    .retry {\n      display: block;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-hls-player\": HaHLSPlayer;\n  }\n}\n","import type { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { LitElement, html } from \"lit\";\nimport type { nothing, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { FlowType } from \"../../../data/data_entry_flow\";\nimport type { GenericPreview } from \"../../../data/preview\";\nimport { subscribePreviewGeneric } from \"../../../data/preview\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./entity-preview-row\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\n\n@customElement(\"flow-preview-generic\")\nexport class FlowPreviewGeneric extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public flowType!: FlowType;\n\n  public handler!: string;\n\n  @property() public domain!: string;\n\n  @property({ attribute: false }) public stepId!: string;\n\n  @property({ attribute: false }) public flowId!: string;\n\n  @property({ attribute: false }) public stepData!: Record<string, any>;\n\n  @state() protected _preview?: HassEntity;\n\n  @state() protected _error?: string;\n\n  private _unsub?: Promise<UnsubscribeFunc>;\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub.then((unsub) => unsub());\n      this._unsub = undefined;\n    }\n  }\n\n  willUpdate(changedProps) {\n    if (changedProps.has(\"stepData\")) {\n      this._debouncedSubscribePreview();\n    }\n  }\n\n  protected render(): TemplateResult | typeof nothing {\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`;\n    }\n    return html`<entity-preview-row\n      .hass=${this.hass}\n      .stateObj=${this._preview}\n    ></entity-preview-row>`;\n  }\n\n  private _setPreview = (preview: GenericPreview) => {\n    const now = new Date().toISOString();\n    this._preview = {\n      entity_id: `${this.stepId}.___flow_preview___`,\n      last_changed: now,\n      last_updated: now,\n      context: { id: \"\", parent_id: null, user_id: null },\n      ...preview,\n    };\n  };\n\n  private _debouncedSubscribePreview = debounce(() => {\n    this._subscribePreview();\n  }, 250);\n\n  private async _subscribePreview() {\n    if (this._unsub) {\n      (await this._unsub)();\n      this._unsub = undefined;\n    }\n    if (this.flowType !== \"config_flow\" && this.flowType !== \"options_flow\") {\n      return;\n    }\n    try {\n      this._unsub = subscribePreviewGeneric(\n        this.hass,\n        this.domain,\n        this.flowId,\n        this.flowType,\n        this.stepData,\n        this._setPreview\n      );\n      fireEvent(this, \"set-flow-errors\", { errors: {} });\n    } catch (err: any) {\n      if (typeof err.message === \"string\") {\n        this._error = err.message;\n      } else {\n        this._error = undefined;\n        fireEvent(this, \"set-flow-errors\", err.message);\n      }\n      this._unsub = undefined;\n      this._preview = undefined;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"flow-preview-generic\": FlowPreviewGeneric;\n  }\n}\n","import { html, nothing } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FlowPreviewGeneric } from \"./flow-preview-generic\";\nimport \"../../../components/ha-hls-player\";\nimport \"../../../components/ha-spinner\";\n\n@customElement(\"flow-preview-generic_camera\")\nclass FlowPreviewGenericCamera extends FlowPreviewGeneric {\n  protected override render() {\n    if (!this._preview) {\n      return nothing;\n    }\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`;\n    }\n\n    const stillUrl = this._preview.attributes.still_url;\n    const streamUrl = this._preview.attributes.stream_url;\n\n    return html` ${stillUrl\n      ? html`<p>Still image:</p>\n          <p>\n            <img src=${stillUrl} alt=\"Still preview\" />\n          </p>`\n      : \"\"}\n    ${streamUrl\n      ? html`<p>Stream:</p>\n          <ha-spinner\n            class=\"render-spinner\"\n            id=\"hls-load-spinner\"\n            size=\"large\"\n          ></ha-spinner>\n          <ha-hls-player\n            autoplay\n            playsinline\n            .hass=${this.hass}\n            .url=${streamUrl}\n            @load=${this._videoLoaded}\n          ></ha-hls-player>`\n      : \"\"}`;\n  }\n\n  private _videoLoaded() {\n    this.shadowRoot!.getElementById(\"hls-load-spinner\")?.remove();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"flow-preview-generic_camera\": FlowPreviewGenericCamera;\n  }\n}\n"],"names":["HaHLSPlayer","LitElement","connectedCallback","super","streamCount","this","hasUpdated","_resetError","_startHls","disconnectedCallback","_cleanUp","render","html","_t","_","_error","_t2","_errorIsFatal","_t3","posterUrl","autoPlay","muted","playsInline","controls","_loadedData","styleMap","height","aspectRatio","objectFit","fitMode","updated","changedProps","entityChanged","has","urlChanged","_getStreamUrlFromEntityId","url","_url","isComponentLoaded","hass","entityid","fetchStreamUrl","hassUrl","err","console","error","fireEvent","hasAudio","hasVideo","_setFatalError","_this$hass$auth$exter","masterPlaylistPromise","fetch","Hls","default","isConnected","hlsSupported","isSupported","_videoEl","canPlayType","localize","useExoPlayer","allowExoPlayer","auth","external","config","hasExoPlayer","masterPlaylist","text","playlistRegexp","match","exec","matchTwice","playlist_url","URL","href","codecs","undefined","_reportStreams","includes","_renderHLSExoPlayer","_renderHLSPolyfill","_renderHLSNative","_exoPlayer","window","addEventListener","_resizeExoPlayer","updateComplete","then","nextRender","style","visibility","fireMessage","type","payload","_isLLHLSSupported","performance","getEntriesByType","length","perfEntry","nextHopProtocol","videoEl","hls","backBufferLength","fragLoadingTimeOut","manifestLoadingTimeOut","levelLoadingTimeOut","maxLiveSyncPlaybackRate","lowLatencyMode","_hlsPolyfillInstance","attachMedia","on","Events","MEDIA_ATTACHED","loadSource","FRAG_LOADED","_event","_data","ERROR","data","fatal","ErrorTypes","NETWORK_ERROR","details","ErrorDetails","MANIFEST_LOAD_ERROR","response","code","_setRetryableError","MANIFEST_LOAD_TIMEOUT","startLoad","MEDIA_ERROR","recoverMediaError","src","play","destroy","removeEventListener","removeAttribute","load","errorMessage","_codec$includes","codec","split","Boolean","args","rect","getBoundingClientRect","left","top","right","bottom","styles","css","_t4","attribute","FlowPreviewGeneric","_unsub","unsub","willUpdate","_debouncedSubscribePreview","_preview","_subscribePreview","flowType","subscribePreviewGeneric","domain","flowId","stepData","_setPreview","errors","message","preview","now","Date","toISOString","Object","assign","entity_id","stepId","last_changed","last_updated","context","id","parent_id","user_id","debounce","FlowPreviewGenericCamera","nothing","stillUrl","attributes","still_url","streamUrl","stream_url","_videoLoaded","_this$shadowRoot$getE","shadowRoot","getElementById","remove"],"mappings":"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"}