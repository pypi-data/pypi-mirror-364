{"version":3,"file":"9902.16e7a4f4357ec0b6.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-media.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/media-player/show-media-browser-dialog.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/media-player.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/tts.ts"],"sourcesContent":["import { mdiPlayBox, mdiPlus } from \"@mdi/js\";\nimport type { PropertyValues } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport { getSignedPath } from \"../../data/auth\";\nimport type { MediaPickedEvent } from \"../../data/media-player\";\nimport {\n  MediaClassBrowserSettings,\n  MediaPlayerEntityFeature,\n} from \"../../data/media-player\";\nimport type { MediaSelector, MediaSelectorValue } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport { brandsUrl, extractDomainFromBrandUrl } from \"../../util/brands-url\";\nimport \"../ha-alert\";\nimport \"../ha-form/ha-form\";\nimport type { SchemaUnion } from \"../ha-form/types\";\nimport { showMediaBrowserDialog } from \"../media-player/show-media-browser-dialog\";\n\nconst MANUAL_SCHEMA = [\n  { name: \"media_content_id\", required: false, selector: { text: {} } },\n  { name: \"media_content_type\", required: false, selector: { text: {} } },\n] as const;\n\n@customElement(\"ha-selector-media\")\nexport class HaMediaSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: MediaSelector;\n\n  @property({ attribute: false }) public value?: MediaSelectorValue;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean, reflect: true }) public required = true;\n\n  @state() private _thumbnailUrl?: string | null;\n\n  willUpdate(changedProps: PropertyValues<this>) {\n    if (changedProps.has(\"value\")) {\n      const thumbnail = this.value?.metadata?.thumbnail;\n      const oldThumbnail = (changedProps.get(\"value\") as this[\"value\"])\n        ?.metadata?.thumbnail;\n      if (thumbnail === oldThumbnail) {\n        return;\n      }\n      if (thumbnail && thumbnail.startsWith(\"/\")) {\n        this._thumbnailUrl = undefined;\n        // Thumbnails served by local API require authentication\n        getSignedPath(this.hass, thumbnail).then((signedPath) => {\n          this._thumbnailUrl = signedPath.path;\n        });\n      } else if (\n        thumbnail &&\n        thumbnail.startsWith(\"https://brands.home-assistant.io\")\n      ) {\n        // The backend is not aware of the theme used by the users,\n        // so we rewrite the URL to show a proper icon\n        this._thumbnailUrl = brandsUrl({\n          domain: extractDomainFromBrandUrl(thumbnail),\n          type: \"icon\",\n          useFallback: true,\n          darkOptimized: this.hass.themes?.darkMode,\n        });\n      } else {\n        this._thumbnailUrl = thumbnail;\n      }\n    }\n  }\n\n  protected render() {\n    const stateObj = this.value?.entity_id\n      ? this.hass.states[this.value.entity_id]\n      : undefined;\n\n    const supportsBrowse =\n      !this.value?.entity_id ||\n      (stateObj &&\n        supportsFeature(stateObj, MediaPlayerEntityFeature.BROWSE_MEDIA));\n\n    return html`<ha-entity-picker\n        .hass=${this.hass}\n        .value=${this.value?.entity_id}\n        .label=${this.label ||\n        this.hass.localize(\"ui.components.selectors.media.pick_media_player\")}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .required=${this.required}\n        include-domains='[\"media_player\"]'\n        allow-custom-entity\n        @value-changed=${this._entityChanged}\n      ></ha-entity-picker>\n      ${!supportsBrowse\n        ? html`<ha-alert>\n              ${this.hass.localize(\n                \"ui.components.selectors.media.browse_not_supported\"\n              )}\n            </ha-alert>\n            <ha-form\n              .hass=${this.hass}\n              .data=${this.value}\n              .schema=${MANUAL_SCHEMA}\n              .computeLabel=${this._computeLabelCallback}\n            ></ha-form>`\n        : html`<ha-card\n            outlined\n            @click=${this._pickMedia}\n            class=${this.disabled || !this.value?.entity_id ? \"disabled\" : \"\"}\n          >\n            <div\n              class=\"thumbnail ${classMap({\n                portrait:\n                  !!this.value?.metadata?.media_class &&\n                  MediaClassBrowserSettings[\n                    this.value.metadata.children_media_class ||\n                      this.value.metadata.media_class\n                  ].thumbnail_ratio === \"portrait\",\n              })}\"\n            >\n              ${this.value?.metadata?.thumbnail\n                ? html`\n                    <div\n                      class=\"${classMap({\n                        \"centered-image\":\n                          !!this.value.metadata.media_class &&\n                          [\"app\", \"directory\"].includes(\n                            this.value.metadata.media_class\n                          ),\n                      })}\n                        image\"\n                      style=${this._thumbnailUrl\n                        ? `background-image: url(${this._thumbnailUrl});`\n                        : \"\"}\n                    ></div>\n                  `\n                : html`\n                    <div class=\"icon-holder image\">\n                      <ha-svg-icon\n                        class=\"folder\"\n                        .path=${!this.value?.media_content_id\n                          ? mdiPlus\n                          : this.value?.metadata?.media_class\n                            ? MediaClassBrowserSettings[\n                                this.value.metadata.media_class === \"directory\"\n                                  ? this.value.metadata.children_media_class ||\n                                    this.value.metadata.media_class\n                                  : this.value.metadata.media_class\n                              ].icon\n                            : mdiPlayBox}\n                      ></ha-svg-icon>\n                    </div>\n                  `}\n            </div>\n            <div class=\"title\">\n              ${!this.value?.media_content_id\n                ? this.hass.localize(\"ui.components.selectors.media.pick_media\")\n                : this.value.metadata?.title || this.value.media_content_id}\n            </div>\n          </ha-card>`}`;\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<typeof MANUAL_SCHEMA>\n  ): string =>\n    this.hass.localize(`ui.components.selectors.media.${schema.name}`);\n\n  private _entityChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        entity_id: ev.detail.value,\n        media_content_id: \"\",\n        media_content_type: \"\",\n      },\n    });\n  }\n\n  private _pickMedia() {\n    showMediaBrowserDialog(this, {\n      action: \"pick\",\n      entityId: this.value!.entity_id!,\n      navigateIds: this.value!.metadata?.navigateIds,\n      mediaPickedCallback: (pickedMedia: MediaPickedEvent) => {\n        fireEvent(this, \"value-changed\", {\n          value: {\n            ...this.value,\n            media_content_id: pickedMedia.item.media_content_id,\n            media_content_type: pickedMedia.item.media_content_type,\n            metadata: {\n              title: pickedMedia.item.title,\n              thumbnail: pickedMedia.item.thumbnail,\n              media_class: pickedMedia.item.media_class,\n              children_media_class: pickedMedia.item.children_media_class,\n              navigateIds: pickedMedia.navigateIds?.map((id) => ({\n                media_content_type: id.media_content_type,\n                media_content_id: id.media_content_id,\n              })),\n            },\n          },\n        });\n      },\n    });\n  }\n\n  static styles = css`\n    ha-entity-picker {\n      display: block;\n      margin-bottom: 16px;\n    }\n    mwc-button {\n      margin-top: 8px;\n    }\n    ha-alert {\n      display: block;\n      margin-bottom: 16px;\n    }\n    ha-card {\n      position: relative;\n      width: 200px;\n      box-sizing: border-box;\n      cursor: pointer;\n    }\n    ha-card.disabled {\n      pointer-events: none;\n      color: var(--disabled-text-color);\n    }\n    ha-card .thumbnail {\n      width: 100%;\n      position: relative;\n      box-sizing: border-box;\n      transition: padding-bottom 0.1s ease-out;\n      padding-bottom: 100%;\n    }\n    ha-card .thumbnail.portrait {\n      padding-bottom: 150%;\n    }\n    ha-card .image {\n      border-radius: 3px 3px 0 0;\n    }\n    .folder {\n      --mdc-icon-size: calc(var(--media-browse-item-size, 175px) * 0.4);\n    }\n    .title {\n      font-size: var(--ha-font-size-l);\n      padding-top: 16px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      margin-bottom: 16px;\n      padding-left: 16px;\n      padding-right: 4px;\n      padding-inline-start: 16px;\n      padding-inline-end: 4px;\n      white-space: nowrap;\n    }\n    .image {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    .centered-image {\n      margin: 0 8px;\n      background-size: contain;\n    }\n    .icon-holder {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-media\": HaMediaSelector;\n  }\n}\n","import { fireEvent } from \"../../common/dom/fire_event\";\nimport type {\n  MediaPickedEvent,\n  MediaPlayerBrowseAction,\n} from \"../../data/media-player\";\nimport type { MediaPlayerItemId } from \"./ha-media-player-browse\";\n\nexport interface MediaPlayerBrowseDialogParams {\n  action: MediaPlayerBrowseAction;\n  entityId: string;\n  mediaPickedCallback: (pickedMedia: MediaPickedEvent) => void;\n  navigateIds?: MediaPlayerItemId[];\n  minimumNavigateLevel?: number;\n}\n\nexport const showMediaBrowserDialog = (\n  element: HTMLElement,\n  dialogParams: MediaPlayerBrowseDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-media-player-browse\",\n    dialogImport: () => import(\"./dialog-media-player-browse\"),\n    dialogParams,\n  });\n};\n","import {\n  mdiAccountMusic,\n  mdiAccountMusicOutline,\n  mdiAlbum,\n  mdiApplication,\n  mdiDramaMasks,\n  mdiFileMusic,\n  mdiFolder,\n  mdiGamepadVariant,\n  mdiImage,\n  mdiMovie,\n  mdiMusic,\n  mdiPause,\n  mdiPlay,\n  mdiPlaylistMusic,\n  mdiPlayPause,\n  mdiPodcast,\n  mdiPower,\n  mdiRepeat,\n  mdiRepeatOff,\n  mdiRepeatOnce,\n  mdiShuffle,\n  mdiShuffleDisabled,\n  mdiSkipNext,\n  mdiSkipPrevious,\n  mdiStop,\n  mdiTelevisionClassic,\n  mdiVideo,\n  mdiWeb,\n} from \"@mdi/js\";\nimport type {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\nimport { supportsFeature } from \"../common/entity/supports-feature\";\nimport { stateActive } from \"../common/entity/state_active\";\nimport type { MediaPlayerItemId } from \"../components/media-player/ha-media-player-browse\";\nimport type { HomeAssistant, TranslationDict } from \"../types\";\nimport { isUnavailableState } from \"./entity\";\nimport { isTTSMediaSource } from \"./tts\";\n\ninterface MediaPlayerEntityAttributes extends HassEntityAttributeBase {\n  media_content_id?: string;\n  media_content_type?: string;\n  media_artist?: string;\n  media_playlist?: string;\n  media_series_title?: string;\n  media_season?: any;\n  media_episode?: any;\n  app_name?: string;\n  media_position_updated_at?: string | number | Date;\n  media_duration?: number;\n  media_position?: number;\n  media_title?: string;\n  media_channel?: string;\n  icon?: string;\n  entity_picture_local?: string;\n  is_volume_muted?: boolean;\n  volume_level?: number;\n  repeat?: string;\n  shuffle?: boolean;\n  source?: string;\n  source_list?: string[];\n  sound_mode?: string;\n  sound_mode_list?: string[];\n  group_members?: string[];\n}\n\nexport interface MediaPlayerEntity extends HassEntityBase {\n  attributes: MediaPlayerEntityAttributes;\n  state:\n    | \"playing\"\n    | \"paused\"\n    | \"idle\"\n    | \"off\"\n    | \"on\"\n    | \"unavailable\"\n    | \"unknown\"\n    | \"standby\"\n    | \"buffering\";\n}\n\nexport const enum MediaPlayerEntityFeature {\n  PAUSE = 1,\n  SEEK = 2,\n  VOLUME_SET = 4,\n  VOLUME_MUTE = 8,\n  PREVIOUS_TRACK = 16,\n  NEXT_TRACK = 32,\n\n  TURN_ON = 128,\n  TURN_OFF = 256,\n  PLAY_MEDIA = 512,\n  VOLUME_STEP = 1024,\n  SELECT_SOURCE = 2048,\n  STOP = 4096,\n  CLEAR_PLAYLIST = 8192,\n  PLAY = 16384,\n  SHUFFLE_SET = 32768,\n  SELECT_SOUND_MODE = 65536,\n  BROWSE_MEDIA = 131072,\n  REPEAT_SET = 262144,\n  GROUPING = 524288,\n}\n\nexport type MediaPlayerBrowseAction = \"pick\" | \"play\";\n\nexport const BROWSER_PLAYER = \"browser\";\n\nexport type MediaPlayerLayoutType = \"grid\" | \"list\" | \"auto\";\n\nexport interface MediaClassBrowserSetting {\n  icon: string;\n  thumbnail_ratio?: string;\n  layout?: \"grid\";\n  show_list_images?: boolean;\n}\n\nexport const MediaClassBrowserSettings: Record<\n  string,\n  MediaClassBrowserSetting\n> = {\n  album: { icon: mdiAlbum, layout: \"grid\" },\n  app: { icon: mdiApplication, layout: \"grid\", show_list_images: true },\n  artist: { icon: mdiAccountMusic, layout: \"grid\", show_list_images: true },\n  channel: {\n    icon: mdiTelevisionClassic,\n    thumbnail_ratio: \"portrait\",\n    layout: \"grid\",\n    show_list_images: true,\n  },\n  composer: {\n    icon: mdiAccountMusicOutline,\n    layout: \"grid\",\n    show_list_images: true,\n  },\n  contributing_artist: {\n    icon: mdiAccountMusic,\n    layout: \"grid\",\n    show_list_images: true,\n  },\n  directory: { icon: mdiFolder, layout: \"grid\", show_list_images: true },\n  episode: {\n    icon: mdiTelevisionClassic,\n    layout: \"grid\",\n    thumbnail_ratio: \"portrait\",\n    show_list_images: true,\n  },\n  game: {\n    icon: mdiGamepadVariant,\n    layout: \"grid\",\n    thumbnail_ratio: \"portrait\",\n  },\n  genre: { icon: mdiDramaMasks, layout: \"grid\", show_list_images: true },\n  image: { icon: mdiImage, layout: \"grid\", show_list_images: true },\n  movie: {\n    icon: mdiMovie,\n    thumbnail_ratio: \"portrait\",\n    layout: \"grid\",\n    show_list_images: true,\n  },\n  music: { icon: mdiMusic, show_list_images: true },\n  playlist: { icon: mdiPlaylistMusic, layout: \"grid\", show_list_images: true },\n  podcast: { icon: mdiPodcast, layout: \"grid\" },\n  season: {\n    icon: mdiTelevisionClassic,\n    layout: \"grid\",\n    thumbnail_ratio: \"portrait\",\n    show_list_images: true,\n  },\n  track: { icon: mdiFileMusic },\n  tv_show: {\n    icon: mdiTelevisionClassic,\n    layout: \"grid\",\n    thumbnail_ratio: \"portrait\",\n  },\n  url: { icon: mdiWeb },\n  video: { icon: mdiVideo, layout: \"grid\", show_list_images: true },\n};\n\nexport interface MediaPickedEvent {\n  item: MediaPlayerItem;\n  navigateIds: MediaPlayerItemId[];\n}\n\nexport interface MediaPlayerThumbnail {\n  content_type: string;\n  content: string;\n}\n\nexport interface ControlButton {\n  icon: string;\n  // Used as key for action as well as tooltip and aria-label translation key\n  action: keyof TranslationDict[\"ui\"][\"card\"][\"media_player\"];\n}\n\nexport interface MediaPlayerItem {\n  title: string;\n  media_content_type: string;\n  media_content_id: string;\n  media_class: keyof TranslationDict[\"ui\"][\"components\"][\"media-browser\"][\"class\"];\n  children_media_class?: string;\n  can_play: boolean;\n  can_expand: boolean;\n  thumbnail?: string;\n  children?: MediaPlayerItem[];\n  not_shown?: number;\n}\n\nexport const browseMediaPlayer = (\n  hass: HomeAssistant,\n  entityId: string,\n  mediaContentId?: string,\n  mediaContentType?: string\n): Promise<MediaPlayerItem> =>\n  hass.callWS<MediaPlayerItem>({\n    type: \"media_player/browse_media\",\n    entity_id: entityId,\n    media_content_id: mediaContentId,\n    media_content_type: mediaContentType,\n  });\n\nexport const getCurrentProgress = (stateObj: MediaPlayerEntity): number => {\n  let progress = stateObj.attributes.media_position!;\n\n  if (stateObj.state !== \"playing\") {\n    return progress;\n  }\n  progress +=\n    (Date.now() -\n      new Date(stateObj.attributes.media_position_updated_at!).getTime()) /\n    1000.0;\n  // Prevent negative values, so we do not go back to 59:59 at the start\n  // for example if there are slight clock sync deltas between backend and frontend and\n  // therefore media_position_updated_at might be slightly larger than Date.now().\n  return progress < 0 ? 0 : progress;\n};\n\nexport const computeMediaDescription = (\n  stateObj: MediaPlayerEntity\n): string => {\n  let secondaryTitle: string;\n\n  switch (stateObj.attributes.media_content_type) {\n    case \"music\":\n    case \"image\":\n      secondaryTitle = stateObj.attributes.media_artist!;\n      break;\n    case \"playlist\":\n      secondaryTitle =\n        stateObj.attributes.media_playlist || stateObj.attributes.media_artist!;\n      break;\n    case \"tvshow\":\n      secondaryTitle = stateObj.attributes.media_series_title!;\n      if (stateObj.attributes.media_season) {\n        secondaryTitle += \" S\" + stateObj.attributes.media_season;\n\n        if (stateObj.attributes.media_episode) {\n          secondaryTitle += \"E\" + stateObj.attributes.media_episode;\n        }\n      }\n      break;\n    case \"channel\":\n      secondaryTitle = stateObj.attributes.media_channel!;\n      break;\n    default:\n      secondaryTitle = stateObj.attributes.app_name || \"\";\n  }\n\n  return secondaryTitle;\n};\n\nexport const computeMediaControls = (\n  stateObj: MediaPlayerEntity,\n  useExtendedControls = false\n): ControlButton[] | undefined => {\n  if (!stateObj) {\n    return undefined;\n  }\n\n  const state = stateObj.state;\n\n  if (isUnavailableState(state)) {\n    return undefined;\n  }\n\n  if (!stateActive(stateObj)) {\n    return supportsFeature(stateObj, MediaPlayerEntityFeature.TURN_ON)\n      ? [\n          {\n            icon: mdiPower,\n            action: \"turn_on\",\n          },\n        ]\n      : undefined;\n  }\n\n  const buttons: ControlButton[] = [];\n\n  if (supportsFeature(stateObj, MediaPlayerEntityFeature.TURN_OFF)) {\n    buttons.push({\n      icon: mdiPower,\n      action: \"turn_off\",\n    });\n  }\n\n  const assumedState = stateObj.attributes.assumed_state === true;\n  const stateAttr = stateObj.attributes;\n\n  if (\n    (state === \"playing\" || state === \"paused\" || assumedState) &&\n    supportsFeature(stateObj, MediaPlayerEntityFeature.SHUFFLE_SET) &&\n    useExtendedControls\n  ) {\n    buttons.push({\n      icon: stateAttr.shuffle === true ? mdiShuffle : mdiShuffleDisabled,\n      action: \"shuffle_set\",\n    });\n  }\n\n  if (\n    (state === \"playing\" || state === \"paused\" || assumedState) &&\n    supportsFeature(stateObj, MediaPlayerEntityFeature.PREVIOUS_TRACK)\n  ) {\n    buttons.push({\n      icon: mdiSkipPrevious,\n      action: \"media_previous_track\",\n    });\n  }\n\n  if (\n    !assumedState &&\n    ((state === \"playing\" &&\n      (supportsFeature(stateObj, MediaPlayerEntityFeature.PAUSE) ||\n        supportsFeature(stateObj, MediaPlayerEntityFeature.STOP))) ||\n      ((state === \"paused\" || state === \"idle\") &&\n        supportsFeature(stateObj, MediaPlayerEntityFeature.PLAY)) ||\n      (state === \"on\" &&\n        (supportsFeature(stateObj, MediaPlayerEntityFeature.PLAY) ||\n          supportsFeature(stateObj, MediaPlayerEntityFeature.PAUSE))))\n  ) {\n    buttons.push({\n      icon:\n        state === \"on\"\n          ? mdiPlayPause\n          : state !== \"playing\"\n            ? mdiPlay\n            : supportsFeature(stateObj, MediaPlayerEntityFeature.PAUSE)\n              ? mdiPause\n              : mdiStop,\n      action:\n        state !== \"playing\"\n          ? \"media_play\"\n          : supportsFeature(stateObj, MediaPlayerEntityFeature.PAUSE)\n            ? \"media_pause\"\n            : \"media_stop\",\n    });\n  }\n\n  if (\n    assumedState &&\n    supportsFeature(stateObj, MediaPlayerEntityFeature.PLAY)\n  ) {\n    buttons.push({\n      icon: mdiPlay,\n      action: \"media_play\",\n    });\n  }\n\n  if (\n    assumedState &&\n    supportsFeature(stateObj, MediaPlayerEntityFeature.PAUSE)\n  ) {\n    buttons.push({\n      icon: mdiPause,\n      action: \"media_pause\",\n    });\n  }\n\n  if (\n    assumedState &&\n    supportsFeature(stateObj, MediaPlayerEntityFeature.STOP)\n  ) {\n    buttons.push({\n      icon: mdiStop,\n      action: \"media_stop\",\n    });\n  }\n\n  if (\n    (state === \"playing\" || state === \"paused\" || assumedState) &&\n    supportsFeature(stateObj, MediaPlayerEntityFeature.NEXT_TRACK)\n  ) {\n    buttons.push({\n      icon: mdiSkipNext,\n      action: \"media_next_track\",\n    });\n  }\n\n  if (\n    (state === \"playing\" || state === \"paused\" || assumedState) &&\n    supportsFeature(stateObj, MediaPlayerEntityFeature.REPEAT_SET) &&\n    useExtendedControls\n  ) {\n    buttons.push({\n      icon:\n        stateAttr.repeat === \"all\"\n          ? mdiRepeat\n          : stateAttr.repeat === \"one\"\n            ? mdiRepeatOnce\n            : mdiRepeatOff,\n      action: \"repeat_set\",\n    });\n  }\n\n  return buttons.length > 0 ? buttons : undefined;\n};\n\nexport const formatMediaTime = (seconds: number | undefined): string => {\n  if (seconds === undefined || seconds === Infinity) {\n    return \"\";\n  }\n\n  let secondsString = new Date(seconds * 1000).toISOString();\n  secondsString =\n    seconds > 3600\n      ? secondsString.substring(11, 16)\n      : secondsString.substring(14, 19);\n  return secondsString.replace(/^0+/, \"\").padStart(4, \"0\");\n};\n\nexport const cleanupMediaTitle = (title?: string): string | undefined => {\n  if (!title) {\n    return undefined;\n  }\n\n  const index = title.indexOf(\"?authSig=\");\n  let cleanTitle = index > 0 ? title.slice(0, index) : title;\n\n  if (cleanTitle.startsWith(\"http\")) {\n    cleanTitle = decodeURIComponent(cleanTitle.split(\"/\").pop()!);\n  }\n\n  return cleanTitle;\n};\n\n/**\n * Set volume of a media player entity.\n * @param hass Home Assistant object\n * @param entity_id entity ID of media player\n * @param volume_level number between 0..1\n * @returns\n */\nexport const setMediaPlayerVolume = (\n  hass: HomeAssistant,\n  entity_id: string,\n  volume_level: number\n) =>\n  hass.callService(\"media_player\", \"volume_set\", { entity_id, volume_level });\n\nexport const handleMediaControlClick = (\n  hass: HomeAssistant,\n  stateObj: MediaPlayerEntity,\n  action: string\n) =>\n  hass!.callService(\n    \"media_player\",\n    action,\n    action === \"shuffle_set\"\n      ? {\n          entity_id: stateObj!.entity_id,\n          shuffle: !stateObj!.attributes.shuffle,\n        }\n      : action === \"repeat_set\"\n        ? {\n            entity_id: stateObj!.entity_id,\n            repeat:\n              stateObj!.attributes.repeat === \"all\"\n                ? \"one\"\n                : stateObj!.attributes.repeat === \"off\"\n                  ? \"all\"\n                  : \"off\",\n          }\n        : {\n            entity_id: stateObj!.entity_id,\n          }\n  );\n\nexport const mediaPlayerPlayMedia = (\n  hass: HomeAssistant,\n  entity_id: string,\n  media_content_id: string,\n  media_content_type: string,\n  extra: {\n    enqueue?: \"play\" | \"next\" | \"add\" | \"replace\";\n    announce?: boolean;\n  } = {}\n) => {\n  // We set text-to-speech to announce.\n  if (\n    !extra.enqueue &&\n    extra.announce === undefined &&\n    isTTSMediaSource(media_content_id)\n  ) {\n    extra.announce = true;\n  }\n  return hass.callService(\"media_player\", \"play_media\", {\n    entity_id,\n    media_content_id,\n    media_content_type,\n    ...extra,\n  });\n};\n\nexport const mediaPlayerJoin = (\n  hass: HomeAssistant,\n  entity_id: string,\n  group_members: string[]\n) => hass.callService(\"media_player\", \"join\", { group_members }, { entity_id });\n\nexport const mediaPlayerUnjoin = (hass: HomeAssistant, entity_id: string) =>\n  hass.callService(\"media_player\", \"unjoin\", {}, { entity_id });\n","import type { HomeAssistant } from \"../types\";\n\nexport interface TTSEngine {\n  engine_id: string;\n  supported_languages?: string[];\n  name?: string;\n  deprecated: boolean;\n}\n\nexport interface TTSVoice {\n  voice_id: string;\n  name: string;\n}\n\nexport const convertTextToSpeech = (\n  hass: HomeAssistant,\n  data: {\n    platform: string;\n    message: string;\n    cache?: boolean;\n    language?: string;\n    options?: Record<string, unknown>;\n  }\n) => hass.callApi<{ url: string; path: string }>(\"POST\", \"tts_get_url\", data);\n\nconst TTS_MEDIA_SOURCE_PREFIX = \"media-source://tts/\";\n\nexport const isTTSMediaSource = (mediaContentId: string) =>\n  mediaContentId.startsWith(TTS_MEDIA_SOURCE_PREFIX);\n\nexport const getProviderFromTTSMediaSource = (mediaContentId: string) =>\n  mediaContentId.substring(TTS_MEDIA_SOURCE_PREFIX.length);\n\nexport const listTTSEngines = (\n  hass: HomeAssistant,\n  language?: string,\n  country?: string\n): Promise<{ providers: TTSEngine[] }> =>\n  hass.callWS({\n    type: \"tts/engine/list\",\n    language,\n    country,\n  });\n\nexport const getTTSEngine = (\n  hass: HomeAssistant,\n  engine_id: string\n): Promise<{ provider: TTSEngine }> =>\n  hass.callWS({\n    type: \"tts/engine/get\",\n    engine_id,\n  });\n\nexport const listTTSVoices = (\n  hass: HomeAssistant,\n  engine_id: string,\n  language: string\n): Promise<{ voices: TTSVoice[] | null }> =>\n  hass.callWS({\n    type: \"tts/engine/voices\",\n    engine_id,\n    language,\n  });\n"],"names":["MANUAL_SCHEMA","name","required","selector","text","HaMediaSelector","LitElement","willUpdate","changedProps","has","_this$value","_changedProps$get","thumbnail","value","metadata","get","startsWith","this","_thumbnailUrl","undefined","getSignedPath","hass","then","signedPath","path","_this$hass$themes","brandsUrl","domain","extractDomainFromBrandUrl","type","useFallback","darkOptimized","themes","darkMode","render","_this$value2","_this$value3","_this$value4","_this$value5","_this$value6","_this$value7","_this$value8","_this$value9","_this$value0","_this$value$metadata","stateObj","entity_id","states","supportsBrowse","supportsFeature","MediaPlayerEntityFeature","html","_t","_","label","localize","disabled","helper","_entityChanged","_t3","_pickMedia","classMap","portrait","media_class","MediaClassBrowserSettings","children_media_class","thumbnail_ratio","_t4","includes","_t5","media_content_id","icon","title","_t2","_computeLabelCallback","ev","stopPropagation","fireEvent","detail","media_content_type","_this$value$metadata2","showMediaBrowserDialog","action","entityId","navigateIds","mediaPickedCallback","pickedMedia","_pickedMedia$navigate","Object","assign","item","map","id","args","schema","styles","css","_t6","attribute","Boolean","reflect","element","dialogParams","dialogTag","dialogImport","BROWSER_PLAYER","album","layout","app","show_list_images","artist","mdiAccountMusic","channel","mdiTelevisionClassic","composer","contributing_artist","directory","episode","game","genre","image","movie","music","playlist","podcast","season","track","tv_show","url","video","browseMediaPlayer","mediaContentId","mediaContentType","callWS","convertTextToSpeech","data","callApi","TTS_MEDIA_SOURCE_PREFIX","isTTSMediaSource","getProviderFromTTSMediaSource","substring","listTTSEngines","language","country","getTTSEngine","engine_id","listTTSVoices"],"mappings":"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"}