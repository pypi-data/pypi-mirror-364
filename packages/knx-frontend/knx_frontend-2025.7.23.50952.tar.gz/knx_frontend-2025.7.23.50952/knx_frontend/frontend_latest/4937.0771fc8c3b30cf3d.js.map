{"version":3,"file":"4937.0771fc8c3b30cf3d.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/util/copy-clipboard.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-code-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-object.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-yaml-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/util/toast.ts"],"sourcesContent":["export const copyToClipboard = async (str, rootEl?: HTMLElement) => {\n  if (navigator.clipboard) {\n    try {\n      await navigator.clipboard.writeText(str);\n      return;\n    } catch {\n      // just continue with the fallback coding below\n    }\n  }\n\n  const root = rootEl ?? document.body;\n\n  const el = document.createElement(\"textarea\");\n  el.value = str;\n  root.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  root.removeChild(el);\n};\n","import type {\n  Completion,\n  CompletionContext,\n  CompletionResult,\n  CompletionSource,\n} from \"@codemirror/autocomplete\";\nimport type { Extension, TransactionSpec } from \"@codemirror/state\";\nimport type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport type { HassEntities } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { css, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\nconst renderIcon = (completion: Completion) => {\n  const icon = document.createElement(\"ha-icon\");\n  icon.icon = completion.label;\n  return icon;\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  public hass?: HomeAssistant;\n\n  // eslint-disable-next-line lit/no-native-attributes\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ attribute: \"read-only\", type: Boolean }) public readOnly = false;\n\n  @property({ type: Boolean }) public linewrap = false;\n\n  @property({ type: Boolean, attribute: \"autocomplete-entities\" })\n  public autocompleteEntities = false;\n\n  @property({ type: Boolean, attribute: \"autocomplete-icons\" })\n  public autocompleteIcons = false;\n\n  @property({ type: Boolean }) public error = false;\n\n  @state() private _value = \"\";\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  private _iconList?: Completion[];\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.highlightingFor(\n      this.codemirror.state,\n      [this._loadedCodeMirror.tags.comment]\n    );\n    return !!this.renderRoot.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    // Force update on reconnection so editor is recreated\n    if (this.hasUpdated) {\n      this.requestUpdate();\n    }\n    this.addEventListener(\"keydown\", stopPropagation);\n    // This is unreachable as editor will not exist yet,\n    // but focus should not behave like this for good a11y.\n    // (@steverep to fix in autofocus PR)\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"keydown\", stopPropagation);\n    this.updateComplete.then(() => {\n      this.codemirror!.destroy();\n      delete this.codemirror;\n    });\n  }\n\n  // Ensure CodeMirror module is loaded before any update\n  protected override async scheduleUpdate() {\n    this._loadedCodeMirror ??= await import(\"../resources/codemirror\");\n    super.scheduleUpdate();\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n    if (!this.codemirror) {\n      this._createCodeMirror();\n      return;\n    }\n    const transactions: TransactionSpec[] = [];\n    if (changedProps.has(\"mode\")) {\n      transactions.push({\n        effects: [\n          this._loadedCodeMirror!.langCompartment!.reconfigure(this._mode),\n          this._loadedCodeMirror!.foldingCompartment.reconfigure(\n            this._getFoldingExtensions()\n          ),\n        ],\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      transactions.push({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"linewrap\")) {\n      transactions.push({\n        effects: this._loadedCodeMirror!.linewrapCompartment!.reconfigure(\n          this.linewrap ? this._loadedCodeMirror!.EditorView.lineWrapping : []\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      transactions.push({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (transactions.length > 0) {\n      this.codemirror.dispatch(...transactions);\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private _createCodeMirror() {\n    if (!this._loadedCodeMirror) {\n      throw new Error(\"Cannot create editor before CodeMirror is loaded\");\n    }\n    const extensions: Extension[] = [\n      this._loadedCodeMirror.lineNumbers(),\n      this._loadedCodeMirror.history(),\n      this._loadedCodeMirror.drawSelection(),\n      this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n      this._loadedCodeMirror.rectangularSelection(),\n      this._loadedCodeMirror.crosshairCursor(),\n      this._loadedCodeMirror.highlightSelectionMatches(),\n      this._loadedCodeMirror.highlightActiveLine(),\n      this._loadedCodeMirror.indentationMarkers({\n        thickness: 0,\n        activeThickness: 1,\n        colors: {\n          activeLight: \"var(--secondary-text-color)\",\n          activeDark: \"var(--secondary-text-color)\",\n        },\n      }),\n      this._loadedCodeMirror.keymap.of([\n        ...this._loadedCodeMirror.defaultKeymap,\n        ...this._loadedCodeMirror.searchKeymap,\n        ...this._loadedCodeMirror.historyKeymap,\n        ...this._loadedCodeMirror.tabKeyBindings,\n        saveKeyBinding,\n      ]),\n      this._loadedCodeMirror.langCompartment.of(this._mode),\n      this._loadedCodeMirror.haTheme,\n      this._loadedCodeMirror.haSyntaxHighlighting,\n      this._loadedCodeMirror.readonlyCompartment.of(\n        this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n      ),\n      this._loadedCodeMirror.linewrapCompartment.of(\n        this.linewrap ? this._loadedCodeMirror.EditorView.lineWrapping : []\n      ),\n      this._loadedCodeMirror.EditorView.updateListener.of(this._onUpdate),\n      this._loadedCodeMirror.foldingCompartment.of(\n        this._getFoldingExtensions()\n      ),\n    ];\n\n    if (!this.readOnly) {\n      const completionSources: CompletionSource[] = [];\n      if (this.autocompleteEntities && this.hass) {\n        completionSources.push(this._entityCompletions.bind(this));\n      }\n      if (this.autocompleteIcons) {\n        completionSources.push(this._mdiCompletions.bind(this));\n      }\n      if (completionSources.length > 0) {\n        extensions.push(\n          this._loadedCodeMirror.autocompletion({\n            override: completionSources,\n            maxRenderedOptions: 10,\n          })\n        );\n      }\n    }\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions,\n      }),\n      parent: this.renderRoot,\n    });\n  }\n\n  private _getStates = memoizeOne((states: HassEntities): Completion[] => {\n    if (!states) {\n      return [];\n    }\n    const options = Object.keys(states).map((key) => ({\n      type: \"variable\",\n      label: key,\n      detail: states[key].attributes.friendly_name,\n      info: `State: ${states[key].state}`,\n    }));\n\n    return options;\n  });\n\n  private _entityCompletions(\n    context: CompletionContext\n  ): CompletionResult | null | Promise<CompletionResult | null> {\n    const entityWord = context.matchBefore(/[a-z_]{3,}\\.\\w*/);\n\n    if (\n      !entityWord ||\n      (entityWord.from === entityWord.to && !context.explicit)\n    ) {\n      return null;\n    }\n\n    const states = this._getStates(this.hass!.states);\n\n    if (!states || !states.length) {\n      return null;\n    }\n\n    return {\n      from: Number(entityWord.from),\n      options: states,\n      validFor: /^[a-z_]{3,}\\.\\w*$/,\n    };\n  }\n\n  private _getIconItems = async (): Promise<Completion[]> => {\n    if (!this._iconList) {\n      let iconList: {\n        name: string;\n        keywords: string[];\n      }[];\n      if (__SUPERVISOR__) {\n        iconList = [];\n      } else {\n        iconList = (await import(\"../../build/mdi/iconList.json\")).default;\n      }\n\n      this._iconList = iconList.map((icon) => ({\n        type: \"variable\",\n        label: `mdi:${icon.name}`,\n        detail: icon.keywords.join(\", \"),\n        info: renderIcon,\n      }));\n    }\n\n    return this._iconList;\n  };\n\n  private async _mdiCompletions(\n    context: CompletionContext\n  ): Promise<CompletionResult | null> {\n    const match = context.matchBefore(/mdi:\\S*/);\n\n    if (!match || (match.from === match.to && !context.explicit)) {\n      return null;\n    }\n\n    const iconItems = await this._getIconItems();\n\n    return {\n      from: Number(match.from),\n      options: iconItems,\n      validFor: /^mdi:\\S*$/,\n    };\n  }\n\n  private _onUpdate = (update: ViewUpdate): void => {\n    if (!update.docChanged) {\n      return;\n    }\n    this._value = update.state.doc.toString();\n    fireEvent(this, \"value-changed\", { value: this._value });\n  };\n\n  private _getFoldingExtensions = (): Extension => {\n    if (this.mode === \"yaml\") {\n      return [\n        this._loadedCodeMirror!.foldGutter(),\n        this._loadedCodeMirror!.foldingOnIndent,\n      ];\n    }\n\n    return [];\n  };\n\n  static styles = css`\n    :host(.error-state) .cm-gutters {\n      border-color: var(--error-state-color, red);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import type { PropertyValues } from \"lit\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-yaml-editor\";\nimport \"../ha-input-helper-text\";\nimport type { HaYamlEditor } from \"../ha-yaml-editor\";\n\n@customElement(\"ha-selector-object\")\nexport class HaObjectSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @query(\"ha-yaml-editor\", true) private _yamlEditor!: HaYamlEditor;\n\n  private _valueChangedFromChild = false;\n\n  protected render() {\n    return html`<ha-yaml-editor\n        .hass=${this.hass}\n        .readonly=${this.disabled}\n        .label=${this.label}\n        .required=${this.required}\n        .placeholder=${this.placeholder}\n        .defaultValue=${this.value}\n        @value-changed=${this._handleChange}\n      ></ha-yaml-editor>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"} `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"value\") && !this._valueChangedFromChild) {\n      this._yamlEditor.setValue(this.value);\n    }\n    this._valueChangedFromChild = false;\n  }\n\n  private _handleChange(ev) {\n    this._valueChangedFromChild = true;\n    const value = ev.target.value;\n    if (!ev.target.isValid) {\n      return;\n    }\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-object\": HaObjectSelector;\n  }\n}\n","import type { Schema } from \"js-yaml\";\nimport { DEFAULT_SCHEMA, dump, load } from \"js-yaml\";\nimport type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./ha-code-editor\";\nimport { showToast } from \"../util/toast\";\nimport { copyToClipboard } from \"../common/util/copy-clipboard\";\nimport type { HaCodeEditor } from \"./ha-code-editor\";\nimport \"./ha-button\";\n\nconst isEmpty = (obj: Record<string, unknown>): boolean => {\n  if (typeof obj !== \"object\" || obj === null) {\n    return false;\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property({ attribute: false }) public yamlSchema: Schema = DEFAULT_SCHEMA;\n\n  @property({ attribute: false }) public defaultValue?: any;\n\n  @property({ attribute: \"is-valid\", type: Boolean }) public isValid = true;\n\n  @property() public label?: string;\n\n  @property({ attribute: \"auto-update\", type: Boolean }) public autoUpdate =\n    false;\n\n  @property({ attribute: \"read-only\", type: Boolean }) public readOnly = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ attribute: \"copy-clipboard\", type: Boolean })\n  public copyClipboard = false;\n\n  @property({ attribute: \"has-extra-actions\", type: Boolean })\n  public hasExtraActions = false;\n\n  @state() private _yaml = \"\";\n\n  @query(\"ha-code-editor\") _codeEditor?: HaCodeEditor;\n\n  public setValue(value): void {\n    try {\n      this._yaml = !isEmpty(value)\n        ? dump(value, {\n            schema: this.yamlSchema,\n            quotingType: '\"',\n            noRefs: true,\n          })\n        : \"\";\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err, value);\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n  }\n\n  protected firstUpdated(): void {\n    if (this.defaultValue !== undefined) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected willUpdate(changedProperties: PropertyValues<this>): void {\n    super.willUpdate(changedProperties);\n    if (this.autoUpdate && changedProperties.has(\"value\")) {\n      this.setValue(this.value);\n    }\n  }\n\n  public focus(): void {\n    if (this._codeEditor?.codemirror) {\n      this._codeEditor?.codemirror.focus();\n    }\n  }\n\n  protected render() {\n    if (this._yaml === undefined) {\n      return nothing;\n    }\n    return html`\n      ${this.label\n        ? html`<p>${this.label}${this.required ? \" *\" : \"\"}</p>`\n        : nothing}\n      <ha-code-editor\n        .hass=${this.hass}\n        .value=${this._yaml}\n        .readOnly=${this.readOnly}\n        mode=\"yaml\"\n        autocomplete-entities\n        autocomplete-icons\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n        dir=\"ltr\"\n      ></ha-code-editor>\n      ${this.copyClipboard || this.hasExtraActions\n        ? html`\n            <div class=\"card-actions\">\n              ${this.copyClipboard\n                ? html`\n                    <ha-button @click=${this._copyYaml}>\n                      ${this.hass.localize(\n                        \"ui.components.yaml-editor.copy_to_clipboard\"\n                      )}\n                    </ha-button>\n                  `\n                : nothing}\n              <slot name=\"extra-actions\"></slot>\n            </div>\n          `\n        : nothing}\n    `;\n  }\n\n  private _onChange(ev: CustomEvent): void {\n    ev.stopPropagation();\n    this._yaml = ev.detail.value;\n    let parsed;\n    let isValid = true;\n    let errorMsg;\n\n    if (this._yaml) {\n      try {\n        parsed = load(this._yaml, { schema: this.yamlSchema });\n      } catch (err: any) {\n        // Invalid YAML\n        isValid = false;\n        errorMsg = `${this.hass.localize(\"ui.components.yaml-editor.error\", { reason: err.reason })}${err.mark ? ` (${this.hass.localize(\"ui.components.yaml-editor.error_location\", { line: err.mark.line + 1, column: err.mark.column + 1 })})` : \"\"}`;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", {\n      value: parsed,\n      isValid,\n      errorMsg,\n    } as any);\n  }\n\n  get yaml() {\n    return this._yaml;\n  }\n\n  private async _copyYaml(): Promise<void> {\n    if (this.yaml) {\n      await copyToClipboard(this.yaml);\n      showToast(this, {\n        message: this.hass.localize(\"ui.common.copied_clipboard\"),\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .card-actions {\n          border-radius: var(\n            --actions-border-radius,\n            0px 0px var(--ha-card-border-radius, 12px)\n              var(--ha-card-border-radius, 12px)\n          );\n          border: 1px solid var(--divider-color);\n          padding: 5px 16px;\n        }\n        ha-code-editor {\n          flex-grow: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n","import { fireEvent } from \"../common/dom/fire_event\";\nimport type { ShowToastParams } from \"../managers/notification-manager\";\n\nexport const showToast = (el: HTMLElement, params: ShowToastParams) =>\n  fireEvent(el, \"hass-notification\", params);\n"],"names":["copyToClipboard","str","rootEl","navigator","clipboard","writeText","root","document","body","el","createElement","value","appendChild","select","execCommand","removeChild","saveKeyBinding","key","run","view","fireEvent","dom","renderIcon","completion","icon","label","HaCodeEditor","ReactiveElement","this","_value","codemirror","state","doc","toString","hasComments","_loadedCodeMirror","className","highlightingFor","tags","comment","renderRoot","querySelector","connectedCallback","super","hasUpdated","requestUpdate","addEventListener","stopPropagation","autofocus","focus","disconnectedCallback","removeEventListener","updateComplete","then","destroy","scheduleUpdate","update","changedProps","_createCodeMirror","transactions","has","push","effects","langCompartment","reconfigure","_mode","foldingCompartment","_getFoldingExtensions","readonlyCompartment","EditorView","editable","of","readOnly","linewrapCompartment","linewrap","lineWrapping","changes","from","to","length","insert","dispatch","classList","toggle","error","langs","mode","Error","extensions","lineNumbers","history","drawSelection","EditorState","allowMultipleSelections","rectangularSelection","crosshairCursor","highlightSelectionMatches","highlightActiveLine","indentationMarkers","thickness","activeThickness","colors","activeLight","activeDark","keymap","defaultKeymap","searchKeymap","historyKeymap","tabKeyBindings","haTheme","haSyntaxHighlighting","updateListener","_onUpdate","completionSources","autocompleteEntities","hass","_entityCompletions","bind","autocompleteIcons","_mdiCompletions","autocompletion","override","maxRenderedOptions","create","parent","context","entityWord","matchBefore","explicit","states","_getStates","Number","options","validFor","match","iconItems","_getIconItems","args","memoizeOne","Object","keys","map","type","detail","attributes","friendly_name","info","_iconList","iconList","default","name","keywords","join","docChanged","foldGutter","foldingOnIndent","styles","css","Boolean","attribute","HaObjectSelector","LitElement","render","html","disabled","required","placeholder","_handleChange","helper","updated","_valueChangedFromChild","_yamlEditor","setValue","ev","target","isValid","HaYamlEditor","_yaml","obj","prototype","hasOwnProperty","call","isEmpty","dump","schema","yamlSchema","quotingType","noRefs","err","console","alert","firstUpdated","undefined","defaultValue","willUpdate","changedProperties","autoUpdate","_codeEditor","nothing","_onChange","copyClipboard","hasExtraActions","_copyYaml","localize","parsed","errorMsg","load","reason","mark","line","column","yaml","showToast","message","haStyle","DEFAULT_SCHEMA","params"],"mappings":"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"}