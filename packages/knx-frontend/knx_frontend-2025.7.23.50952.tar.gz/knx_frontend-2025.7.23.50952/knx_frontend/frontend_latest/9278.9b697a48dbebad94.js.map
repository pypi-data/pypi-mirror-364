{"version":3,"file":"9278.9b697a48dbebad94.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/translations/blank_before_percent.ts","webpack://knx-frontend/./homeassistant-frontend/src/util/bytes-to-string.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-file-upload.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/image-cropper-dialog/show-image-cropper-dialog.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-picture-upload.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/media-player/show-media-browser-dialog.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/image_upload.ts"],"sourcesContent":["import type { FrontendLocaleData } from \"../../data/translation\";\n\n// Logic based on https://en.wikipedia.org/wiki/Percent_sign#Form_and_spacing\nexport const blankBeforePercent = (\n  localeOptions: FrontendLocaleData\n): string => {\n  switch (localeOptions.language) {\n    case \"cs\":\n    case \"de\":\n    case \"fi\":\n    case \"fr\":\n    case \"sk\":\n    case \"sv\":\n      return \" \";\n    default:\n      return \"\";\n  }\n};\n","export const bytesToString = (value = 0, decimals = 2): string => {\n  if (value === 0) {\n    return \"0 Bytes\";\n  }\n  const k = 1024;\n  decimals = decimals < 0 ? 0 : decimals;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n  const i = Math.floor(Math.log(value) / Math.log(k));\n  return `${parseFloat((value / k ** i).toFixed(decimals))} ${sizes[i]}`;\n};\n","import \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiDelete, mdiFileUpload } from \"@mdi/js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-icon-button\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { ensureArray } from \"../common/array/ensure-array\";\nimport { bytesToString } from \"../util/bytes-to-string\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: File[] };\n    \"files-cleared\": undefined;\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public localize?: LocalizeFunc;\n\n  @property() public accept!: string;\n\n  @property() public icon?: string;\n\n  @property() public label?: string;\n\n  @property() public secondary?: string;\n\n  @property({ attribute: \"uploading-label\" }) public uploadingLabel?: string;\n\n  @property({ attribute: \"delete-label\" }) public deleteLabel?: string;\n\n  @property() public supports?: string;\n\n  @property({ type: Object }) public value?: File | File[] | FileList | string;\n\n  @property({ type: Boolean }) public multiple = false;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public uploading = false;\n\n  @property({ type: Number }) public progress?: number;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  public autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._openFilePicker();\n    }\n  }\n\n  private get _name() {\n    if (this.value === undefined) {\n      return \"\";\n    }\n    if (typeof this.value === \"string\") {\n      return this.value;\n    }\n    const files =\n      this.value instanceof FileList\n        ? Array.from(this.value)\n        : ensureArray(this.value);\n\n    return files.map((file) => file.name).join(\", \");\n  }\n\n  public render(): TemplateResult {\n    const localize = this.localize || this.hass!.localize;\n    return html`\n      ${this.uploading\n        ? html`<div class=\"container\">\n            <div class=\"uploading\">\n              <span class=\"header\"\n                >${this.uploadingLabel || this.value\n                  ? localize(\"ui.components.file-upload.uploading_name\", {\n                      name: this._name,\n                    })\n                  : localize(\"ui.components.file-upload.uploading\")}</span\n              >\n              ${this.progress\n                ? html`<div class=\"progress\">\n                    ${this.progress}${this.hass &&\n                    blankBeforePercent(this.hass!.locale)}%\n                  </div>`\n                : nothing}\n            </div>\n            <mwc-linear-progress\n              .indeterminate=${!this.progress}\n              .progress=${this.progress ? this.progress / 100 : undefined}\n            ></mwc-linear-progress>\n          </div>`\n        : html`<label\n            for=${this.value ? \"\" : \"input\"}\n            class=\"container ${classMap({\n              dragged: this._drag,\n              multiple: this.multiple,\n              value: Boolean(this.value),\n            })}\"\n            @drop=${this._handleDrop}\n            @dragenter=${this._handleDragStart}\n            @dragover=${this._handleDragStart}\n            @dragleave=${this._handleDragEnd}\n            @dragend=${this._handleDragEnd}\n            >${!this.value\n              ? html`<ha-svg-icon\n                    class=\"big-icon\"\n                    .path=${this.icon || mdiFileUpload}\n                  ></ha-svg-icon>\n                  <ha-button unelevated @click=${this._openFilePicker}>\n                    ${this.label || localize(\"ui.components.file-upload.label\")}\n                  </ha-button>\n                  <span class=\"secondary\"\n                    >${this.secondary ||\n                    localize(\"ui.components.file-upload.secondary\")}</span\n                  >\n                  <span class=\"supports\">${this.supports}</span>`\n              : typeof this.value === \"string\"\n                ? html`<div class=\"row\">\n                    <div class=\"value\" @click=${this._openFilePicker}>\n                      <ha-svg-icon\n                        .path=${this.icon || mdiFileUpload}\n                      ></ha-svg-icon>\n                      ${this.value}\n                    </div>\n                    <ha-icon-button\n                      @click=${this._clearValue}\n                      .label=${this.deleteLabel || localize(\"ui.common.delete\")}\n                      .path=${mdiDelete}\n                    ></ha-icon-button>\n                  </div>`\n                : (this.value instanceof FileList\n                    ? Array.from(this.value)\n                    : ensureArray(this.value)\n                  ).map(\n                    (file) =>\n                      html`<div class=\"row\">\n                        <div class=\"value\" @click=${this._openFilePicker}>\n                          <ha-svg-icon\n                            .path=${this.icon || mdiFileUpload}\n                          ></ha-svg-icon>\n                          ${file.name} - ${bytesToString(file.size)}\n                        </div>\n                        <ha-icon-button\n                          @click=${this._clearValue}\n                          .label=${this.deleteLabel ||\n                          localize(\"ui.common.delete\")}\n                          .path=${mdiDelete}\n                        ></ha-icon-button>\n                      </div>`\n                  )}\n            <input\n              id=\"input\"\n              type=\"file\"\n              class=\"file\"\n              .accept=${this.accept}\n              .multiple=${this.multiple}\n              @change=${this._handleFilePicked}\n          /></label>`}\n    `;\n  }\n\n  private _openFilePicker() {\n    this._input?.click();\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", {\n        files:\n          this.multiple || ev.dataTransfer.files.length === 1\n            ? Array.from(ev.dataTransfer.files)\n            : [ev.dataTransfer.files[0]],\n      });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    if (ev.target.files.length === 0) {\n      return;\n    }\n    this.value = ev.target.files;\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this._input!.value = \"\";\n    this.value = undefined;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"files-cleared\");\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      height: 240px;\n    }\n    :host([disabled]) {\n      pointer-events: none;\n      color: var(--disabled-text-color);\n    }\n    .container {\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      border: solid 1px\n        var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n      border-radius: var(--mdc-shape-small, 4px);\n      height: 100%;\n    }\n    .row {\n      display: flex;\n      align-items: center;\n    }\n    label.container {\n      border: dashed 1px\n        var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n      cursor: pointer;\n    }\n    .container .uploading {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      align-items: flex-start;\n      padding: 0 32px;\n      box-sizing: border-box;\n    }\n    :host([disabled]) .container {\n      border-color: var(--disabled-color);\n    }\n    label:hover,\n    label.dragged {\n      border-style: solid;\n    }\n    label.dragged {\n      border-color: var(--primary-color);\n    }\n    .dragged:before {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      background-color: var(--primary-color);\n      content: \"\";\n      opacity: var(--dark-divider-opacity);\n      pointer-events: none;\n      border-radius: var(--mdc-shape-small, 4px);\n    }\n    label.value {\n      cursor: default;\n    }\n    label.value.multiple {\n      justify-content: unset;\n      overflow: auto;\n    }\n    .highlight {\n      color: var(--primary-color);\n    }\n    ha-button {\n      margin-bottom: 4px;\n    }\n    .supports {\n      color: var(--secondary-text-color);\n      font-size: var(--ha-font-size-s);\n    }\n    :host([disabled]) .secondary {\n      color: var(--disabled-text-color);\n    }\n    input.file {\n      display: none;\n    }\n    .value {\n      cursor: pointer;\n    }\n    .value ha-svg-icon {\n      margin-right: 8px;\n      margin-inline-end: 8px;\n      margin-inline-start: initial;\n    }\n    .big-icon {\n      --mdc-icon-size: 48px;\n      margin-bottom: 8px;\n    }\n    ha-button {\n      --mdc-button-outline-color: var(--primary-color);\n      --mdc-icon-button-size: 24px;\n    }\n    mwc-linear-progress {\n      width: 100%;\n      padding: 8px 32px;\n      box-sizing: border-box;\n    }\n    .header {\n      font-weight: var(--ha-font-weight-medium);\n    }\n    .progress {\n      color: var(--secondary-text-color);\n    }\n    button.link {\n      background: none;\n      border: none;\n      padding: 0;\n      font-size: var(--ha-font-size-m);\n      color: var(--primary-color);\n      text-decoration: underline;\n      cursor: pointer;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n","import { fireEvent } from \"../../common/dom/fire_event\";\n\nexport interface CropOptions {\n  round: boolean;\n  type?: \"image/jpeg\" | \"image/png\";\n  quality?: number;\n  aspectRatio?: number;\n}\n\nexport interface HaImageCropperDialogParams {\n  file: File;\n  options: CropOptions;\n  croppedCallback: (file: File) => void;\n}\n\nconst loadImageCropperDialog = () => import(\"./image-cropper-dialog\");\n\nexport const showImageCropperDialog = (\n  element: HTMLElement,\n  dialogParams: HaImageCropperDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"image-cropper-dialog\",\n    dialogImport: loadImageCropperDialog,\n    dialogParams,\n  });\n};\n","import { mdiImagePlus } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { MediaPickedEvent } from \"../data/media-player\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { haStyle } from \"../resources/styles\";\nimport {\n  MEDIA_PREFIX,\n  getIdFromUrl,\n  createImage,\n  generateImageThumbnailUrl,\n  getImageData,\n} from \"../data/image_upload\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport type { CropOptions } from \"../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { showImageCropperDialog } from \"../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-file-upload\";\nimport { showMediaBrowserDialog } from \"./media-player/show-media-browser-dialog\";\n\n@customElement(\"ha-picture-upload\")\nexport class HaPictureUpload extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public value: string | null = null;\n\n  @property() public label?: string;\n\n  @property() public secondary?: string;\n\n  @property() public supports?: string;\n\n  @property({ attribute: false }) public currentImageAltText?: string;\n\n  @property({ type: Boolean }) public crop = false;\n\n  @property({ type: Boolean, attribute: \"select-media\" }) public selectMedia =\n    false;\n\n  @property({ attribute: false }) public cropOptions?: CropOptions;\n\n  @property({ type: Boolean }) public original = false;\n\n  @property({ type: Number }) public size = 512;\n\n  @state() private _uploading = false;\n\n  public render(): TemplateResult {\n    if (!this.value) {\n      const secondary =\n        this.secondary ||\n        (this.selectMedia\n          ? html`${this.hass.localize(\n              \"ui.components.picture-upload.secondary\",\n              {\n                select_media: html`<button\n                  class=\"link\"\n                  @click=${this._chooseMedia}\n                >\n                  ${this.hass.localize(\n                    \"ui.components.picture-upload.select_media\"\n                  )}\n                </button>`,\n              }\n            )}`\n          : undefined);\n\n      return html`\n        <ha-file-upload\n          .hass=${this.hass}\n          .icon=${mdiImagePlus}\n          .label=${this.label ||\n          this.hass.localize(\"ui.components.picture-upload.label\")}\n          .secondary=${secondary}\n          .supports=${this.supports ||\n          this.hass.localize(\"ui.components.picture-upload.supported_formats\")}\n          .uploading=${this._uploading}\n          @file-picked=${this._handleFilePicked}\n          @change=${this._handleFileCleared}\n          accept=\"image/png, image/jpeg, image/gif\"\n        ></ha-file-upload>\n      `;\n    }\n    return html`<div class=\"center-vertical\">\n      <div class=\"value\">\n        <img\n          .src=${this.value}\n          alt=${this.currentImageAltText ||\n          this.hass.localize(\"ui.components.picture-upload.current_image_alt\")}\n        />\n        <div>\n          <ha-button\n            @click=${this._handleChangeClick}\n            .label=${this.hass.localize(\n              \"ui.components.picture-upload.clear_picture\"\n            )}\n          >\n          </ha-button>\n        </div>\n      </div>\n    </div>`;\n  }\n\n  private _handleChangeClick() {\n    this.value = null;\n    fireEvent(this, \"change\");\n  }\n\n  private async _handleFilePicked(ev) {\n    const file = ev.detail.files[0];\n    if (this.crop) {\n      this._cropFile(file);\n    } else {\n      this._uploadFile(file);\n    }\n  }\n\n  private async _handleFileCleared() {\n    this.value = null;\n  }\n\n  private async _cropFile(file: File, mediaId?: string) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    showImageCropperDialog(this, {\n      file,\n      options: this.cropOptions || {\n        round: false,\n        aspectRatio: NaN,\n      },\n      croppedCallback: (croppedFile) => {\n        if (mediaId && croppedFile === file) {\n          this.value = generateImageThumbnailUrl(\n            mediaId,\n            this.size,\n            this.original\n          );\n          fireEvent(this, \"change\");\n        } else {\n          this._uploadFile(croppedFile);\n        }\n      },\n    });\n  }\n\n  private async _uploadFile(file: File) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    this._uploading = true;\n    try {\n      const media = await createImage(this.hass, file);\n      this.value = generateImageThumbnailUrl(\n        media.id,\n        this.size,\n        this.original\n      );\n      fireEvent(this, \"change\");\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: err.toString(),\n      });\n    } finally {\n      this._uploading = false;\n    }\n  }\n\n  private _chooseMedia = () => {\n    showMediaBrowserDialog(this, {\n      action: \"pick\",\n      entityId: \"browser\",\n      navigateIds: [\n        { media_content_id: undefined, media_content_type: undefined },\n        {\n          media_content_id: MEDIA_PREFIX,\n          media_content_type: \"app\",\n        },\n      ],\n      minimumNavigateLevel: 2,\n      mediaPickedCallback: async (pickedMedia: MediaPickedEvent) => {\n        const mediaId = getIdFromUrl(pickedMedia.item.media_content_id);\n        if (mediaId) {\n          if (this.crop) {\n            const url = generateImageThumbnailUrl(mediaId, undefined, true);\n            let data;\n            try {\n              data = await getImageData(this.hass, url);\n            } catch (err: any) {\n              showAlertDialog(this, {\n                text: err.toString(),\n              });\n              return;\n            }\n            const metadata = {\n              type: pickedMedia.item.media_content_type,\n            };\n            const file = new File([data], pickedMedia.item.title, metadata);\n            this._cropFile(file, mediaId);\n          } else {\n            this.value = generateImageThumbnailUrl(\n              mediaId,\n              this.size,\n              this.original\n            );\n            fireEvent(this, \"change\");\n          }\n        }\n      },\n    });\n  };\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          height: 240px;\n        }\n        ha-file-upload {\n          height: 100%;\n        }\n        .center-vertical {\n          display: flex;\n          align-items: center;\n          height: 100%;\n        }\n        .value {\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        img {\n          max-width: 100%;\n          max-height: 200px;\n          margin-bottom: 4px;\n          border-radius: var(--file-upload-image-border-radius);\n          transition: opacity 0.3s;\n          opacity: var(--picture-opacity, 1);\n        }\n        img:hover {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-picture-upload\": HaPictureUpload;\n  }\n}\n","import { fireEvent } from \"../../common/dom/fire_event\";\nimport type {\n  MediaPickedEvent,\n  MediaPlayerBrowseAction,\n} from \"../../data/media-player\";\nimport type { MediaPlayerItemId } from \"./ha-media-player-browse\";\n\nexport interface MediaPlayerBrowseDialogParams {\n  action: MediaPlayerBrowseAction;\n  entityId: string;\n  mediaPickedCallback: (pickedMedia: MediaPickedEvent) => void;\n  navigateIds?: MediaPlayerItemId[];\n  minimumNavigateLevel?: number;\n}\n\nexport const showMediaBrowserDialog = (\n  element: HTMLElement,\n  dialogParams: MediaPlayerBrowseDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-media-player-browse\",\n    dialogImport: () => import(\"./dialog-media-player-browse\"),\n    dialogParams,\n  });\n};\n","import type { HomeAssistant } from \"../types\";\n\ninterface Image {\n  filesize: number;\n  name: string;\n  uploaded_at: string; // isoformat date\n  content_type: string;\n  id: string;\n}\n\nexport const URL_PREFIX = \"/api/image/serve/\";\nexport const MEDIA_PREFIX = \"media-source://image_upload\";\n\nexport interface ImageMutableParams {\n  name: string;\n}\n\nexport const getIdFromUrl = (url: string): string | undefined => {\n  let id;\n  if (url.startsWith(URL_PREFIX)) {\n    id = url.substring(URL_PREFIX.length);\n    const idx = id.indexOf(\"/\");\n    if (idx >= 0) {\n      id = id.substring(0, idx);\n    }\n  } else if (url.startsWith(MEDIA_PREFIX)) {\n    id = url.substring(MEDIA_PREFIX.length + 1);\n  }\n  return id;\n};\n\nexport const generateImageThumbnailUrl = (\n  mediaId: string,\n  size?: number,\n  original = false\n) => {\n  if (!original && !size) {\n    throw new Error(\"Size must be provided if original is false\");\n  }\n\n  return original\n    ? `/api/image/serve/${mediaId}/original`\n    : `/api/image/serve/${mediaId}/${size}x${size}`;\n};\n\nexport const fetchImages = (hass: HomeAssistant) =>\n  hass.callWS<Image[]>({ type: \"image/list\" });\n\nexport const createImage = async (\n  hass: HomeAssistant,\n  file: File\n): Promise<Image> => {\n  const fd = new FormData();\n  fd.append(\"file\", file);\n  const resp = await hass.fetchWithAuth(\"/api/image/upload\", {\n    method: \"POST\",\n    body: fd,\n  });\n  if (resp.status === 413) {\n    throw new Error(`Uploaded image is too large (${file.name})`);\n  } else if (resp.status !== 200) {\n    throw new Error(\"Unknown error\");\n  }\n  return resp.json();\n};\n\nexport const updateImage = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<ImageMutableParams>\n) =>\n  hass.callWS<Image>({\n    type: \"image/update\",\n    media_id: id,\n    ...updates,\n  });\n\nexport const deleteImage = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"image/delete\",\n    image_id: id,\n  });\n\nexport const getImageData = async (hass: HomeAssistant, url: string) => {\n  const response = await fetch(hass.hassUrl(url));\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch image: ${\n        response.statusText ? response.statusText : response.status\n      }`\n    );\n  }\n\n  return response.blob();\n};\n"],"names":["blankBeforePercent","localeOptions","language","mdiDelete","mdiFileUpload","HaFileUpload","LitElement","firstUpdated","changedProperties","super","this","autoOpenFileDialog","_openFilePicker","_name","undefined","value","FileList","Array","from","ensureArray","map","file","name","join","render","localize","hass","html","uploading","uploadingLabel","progress","locale","nothing","classMap","dragged","_drag","multiple","Boolean","_handleDrop","_handleDragStart","_handleDragEnd","icon","_clearValue","deleteLabel","bytesToString","decimals","i","Math","floor","log","parseFloat","toFixed","size","label","secondary","supports","accept","_handleFilePicked","_input","click","ev","preventDefault","stopPropagation","dataTransfer","files","fireEvent","length","target","args","disabled","styles","css","attribute","type","Object","reflect","Number","loadImageCropperDialog","HaPictureUpload","selectMedia","select_media","_chooseMedia","_uploading","_handleFileCleared","currentImageAltText","_handleChangeClick","detail","crop","_cropFile","_uploadFile","mediaId","showImageCropperDialog","element","dialogParams","includes","options","cropOptions","round","aspectRatio","NaN","croppedCallback","croppedFile","generateImageThumbnailUrl","original","dialogTag","dialogImport","showAlertDialog","text","media","createImage","id","err","toString","haStyle","showMediaBrowserDialog","action","entityId","navigateIds","media_content_id","media_content_type","MEDIA_PREFIX","minimumNavigateLevel","mediaPickedCallback","getIdFromUrl","pickedMedia","item","url","data","getImageData","metadata","File","title","URL_PREFIX","startsWith","substring","idx","indexOf","Error","fd","FormData","append","resp","fetchWithAuth","method","body","status","json","deleteImage","callWS","image_id","response","fetch","hassUrl","ok","statusText","blob"],"mappings":"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"}