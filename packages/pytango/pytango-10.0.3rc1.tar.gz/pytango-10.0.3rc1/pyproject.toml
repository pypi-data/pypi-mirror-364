[build-system]
requires = [
    "scikit-build-core>=0.10.0",

    # Comments on numpy build requirement range:
    #
    #   1. >=2.0.x is the numpy requirement for wheel builds for distribution
    #      on PyPI - building against 2.x yields wheels that are also
    #      ABI-compatible with numpy 1.x at runtime.
    #   2. Note that building against numpy 1.x works fine too - users and
    #      redistributors can do this by installing the numpy version they like
    #      and disabling build isolation.
    #   3. The <2.3 upper bound due to removal of the deprecated v1.7 API used by our Boost extension.
    "numpy>=2.0.0rc1,<2.3",

    "pybind11-stubgen",
    "typing_extensions >= 4.5.0; python_version < '3.13'",
]
build-backend = "scikit_build_core.build"

[project.urls]
homepage = "https://www.tango-controls.org/"
documentation = "https://pytango.readthedocs.io"
repository = "https://gitlab.com/tango-controls/pytango.git"
changelog = "https://gitlab.com/tango-controls/pytango/-/releases"

[project]
name = "pytango"
version = "10.0.3.rc1"
description = "Python bindings for the cppTango library; part of the Tango Distributed Control System toolkit"
readme = "README.rst"
requires-python = ">=3.9"
authors = [
    {'name' = "Coutinho"}]
maintainers = [
    {"name" = "Anton Joubert"},
    {"name" = "Yury Matveyev"},
    {"name" = "Ulrik Pedersen"}]
classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Environment :: Other Environment",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
        "Natural Language :: English",
        "Operating System :: Microsoft :: Windows",
        "Operating System :: MacOS",
        "Operating System :: POSIX",
        "Operating System :: POSIX :: Linux",
        "Operating System :: Unix",
        "Programming Language :: C",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python :: 3.13",
        "Topic :: Scientific/Engineering",
        "Topic :: Software Development :: Libraries",
    ]

dependencies = [
    "numpy (>=1.19.3,<3)",
    "packaging",
    "psutil >=5.3.0",
    "typing_extensions >= 4.5.0; python_version < '3.13'"
]

[project.optional-dependencies]
telemetry = [
    "opentelemetry-api",
    "opentelemetry-sdk",
    "opentelemetry-exporter-otlp-proto-grpc",
    "opentelemetry-exporter-otlp-proto-http",
]
tests = [
    "gevent >= 20.0",
    "pytest",
    "pytest-asyncio >=0.24",
    "pytest-cov",
    "pytest-forked",
    "pytest-timeout",
]

[tool.scikit-build]
cmake.version = "CMakeLists.txt"
minimum-version = "build-system.requires"
build.verbose = true
wheel.packages = ["tango", "tango.databaseds", "tango.databaseds.db_access", "PyTango"]
install.strip = false
sdist.include = ["*.pyi"] # .pyi files are not included in sdist (they are generated in build step) this option is using to include .pyi in binary dits

[tool.scikit-build.cmake.define]
# Put CMake defines in this table.
# Can also be set as cmake cache variables through the CMAKE_ARGS environment variable:
# e.g.: CMAKE_ARGS="-DTANGO_ROOT=/path/to/installed/cpptango" python3 -m build
# TANGO_ROOT="/path/to/installed/tango.9.4"
Tango_USE_PKG_CONFIG="OFF"

[tool.pytest.ini_options]
# see also pytest_win_config.toml
asyncio_default_fixture_loop_scope = "function"
addopts = "-v --forked"
# it is important to put the "ignore::tango.PyTangoUserWarning:tango.utils" option before the "error" option.
# If "error" is first, we can get an error when pytest imports tango.utils to resolve the warning type.
filterwarnings = ["ignore::tango.PyTangoUserWarning:tango.utils", "error", "ignore::ResourceWarning"]
testpaths = [
    "tests"
]

[tool.coverage.run]
branch = true
source = ["tango", "PyTango", "tests"]
omit = [
    # omit deprecated modules
    "tango/client.py",
    "tango/codec.py",
    "tango/tango_object.py",
]

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    ".eggs",
    "*.egg",
    "build",
    "databaseds",
    "examples",
    "doc",
]

[tool.ruff.lint]
ignore = [
    "E402",  # Module level import not at top of file
    "E501",  # Line too long (> 79 characters)
    "E731",  # Do not assign a lambda expression, use a def
]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
]
