#!/usr/bin/env python3
"""
Enhanced CLI Flags Bridge - ISS-0113 Integration
 
Provides Python interface to Node.js enhanced flag functionality.
Auto-generated by cli-integration.js - do not modify manually.
"""

import json
import subprocess
import sys
from pathlib import Path
from typing import Dict, Any, Optional

class EnhancedFlagsBridge:
    """Bridge to Node.js enhanced flag system"""
    
    def __init__(self):
        self.node_entry_path = Path(__file__).parent.parent / "lib" / "cli-flag-managers" / "enhanced-cli-entry.js"
        
    def has_enhanced_flags(self, args: list) -> bool:
        """Check if arguments contain enhanced flags"""
        enhanced_flags = [
            '--safe', '--upgrade', '--rollback', '--verify',
            '--components', '--environment', '--git', '--dependencies'
        ]
        
        # Check for exact matches
        for flag in enhanced_flags:
            if flag in args:
                return True
                
        # Check for assignment-style flags
        assignment_flags = ['--upgrade=', '--rollback=', '--format=']
        for arg in args:
            for assignment_flag in assignment_flags:
                if arg.startswith(assignment_flag):
                    return True
                    
        # Special case for --version with additional options
        if '--version' in args or '-v' in args:
            version_options = ['--components', '--environment', '--git', '--dependencies', '--format']
            for option in version_options:
                if option in args or any(arg.startswith(option + '=') for arg in args):
                    return True
                    
        return False
        
    def execute_enhanced_flags(self, args: list) -> Dict[str, Any]:
        """Execute enhanced flag functionality via Node.js"""
        try:
            if not self.node_entry_path.exists():
                return {
                    'success': False,
                    'error': 'Enhanced CLI entry point not found'
                }
                
            # Execute Node.js enhanced CLI
            process = subprocess.run(
                ['node', str(self.node_entry_path)] + args,
                capture_output=True,
                text=True,
                timeout=300  # 5 minutes timeout
            )
            
            result = {
                'success': process.returncode == 0,
                'returncode': process.returncode,
                'stdout': process.stdout,
                'stderr': process.stderr
            }
            
            # Try to parse JSON output if available
            try:
                if process.stdout.strip().startswith('{'):
                    result['data'] = json.loads(process.stdout)
            except json.JSONDecodeError:
                pass
                
            return result
            
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'error': 'Enhanced flag execution timed out'
            }
        except Exception as e:
            return {
                'success': False,
                'error': f'Enhanced flag execution failed: {str(e)}'
            }
            
    def get_version_info(self, include_components: bool = False) -> Dict[str, Any]:
        """Get version information using enhanced version manager"""
        args = ['--version']
        
        if include_components:
            args.extend(['--components', '--environment', '--git'])
            
        return self.execute_enhanced_flags(args)
        
    def perform_upgrade(self, version: Optional[str] = None, safe_mode: bool = False, dry_run: bool = False) -> Dict[str, Any]:
        """Perform upgrade using enhanced upgrade manager"""
        args = ['--upgrade']
        
        if version:
            args.append(version)
            
        if safe_mode:
            args.append('--safe')
            
        if dry_run:
            args.append('--dry-run')
            
        return self.execute_enhanced_flags(args)
        
    def perform_rollback(self, version: Optional[str] = None, safe_mode: bool = False, dry_run: bool = False) -> Dict[str, Any]:
        """Perform rollback using enhanced rollback manager"""
        args = ['--rollback']
        
        if version:
            args.append(version)
            
        if safe_mode:
            args.append('--safe')
            
        if dry_run:
            args.append('--dry-run')
            
        return self.execute_enhanced_flags(args)
        
    def verify_system(self) -> Dict[str, Any]:
        """Verify system integrity using enhanced verification"""
        return self.execute_enhanced_flags(['--verify'])

# Global bridge instance
enhanced_flags_bridge = EnhancedFlagsBridge()

# CLI integration function for Python CLI
def integrate_enhanced_flags(args: list) -> bool:
    """
    Integration point for Python CLI to check and handle enhanced flags.
    Returns True if enhanced flags were handled, False if should continue with normal processing.
    """
    if enhanced_flags_bridge.has_enhanced_flags(args):
        result = enhanced_flags_bridge.execute_enhanced_flags(args)
        
        # Print output
        if result.get('stdout'):
            print(result['stdout'], end='')
        if result.get('stderr'):
            print(result['stderr'], file=sys.stderr, end='')
            
        # Exit with appropriate code
        sys.exit(result.get('returncode', 1 if not result.get('success') else 0))
        
    return False

if __name__ == "__main__":
    # Direct execution - handle enhanced flags
    args = sys.argv[1:]
    integrate_enhanced_flags(args)
    print("No enhanced flags detected - would delegate to normal CLI processing")
