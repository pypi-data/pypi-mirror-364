# coding: utf-8

"""
    URLR API Reference

    API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>

    The version of the OpenAPI document: 1.10
    Contact: contact@urlr.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from urlr.models.link_edit_request import LinkEditRequest

class TestLinkEditRequest(unittest.TestCase):
    """LinkEditRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LinkEditRequest:
        """Test LinkEditRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LinkEditRequest`
        """
        model = LinkEditRequest()
        if include_optional:
            return LinkEditRequest(
                url = '',
                folder_id = '',
                domain = 'mybrand.com',
                code = 'xxxxx',
                label = '',
                tags = [
                    ''
                    ],
                password = '',
                qrcode = urlr.models.link_base_request_qrcode.LinkBaseRequest_qrcode(
                    size = 100, 
                    format = 'png', 
                    margin = 56, 
                    background_color = '#ffffff', 
                    foreground_color = '#000000', ),
                utm = urlr.models.get_link_200_response_utm.getLink_200_response_utm(
                    campaign = '', 
                    medium = '', 
                    source = '', 
                    content = '', ),
                metatag = urlr.models.link_base_request_metatag.LinkBaseRequest_metatag(
                    title = '', 
                    description = '', 
                    image = '', ),
                geolinks = [
                    urlr.models.get_link_200_response_geolinks_inner.getLink_200_response_geolinks_inner(
                        conditions = [
                            urlr.models.get_link_200_response_geolinks_inner_conditions_inner.getLink_200_response_geolinks_inner_conditions_inner(
                                type = 'country', 
                                value = '', 
                                operator = 'AND', )
                            ], 
                        url = '', )
                    ],
                delete_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                expired_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                expired_url = '',
                delete_after_expiration = True
            )
        else:
            return LinkEditRequest(
        )
        """

    def testLinkEditRequest(self):
        """Test LinkEditRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
