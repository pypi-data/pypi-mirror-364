{"version":3,"file":"lib_index_js.82ae817004dfd5116dce.js","mappings":"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","sources":["webpack://nbtest_lab_extension/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette, ToolbarButton } from '@jupyterlab/apputils';\nimport { INotebookTracker, NotebookPanel } from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport { CodeCellModel } from '@jupyterlab/cells';\n\n// Signal for updating the status display of the ENV variable\nclass ToggleSignal {\n  private _stateChanged = new Signal<this, string>(this);\n\n  get stateChanged() {\n    return this._stateChanged;\n  }\n\n  emitState(value: string) {\n    this._stateChanged.emit(value);\n  }\n}\n\nconst toggleSignal = new ToggleSignal();\nlet status = 0; // Track status locally for the ENV variable\n\n// Define constants for the metadata key and assertion prefix\nconst METADATA_KEY = 'nbtest_hidden_asserts';\nconst ASSERT_PREFIX = 'nbtest.assert_';\n\n/**\n * The main extension plugin.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'nbtest_lab_extension:plugin',\n  autoStart: true,\n  requires: [ICommandPalette, INotebookTracker, IRenderMimeRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    tracker: INotebookTracker\n  ) => {\n    const { commands } = app;\n    const toggleEnvCommand = 'nbtest:toggle-asserts-env';\n    const toggleVisibilityCommand = 'nbtest:toggle-visibility';\n\n    // Toggle NBTEST_RUN_ASSERTS environment variable\n    commands.addCommand(toggleEnvCommand, {\n      label: 'Toggle NBTEST_RUN_ASSERTS Env Var',\n      execute: async () => {\n        const currentNotebook = tracker.currentWidget;\n        if (!currentNotebook) {\n          return;\n        }\n        const session = currentNotebook.sessionContext.session;\n        if (!session || !session.kernel) {\n          return;\n        }\n\n        const code = `\nimport os\nos.environ[\"NBTEST_RUN_ASSERTS\"] = \"1\" if os.environ.get(\"NBTEST_RUN_ASSERTS\", \"0\") != \"1\" else \"0\"\nprint(os.environ[\"NBTEST_RUN_ASSERTS\"])\n        `;\n        const future = session.kernel.requestExecute({ code });\n        future.onIOPub = msg => {\n          if (msg.header.msg_type === 'stream') {\n            const newStatusValue = (msg.content as any).text.trim();\n            status = newStatusValue === '1' ? 1 : 0;\n            toggleSignal.emitState(status === 1 ? 'ON' : 'OFF');\n          }\n        };\n        await future.done;\n      }\n    });\n\n    // Completely hide or show nbtest.assert_* lines\n    commands.addCommand(toggleVisibilityCommand, {\n      label: 'Hide/Show NBTest Assertions',\n      execute: () => {\n        const panel = tracker.currentWidget;\n        if (!panel) {\n          return;\n        }\n\n        const notebookModel = panel.content.model;\n        if (!notebookModel) {\n          return;\n        }\n\n        const cells = notebookModel.cells;\n        let shouldHide = true;\n\n        for (let i = 0; i < cells.length; i++) {\n          const cell = cells.get(i);\n          if (\n            cell.type === 'code' &&\n            cell.getMetadata(METADATA_KEY) !== undefined\n          ) {\n            shouldHide = false;\n            break;\n          }\n        }\n\n        for (let i = 0; i < cells.length; i++) {\n          const cellModel = cells.get(i);\n          if (cellModel.type !== 'code') {\n            continue;\n          }\n\n          if (shouldHide) {\n            const sourceLines = cellModel.sharedModel.getSource().split('\\n');\n            const visibleLines: string[] = [];\n            const hiddenLines: { index: number; content: string }[] = [];\n\n            sourceLines.forEach((line: string, index: number) => {\n              if (line.trim().startsWith(ASSERT_PREFIX)) {\n                hiddenLines.push({ index: index, content: line });\n              } else {\n                visibleLines.push(line);\n              }\n            });\n\n            if (hiddenLines.length > 0) {\n              cellModel.sharedModel.setSource(visibleLines.join('\\n'));\n              cellModel.setMetadata(METADATA_KEY, hiddenLines);\n            }\n          } else {\n            const hiddenLines = cellModel.getMetadata(METADATA_KEY) as {\n              index: number;\n              content: string;\n            }[];\n\n            if (hiddenLines && hiddenLines.length > 0) {\n              const visibleLines = cellModel.sharedModel\n                .getSource()\n                .split('\\n');\n              // Insert hidden lines back at their original positions\n              hiddenLines.forEach(line => {\n                visibleLines.splice(line.index, 0, line.content);\n              });\n\n              cellModel.sharedModel.setSource(visibleLines.join('\\n'));\n              cellModel.deleteMetadata(METADATA_KEY);\n            }\n          }\n        }\n      }\n    });\n\n    // Add commands to the palette\n    palette.addItem({ command: toggleEnvCommand, category: 'NBTest' });\n    palette.addItem({ command: toggleVisibilityCommand, category: 'NBTest' });\n\n    // Add buttons and functionality to any new notebook\n    tracker.widgetAdded.connect((sender, panel: NotebookPanel) => {\n      const envButton = new ToolbarButton({\n        label: 'Toggle Assertions',\n        tooltip: 'Toggle NBTEST_RUN_ASSERTS Environment Variable',\n        onClick: () => commands.execute(toggleEnvCommand)\n      });\n\n      const statusDisplay = new Widget();\n      statusDisplay.node.textContent = 'NBTest Status: OFF';\n      statusDisplay.node.style.marginLeft = '4px';\n      statusDisplay.node.style.marginRight = '8px';\n\n      toggleSignal.stateChanged.connect((_, newStatus) => {\n        statusDisplay.node.textContent = `Asserts: ${newStatus}`;\n      });\n\n      const visibilityButton = new ToolbarButton({\n        label: 'Hide/Show Assertions',\n        tooltip: 'Completely hide or show nbtest assertions',\n        onClick: () => commands.execute(toggleVisibilityCommand)\n      });\n\n      panel.toolbar.addItem('toggleAssertsEnv', envButton);\n      panel.toolbar.addItem('assertsStatus', statusDisplay);\n      panel.toolbar.addItem('toggleVisibility', visibilityButton);\n\n      const highlightAssertCells = () => {\n        panel.content.widgets.forEach(cell => {\n          const model = cell.model;\n          const node = cell.node;\n          let hasAssertions = false;\n\n          if (model instanceof CodeCellModel) {\n            const source = model.sharedModel.getSource();\n            const hasVisibleAssertions = /nbtest\\.assert_\\w+/.test(source);\n            const hasHiddenAssertions =\n              model.getMetadata(METADATA_KEY) !== undefined;\n            hasAssertions = hasVisibleAssertions || hasHiddenAssertions;\n          }\n\n          if (hasAssertions) {\n            node.style.borderLeft = '4px solid #f39c12';\n            node.style.backgroundColor = 'rgba(243, 156, 18, 0.07)';\n          } else {\n            node.style.borderLeft = '';\n            node.style.backgroundColor = '';\n          }\n        });\n      };\n\n      panel.revealed.then(() => {\n        highlightAssertCells();\n      });\n\n      if (panel.content.model) {\n        panel.content.model.contentChanged.connect(() => {\n          highlightAssertCells();\n        });\n      }\n    });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}