# coding: utf-8

"""
    Skyledge API

    Sky Ledge is an operational insights platform that gives you the visibility and control you need to minimise inefficiencies, oversight, theft, and ultimately, unnecessary costs associated with your operations.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import StrictBool, StrictStr
from typing import Optional
from skyledge_sdk.models.control_room_event_search_request import ControlRoomEventSearchRequest
from skyledge_sdk.models.control_room_events_response import ControlRoomEventsResponse
from skyledge_sdk.models.pageable import Pageable

from skyledge_sdk.api_client import ApiClient, RequestSerialized
from skyledge_sdk.api_response import ApiResponse
from skyledge_sdk.rest import RESTResponseType


class SearchControlRoomEventsControllerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_events_within_control_room(
        self,
        control_room_id: StrictStr,
        pageable: Pageable,
        control_room_event_search_request: ControlRoomEventSearchRequest,
        before: Optional[datetime] = None,
        after: Optional[datetime] = None,
        count: Optional[StrictBool] = None,
        is_event_insight_search: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControlRoomEventsResponse:
        """search_events_within_control_room


        :param control_room_id: (required)
        :type control_room_id: str
        :param pageable: (required)
        :type pageable: Pageable
        :param control_room_event_search_request: (required)
        :type control_room_event_search_request: ControlRoomEventSearchRequest
        :param before:
        :type before: datetime
        :param after:
        :type after: datetime
        :param count:
        :type count: bool
        :param is_event_insight_search:
        :type is_event_insight_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_events_within_control_room_serialize(
            control_room_id=control_room_id,
            pageable=pageable,
            control_room_event_search_request=control_room_event_search_request,
            before=before,
            after=after,
            count=count,
            is_event_insight_search=is_event_insight_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControlRoomEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_events_within_control_room_with_http_info(
        self,
        control_room_id: StrictStr,
        pageable: Pageable,
        control_room_event_search_request: ControlRoomEventSearchRequest,
        before: Optional[datetime] = None,
        after: Optional[datetime] = None,
        count: Optional[StrictBool] = None,
        is_event_insight_search: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControlRoomEventsResponse]:
        """search_events_within_control_room


        :param control_room_id: (required)
        :type control_room_id: str
        :param pageable: (required)
        :type pageable: Pageable
        :param control_room_event_search_request: (required)
        :type control_room_event_search_request: ControlRoomEventSearchRequest
        :param before:
        :type before: datetime
        :param after:
        :type after: datetime
        :param count:
        :type count: bool
        :param is_event_insight_search:
        :type is_event_insight_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_events_within_control_room_serialize(
            control_room_id=control_room_id,
            pageable=pageable,
            control_room_event_search_request=control_room_event_search_request,
            before=before,
            after=after,
            count=count,
            is_event_insight_search=is_event_insight_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControlRoomEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_events_within_control_room_without_preload_content(
        self,
        control_room_id: StrictStr,
        pageable: Pageable,
        control_room_event_search_request: ControlRoomEventSearchRequest,
        before: Optional[datetime] = None,
        after: Optional[datetime] = None,
        count: Optional[StrictBool] = None,
        is_event_insight_search: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search_events_within_control_room


        :param control_room_id: (required)
        :type control_room_id: str
        :param pageable: (required)
        :type pageable: Pageable
        :param control_room_event_search_request: (required)
        :type control_room_event_search_request: ControlRoomEventSearchRequest
        :param before:
        :type before: datetime
        :param after:
        :type after: datetime
        :param count:
        :type count: bool
        :param is_event_insight_search:
        :type is_event_insight_search: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_events_within_control_room_serialize(
            control_room_id=control_room_id,
            pageable=pageable,
            control_room_event_search_request=control_room_event_search_request,
            before=before,
            after=after,
            count=count,
            is_event_insight_search=is_event_insight_search,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControlRoomEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_events_within_control_room_serialize(
        self,
        control_room_id,
        pageable,
        control_room_event_search_request,
        before,
        after,
        count,
        is_event_insight_search,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if control_room_id is not None:
            _path_params['controlRoomId'] = control_room_id
        # process the query parameters
        if before is not None:
            if isinstance(before, datetime):
                _query_params.append(
                    (
                        'before',
                        before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('before', before))
            
        if after is not None:
            if isinstance(after, datetime):
                _query_params.append(
                    (
                        'after',
                        after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('after', after))
            
        if pageable is not None:
            
            _query_params.append(('pageable', pageable))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if is_event_insight_search is not None:
            
            _query_params.append(('isEventInsightSearch', is_event_insight_search))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if control_room_event_search_request is not None:
            _body_params = control_room_event_search_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyAuth', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/controlrooms/{controlRoomId}/events/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


