{"version":3,"file":"static/js/325.b8967990.chunk.js","mappings":"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","sources":["components/external/UserPasswordTab.tsx","components/external/index.tsx","components/custom/InlineUpdate.tsx","components/Custom.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Typography, Button } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport { FormControl } from \"@mui/material\";\nimport { useRecordContext, useDataProvider } from \"react-admin\";\nimport { httpAuthClient } from \"../../rav4-jsonapi-client/ra-jsonapi-client\";\nimport { useConf } from \"../../Config\";\nimport { useNotify } from \"react-admin\";\n\nexport const UserPasswordTab = () => {\n  const conf = useConf();\n  const notify = useNotify();\n  const record = useRecordContext();\n  const dataProvider = useDataProvider();\n  const [pwdValue, setPwdValue] = useState(\"\");\n  const [rpwdValue, setRPwdValue] = useState(\"\");\n  const [submitColor, setSubmitColor] = useState<\n    \"default\" | \"inherit\" | \"secondary\" | \"primary\" | undefined\n  >(\"secondary\");\n  const onPwdChange = (e: any) => {\n    let pwdValue = e.target.value;\n    setPwdValue(pwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n    // console.log(pwdValue, rpwdValue);\n  };\n  const onRPwdVerify = (e: any) => {\n    let rpwdValue = e.target.value;\n    setRPwdValue(rpwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n    // console.log(pwdValue, rpwdValue);\n  };\n  const handleSubmit = () => {\n    // console.log(rpwdValue);\n    if (pwdValue !== rpwdValue) {\n      notify(\"Passwords don't match\", { type: \"warning\" });\n      return;\n    }\n    if (pwdValue.length < 6) {\n      notify(\"Password too short\", { type: \"warning\" });\n      return;\n    }\n    const data = {\n      password: pwdValue,\n    };\n    httpAuthClient(`${conf.api_root}/Users/${record?.id}/change_password`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    })\n      .then(() => notify(\"Password Changed!\"))\n      .catch(() => notify(`Error Changing Password`, { type: \"warning\" }));\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <FormControl>\n        <Grid item xs={12} spacing={4}>\n          <Typography variant=\"body2\" component=\"p\">\n            <b>Change the user password</b>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} spacing={4}>\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"New Password\"\n            type=\"password\"\n            onChange={onPwdChange}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4}>\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Repeat Password\"\n            type=\"password\"\n            onChange={onRPwdVerify}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4}>\n          <Button\n            variant=\"contained\"\n            color={submitColor}\n            onClick={handleSubmit}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport const ApiUserPasswordTab = () => {\n  const conf = useConf();\n  const notify = useNotify();\n  const record = useRecordContext();\n  const dataProvider = useDataProvider();\n  const [curPwdValue, setCurPwdValue] = useState(\"\");\n  const [newPwdValue, setNewPwdValue] = useState(\"\");\n  const [rpwdValue, setRPwdValue] = useState(\"\");\n  const [submitColor, setSubmitColor] = useState<\n    \"default\" | \"inherit\" | \"secondary\" | \"primary\" | undefined\n  >(\"secondary\");\n\n  const onCurPwdChange = (e: any) => {\n    let pwdValue = e.target.value;\n    setCurPwdValue(pwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n  };\n  const onNewPwdChange = (e: any) => {\n    let pwdValue = e.target.value;\n    setNewPwdValue(pwdValue);\n    setSubmitColor(\n      pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"secondary\"\n    );\n  };\n  const onRPwdVerify = (e: any) => {\n    let rpwdValue = e.target.value;\n    setRPwdValue(rpwdValue);\n    setSubmitColor(\n      newPwdValue === rpwdValue && newPwdValue.length > 5\n        ? \"primary\"\n        : \"secondary\"\n    );\n  };\n  const handleSubmit = () => {\n    // console.log(rpwdValue);\n    if (newPwdValue !== rpwdValue) {\n      notify(\"Passwords don't match\", { type: \"warning\" });\n      return;\n    }\n    if (newPwdValue.length < 1) {\n      notify(\"Password too short\", { type: \"warning\" });\n      return;\n    }\n    const data = {\n      password: newPwdValue,\n    };\n    httpAuthClient(`${conf.api_root}/Users/${record?.id}/change_password`, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    })\n      .then(() => notify(\"Password Changed!\"))\n      .catch(() => notify(`Error Changing Password`, { type: \"warning\" }));\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <FormControl>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <Typography variant=\"body2\" component=\"p\">\n            <b>Current user password</b>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Current Password\"\n            type=\"password\"\n            onChange={onCurPwdChange}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <Typography variant=\"body2\" component=\"p\">\n            <b>New user password</b>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"New Password\"\n            type=\"password\"\n            onChange={onNewPwdChange}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Repeat Password\"\n            type=\"password\"\n            onChange={onRPwdVerify}\n          />\n        </Grid>\n        <Grid item xs={12} spacing={4} component=\"div\">\n          <Button\n            variant=\"contained\"\n            color={submitColor}\n            onClick={handleSubmit}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </FormControl>\n    </Box>\n  );\n};\n","import * as React from \"react\";\n\nexport const MyComp = (props: any) => {\n  return <div>HMMMM</div>;\n};\n","import Grid from \"@mui/material/Grid\";\r\nimport { TextField, PasswordInput } from \"react-admin\";\r\nimport * as React from \"react\";\r\nimport { useRecordContext, useRedirect } from \"react-admin\";\r\nimport { Create, SimpleForm } from 'react-admin';\r\nimport { TextInput } from 'react-admin';\r\nimport { Modal, Box, Typography, Button } from '@mui/material';\r\nimport { Select, MenuItem, FormControl, InputLabel, SelectChangeEvent } from \"@mui/material\";\r\n\r\n\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '50%',\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n  };\r\n  \r\n\r\nconst UpdateModal = ({record, buttonVal, sx} : {record:any , buttonVal? : string, sx?: any}) => {\r\n  \r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = (e: any) => {\r\n        setOpen(true);\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleClose = (e: any) => {\r\n        e.stopPropagation();\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"text\" onClick={handleOpen}>\r\n        {buttonVal}\r\n      </Button>\r\n      \r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        \r\n        <Box sx={style}>\r\n          <pre>{JSON.stringify(record, null, 4)}</pre>\r\n          <Button onClick={handleClose} variant=\"outlined\">\r\n            Close Window\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Remove the unused destructured elements\r\nexport const InlineUpdateModal = () => {\r\n    const record = useRecordContext();\r\n  \r\n    if (!record) {\r\n      return null;\r\n    }\r\n  \r\n    return (\r\n      <Box sx={{ textAlign: 'center' }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          <UpdateModal record={record} buttonVal={\"Update\"}/>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  };\r\n\r\nexport const InlineUpdateDropdown = () => {\r\n    const record = useRecordContext();\r\n    const [selectedValue, setSelectedValue] = React.useState(\"\");\r\n    const [selectedValueSx, setSelectedValueSx] = React.useState({});\r\n  \r\n    if (!record) {\r\n        return null;\r\n    }\r\n  \r\n    const handleChange = (event: SelectChangeEvent<string>) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        setSelectedValue(event.target.value as string);\r\n        const selectedOption = options.find(option => option.value === event.target.value);\r\n        setSelectedValueSx(selectedOption?.sx || {});\r\n        // Perform any action with the selected value\r\n        console.log(\"Selected value:\", event.target.value);\r\n    };\r\n  \r\n    const options = [\r\n        { value: \"option1\", label: \"Option 1\", sx: {backgroundColor : 'red' } },\r\n        { value: \"option2\", label: \"Option 2\", sx: {backgroundColor : 'orange' } },\r\n        { value: \"option3\", label: \"Option 3\", sx: {backgroundColor : 'yellow' }},\r\n        { value: \"option4\", label: \"Option 4\", sx: {backgroundColor : 'green' }},\r\n        { value: \"option5\", label: \"Option 5\", sx: {backgroundColor : 'blue' }},\r\n    ];\r\n\r\n    const label = selectedValue ? \"\" : \"Select Option\"\r\n    return (\r\n      <Box sx={{ textAlign: \"center\" }}>\r\n        <FormControl variant=\"outlined\" sx={{ minWidth: 120 }}>\r\n          <InputLabel id=\"inline-update-dropdown-label\">{label}</InputLabel>\r\n          <Select\r\n            labelId={selectedValue ? undefined : \"inline-update-dropdown-label\"}\r\n            value={selectedValue}\r\n            onChange={handleChange}\r\n            onClick={(event)=>event.stopPropagation()}\r\n            label={label}\r\n            sx={selectedValueSx}\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>None</em>\r\n            </MenuItem>\r\n            {options.map((option) => (\r\n                <MenuItem key={option.value} value={option.value} sx={option.sx}>\r\n                    {option.label}\r\n                </MenuItem>))\r\n                }\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  export const InlineUpdateTest = InlineUpdateDropdown;","import Grid from \"@mui/material/Grid\";\nimport { Typography } from \"@mui/material\";\nimport { TextField, PasswordInput } from \"react-admin\";\nimport * as React from \"react\";\nimport { useRecordContext, useRedirect } from \"react-admin\";\nimport { Create, SimpleForm } from 'react-admin';\nimport { TextInput } from 'react-admin';\nimport {ApiFabCreate} from './apifab/ApiFabCreate.tsx'\nimport {ShowApiFab} from './apifab/ApiFabShow.tsx'\nimport { Box } from '@mui/material';\n\nexport * from \"./external/UserPasswordTab\";\nexport * from \"./apifab/DBCreate.tsx\";\nexport * from \"./external\";\nexport * from \"./apifab/ApiFabComponents.tsx\"\nexport * from './apifab/ApiFab'\nexport * from \"./custom/InlineUpdate.tsx\";\n\n\n/*\nSampleColumnField: demonstrates how to create a custom field component\n*/\nexport const SampleColumnField = ({ attribute, label, mode, ...props }: { attribute: any, label: string, mode: string }) => {\n  console.log(\"attribute: \", attribute);\n  console.log(\"mode: \", mode); // list, show, edit\n  console.log(\"label: \", label);\n  console.log(\"props: \", props);\n  if(!attribute){\n    return <span style={{ color: \"red\" }}>\n      No attr - {mode}\n    </span>\n  }\n  return <>XX \n    <TextField\n      source={attribute?.name}\n      key={attribute?.name}\n      style={{ color: \"green\" }}\n    /> XX - \n    {mode}\n\n  </>\n};\n\nexport const EmployeeLabel = (props: any) => {\n  const employee = props.instance;\n  return (\n    <div>\n      {\" \"}\n      {employee.attributes?.FirstName} {employee.attributes?.LastName}\n    </div>\n  );\n};\n\nexport const CustomerLabel = (props: any) => {\n  const customer = props.instance;\n  return (\n    <div>\n      {\" \"}\n      <b>{customer.attributes?.CompanyName}</b>{\" \"}\n      <i>{customer.attributes?.ContactName}</i>\n    </div>\n  );\n};\n\nexport const UserPasswordField = (props: any) => {\n  if (props.mode === \"list\") {\n    return <span />;\n  }\n  if (props.mode === \"edit\") {\n    return (\n      <>\n        <Grid item xs={12} spacing={4}>\n          <Typography variant=\"h6\" component=\"h6\">\n            Change Password\n          </Typography>\n        </Grid>\n        <Grid item xs={4} spacing={4}>\n          <PasswordInput source=\"_password\" />{\" \"}\n        </Grid>\n        <Grid item xs={4} spacing={4}>\n          <PasswordInput source=\"_password\" />{\" \"}\n        </Grid>\n        <Grid item xs={4} spacing={4}></Grid>\n      </>\n    );\n  }\n  return <></>;\n};\n\nexport const CustomTab = (props: any) => {\n  // eslint-disable-next-line no-unused-vars\n  const record = useRecordContext();\n  return <div>Some Text</div>;\n};\n\n\nexport const CreateLocation = (props) => {\n  return <>\n  <Create>\n    <ApiFabCreate attributes={[]} />\n  </Create>\n  </>\n};\n\nexport const Overlay = () => (\n  // full-screen overlay\n  <>\n    <div id=\"popup-overlay\"></div>\n  </>\n);\n\n\nexport const showApiFab = () => {\n  return <ShowApiFab />\n}\n\nexport const CreateApiFab = () => {\n  \n  const redirect = useRedirect();\n  React.useEffect(() => {\n      // edit view\n      redirect('/Home')\n  }, [])\n\n  return <></>\n}\n\nexport const DateTime = ({ attribute, mode, ...props}: {attribute: any, mode: string}) => {\n  const record = useRecordContext();\n  if(!record || !attribute?.name){\n    return <></>\n  }\n  //console.log(\"DateTime: \", attribute, mode, props);\n  const value = record[attribute?.name].split('.')[0];\n  return <>{value}</>;\n}\n\nconst redactConnstr = (connstr: string) => {\n  let redacted = null\n  if(connstr){\n    const groups = connstr.match(/(.*):(.*)@(.*)/)\n    redacted = groups ? `${groups[1]}:********@${groups[3]}` : connstr; \n  }\n  return <>{redacted}</>;\n}\n\nexport const ConnectionString = (props: any) => {\n  const record = useRecordContext();\n  //return <span style={{width: \"16em\", display: \"inline-block\", wordWrap: \"break-word\", wordBreak: \"break-all\"}}>{redactConnstr(record?.connection_string)}</span>;\n  return <span>{redactConnstr(record?.connection_string)}</span>;  \n}\n"],"names":["UserPasswordTab","conf","useConf","notify","useNotify","record","useRecordContext","pwdValue","setPwdValue","useDataProvider","useState","rpwdValue","setRPwdValue","submitColor","setSubmitColor","_jsx","Box","component","sx","m","width","noValidate","autoComplete","children","_jsxs","FormControl","Grid","item","xs","spacing","Typography","variant","TextField","id","label","type","onChange","e","target","value","length","Button","color","onClick","handleSubmit","data","password","httpAuthClient","concat","api_root","method","body","JSON","stringify","then","catch","ApiUserPasswordTab","curPwdValue","setCurPwdValue","newPwdValue","setNewPwdValue","MyComp","props","style","position","top","left","transform","bgcolor","border","boxShadow","p","UpdateModal","_ref","buttonVal","open","setOpen","React","handleClose","stopPropagation","Modal","onClose","InlineUpdateModal","textAlign","display","alignItems","InlineUpdateDropdown","selectedValue","setSelectedValue","selectedValueSx","setSelectedValueSx","options","backgroundColor","minWidth","InputLabel","Select","labelId","undefined","event","preventDefault","selectedOption","find","option","console","log","MenuItem","map","InlineUpdateTest","SampleColumnField","attribute","mode","_objectWithoutProperties","_excluded","_Fragment","source","name","EmployeeLabel","_employee$attributes","_employee$attributes2","employee","instance","attributes","FirstName","LastName","CustomerLabel","_customer$attributes","_customer$attributes2","customer","CompanyName","ContactName","UserPasswordField","PasswordInput","CustomTab","CreateLocation","Create","ApiFabCreate","Overlay","showApiFab","ShowApiFab","CreateApiFab","redirect","useRedirect","DateTime","_ref2","_excluded2","split","redactConnstr","connstr","redacted","groups","match","ConnectionString","connection_string"],"sourceRoot":""}