# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.oscilloscope_pb2 as oscilloscope__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in oscilloscope_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OscilloscopeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSystemInfo = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetSystemInfo',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=oscilloscope__pb2.SystemInfo.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetStatus',
                request_serializer=oscilloscope__pb2.Channel.SerializeToString,
                response_deserializer=oscilloscope__pb2.ChannelStatus.FromString,
                _registered_method=True)
        self.SetChannelStatus = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/SetChannelStatus',
                request_serializer=oscilloscope__pb2.ChannelWriteableStatus.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetTriggerMode = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/SetTriggerMode',
                request_serializer=oscilloscope__pb2.TriggerMode.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTriggerMode = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetTriggerMode',
                request_serializer=oscilloscope__pb2.Channel.SerializeToString,
                response_deserializer=oscilloscope__pb2.TriggerMode.FromString,
                _registered_method=True)
        self.SetTriggerLevel = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/SetTriggerLevel',
                request_serializer=oscilloscope__pb2.TriggerLevel.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTriggerLevel = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetTriggerLevel',
                request_serializer=oscilloscope__pb2.Channel.SerializeToString,
                response_deserializer=oscilloscope__pb2.TriggerLevel.FromString,
                _registered_method=True)
        self.SetFlank = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/SetFlank',
                request_serializer=oscilloscope__pb2.Flank.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetFlank = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetFlank',
                request_serializer=oscilloscope__pb2.Channel.SerializeToString,
                response_deserializer=oscilloscope__pb2.Flank.FromString,
                _registered_method=True)
        self.IsTriggered = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/IsTriggered',
                request_serializer=oscilloscope__pb2.Channel.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetTimeScale = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/SetTimeScale',
                request_serializer=oscilloscope__pb2.TimeScale.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTimeScale = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetTimeScale',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=oscilloscope__pb2.TimeScale.FromString,
                _registered_method=True)
        self.SetHoldOffTime = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/SetHoldOffTime',
                request_serializer=oscilloscope__pb2.Time.SerializeToString,
                response_deserializer=oscilloscope__pb2.Time.FromString,
                _registered_method=True)
        self.GetHoldOffTime = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetHoldOffTime',
                request_serializer=oscilloscope__pb2.Channel.SerializeToString,
                response_deserializer=oscilloscope__pb2.Time.FromString,
                _registered_method=True)
        self.SetDecimationMode = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/SetDecimationMode',
                request_serializer=oscilloscope__pb2.DecimationMode.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetDecimationMode = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetDecimationMode',
                request_serializer=oscilloscope__pb2.Channel.SerializeToString,
                response_deserializer=oscilloscope__pb2.DecimationMode.FromString,
                _registered_method=True)
        self.GetData = channel.unary_unary(
                '/oscilloscope.OscilloscopeService/GetData',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=oscilloscope__pb2.OscilloscopeData.FromString,
                _registered_method=True)


class OscilloscopeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSystemInfo(self, request, context):
        """*
        Retrieve static information about the system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """*
        Returns the current status of the module:
        - Whether the buffer is full
        - Whether the device is busy
        - Whether the channel is enabled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChannelStatus(self, request, context):
        """*
        Enables or disables the specified channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTriggerMode(self, request, context):
        """--------------------------------------------------------------//
        Trigger methods                         //
        --------------------------------------------------------------//

        *
        Set the trigger mode to use for a certain channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerMode(self, request, context):
        """*
        Get the currently active trigger mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTriggerLevel(self, request, context):
        """*
        Set the trigger level
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerLevel(self, request, context):
        """*
        Get the currently active trigger level
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFlank(self, request, context):
        """*
        Set the flank that a channel should trigger on
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFlank(self, request, context):
        """*
        Returns the flank that this channel triggers on
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsTriggered(self, request, context):
        """*
        Returns whether the oscilloscope has triggered
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTimeScale(self, request, context):
        """*
        Set the time scale to the preferred values.
        This will enable or disable decimation as is needed. 
        When infeasible, raises an exception
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimeScale(self, request, context):
        """*
        Returns the current time setting of a channel.
        Each channel has a defined starting point and an end point.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHoldOffTime(self, request, context):
        """--------------------------------------------------------------//
        Time control methods                        //
        --------------------------------------------------------------//

        *
        Currently unused and a NOOP

        Specifies the time between that has to pass so that two succeeding triggers
        are recognized as such. This means that once the device has triggered,
        this amount of time has to pass so that another trigger can occur.

        returns the actual time that was set
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHoldOffTime(self, request, context):
        """*
        Currently unused and a NOOP. No guarantees are being made as to what this method returns 

        Returns the Hold-Off time (see @SetHoldOffTime) that a channel currently uses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDecimationMode(self, request, context):
        """*
        Set the decimation method to use when a time-scale is chosen that
        does not allow for the highest time resolution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDecimationMode(self, request, context):
        """*
        Get the decimation method that is currently in use
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """--------------------------------------------------------------//
        Readout methods                          //
        --------------------------------------------------------------//

        *
        Returns the current data from all channels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OscilloscopeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSystemInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemInfo,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=oscilloscope__pb2.SystemInfo.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=oscilloscope__pb2.Channel.FromString,
                    response_serializer=oscilloscope__pb2.ChannelStatus.SerializeToString,
            ),
            'SetChannelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChannelStatus,
                    request_deserializer=oscilloscope__pb2.ChannelWriteableStatus.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetTriggerMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTriggerMode,
                    request_deserializer=oscilloscope__pb2.TriggerMode.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetTriggerMode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerMode,
                    request_deserializer=oscilloscope__pb2.Channel.FromString,
                    response_serializer=oscilloscope__pb2.TriggerMode.SerializeToString,
            ),
            'SetTriggerLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTriggerLevel,
                    request_deserializer=oscilloscope__pb2.TriggerLevel.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetTriggerLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerLevel,
                    request_deserializer=oscilloscope__pb2.Channel.FromString,
                    response_serializer=oscilloscope__pb2.TriggerLevel.SerializeToString,
            ),
            'SetFlank': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFlank,
                    request_deserializer=oscilloscope__pb2.Flank.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetFlank': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFlank,
                    request_deserializer=oscilloscope__pb2.Channel.FromString,
                    response_serializer=oscilloscope__pb2.Flank.SerializeToString,
            ),
            'IsTriggered': grpc.unary_unary_rpc_method_handler(
                    servicer.IsTriggered,
                    request_deserializer=oscilloscope__pb2.Channel.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetTimeScale': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTimeScale,
                    request_deserializer=oscilloscope__pb2.TimeScale.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetTimeScale': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimeScale,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=oscilloscope__pb2.TimeScale.SerializeToString,
            ),
            'SetHoldOffTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetHoldOffTime,
                    request_deserializer=oscilloscope__pb2.Time.FromString,
                    response_serializer=oscilloscope__pb2.Time.SerializeToString,
            ),
            'GetHoldOffTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHoldOffTime,
                    request_deserializer=oscilloscope__pb2.Channel.FromString,
                    response_serializer=oscilloscope__pb2.Time.SerializeToString,
            ),
            'SetDecimationMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDecimationMode,
                    request_deserializer=oscilloscope__pb2.DecimationMode.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetDecimationMode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecimationMode,
                    request_deserializer=oscilloscope__pb2.Channel.FromString,
                    response_serializer=oscilloscope__pb2.DecimationMode.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=oscilloscope__pb2.OscilloscopeData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oscilloscope.OscilloscopeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('oscilloscope.OscilloscopeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OscilloscopeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSystemInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetSystemInfo',
            datatypes__pb2.Empty.SerializeToString,
            oscilloscope__pb2.SystemInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetStatus',
            oscilloscope__pb2.Channel.SerializeToString,
            oscilloscope__pb2.ChannelStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetChannelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/SetChannelStatus',
            oscilloscope__pb2.ChannelWriteableStatus.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTriggerMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/SetTriggerMode',
            oscilloscope__pb2.TriggerMode.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTriggerMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetTriggerMode',
            oscilloscope__pb2.Channel.SerializeToString,
            oscilloscope__pb2.TriggerMode.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTriggerLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/SetTriggerLevel',
            oscilloscope__pb2.TriggerLevel.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTriggerLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetTriggerLevel',
            oscilloscope__pb2.Channel.SerializeToString,
            oscilloscope__pb2.TriggerLevel.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFlank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/SetFlank',
            oscilloscope__pb2.Flank.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFlank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetFlank',
            oscilloscope__pb2.Channel.SerializeToString,
            oscilloscope__pb2.Flank.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsTriggered(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/IsTriggered',
            oscilloscope__pb2.Channel.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTimeScale(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/SetTimeScale',
            oscilloscope__pb2.TimeScale.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTimeScale(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetTimeScale',
            datatypes__pb2.Empty.SerializeToString,
            oscilloscope__pb2.TimeScale.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetHoldOffTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/SetHoldOffTime',
            oscilloscope__pb2.Time.SerializeToString,
            oscilloscope__pb2.Time.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHoldOffTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetHoldOffTime',
            oscilloscope__pb2.Channel.SerializeToString,
            oscilloscope__pb2.Time.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDecimationMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/SetDecimationMode',
            oscilloscope__pb2.DecimationMode.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDecimationMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetDecimationMode',
            oscilloscope__pb2.Channel.SerializeToString,
            oscilloscope__pb2.DecimationMode.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/oscilloscope.OscilloscopeService/GetData',
            datatypes__pb2.Empty.SerializeToString,
            oscilloscope__pb2.OscilloscopeData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
