# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: rfpcbsuper.proto
# Protobuf Python Version: 6.31.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    0,
    '',
    'rfpcbsuper.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2

from cirque.packages.grpc.datatypes_pb2 import *

DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10rfpcbsuper.proto\x12\nrfpcbsuper\x1a\x0f\x64\x61tatypes.proto\"p\n\x08LMXStart\x12\"\n\x06\x64\x65vice\x18\x01 \x01(\x0e\x32\x12.rfpcbsuper.Device\x12\x11\n\x07power_a\x18\x02 \x01(\x01H\x00\x12\x11\n\x07power_b\x18\x03 \x01(\x01H\x01\x42\x0c\n\na_optionalB\x0c\n\nb_optional\"\x87\x01\n\x08LTCStart\x12\x0e\n\x04gain\x18\x01 \x01(\rH\x00\x12\x14\n\ngain_error\x18\x02 \x01(\x01H\x01\x12\x15\n\x0bphase_error\x18\x03 \x01(\x01H\x02\x42\x0f\n\rgain_optionalB\x15\n\x13gain_error_optionalB\x16\n\x14phase_error_optional\"`\n\x0c\x45ndpointList\x12+\n\x05index\x18\x01 \x01(\x0b\x32\x1c.sdr.datatypes.EndpointIndex\x12#\n\x07\x64\x65vices\x18\x02 \x03(\x0e\x32\x12.rfpcbsuper.Device\"\xa2\x02\n\nSweepInput\x12+\n\x05index\x18\x01 \x01(\x0b\x32\x1c.sdr.datatypes.EndpointIndex\x12\x11\n\tfrequency\x18\x02 \x01(\x01\x12\r\n\x05power\x18\x03 \x01(\x01\x12\x10\n\x06offset\x18\x04 \x01(\x01H\x00\x12/\n\x06method\x18\x05 \x01(\x0e\x32\x1d.rfpcbsuper.SweepInput.MethodH\x01\"\\\n\x06Method\x12\x0c\n\x08MIXSWEEP\x10\x00\x12\x0b\n\x07IFSWEEP\x10\x01\x12\x14\n\x10IFSWEEP_EXTENDED\x10\x02\x12\x0b\n\x07RFSWEEP\x10\x03\x12\x14\n\x10RFSWEEP_EXTENDED\x10\x04\x42\x11\n\x0foffset_optionalB\x11\n\x0fmethod_optional\"\x83\x01\n\tStartInfo\x12+\n\x05index\x18\x01 \x01(\x0b\x32\x1c.sdr.datatypes.EndpointIndex\x12&\n\x08lmx_list\x18\x02 \x03(\x0b\x32\x14.rfpcbsuper.LMXStart\x12!\n\x03ltc\x18\x03 \x01(\x0b\x32\x14.rfpcbsuper.LTCStart*;\n\x06\x44\x65vice\x12\x08\n\x04TXPL\x10\x00\x12\x08\n\x04RXPL\x10\x01\x12\x08\n\x04IFLO\x10\x02\x12\x08\n\x04RFLO\x10\x03\x12\t\n\x05\x44\x45MOD\x10\x04\x32\x98\x03\n\x11RFPCBSuperService\x12\x39\n\x05Reset\x12\x18.rfpcbsuper.EndpointList\x1a\x14.sdr.datatypes.Empty\"\x00\x12\x38\n\x07Startup\x12\x15.rfpcbsuper.StartInfo\x1a\x14.sdr.datatypes.Empty\"\x00\x12\x37\n\x05Sweep\x12\x16.rfpcbsuper.SweepInput\x1a\x14.sdr.datatypes.Empty\"\x00\x12\x46\n\rGetDeviceFreq\x12\x1c.sdr.datatypes.EndpointIndex\x1a\x15.sdr.datatypes.Double\"\x00\x12\x46\n\x0eSetAttenuation\x12\x1c.sdr.datatypes.IndexedDouble\x1a\x14.sdr.datatypes.Empty\"\x00\x12\x45\n\x0cGetDemodTemp\x12\x1c.sdr.datatypes.EndpointIndex\x1a\x15.sdr.datatypes.Double\"\x00P\x00\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'rfpcbsuper_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_DEVICE']._serialized_start=826
  _globals['_DEVICE']._serialized_end=885
  _globals['_LMXSTART']._serialized_start=49
  _globals['_LMXSTART']._serialized_end=161
  _globals['_LTCSTART']._serialized_start=164
  _globals['_LTCSTART']._serialized_end=299
  _globals['_ENDPOINTLIST']._serialized_start=301
  _globals['_ENDPOINTLIST']._serialized_end=397
  _globals['_SWEEPINPUT']._serialized_start=400
  _globals['_SWEEPINPUT']._serialized_end=690
  _globals['_SWEEPINPUT_METHOD']._serialized_start=560
  _globals['_SWEEPINPUT_METHOD']._serialized_end=652
  _globals['_STARTINFO']._serialized_start=693
  _globals['_STARTINFO']._serialized_end=824
  _globals['_RFPCBSUPERSERVICE']._serialized_start=888
  _globals['_RFPCBSUPERSERVICE']._serialized_end=1296
# @@protoc_insertion_point(module_scope)
