# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.ad5675_pb2 as ad5675__pb2
import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ad5675_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AD5675ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetChannel = channel.unary_unary(
                '/ad5675.AD5675Service/SetChannel',
                request_serializer=ad5675__pb2.WriteChannel.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetChannel = channel.unary_unary(
                '/ad5675.AD5675Service/GetChannel',
                request_serializer=ad5675__pb2.ReadChannel.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)


class AD5675ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetChannel(self, request, context):
        """*
        @brief Writes a value to one channel

        The voltage depends on the output scaling, can be 2,5V or 5V or other values in combination
        with analog circuits. The device has 16bit for Ad5675R and 12bit for AD5672R both 8 channels.

        @param msg WriteChannel, with sdr.datatypes.EndpointIndex, Channel and Value
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannel(self, request, context):
        """*
        @brief Get a value to one channel

        The voltage depends on the output scaling, can be 2,5V or 5V or other values in combination
        with analog circuits. The device has 16bit for Ad5675R and 12bit for AD5672R both 8 channels.

        @param msg WriteChannel, with sdr.datatypes.EndpointIndex and Channel
        @return uint32
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AD5675ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChannel,
                    request_deserializer=ad5675__pb2.WriteChannel.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannel,
                    request_deserializer=ad5675__pb2.ReadChannel.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ad5675.AD5675Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ad5675.AD5675Service', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AD5675Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ad5675.AD5675Service/SetChannel',
            ad5675__pb2.WriteChannel.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ad5675.AD5675Service/GetChannel',
            ad5675__pb2.ReadChannel.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
