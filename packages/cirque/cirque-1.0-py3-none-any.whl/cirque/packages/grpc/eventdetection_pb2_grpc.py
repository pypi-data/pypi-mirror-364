# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.eventdetection_pb2 as eventdetection__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in eventdetection_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EventDetectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Enable = channel.unary_unary(
                '/eventdetection.EventDetectionService/Enable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTDMChannels = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetTDMChannels',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetEnable = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetEnable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.ActivateBypass = channel.unary_unary(
                '/eventdetection.EventDetectionService/ActivateBypass',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.DeactivateBypass = channel.unary_unary(
                '/eventdetection.EventDetectionService/DeactivateBypass',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetBypassStatus = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetBypassStatus',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetPretriggerValues = channel.unary_unary(
                '/eventdetection.EventDetectionService/SetPretriggerValues',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetPretriggerValues = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetPretriggerValues',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetEventLength = channel.unary_unary(
                '/eventdetection.EventDetectionService/SetEventLength',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEventLength = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetEventLength',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetTriggerEngine = channel.unary_unary(
                '/eventdetection.EventDetectionService/SetTriggerEngine',
                request_serializer=eventdetection__pb2.TriggerEngine.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTriggerEngine = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetTriggerEngine',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=eventdetection__pb2.TriggerEngine.FromString,
                _registered_method=True)
        self.SetEventThreshold = channel.unary_unary(
                '/eventdetection.EventDetectionService/SetEventThreshold',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEventThreshold = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetEventThreshold',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetSoftwareTrigger = channel.unary_unary(
                '/eventdetection.EventDetectionService/SetSoftwareTrigger',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetSingleTriggerChannel = channel.unary_unary(
                '/eventdetection.EventDetectionService/SetSingleTriggerChannel',
                request_serializer=eventdetection__pb2.ChannelConfiguration.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSingleTriggerChannel = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetSingleTriggerChannel',
                request_serializer=eventdetection__pb2.ChannelNumber.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetChannelActive = channel.unary_unary(
                '/eventdetection.EventDetectionService/SetChannelActive',
                request_serializer=eventdetection__pb2.ChannelConfiguration.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetChannelActive = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetChannelActive',
                request_serializer=eventdetection__pb2.ChannelNumber.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.ResetTimestamp = channel.unary_unary(
                '/eventdetection.EventDetectionService/ResetTimestamp',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.ResetGlobalTimestamp = channel.unary_unary(
                '/eventdetection.EventDetectionService/ResetGlobalTimestamp',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.ResetCounters = channel.unary_unary(
                '/eventdetection.EventDetectionService/ResetCounters',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetStoredEvents = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetStoredEvents',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetDiscardedEvents = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetDiscardedEvents',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetStatistics = channel.unary_unary(
                '/eventdetection.EventDetectionService/GetStatistics',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)


class EventDetectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Enable(self, request, context):
        """*
        @brief Enables the module.

        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTDMChannels(self, request, context):
        """*
        @brief Reads the number of TDM channels processed by this module.

        @param msg Endpoint ID
        @return UInteger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnable(self, request, context):
        """*
        @brief Reads the current status of the module.

        Returns whether the module is currently enabled.
        @param msg Endpoint ID
        @return bool
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActivateBypass(self, request, context):
        """*
        @brief Activates the bypass.

        Data stream will be forwarded without preprocessing.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeactivateBypass(self, request, context):
        """*
        @brief Deactivates the bypass.

        Events will be detected and forwarded as isolated data.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBypassStatus(self, request, context):
        """*
        @brief Reads the current status of the bypass.

        Returns whether the bypass is currently activated.
        @param msg Endpoint ID
        @return bool
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPretriggerValues(self, request, context):
        """*
        @brief Sets the amount of pretrigger values.

        Defines the number of values that are stored in the DMA before the threshold is exceeded.
        @param msg UInteger
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPretriggerValues(self, request, context):
        """*
        @brief Returns the number of pretrigger values stored in the DMA.

        @param msg sdr.datatypes.EndpointIndex
        @return UInteger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEventLength(self, request, context):
        """*
        @brief Sets the length of an event.

        Defines the time an event is stored.
        @param msg UInteger
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventLength(self, request, context):
        """*
        @brief Returns the length of an event.

        @param msg sdr.datatypes.EndpointIndex
        @return UInteger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTriggerEngine(self, request, context):
        """*
        @brief Specifies which trigger engine should be used.

        @param msg TriggerEngine
        - THRESHOLD: Events are detected by comparing threshold with difference between two succeeding samples
        - MOVING_AVERAGE: Events are detected by using moving averages
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerEngine(self, request, context):
        """*
        @brief Reads the currently used trigger engine.

        Returns whether the fir-filter based trigger engine is currently used.
        @param msg Endpoint ID
        @return TriggerEngine
        - THRESHOLD: Events are detected by comparing threshold with difference between two succeeding samples
        - MOVING_AVERAGE: Events are detected by using moving averages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEventThreshold(self, request, context):
        """*
        @brief Sets the threshold for detection of an event.

        Defines the comparator value for deteting the start of events.
        @param msg UInteger
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventThreshold(self, request, context):
        """*
        @brief Returns the threshold for detection of an event.

        @param msg sdr.datatypes.EndpointIndex
        @return UInteger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSoftwareTrigger(self, request, context):
        """*
        @brief Triggers detection of events

        @param msg sdr.datatypes.EndpointIndex
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSingleTriggerChannel(self, request, context):
        """*
        @brief Activate/deactivate the software trigger for the corresponding channel.

        @param msg ChannelConfiguration
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSingleTriggerChannel(self, request, context):
        """*
        @brief Returns the status of the software trigger for the corresponding channel.

        @param msg ChannelNumber
        @return Bool
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChannelActive(self, request, context):
        """*
        @brief Activate/deactivate the corresponding channel for event detection.

        @param msg ChannelConfiguration
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelActive(self, request, context):
        """*
        @brief Returns the status of the corresponding channel.

        @param msg ChannelNumber
        @return Bool
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetTimestamp(self, request, context):
        """*
        @brief Resets the timestamp of a single module

        @param msg sdr.datatypes.EndpointIndex
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetGlobalTimestamp(self, request, context):
        """*
        @brief Resets the global timestamp 

        @param msg sdr.datatypes.Empty
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetCounters(self, request, context):
        """*
        @brief Resets the counters for stored and discarded events

        @param msg sdr.datatypes.EndpointIndex
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStoredEvents(self, request, context):
        """*
        @brief Returns the counter value for the stored events.

        @param msg sdr.datatypes.EndpointIndex
        @return UInteger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDiscardedEvents(self, request, context):
        """*
        @brief Returns the counter value for the discarded events.

        @param msg sdr.datatypes.EndpointIndex
        @return UInteger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatistics(self, request, context):
        """*
        @brief Returns both counters for stored and discarded events.

        @param msg sdr.datatypes.EndpointIndex
        @return UInteger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventDetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Enable': grpc.unary_unary_rpc_method_handler(
                    servicer.Enable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetTDMChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTDMChannels,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'ActivateBypass': grpc.unary_unary_rpc_method_handler(
                    servicer.ActivateBypass,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'DeactivateBypass': grpc.unary_unary_rpc_method_handler(
                    servicer.DeactivateBypass,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetBypassStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBypassStatus,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetPretriggerValues': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPretriggerValues,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetPretriggerValues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPretriggerValues,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetEventLength': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEventLength,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEventLength': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventLength,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetTriggerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTriggerEngine,
                    request_deserializer=eventdetection__pb2.TriggerEngine.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetTriggerEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerEngine,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=eventdetection__pb2.TriggerEngine.SerializeToString,
            ),
            'SetEventThreshold': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEventThreshold,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEventThreshold': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventThreshold,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetSoftwareTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSoftwareTrigger,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetSingleTriggerChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSingleTriggerChannel,
                    request_deserializer=eventdetection__pb2.ChannelConfiguration.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetSingleTriggerChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSingleTriggerChannel,
                    request_deserializer=eventdetection__pb2.ChannelNumber.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetChannelActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChannelActive,
                    request_deserializer=eventdetection__pb2.ChannelConfiguration.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetChannelActive': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelActive,
                    request_deserializer=eventdetection__pb2.ChannelNumber.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'ResetTimestamp': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetTimestamp,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'ResetGlobalTimestamp': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetGlobalTimestamp,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'ResetCounters': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetCounters,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetStoredEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStoredEvents,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetDiscardedEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDiscardedEvents,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatistics,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'eventdetection.EventDetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('eventdetection.EventDetectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EventDetectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/Enable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTDMChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetTDMChannels',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetEnable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActivateBypass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/ActivateBypass',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeactivateBypass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/DeactivateBypass',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBypassStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetBypassStatus',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPretriggerValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/SetPretriggerValues',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPretriggerValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetPretriggerValues',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetEventLength(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/SetEventLength',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEventLength(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetEventLength',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTriggerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/SetTriggerEngine',
            eventdetection__pb2.TriggerEngine.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTriggerEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetTriggerEngine',
            datatypes__pb2.EndpointIndex.SerializeToString,
            eventdetection__pb2.TriggerEngine.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetEventThreshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/SetEventThreshold',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEventThreshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetEventThreshold',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSoftwareTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/SetSoftwareTrigger',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSingleTriggerChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/SetSingleTriggerChannel',
            eventdetection__pb2.ChannelConfiguration.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSingleTriggerChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetSingleTriggerChannel',
            eventdetection__pb2.ChannelNumber.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetChannelActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/SetChannelActive',
            eventdetection__pb2.ChannelConfiguration.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChannelActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetChannelActive',
            eventdetection__pb2.ChannelNumber.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetTimestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/ResetTimestamp',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetGlobalTimestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/ResetGlobalTimestamp',
            datatypes__pb2.Empty.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetCounters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/ResetCounters',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStoredEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetStoredEvents',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDiscardedEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetDiscardedEvents',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eventdetection.EventDetectionService/GetStatistics',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
