# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.stimulation_pb2 as stimulation__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in stimulation_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StimulationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Enable = channel.unary_unary(
                '/stimulation.StimulationService/Enable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.Disable = channel.unary_unary(
                '/stimulation.StimulationService/Disable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEnable = channel.unary_unary(
                '/stimulation.StimulationService/GetEnable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.Reset = channel.unary_unary(
                '/stimulation.StimulationService/Reset',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.IsComplexSamples = channel.unary_unary(
                '/stimulation.StimulationService/IsComplexSamples',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.GetDeltaFrequency = channel.unary_unary(
                '/stimulation.StimulationService/GetDeltaFrequency',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.GetSampleRate = channel.unary_unary(
                '/stimulation.StimulationService/GetSampleRate',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.GetSampleCount = channel.unary_unary(
                '/stimulation.StimulationService/GetSampleCount',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetRFCenterFrequency = channel.unary_unary(
                '/stimulation.StimulationService/GetRFCenterFrequency',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.SetRFCenterFrequency = channel.unary_unary(
                '/stimulation.StimulationService/SetRFCenterFrequency',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.AddTone = channel.unary_unary(
                '/stimulation.StimulationService/AddTone',
                request_serializer=stimulation__pb2.IndexedToneSpecs.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.AddTones = channel.unary_unary(
                '/stimulation.StimulationService/AddTones',
                request_serializer=stimulation__pb2.IndexedToneSpecsVector.SerializeToString,
                response_deserializer=stimulation__pb2.DoubleArray.FromString,
                _registered_method=True)
        self.SetPlaybackInterval = channel.unary_unary(
                '/stimulation.StimulationService/SetPlaybackInterval',
                request_serializer=stimulation__pb2.Interval.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetPlaybackInterval = channel.unary_unary(
                '/stimulation.StimulationService/GetPlaybackInterval',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=stimulation__pb2.Interval.FromString,
                _registered_method=True)
        self.GetPlaybackIntervalStepSize = channel.unary_unary(
                '/stimulation.StimulationService/GetPlaybackIntervalStepSize',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.WriteRawData = channel.unary_unary(
                '/stimulation.StimulationService/WriteRawData',
                request_serializer=stimulation__pb2.RawData.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.ClearSamples = channel.unary_unary(
                '/stimulation.StimulationService/ClearSamples',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetModulation = channel.unary_unary(
                '/stimulation.StimulationService/SetModulation',
                request_serializer=stimulation__pb2.Modulation.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)


class StimulationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Enable(self, request, context):
        """*
        @brief Enables one of the submodules.

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disable(self, request, context):
        """*
        @brief Disables one of the submodules.

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnable(self, request, context):
        """*
        @brief Get the enabled Status of one submodule

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return True if enabled.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """*
        @brief Issues reset of the core

        @param msg Specify the Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsComplexSamples(self, request, context):
        """*
        @brief Get the sample type.

        @param msg Endpoint ID of the submodule.
        @return true if complex
        @return false if real
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeltaFrequency(self, request, context):
        """*
        @brief Get the minimal distance between two frequencies.

        @param msg Endpoint ID of the submodule.
        @return double Frequency distance in Hz
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSampleRate(self, request, context):
        """*
        @brief Get the sample rate of the module.

        The samplerate is also defined due to the parallel samples per
        module clock(@link GetModuleClkRate @endlink).
        @param msg Endpoint ID of the submodule.
        @return msg Sample rate in Hz.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSampleCount(self, request, context):
        """*
        @brief Get the Sample Count of the memory.

        The sample count is always the total amount of indivdual DAC samples.
        For complex valued usage this ist amount of I+Q.

        @param msg Start and end with Endpoint ID of the submodule
        @return int Sample count.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRFCenterFrequency(self, request, context):
        """*
        @brief Get the RF center frequency

        Returns the RF center frequency of a specific subband.
        This is required to select the proper module for generating 
        a specific tone in the rf domain

        @param msg Start and end with Endpoint ID of the submodule
        @return double rf center frequency in Hz
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRFCenterFrequency(self, request, context):
        """*
        @brief Set the RF center frequency

        Sets the RF center frequency of a specific subband.
        This is required to select the proper module for generating 
        a specific tone in the rf domain

        @param msg Start and end with Endpoint ID of the submodule and the center frequency in Hz
        @return empty
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTone(self, request, context):
        """*
        @brief Function to add a tone to the output of the module.

        @param frequency Frequency in Hz, can be negative if @link isComplexSamples @endlink
        @param amplitude Amplitude, must be smaller than 1.0, sum must be also smaller.
        @param phase Phase of the tone in radians
        @param phaseIQI IQI correction parameter for phase, difference in rad (0.0 default)
        @param amplitudeIQI IQI correction parameter for amplitude, in factor (1.0 default)
        @return double returns the actual frequency (@link getDeltaFrequency @endlink)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTones(self, request, context):
        """*
        @brief Function to add multiple tones to the output of the module.

        For full docs see @link addTone @endlink.

        @param toneSpecs tuple of tuples of frequecy, amplitude, phase, phaseIQI, amplitudeIQI
        @return returns and vector of actual frequencies (@link getDeltaFrequency @endlink)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPlaybackInterval(self, request, context):
        """*
        @brief Set the begin and the end of the repeating sequence

        The the start and end of the interval will define a subinterval
        of the complete sequence. The playback interval is between 0 and
        @link GetSliceCount @endlink. 
        The minimum stepsize depend on sample size in bytes and 
        bytes per "Slice" @link GetBytesPerSlice @endlink. 

        @param msg Start and end with Endpoint ID of the submodule
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlaybackInterval(self, request, context):
        """*
        @brief Gets the begin and end of the repeating sequence.

        The the start and end of the interval will define a subinterval
        of the complete sequence. The playback interval is between 0 and
        @link GetSliceCount @endlink. 
        The minimum stepsize depend on sample size in bytes and 
        bytes per "Slice" @link GetBytesPerSlice @endlink. 

        @param msg Endpoint ID of the submodule
        @return Start and end of the interval
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlaybackIntervalStepSize(self, request, context):
        """*
        @brief Get the Playback Interval Step Size

        Minimum step size between samples to set the start and end time.

        @param msg Endpoint ID of the submodule
        @return double Stepsize in seconds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRawData(self, request, context):
        """*
        @brief Write raw values to the sample memory. Values must be < 1.0.

        Values will be written to memory beginning at zero interval offset.
        The remaining samples will be set to zero.\n
        Optionally the playback interval can be adjusted to the length of rawData.

        @param rawData Endpoint ID, double vector of samples 
        and boolean for adjusting playback interval.
        @return None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearSamples(self, request, context):
        """*
        @brief Clear all samples in class and memory.

        @param msg Endpoint ID of the submodule
        @return None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetModulation(self, request, context):
        """*
        @brief Modulate the generated signals

        Applies an amplitude modulation on the stored samples.

        @param msg Endpoint ID and Modulation parameters
        @return None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StimulationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Enable': grpc.unary_unary_rpc_method_handler(
                    servicer.Enable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'Disable': grpc.unary_unary_rpc_method_handler(
                    servicer.Disable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'IsComplexSamples': grpc.unary_unary_rpc_method_handler(
                    servicer.IsComplexSamples,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'GetDeltaFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeltaFrequency,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'GetSampleRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSampleRate,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'GetSampleCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSampleCount,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetRFCenterFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRFCenterFrequency,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'SetRFCenterFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRFCenterFrequency,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'AddTone': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTone,
                    request_deserializer=stimulation__pb2.IndexedToneSpecs.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'AddTones': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTones,
                    request_deserializer=stimulation__pb2.IndexedToneSpecsVector.FromString,
                    response_serializer=stimulation__pb2.DoubleArray.SerializeToString,
            ),
            'SetPlaybackInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPlaybackInterval,
                    request_deserializer=stimulation__pb2.Interval.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetPlaybackInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlaybackInterval,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=stimulation__pb2.Interval.SerializeToString,
            ),
            'GetPlaybackIntervalStepSize': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlaybackIntervalStepSize,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'WriteRawData': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRawData,
                    request_deserializer=stimulation__pb2.RawData.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'ClearSamples': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearSamples,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetModulation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetModulation,
                    request_deserializer=stimulation__pb2.Modulation.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stimulation.StimulationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('stimulation.StimulationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StimulationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/Enable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/Disable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/GetEnable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/Reset',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsComplexSamples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/IsComplexSamples',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeltaFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/GetDeltaFrequency',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSampleRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/GetSampleRate',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSampleCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/GetSampleCount',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRFCenterFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/GetRFCenterFrequency',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetRFCenterFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/SetRFCenterFrequency',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddTone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/AddTone',
            stimulation__pb2.IndexedToneSpecs.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddTones(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/AddTones',
            stimulation__pb2.IndexedToneSpecsVector.SerializeToString,
            stimulation__pb2.DoubleArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPlaybackInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/SetPlaybackInterval',
            stimulation__pb2.Interval.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPlaybackInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/GetPlaybackInterval',
            datatypes__pb2.EndpointIndex.SerializeToString,
            stimulation__pb2.Interval.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPlaybackIntervalStepSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/GetPlaybackIntervalStepSize',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteRawData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/WriteRawData',
            stimulation__pb2.RawData.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearSamples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/ClearSamples',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetModulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/stimulation.StimulationService/SetModulation',
            stimulation__pb2.Modulation.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
