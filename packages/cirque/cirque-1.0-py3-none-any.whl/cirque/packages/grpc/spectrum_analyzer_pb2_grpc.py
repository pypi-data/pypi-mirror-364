# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.spectrum_analyzer_pb2 as spectrum__analyzer__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in spectrum_analyzer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SpectrumAnalyzerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchAllChannels = channel.unary_stream(
                '/spectrum_analyzer.SpectrumAnalyzerService/FetchAllChannels',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=spectrum__analyzer__pb2.BufferData.FromString,
                _registered_method=True)
        self.GetSamplingFrequency = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/GetSamplingFrequency',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=spectrum__analyzer__pb2.SamplingFrequency.FromString,
                _registered_method=True)
        self.GetHoldMode = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/GetHoldMode',
                request_serializer=spectrum__analyzer__pb2.Channel.SerializeToString,
                response_deserializer=spectrum__analyzer__pb2.HoldMode.FromString,
                _registered_method=True)
        self.SetHoldMode = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/SetHoldMode',
                request_serializer=spectrum__analyzer__pb2.ChanneledHoldMode.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.EnableChannel = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/EnableChannel',
                request_serializer=spectrum__analyzer__pb2.Channel.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.DisableChannel = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/DisableChannel',
                request_serializer=spectrum__analyzer__pb2.Channel.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.RefreshChannel = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/RefreshChannel',
                request_serializer=spectrum__analyzer__pb2.Channel.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.IsChannelEnabled = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/IsChannelEnabled',
                request_serializer=spectrum__analyzer__pb2.Channel.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.ChannelCount = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/ChannelCount',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=datatypes__pb2.LUInt.FromString,
                _registered_method=True)
        self.GetChannelInfo = channel.unary_unary(
                '/spectrum_analyzer.SpectrumAnalyzerService/GetChannelInfo',
                request_serializer=spectrum__analyzer__pb2.Channel.SerializeToString,
                response_deserializer=spectrum__analyzer__pb2.ChannelInfo.FromString,
                _registered_method=True)


class SpectrumAnalyzerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchAllChannels(self, request, context):
        """*
        @brief Fetches the data from all currently active channels

        The resulting stream will emit once with the data for each channel.
        Once
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSamplingFrequency(self, request, context):
        """*
        Returns the sampling frequency of the core in Hertz
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHoldMode(self, request, context):
        """*
        Returns the currently active hold-mode (i.e. preprocessing
        of the data to smooth it out) for a given channel.

        When the channel is not active, returns `NONE`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHoldMode(self, request, context):
        """*
        Sets the hold-mode (i.e. preprocessing of the data to smooth
        it out) for a given channel.

        Has no effect when the channel is not active
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableChannel(self, request, context):
        """*
        Enables a channel so that subsequent calls to
        `FetchAllChannels` will return the data at this channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableChannel(self, request, context):
        """*
        Disables a channel so that subsequent calls to
        `FetchAllChannels` will no longer contain the data associated
        with this channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshChannel(self, request, context):
        """*
        Refreshes the state of the channel when a new channel-
        type should be used. The hold-mode and active status is kept
        the same.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsChannelEnabled(self, request, context):
        """*
        Returns whether or not the given channel is currently active
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChannelCount(self, request, context):
        """*
        Returns the amount of channels that the Spectrum Analyzer handles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelInfo(self, request, context):
        """*
        Returns information about the current state of a channel.
        The type of the passed channel is ignored
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpectrumAnalyzerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchAllChannels': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchAllChannels,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=spectrum__analyzer__pb2.BufferData.SerializeToString,
            ),
            'GetSamplingFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSamplingFrequency,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=spectrum__analyzer__pb2.SamplingFrequency.SerializeToString,
            ),
            'GetHoldMode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHoldMode,
                    request_deserializer=spectrum__analyzer__pb2.Channel.FromString,
                    response_serializer=spectrum__analyzer__pb2.HoldMode.SerializeToString,
            ),
            'SetHoldMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetHoldMode,
                    request_deserializer=spectrum__analyzer__pb2.ChanneledHoldMode.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'EnableChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableChannel,
                    request_deserializer=spectrum__analyzer__pb2.Channel.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'DisableChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableChannel,
                    request_deserializer=spectrum__analyzer__pb2.Channel.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'RefreshChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshChannel,
                    request_deserializer=spectrum__analyzer__pb2.Channel.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'IsChannelEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.IsChannelEnabled,
                    request_deserializer=spectrum__analyzer__pb2.Channel.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'ChannelCount': grpc.unary_unary_rpc_method_handler(
                    servicer.ChannelCount,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=datatypes__pb2.LUInt.SerializeToString,
            ),
            'GetChannelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelInfo,
                    request_deserializer=spectrum__analyzer__pb2.Channel.FromString,
                    response_serializer=spectrum__analyzer__pb2.ChannelInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spectrum_analyzer.SpectrumAnalyzerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('spectrum_analyzer.SpectrumAnalyzerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SpectrumAnalyzerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchAllChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/FetchAllChannels',
            datatypes__pb2.Empty.SerializeToString,
            spectrum__analyzer__pb2.BufferData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSamplingFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/GetSamplingFrequency',
            datatypes__pb2.Empty.SerializeToString,
            spectrum__analyzer__pb2.SamplingFrequency.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHoldMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/GetHoldMode',
            spectrum__analyzer__pb2.Channel.SerializeToString,
            spectrum__analyzer__pb2.HoldMode.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetHoldMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/SetHoldMode',
            spectrum__analyzer__pb2.ChanneledHoldMode.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnableChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/EnableChannel',
            spectrum__analyzer__pb2.Channel.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/DisableChannel',
            spectrum__analyzer__pb2.Channel.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefreshChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/RefreshChannel',
            spectrum__analyzer__pb2.Channel.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsChannelEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/IsChannelEnabled',
            spectrum__analyzer__pb2.Channel.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChannelCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/ChannelCount',
            datatypes__pb2.Empty.SerializeToString,
            datatypes__pb2.LUInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChannelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/spectrum_analyzer.SpectrumAnalyzerService/GetChannelInfo',
            spectrum__analyzer__pb2.Channel.SerializeToString,
            spectrum__analyzer__pb2.ChannelInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
