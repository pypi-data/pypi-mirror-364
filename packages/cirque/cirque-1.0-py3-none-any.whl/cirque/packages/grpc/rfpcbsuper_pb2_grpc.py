# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.rfpcbsuper_pb2 as rfpcbsuper__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rfpcbsuper_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RFPCBSuperServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Reset = channel.unary_unary(
                '/rfpcbsuper.RFPCBSuperService/Reset',
                request_serializer=rfpcbsuper__pb2.EndpointList.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.Startup = channel.unary_unary(
                '/rfpcbsuper.RFPCBSuperService/Startup',
                request_serializer=rfpcbsuper__pb2.StartInfo.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.Sweep = channel.unary_unary(
                '/rfpcbsuper.RFPCBSuperService/Sweep',
                request_serializer=rfpcbsuper__pb2.SweepInput.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetDeviceFreq = channel.unary_unary(
                '/rfpcbsuper.RFPCBSuperService/GetDeviceFreq',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.SetAttenuation = channel.unary_unary(
                '/rfpcbsuper.RFPCBSuperService/SetAttenuation',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetDemodTemp = channel.unary_unary(
                '/rfpcbsuper.RFPCBSuperService/GetDemodTemp',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)


class RFPCBSuperServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Reset(self, request, context):
        """*
        @brief Calls Reset/Init for all named functionality-endpoints.
        Possible names: "TXPL", "RXPL", "IFLO", "RFLO", "Demod"

        @param EndpointIndex
        @param EndpointList: Array of string
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Startup(self, request, context):
        """*
        @brief Makes most of the necessary calls befor being able to start a sweep

        @param EndpointIndex
        @param Array of LMXStart: Power up specific LOs/Pilots. Syntax:
        - name: "TXPL", "RXPL", "IFLO" or "RFLO"
        - optional power_a/power_b [dB]: 
        - if both omitted, power down and disable both outputs
        - if only one given, power up and enable repsective output with given power value, disable other output
        - if both given, power up and enable both outputs with their respective power value
        @param optional LTCStart: gain [dB], gain error [dB], phase error [1°]
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sweep(self, request, context):
        """*
        @brief Set RFLO and IFLO for a sweep

        @param EndpointIndex
        @param SweepInput: 
        - frequency [Hz]: Target frequency
        - offset [Hz]: offset from target frequency. Default 100MHz if omitted
        - power [dB]: Attenuator value (! High value -> more attenuation -> less output power !)
        - method: "mixsweep" (default if omitted), "ifsweep", "ifsweep_extended", "rfsweep" or "rfsweep_extended"
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeviceFreq(self, request, context):
        """*
        @brief Calculates current target frequency from RFLO and IFLO. Only supports "mixsweep" so far 

        @param EndpointIndex
        @return Double: Frequency [Hz]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttenuation(self, request, context):
        """*
        @brief Sets the pcb's output attenuation by converting dB value to desired DAC voltage of AD5672_5684

        @param Double.value: Attenuation from 0 dB to 30dB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDemodTemp(self, request, context):
        """*
        @brief Returns temperature of Demod via AD7291 voltage and LTC5586 temperature diode

        @return Double: Temperature [°C]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RFPCBSuperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=rfpcbsuper__pb2.EndpointList.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'Startup': grpc.unary_unary_rpc_method_handler(
                    servicer.Startup,
                    request_deserializer=rfpcbsuper__pb2.StartInfo.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'Sweep': grpc.unary_unary_rpc_method_handler(
                    servicer.Sweep,
                    request_deserializer=rfpcbsuper__pb2.SweepInput.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetDeviceFreq': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceFreq,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'SetAttenuation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttenuation,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetDemodTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDemodTemp,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rfpcbsuper.RFPCBSuperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rfpcbsuper.RFPCBSuperService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RFPCBSuperService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfpcbsuper.RFPCBSuperService/Reset',
            rfpcbsuper__pb2.EndpointList.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Startup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfpcbsuper.RFPCBSuperService/Startup',
            rfpcbsuper__pb2.StartInfo.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Sweep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfpcbsuper.RFPCBSuperService/Sweep',
            rfpcbsuper__pb2.SweepInput.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeviceFreq(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfpcbsuper.RFPCBSuperService/GetDeviceFreq',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetAttenuation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfpcbsuper.RFPCBSuperService/SetAttenuation',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDemodTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfpcbsuper.RFPCBSuperService/GetDemodTemp',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
