# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.dmacontroller_pb2 as dmacontroller__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dmacontroller_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DMAControllerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Snapshot = channel.unary_stream(
                '/dmacontroller.DMAControllerService/Snapshot',
                request_serializer=dmacontroller__pb2.StreamRequest.SerializeToString,
                response_deserializer=dmacontroller__pb2.AcquiredData.FromString,
                _registered_method=True)
        self.FileSnapshot = channel.unary_unary(
                '/dmacontroller.DMAControllerService/FileSnapshot',
                request_serializer=dmacontroller__pb2.FileStreamRequest.SerializeToString,
                response_deserializer=dmacontroller__pb2.LostSamples.FromString,
                _registered_method=True)
        self.ContinuousStream = channel.unary_stream(
                '/dmacontroller.DMAControllerService/ContinuousStream',
                request_serializer=dmacontroller__pb2.StreamRequest.SerializeToString,
                response_deserializer=dmacontroller__pb2.AcquiredData.FromString,
                _registered_method=True)
        self.ContinuousFileStream = channel.unary_unary(
                '/dmacontroller.DMAControllerService/ContinuousFileStream',
                request_serializer=dmacontroller__pb2.FileStreamRequest.SerializeToString,
                response_deserializer=dmacontroller__pb2.LostSamples.FromString,
                _registered_method=True)
        self.SnapshotWithMetadata = channel.unary_stream(
                '/dmacontroller.DMAControllerService/SnapshotWithMetadata',
                request_serializer=dmacontroller__pb2.StreamRequest.SerializeToString,
                response_deserializer=dmacontroller__pb2.AcquiredAndMetaData.FromString,
                _registered_method=True)
        self.ContinuousStreamWithMetadata = channel.unary_stream(
                '/dmacontroller.DMAControllerService/ContinuousStreamWithMetadata',
                request_serializer=dmacontroller__pb2.StreamRequest.SerializeToString,
                response_deserializer=dmacontroller__pb2.AcquiredAndMetaData.FromString,
                _registered_method=True)
        self.FileDownload = channel.unary_stream(
                '/dmacontroller.DMAControllerService/FileDownload',
                request_serializer=dmacontroller__pb2.FileRequest.SerializeToString,
                response_deserializer=dmacontroller__pb2.AcquiredData.FromString,
                _registered_method=True)
        self.GetBytesPerSample = channel.unary_unary(
                '/dmacontroller.DMAControllerService/GetBytesPerSample',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetParallelStreams = channel.unary_unary(
                '/dmacontroller.DMAControllerService/GetParallelStreams',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)


class DMAControllerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Snapshot(self, request, context):
        """*
        @brief request a limited grpc stream of acquired data

        Will start data acquisition for a given amount of samples.
        The sample width is given by the hardware (see @link GetBytesPerSample @endlink). \n
        If multiple channels are transmitted in time domain multiplex,
        individual channels can be selected by passing a list of channel indices
        to the channels parameter. An empty list will select all channels. \n

        Note that this will affect the data rate. Especially for low sample rates it  
        must be passed (see @link StreamRequest @endlink) to avoid timeouts. \n

        For early cancellation see @link StreamContinuous @endlink).

        @param msg Combination of Endpoint index, sample count, channel list and sample rate
        (see @link StreamRequest @endlink).

        @returns binary stream of acquired data. Note: the lost sample count is enclosed in
        the trailing metadata with the key 'lost-in-hardware'.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileSnapshot(self, request, context):
        """*
        @brief request limited data acquisition to a file on the platform

        Will start data acquisition to a file on the platform for a given amount of samples.
        Please see @link Snapshot @endlink for further details. \n

        @param msg Combination of a nested @link StreamRequest @endlink as well as the
        name, subdirectory and disk type of the target target file. 

        @returns @link LostSamples @endlink number of samples lost due to overflow in the
        hardware buffer fifo.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinuousStream(self, request, context):
        """*
        @brief request a continuous grpc stream of acquired data

        Will start transmitting data until the grpc stream is cancelled on client side. \n

        See @link Snapshot @endlink for more details.

        @param msg @link StreamRequest @endlink
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinuousFileStream(self, request, context):
        """*
        @brief request a continuous data acquisition to a file on the platform

        Will start transmitting data until the grpc call is cancelled on client side. \n

        See @link Snapshot @endlink for more details.

        @param msg @link FileStreamRequest @endlink

        @returns @link LostSamples @endlink number of samples lost due to overflow in the
        hardware buffer fifo.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SnapshotWithMetadata(self, request, context):
        """*
        @brief request a limited grpc stream of acquired data and additional metadata

        Will start data acquisition for a given amount of samples (See @link Snapshot @endlink)
        The additional metadata contains the relative data fifo high watermark, which represents
        the maximum fill level (normalized to 1.0) of the data fifo while the data was processed.
        Further the sample loss accumulated lost sample count is transmitted.

        For early cancellation see @link StreamContinuous @endlink).

        @param msg Combination of Endpoint index, sample count, channel list and sample rate
        (see @link StreamRequest @endlink).

        @returns binary stream of acquired data and metadata with each block of bytes. 
        Note: the lost sample count is enclosed in the trailing metadata with the key 'lost-in-hardware'.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinuousStreamWithMetadata(self, request, context):
        """*
        @brief request a continuous grpc stream of acquired data with additional metadata

        see @link SnapshotWithMetadata @endlink for the stream response and @link ContinuousStream @endlink

        @param msg Combination of Endpoint index, sample count, channel list and sample rate
        (see @link StreamRequest @endlink).

        @returns binary stream of acquired data and metadata with each block of bytes. 
        Note: the lost sample count is enclosed in the trailing metadata with the key 'lost-in-hardware'.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileDownload(self, request, context):
        """*
        @brief request binary stream of file content

        Will stream the contents of a file e. g. generated by @link FileSnapshot @endlink or
        @link ContinuousFileStream @endlink.

        @param Combination of file name, subdirectory and disk type.
        The path is built as follows <mount_dir(disk_type)>/DMAController/<sub_path(if set)>/<FileName> \n
        The mount directories for different disk types are configured in the servicehub configuration file. See @link FileWriteCommand @endlink.

        @returns binary stream of file content
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBytesPerSample(self, request, context):
        """*
        @brief get the width of one sample in bytes

        @returns sample word width in byte
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParallelStreams(self, request, context):
        """*
        @brief get the number of parallel data streams

        @returns number of parallel data streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DMAControllerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Snapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.Snapshot,
                    request_deserializer=dmacontroller__pb2.StreamRequest.FromString,
                    response_serializer=dmacontroller__pb2.AcquiredData.SerializeToString,
            ),
            'FileSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.FileSnapshot,
                    request_deserializer=dmacontroller__pb2.FileStreamRequest.FromString,
                    response_serializer=dmacontroller__pb2.LostSamples.SerializeToString,
            ),
            'ContinuousStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ContinuousStream,
                    request_deserializer=dmacontroller__pb2.StreamRequest.FromString,
                    response_serializer=dmacontroller__pb2.AcquiredData.SerializeToString,
            ),
            'ContinuousFileStream': grpc.unary_unary_rpc_method_handler(
                    servicer.ContinuousFileStream,
                    request_deserializer=dmacontroller__pb2.FileStreamRequest.FromString,
                    response_serializer=dmacontroller__pb2.LostSamples.SerializeToString,
            ),
            'SnapshotWithMetadata': grpc.unary_stream_rpc_method_handler(
                    servicer.SnapshotWithMetadata,
                    request_deserializer=dmacontroller__pb2.StreamRequest.FromString,
                    response_serializer=dmacontroller__pb2.AcquiredAndMetaData.SerializeToString,
            ),
            'ContinuousStreamWithMetadata': grpc.unary_stream_rpc_method_handler(
                    servicer.ContinuousStreamWithMetadata,
                    request_deserializer=dmacontroller__pb2.StreamRequest.FromString,
                    response_serializer=dmacontroller__pb2.AcquiredAndMetaData.SerializeToString,
            ),
            'FileDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.FileDownload,
                    request_deserializer=dmacontroller__pb2.FileRequest.FromString,
                    response_serializer=dmacontroller__pb2.AcquiredData.SerializeToString,
            ),
            'GetBytesPerSample': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBytesPerSample,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetParallelStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParallelStreams,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dmacontroller.DMAControllerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dmacontroller.DMAControllerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DMAControllerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Snapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dmacontroller.DMAControllerService/Snapshot',
            dmacontroller__pb2.StreamRequest.SerializeToString,
            dmacontroller__pb2.AcquiredData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FileSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmacontroller.DMAControllerService/FileSnapshot',
            dmacontroller__pb2.FileStreamRequest.SerializeToString,
            dmacontroller__pb2.LostSamples.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContinuousStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dmacontroller.DMAControllerService/ContinuousStream',
            dmacontroller__pb2.StreamRequest.SerializeToString,
            dmacontroller__pb2.AcquiredData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContinuousFileStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmacontroller.DMAControllerService/ContinuousFileStream',
            dmacontroller__pb2.FileStreamRequest.SerializeToString,
            dmacontroller__pb2.LostSamples.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SnapshotWithMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dmacontroller.DMAControllerService/SnapshotWithMetadata',
            dmacontroller__pb2.StreamRequest.SerializeToString,
            dmacontroller__pb2.AcquiredAndMetaData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContinuousStreamWithMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dmacontroller.DMAControllerService/ContinuousStreamWithMetadata',
            dmacontroller__pb2.StreamRequest.SerializeToString,
            dmacontroller__pb2.AcquiredAndMetaData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FileDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dmacontroller.DMAControllerService/FileDownload',
            dmacontroller__pb2.FileRequest.SerializeToString,
            dmacontroller__pb2.AcquiredData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBytesPerSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmacontroller.DMAControllerService/GetBytesPerSample',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetParallelStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dmacontroller.DMAControllerService/GetParallelStreams',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
