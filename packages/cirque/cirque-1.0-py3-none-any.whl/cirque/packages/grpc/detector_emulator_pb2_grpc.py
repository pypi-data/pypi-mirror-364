# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in detector_emulator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DetectorEmulatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetCountRate = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetCountRate',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetSquidFrequency = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetSquidFrequency',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetStimulationFrequency = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetStimulationFrequency',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetEnablePulse = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetEnablePulse',
                request_serializer=datatypes__pb2.IndexedBool.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEnablePulse = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/GetEnablePulse',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetEnableRandom = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetEnableRandom',
                request_serializer=datatypes__pb2.IndexedBool.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEnableRandom = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/GetEnableRandom',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetEnableSquid = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetEnableSquid',
                request_serializer=datatypes__pb2.IndexedBool.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEnableSquid = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/GetEnableSquid',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetEnableStimulation = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetEnableStimulation',
                request_serializer=datatypes__pb2.IndexedBool.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEnableStimulation = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/GetEnableStimulation',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetPulseAttenuation = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetPulseAttenuation',
                request_serializer=datatypes__pb2.IndexedInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetTauEff = channel.unary_unary(
                '/detector_emulator.DetectorEmulatorService/SetTauEff',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)


class DetectorEmulatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetCountRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSquidFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStimulationFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEnablePulse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnablePulse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEnableRandom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnableRandom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEnableSquid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnableSquid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEnableStimulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnableStimulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPulseAttenuation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTauEff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetectorEmulatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetCountRate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCountRate,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetSquidFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSquidFrequency,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetStimulationFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStimulationFrequency,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetEnablePulse': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEnablePulse,
                    request_deserializer=datatypes__pb2.IndexedBool.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEnablePulse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnablePulse,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetEnableRandom': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEnableRandom,
                    request_deserializer=datatypes__pb2.IndexedBool.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEnableRandom': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnableRandom,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetEnableSquid': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEnableSquid,
                    request_deserializer=datatypes__pb2.IndexedBool.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEnableSquid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnableSquid,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetEnableStimulation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEnableStimulation,
                    request_deserializer=datatypes__pb2.IndexedBool.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEnableStimulation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnableStimulation,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetPulseAttenuation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPulseAttenuation,
                    request_deserializer=datatypes__pb2.IndexedInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetTauEff': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTauEff,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'detector_emulator.DetectorEmulatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('detector_emulator.DetectorEmulatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DetectorEmulatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetCountRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetCountRate',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSquidFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetSquidFrequency',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetStimulationFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetStimulationFrequency',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetEnablePulse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetEnablePulse',
            datatypes__pb2.IndexedBool.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnablePulse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/GetEnablePulse',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetEnableRandom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetEnableRandom',
            datatypes__pb2.IndexedBool.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnableRandom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/GetEnableRandom',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetEnableSquid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetEnableSquid',
            datatypes__pb2.IndexedBool.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnableSquid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/GetEnableSquid',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetEnableStimulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetEnableStimulation',
            datatypes__pb2.IndexedBool.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnableStimulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/GetEnableStimulation',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPulseAttenuation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetPulseAttenuation',
            datatypes__pb2.IndexedInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTauEff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/detector_emulator.DetectorEmulatorService/SetTauEff',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
