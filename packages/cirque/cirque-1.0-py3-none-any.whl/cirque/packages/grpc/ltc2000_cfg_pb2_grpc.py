# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.ltc2000_cfg_pb2 as ltc2000__cfg__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ltc2000_cfg_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LTC2000CfgServiceStub(object):
    """/ Service for the configuration and information interface of an
    / externally connected LTC2000 DAC.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSampleRate = channel.unary_unary(
                '/ltc2000.LTC2000CfgService/GetSampleRate',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/ltc2000.LTC2000CfgService/GetStatus',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=ltc2000__cfg__pb2.Status.FromString,
                _registered_method=True)
        self.GetPortDelay = channel.unary_unary(
                '/ltc2000.LTC2000CfgService/GetPortDelay',
                request_serializer=ltc2000__cfg__pb2.Port.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.SetPortDelay = channel.unary_unary(
                '/ltc2000.LTC2000CfgService/SetPortDelay',
                request_serializer=ltc2000__cfg__pb2.PortDelaySetting.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.Reset = channel.unary_unary(
                '/ltc2000.LTC2000CfgService/Reset',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)


class LTC2000CfgServiceServicer(object):
    """/ Service for the configuration and information interface of an
    / externally connected LTC2000 DAC.
    """

    def GetSampleRate(self, request, context):
        """/ Returns the sample rate that the DAC operates at in Hz.
        / At the moment, only a Best guess.
        / Cannot be relied upon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """/ Returns status information from the DAC.
        / Will contain more status information when
        / an SPI interface is available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortDelay(self, request, context):
        """/ Returns the fine-delay setting in picoseconds for the specified port.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPortDelay(self, request, context):
        """/ Sets the fine-delay in picoseconds for the specified port.
        / Returns the value that was actually set in seconds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """/ Resets the core.
        / After this operation, all delay elements are reset to their initial setting.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LTC2000CfgServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSampleRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSampleRate,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=ltc2000__cfg__pb2.Status.SerializeToString,
            ),
            'GetPortDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortDelay,
                    request_deserializer=ltc2000__cfg__pb2.Port.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'SetPortDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPortDelay,
                    request_deserializer=ltc2000__cfg__pb2.PortDelaySetting.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ltc2000.LTC2000CfgService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ltc2000.LTC2000CfgService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LTC2000CfgService(object):
    """/ Service for the configuration and information interface of an
    / externally connected LTC2000 DAC.
    """

    @staticmethod
    def GetSampleRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ltc2000.LTC2000CfgService/GetSampleRate',
            datatypes__pb2.Empty.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ltc2000.LTC2000CfgService/GetStatus',
            datatypes__pb2.Empty.SerializeToString,
            ltc2000__cfg__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPortDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ltc2000.LTC2000CfgService/GetPortDelay',
            ltc2000__cfg__pb2.Port.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPortDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ltc2000.LTC2000CfgService/SetPortDelay',
            ltc2000__cfg__pb2.PortDelaySetting.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ltc2000.LTC2000CfgService/Reset',
            datatypes__pb2.Empty.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
