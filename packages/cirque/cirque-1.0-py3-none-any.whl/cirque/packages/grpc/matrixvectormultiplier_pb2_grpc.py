# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.matrixvectormultiplier_pb2 as matrixvectormultiplier__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in matrixvectormultiplier_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MatrixVectorMultiplierServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Reset = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/Reset',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.Enable = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/Enable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.Disable = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/Disable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.isEnabled = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/isEnabled',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.GetEnable = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/GetEnable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.GetTDMChannels = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/GetTDMChannels',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=matrixvectormultiplier__pb2.Channels.FromString,
                _registered_method=True)
        self.FillIdentity = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/FillIdentity',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.FillMatrix = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/FillMatrix',
                request_serializer=matrixvectormultiplier__pb2.Matrices.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetMatrixDimension = channel.unary_unary(
                '/matrixvectormultiplier.MatrixVectorMultiplierService/GetMatrixDimension',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)


class MatrixVectorMultiplierServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Reset(self, request, context):
        """*
        @brief Issues reset of the core

        The reset will set all values to zero, such as phases, frequencies.
        It also disables the core. Use @link NCO @endlink the set the phases aferwards.

        @param msg Specify the Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Enable(self, request, context):
        """*
        @brief Enables one of the submodules.

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disable(self, request, context):
        """*
        @brief Disables one of the submodules.

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isEnabled(self, request, context):
        """*
        @brief Get the enabled Status of one submodule

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return True if enabled.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnable(self, request, context):
        """*
        @brief Get the enable bit.

        Returns true if the core is processing data.

        @param msg Endpoint ID of the submodule.
        @return True if core is enable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTDMChannels(self, request, context):
        """*
        @brief Get the amount of channels that are processed in TDM.

        The processing core processes one channel each clock cycle. 
        Usually the clock is n times faster than the sample rate.
        Therefore n channels can be processed during the time of one
        sample.

        @param msg Endpoint ID of the submodule.
        @return Amount of TDM channels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FillIdentity(self, request, context):
        """*
        @brief Function to fill the identity Matrix

        This function will set all values in the matrix diagonal to 1.
        @param msg Endpoint ID of the submodule.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FillMatrix(self, request, context):
        """*
        @brief Fill a custom matrices in the multiplier.

        The function takes N Array of Arrays(Matrix) and
        fills it in the multiplier, where the amount of Channels is N
        (@link GetTDMChannels @endlink). 
        The amount of entries must fit the
        matrix dimensions (@link GetMatrixDimension @endlink).
        The columns must have the same length.

        @param msg Matrix structure, Array of Arrays of Arrays and the submodule index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMatrixDimension(self, request, context):
        """*
        @brief Returns the dimensions of the square Matrix.

        The matrix vector multiplier is limited to a squared
        matrix. The dimension will be returned by this function.

        @param msg Endpoint ID of the submodule.
        @returns The dimension of the matrix.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatrixVectorMultiplierServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'Enable': grpc.unary_unary_rpc_method_handler(
                    servicer.Enable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'Disable': grpc.unary_unary_rpc_method_handler(
                    servicer.Disable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'isEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.isEnabled,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'GetEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'GetTDMChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTDMChannels,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=matrixvectormultiplier__pb2.Channels.SerializeToString,
            ),
            'FillIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.FillIdentity,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'FillMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.FillMatrix,
                    request_deserializer=matrixvectormultiplier__pb2.Matrices.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetMatrixDimension': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMatrixDimension,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'matrixvectormultiplier.MatrixVectorMultiplierService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('matrixvectormultiplier.MatrixVectorMultiplierService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MatrixVectorMultiplierService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/Reset',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/Enable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/Disable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/isEnabled',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/GetEnable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTDMChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/GetTDMChannels',
            datatypes__pb2.EndpointIndex.SerializeToString,
            matrixvectormultiplier__pb2.Channels.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FillIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/FillIdentity',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FillMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/FillMatrix',
            matrixvectormultiplier__pb2.Matrices.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMatrixDimension(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/matrixvectormultiplier.MatrixVectorMultiplierService/GetMatrixDimension',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
