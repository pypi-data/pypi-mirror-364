# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.fluxrampdemod_pb2 as fluxrampdemod__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fluxrampdemod_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FluxRampDemodServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetFluxRampDemodBypassAct = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetFluxRampDemodBypassAct',
                request_serializer=datatypes__pb2.IndexedBool.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetFluxRampDemodAddSyncBypass = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetFluxRampDemodAddSyncBypass',
                request_serializer=datatypes__pb2.IndexedBool.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetResync = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetResync',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetNCOData = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetNCOData',
                request_serializer=fluxrampdemod__pb2.NCOData.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetNCOFrequencies = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetNCOFrequencies',
                request_serializer=fluxrampdemod__pb2.DoubleArray.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetNCOPhases = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetNCOPhases',
                request_serializer=fluxrampdemod__pb2.DoubleArray.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetOffsets = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetOffsets',
                request_serializer=fluxrampdemod__pb2.Signed32Array.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetNCOFrequency = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetNCOFrequency',
                request_serializer=fluxrampdemod__pb2.ChannelDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetNCOPhase = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetNCOPhase',
                request_serializer=fluxrampdemod__pb2.ChannelDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetOffset = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetOffset',
                request_serializer=fluxrampdemod__pb2.ChannelData.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.ApplyNCOData = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/ApplyNCOData',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetRampGenData = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetRampGenData',
                request_serializer=fluxrampdemod__pb2.RampGenData.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetFluxRampLength = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetFluxRampLength',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetAccumulationRange = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetAccumulationRange',
                request_serializer=fluxrampdemod__pb2.StartAndEnd.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetSyncDelay = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetSyncDelay',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetSyncDelaySamples = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetSyncDelaySamples',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSampleRate = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetSampleRate',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.ChannelDouble.FromString,
                _registered_method=True)
        self.GetChannelCount = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetChannelCount',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetTDMPipelineCount = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetTDMPipelineCount',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetChannelSampleRate = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetChannelSampleRate',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetFluxRampLength = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetFluxRampLength',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetAccumulationRange = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetAccumulationRange',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.Signed32Array.FromString,
                _registered_method=True)
        self.GetSyncDelay = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetSyncDelay',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetSyncDelaySamples = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetSyncDelaySamples',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetWindowPreloadValue = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetWindowPreloadValue',
                request_serializer=datatypes__pb2.IndexedInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetWindowPreloadCycles = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetWindowPreloadCycles',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetWindowStepSizes = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetWindowStepSizes',
                request_serializer=datatypes__pb2.IndexedInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetWindowRampCycles = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetWindowRampCycles',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetWindowHoldCycles = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetWindowHoldCycles',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetWindowPreloadValue = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetWindowPreloadValue',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Int.FromString,
                _registered_method=True)
        self.GetWindowPreloadCycles = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetWindowPreloadCycles',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetWindowStepSizes = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetWindowStepSizes',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Int.FromString,
                _registered_method=True)
        self.GetWindowRampCycles = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetWindowRampCycles',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetWindowHoldCycles = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetWindowHoldCycles',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetRawWindow = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetRawWindow',
                request_serializer=fluxrampdemod__pb2.Signed32Array.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetBRAMOffsets = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetBRAMOffsets',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.Signed32Array.FromString,
                _registered_method=True)
        self.SetWindow = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/SetWindow',
                request_serializer=fluxrampdemod__pb2.WindowRequest.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetWindow = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetWindow',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.Window.FromString,
                _registered_method=True)
        self.GetRawWindow = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetRawWindow',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.Signed32Array.FromString,
                _registered_method=True)
        self.GetNCOFrequencies = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetNCOFrequencies',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.DoubleArray.FromString,
                _registered_method=True)
        self.GetNCOPhases = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetNCOPhases',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.DoubleArray.FromString,
                _registered_method=True)
        self.GetOffsets = channel.unary_unary(
                '/fluxrampdemod.FluxRampDemodService/GetOffsets',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=fluxrampdemod__pb2.Signed32Array.FromString,
                _registered_method=True)


class FluxRampDemodServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetFluxRampDemodBypassAct(self, request, context):
        """*
        @brief Selects output data type

        If False input data will be demodulated
        If True demodulation will be bypassed, replacing the least 
        significant bit with the sync signal of the ramp generator.
        Will then issue a resync, see @link SetResync @endlink .
        To enable full data bypassing use @link SetFluxRampDemodAddSyncBypass @endlink .
        To delay the sync flag use @link SetSyncDelay @endlink .

        @param IndexedBool see datatypes.proto
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFluxRampDemodAddSyncBypass(self, request, context):
        """*
        @brief Append sync flag to bypassed data stream

        If True the least significant bit of data stream will be replaced by the sync 
        signal of the ramp generator. 

        @param IndexedBool see datatypes.proto
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetResync(self, request, context):
        """*
        @brief Reset Synchronization.

        Manually resynchronize the start of demodulation on the (delayed) sync flag.
        Note: Resync is executed by default during configuration of FluxRampLength, NCO and SyncDelay 

        @param Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNCOData(self, request, context):
        """*
        @brief Set the frequencies and phases of the MultiChannelNCO and the signal offsets for each channel. 

        The field length should match @link GetChannelCount @endlink.
        Frequency in Hz, Phase in radian, Offset in int16

        @param msg Combination of Endpoint ID, NCO frequencies (double array), NCO Phases (double array) and Offsets (int32 array)
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNCOFrequencies(self, request, context):
        """*
        @brief Set the frequencies of the MultiChannelNCO. 

        The field length should match @link GetChannelCount @endlink.
        Pass frequencies in Hz
        To set only one channel use @link SetNCOFrequency @endlink

        @param msg Combination of Endpoint ID and double array
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNCOPhases(self, request, context):
        """*
        @brief Set the phases of the MultiChannelNCO.

        The field length should match @link GetChannelCount @endlink.
        Pass phases in radian.
        To set only one channel use @link SetNCOPhase @endlink 

        @param msg Combination of Endpoint ID and double array
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOffsets(self, request, context):
        """*
        @brief Set the Offsets for each channel

        The offsets will be substracted from the raw data prior to convolution 
        with the reference NCO data.
        The field length should match @link GetChannelCount @endlink.
        Pass the offsets as int16 values.
        To set only one channel use @link SetOffset @endlink 

        @param msg Combination of Endpoint ID and (signed) int32 array
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNCOFrequency(self, request, context):
        """*
        @brief Set the frequency of one channel of the MultiChannelNCO.

        Pass frequency in Hz.

        @param msg Combination of Endpoint ID, channel index, and double value
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNCOPhase(self, request, context):
        """*
        @brief Set the phase of one channel of the MultiChannelNCO.

        Pass phase in radian.

        @param msg Combination of Endpoint ID, channel index, and double value
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOffset(self, request, context):
        """*
        @brief Set the offset of one channel.

        Pass a offset as int16.

        @param msg Combination of Endpoint ID, channel index, and signed int32 value
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyNCOData(self, request, context):
        """*
        @brief Apply current NCO and offset configuration.

        NOTE: This is a relic from old times. Each Setter will apply the whole config by default.

        @param msg Channel ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRampGenData(self, request, context):
        """*
        @brief Apply Configuration of RampGenerator

        pass the number of cycles for one ramp and the sample rate of the ramp generator in Hz.
        These values will be used to calculate the number of samples received during one ramp (FluxRampLength).
        NOTE: This is a relic from old times. Use SetFluxRampLength and calculate the ramp frequency thereof.

        @param msg Combination of Channel ID, ramp cycle count (uint32) and RampGen sample rate (double)
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFluxRampLength(self, request, context):
        """*
        @brief Set number of samples during one ramp

        The number of samples N during one ramp is given by 
        N = f_clk / f_ramp / N_pipelines,
        where f_clk is the clock rate of the demodulation module, f_ramp the ramp frequency and N_pipelines  
        is the number of pipelines used for demodulation (see @link GetTDMPipelines @endlink).
        So in each channel N samples can be used for demodulation.
        Note that non integer values for N result in a desynchronization of demodulation and ramp generation.

        @param msg Combination of Channel ID and sample count (uint32)
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAccumulationRange(self, request, context):
        """*
        @brief Set start and end of demodulation interval

        The NCO reference signals will be set to zero for sample indices outside the given interval.
        If start = end = 0, the whole range will be used for demodulation. 
        NOTE: If the hardware build supports windowing it is recommended to use window functions to set the interval.

        @param msg Combination of Channel ID, start and stop index (each uint32)
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSyncDelay(self, request, context):
        """*
        @brief Set delay of sync signal

        Set the number of clock cycles N used to delay the sync flag of the ramp generator.
        NOTE: N = N_channels * (delay in samples)
        Will then issue a resync, see @link SetResync @endlink  

        @param msg Combination of Channel ID and delay in clock cycles (uint32)
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSyncDelaySamples(self, request, context):
        """*
        @brief Set delay of sync signal

        Set the number of samples used to delay the sync flag of the ramp generator.
        Will then issue a resync, see @link SetResync @endlink  

        @param msg Combination of Channel ID and delay in samples (uint32)
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSampleRate(self, request, context):
        """*
        @brief Get sample rate of demodulation module 

        @param msg Channel ID
        @return Combination of Endpoint ID, dummy (uint),sample rate in Hz (double)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelCount(self, request, context):
        """*
        @brief Get the amount of Channels that are processed in TDM

        The processing core processes one channel each clock cycle.
        Usually the clock is n times faster than the sample rate.
        Therefore n channels can be processed during the time of one sample.
        NOTE: For n = 4 see @link GetTDMPipelineCount @endlink.

        @param msg Combination of Channel ID 
        @return Amount of TDM Channels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTDMPipelineCount(self, request, context):
        """*
        @brief Get the amount of Pipelines that are processed in TDM

        See @link GetChannelCount @endlink. 
        For low channel counts the processing of each channel is split up
        into two pipelines, restricting @link SetFluxRampLength @endlink to 
        even values.

        @param msg Combination of Channel ID 
        @return Amount of TDM Channels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelSampleRate(self, request, context):
        """*
        @brief Get the sample rate for each channel

        The channel sample rate f_s is given by the module clock rate f_clk and 
        the number of channels n (@link GetChannelCount @endlink).
        f_s = f_clk/n

        @param msg Endpoint ID
        @return the sample frequency in Hz (uint32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFluxRampLength(self, request, context):
        """*
        @brief Get the amount of samples during one flux ramp. 

        See @link SetFluxRampLength @endlink.

        @param msg Endpoint ID
        @return sample count during one ramp
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccumulationRange(self, request, context):
        """*
        @brief Get the demodulation interval 

        See @link SetAccumulationRange @endlink.

        @param msg Endpoint ID
        @return start and end index (int32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSyncDelay(self, request, context):
        """*
        @brief Get the delay of the sync signal in clock cycles 

        See @link SetSyncDelay @endlink.

        @param msg Endpoint ID
        @return sync delay in clock cycles (uint32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSyncDelaySamples(self, request, context):
        """*
        @brief Get the delay of the sync signal in samples

        See @link SetSyncDelaySamples @endlink.

        @param msg Endpoint ID
        @return sync delay in clock cycles (uint32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWindowPreloadValue(self, request, context):
        """*
        @brief Set the starting value of the RampGen Windowing module 

        Set starting value of Window if RampGen is implemented as windowing module.
        NOTE: Debug function, the whole window config can be set by @link SetWindow @endlink

        @param msg Endpoint ID and starting value (int32)
        @return void 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWindowPreloadCycles(self, request, context):
        """*
        @brief Set the amount of samples to hold the starting value

        NOTE: Debug function, the whole window config can be set by @link SetWindow @endlink

        @param msg Endpoint ID and starting value (uint32)
        @return void 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWindowStepSizes(self, request, context):
        """*
        @brief Set the step size of the RampGen Windowing module 

        Set step size of Window if RampGen is implemented as windowing module.
        NOTE: Debug function, the whole window config can be set by @link SetWindow @endlink

        @param msg Endpoint ID and step size (int32)
        @return void 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWindowRampCycles(self, request, context):
        """*
        @brief Set the number of steps of the RampGen Windowing module 

        Both the step count for rising and falling edge.
        NOTE: Debug function, the whole window config can be set by @link SetWindow @endlink

        @param msg Endpoint ID and step count (uint32)
        @return void 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWindowHoldCycles(self, request, context):
        """*
        @brief Set the sample count to hold the ramp before descending again. 

        Set starting value of Window if RampGen is implemented as windowing module.
        NOTE: Debug function, the whole window config can be set by @link SetWindow @endlink

        @param msg Endpoint ID and hold count (uint32)
        @return void 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindowPreloadValue(self, request, context):
        """*
        @brief Get the starting value of the RampGen Windowing module 

        See @link SetWindowPreloadValue @endlink

        @param msg Endpoint ID 
        @return starting value (int32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindowPreloadCycles(self, request, context):
        """*
        @brief Set the number of steps of the RampGen Windowing module 

        Both the step count for rising and falling edge.
        NOTE: Debug function, the whole window config can be set by @link SetWindow @endlink

        See @link SetWindowPreloadCycles @endlink

        @param msg Endpoint ID 
        @return samle count to hold starting value (uint32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindowStepSizes(self, request, context):
        """*
        @brief Get the starting value of the RampGen Windowing module 

        See @link SetWindowPreloadValue @endlink

        @param msg Endpoint ID 
        @return step size of rising and falling  (int32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindowRampCycles(self, request, context):
        """*
        @brief Get the starting value of the RampGen Windowing module 

        See @link SetWindowRampCycles @endlink

        @param msg Endpoint ID 
        @return samle count of rising and falling ramp (uint32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindowHoldCycles(self, request, context):
        """*
        @brief Get the starting value of the RampGen Windowing module 

        See @link SetWindowHoldCycles @endlink

        @param msg Endpoint ID 
        @return samle count to hold peak value (uint32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRawWindow(self, request, context):
        """*
        @brief Set a custom window function

        Write a custom Window if BRAM windowing is implemented.
        Pass an array of int16 values of length @link GetFluxRampLength @endlink
        If length does not fit FluxRampLength, window and ramp signal will desynchronize.
        Predefined functions can be set by @link SetWindow @endlink.

        @param msg Combination of Endpoint ID and int32 array
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBRAMOffsets(self, request, context):
        """*
        @brief Get the start and end address of window

        relative address of the start and end value of the window in the BRAM
        window length is (end - start + 1) 

        @param msg Endpoint ID 
        @return start and end address (uint32)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWindow(self, request, context):
        """*
        @brief Set a predefined window function  

        Depending on the windowing module several functions are implemented:
        rectangular, blackman (only for BRAM), bartlett, trapezoid
        To ignore the first m samples, an offset can be set.
        Also the window length can be set. 
        For zero length, the whole range will be used ignoring the offset parameter.
        Using blackman or trapezoid a parameter (param) can be set:
        for blackman param denotes alpha, see https://en.wikipedia.org/wiki/Window_function#Blackman_window
        for trapezoid param denotes the ratio of the length of maximum weight to the total length.
        therefore param=0 results in a bartlett window, while param=1 is a rectangular window.

        @param msg Endpoint ID, window name, length, offset and param
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindow(self, request, context):
        """*
        @brief Get the window parameters

        See @link SetWindow @endlink 

        @param msg Endpoint ID 
        @return window name, length, offset, param
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawWindow(self, request, context):
        """*
        @brief Get the window function

        Note the values are given in int32 format, but only contain values in the range of int16

        @param msg Endpoint ID 
        @return window as array of int32 values
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNCOFrequencies(self, request, context):
        """*
        @brief Get NCO frequencies 

        See @link SetNCOFrequencies @endlink 
        Values in Hz 

        @param msg Endpoint ID 
        @return double array
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNCOPhases(self, request, context):
        """*
        @brief Get NCO phases 

        See @link SetNCOPhases @endlink 
        Values in radian

        @param msg Endpoint ID 
        @return double array
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOffsets(self, request, context):
        """*
        @brief Get Offsets

        See @link SetNCOFrequencies @endlink 
        int16

        @param msg Endpoint ID 
        @return int32 array
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FluxRampDemodServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetFluxRampDemodBypassAct': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFluxRampDemodBypassAct,
                    request_deserializer=datatypes__pb2.IndexedBool.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetFluxRampDemodAddSyncBypass': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFluxRampDemodAddSyncBypass,
                    request_deserializer=datatypes__pb2.IndexedBool.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetResync': grpc.unary_unary_rpc_method_handler(
                    servicer.SetResync,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetNCOData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNCOData,
                    request_deserializer=fluxrampdemod__pb2.NCOData.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetNCOFrequencies': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNCOFrequencies,
                    request_deserializer=fluxrampdemod__pb2.DoubleArray.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetNCOPhases': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNCOPhases,
                    request_deserializer=fluxrampdemod__pb2.DoubleArray.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetOffsets': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOffsets,
                    request_deserializer=fluxrampdemod__pb2.Signed32Array.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetNCOFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNCOFrequency,
                    request_deserializer=fluxrampdemod__pb2.ChannelDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetNCOPhase': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNCOPhase,
                    request_deserializer=fluxrampdemod__pb2.ChannelDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetOffset': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOffset,
                    request_deserializer=fluxrampdemod__pb2.ChannelData.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'ApplyNCOData': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyNCOData,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetRampGenData': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRampGenData,
                    request_deserializer=fluxrampdemod__pb2.RampGenData.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetFluxRampLength': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFluxRampLength,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetAccumulationRange': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAccumulationRange,
                    request_deserializer=fluxrampdemod__pb2.StartAndEnd.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetSyncDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSyncDelay,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetSyncDelaySamples': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSyncDelaySamples,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetSampleRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSampleRate,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.ChannelDouble.SerializeToString,
            ),
            'GetChannelCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelCount,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetTDMPipelineCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTDMPipelineCount,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetChannelSampleRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelSampleRate,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetFluxRampLength': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFluxRampLength,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetAccumulationRange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccumulationRange,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.Signed32Array.SerializeToString,
            ),
            'GetSyncDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSyncDelay,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetSyncDelaySamples': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSyncDelaySamples,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetWindowPreloadValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWindowPreloadValue,
                    request_deserializer=datatypes__pb2.IndexedInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetWindowPreloadCycles': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWindowPreloadCycles,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetWindowStepSizes': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWindowStepSizes,
                    request_deserializer=datatypes__pb2.IndexedInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetWindowRampCycles': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWindowRampCycles,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetWindowHoldCycles': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWindowHoldCycles,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetWindowPreloadValue': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindowPreloadValue,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Int.SerializeToString,
            ),
            'GetWindowPreloadCycles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindowPreloadCycles,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetWindowStepSizes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindowStepSizes,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Int.SerializeToString,
            ),
            'GetWindowRampCycles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindowRampCycles,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetWindowHoldCycles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindowHoldCycles,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetRawWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRawWindow,
                    request_deserializer=fluxrampdemod__pb2.Signed32Array.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetBRAMOffsets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBRAMOffsets,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.Signed32Array.SerializeToString,
            ),
            'SetWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWindow,
                    request_deserializer=fluxrampdemod__pb2.WindowRequest.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindow,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.Window.SerializeToString,
            ),
            'GetRawWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRawWindow,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.Signed32Array.SerializeToString,
            ),
            'GetNCOFrequencies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNCOFrequencies,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.DoubleArray.SerializeToString,
            ),
            'GetNCOPhases': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNCOPhases,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.DoubleArray.SerializeToString,
            ),
            'GetOffsets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOffsets,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=fluxrampdemod__pb2.Signed32Array.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fluxrampdemod.FluxRampDemodService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fluxrampdemod.FluxRampDemodService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FluxRampDemodService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetFluxRampDemodBypassAct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetFluxRampDemodBypassAct',
            datatypes__pb2.IndexedBool.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFluxRampDemodAddSyncBypass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetFluxRampDemodAddSyncBypass',
            datatypes__pb2.IndexedBool.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetResync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetResync',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNCOData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetNCOData',
            fluxrampdemod__pb2.NCOData.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNCOFrequencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetNCOFrequencies',
            fluxrampdemod__pb2.DoubleArray.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNCOPhases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetNCOPhases',
            fluxrampdemod__pb2.DoubleArray.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetOffsets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetOffsets',
            fluxrampdemod__pb2.Signed32Array.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNCOFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetNCOFrequency',
            fluxrampdemod__pb2.ChannelDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNCOPhase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetNCOPhase',
            fluxrampdemod__pb2.ChannelDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetOffset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetOffset',
            fluxrampdemod__pb2.ChannelData.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApplyNCOData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/ApplyNCOData',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetRampGenData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetRampGenData',
            fluxrampdemod__pb2.RampGenData.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFluxRampLength(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetFluxRampLength',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetAccumulationRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetAccumulationRange',
            fluxrampdemod__pb2.StartAndEnd.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSyncDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetSyncDelay',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSyncDelaySamples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetSyncDelaySamples',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSampleRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetSampleRate',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.ChannelDouble.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChannelCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetChannelCount',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTDMPipelineCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetTDMPipelineCount',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChannelSampleRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetChannelSampleRate',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFluxRampLength(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetFluxRampLength',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAccumulationRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetAccumulationRange',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.Signed32Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSyncDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetSyncDelay',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSyncDelaySamples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetSyncDelaySamples',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWindowPreloadValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetWindowPreloadValue',
            datatypes__pb2.IndexedInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWindowPreloadCycles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetWindowPreloadCycles',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWindowStepSizes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetWindowStepSizes',
            datatypes__pb2.IndexedInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWindowRampCycles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetWindowRampCycles',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWindowHoldCycles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetWindowHoldCycles',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWindowPreloadValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetWindowPreloadValue',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Int.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWindowPreloadCycles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetWindowPreloadCycles',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWindowStepSizes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetWindowStepSizes',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Int.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWindowRampCycles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetWindowRampCycles',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWindowHoldCycles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetWindowHoldCycles',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetRawWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetRawWindow',
            fluxrampdemod__pb2.Signed32Array.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBRAMOffsets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetBRAMOffsets',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.Signed32Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/SetWindow',
            fluxrampdemod__pb2.WindowRequest.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetWindow',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.Window.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRawWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetRawWindow',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.Signed32Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNCOFrequencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetNCOFrequencies',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.DoubleArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNCOPhases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetNCOPhases',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.DoubleArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOffsets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fluxrampdemod.FluxRampDemodService/GetOffsets',
            datatypes__pb2.EndpointIndex.SerializeToString,
            fluxrampdemod__pb2.Signed32Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
