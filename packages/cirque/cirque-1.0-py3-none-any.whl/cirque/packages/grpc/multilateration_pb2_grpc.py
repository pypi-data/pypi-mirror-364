# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.multilateration_pb2 as multilateration__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in multilateration_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MultilaterationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Activate = channel.unary_unary(
                '/multilateration.MultilaterationService/Activate',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.TriggerManually = channel.unary_unary(
                '/multilateration.MultilaterationService/TriggerManually',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/multilateration.MultilaterationService/GetStatus',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=multilateration__pb2.StatusFlags.FromString,
                _registered_method=True)
        self.GetTriggerTime = channel.unary_unary(
                '/multilateration.MultilaterationService/GetTriggerTime',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.LUInt.FromString,
                _registered_method=True)
        self.GetLostTriggerCount = channel.unary_unary(
                '/multilateration.MultilaterationService/GetLostTriggerCount',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetDecimationFactor = channel.unary_unary(
                '/multilateration.MultilaterationService/GetDecimationFactor',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetDecimationFactor = channel.unary_unary(
                '/multilateration.MultilaterationService/SetDecimationFactor',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSignalDelay = channel.unary_unary(
                '/multilateration.MultilaterationService/GetSignalDelay',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetSignalDelay = channel.unary_unary(
                '/multilateration.MultilaterationService/SetSignalDelay',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTriggerThreshold = channel.unary_unary(
                '/multilateration.MultilaterationService/GetTriggerThreshold',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.SetTriggerThreshold = channel.unary_unary(
                '/multilateration.MultilaterationService/SetTriggerThreshold',
                request_serializer=datatypes__pb2.IndexedUInt.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetMixerFrequency = channel.unary_unary(
                '/multilateration.MultilaterationService/GetMixerFrequency',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.SetMixerFrequency = channel.unary_unary(
                '/multilateration.MultilaterationService/SetMixerFrequency',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetMixerPhase = channel.unary_unary(
                '/multilateration.MultilaterationService/GetMixerPhase',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.SetMixerPhase = channel.unary_unary(
                '/multilateration.MultilaterationService/SetMixerPhase',
                request_serializer=datatypes__pb2.IndexedDouble.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetMixerFirEnable = channel.unary_unary(
                '/multilateration.MultilaterationService/GetMixerFirEnable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.SetMixerFirEnable = channel.unary_unary(
                '/multilateration.MultilaterationService/SetMixerFirEnable',
                request_serializer=datatypes__pb2.IndexedBool.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetConditioningMatrix = channel.unary_unary(
                '/multilateration.MultilaterationService/GetConditioningMatrix',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=multilateration__pb2.CondMatrix.FromString,
                _registered_method=True)
        self.SetConditioningMatrix = channel.unary_unary(
                '/multilateration.MultilaterationService/SetConditioningMatrix',
                request_serializer=multilateration__pb2.CondMatrix.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetConditioningOffset = channel.unary_unary(
                '/multilateration.MultilaterationService/GetConditioningOffset',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=multilateration__pb2.CondOffset.FromString,
                _registered_method=True)
        self.SetConditioningOffset = channel.unary_unary(
                '/multilateration.MultilaterationService/SetConditioningOffset',
                request_serializer=multilateration__pb2.CondOffset.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetFullTimetrace = channel.unary_unary(
                '/multilateration.MultilaterationService/GetFullTimetrace',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=multilateration__pb2.Timetrace.FromString,
                _registered_method=True)
        self.GetPartialTimetrace = channel.unary_unary(
                '/multilateration.MultilaterationService/GetPartialTimetrace',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=multilateration__pb2.Timetrace.FromString,
                _registered_method=True)
        self.GetAllTriggerTimes = channel.unary_unary(
                '/multilateration.MultilaterationService/GetAllTriggerTimes',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=multilateration__pb2.AllCounters.FromString,
                _registered_method=True)


class MultilaterationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Activate(self, request, context):
        """read_control -> set_ready = 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerManually(self, request, context):
        """trigger _> manual_trigger = 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """read_info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLostTriggerCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDecimationFactor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDecimationFactor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignalDelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSignalDelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerThreshold(self, request, context):
        """trigger -> trigger_value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTriggerThreshold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMixerFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMixerFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMixerPhase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMixerPhase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMixerFirEnable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMixerFirEnable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConditioningMatrix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConditioningMatrix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConditioningOffset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConditioningOffset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFullTimetrace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPartialTimetrace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTriggerTimes(self, request, context):
        """More highlevel -> return trigger time of all endpoints and reactivate them if data_available was true
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultilaterationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Activate': grpc.unary_unary_rpc_method_handler(
                    servicer.Activate,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'TriggerManually': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerManually,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=multilateration__pb2.StatusFlags.SerializeToString,
            ),
            'GetTriggerTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerTime,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.LUInt.SerializeToString,
            ),
            'GetLostTriggerCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLostTriggerCount,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetDecimationFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecimationFactor,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetDecimationFactor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDecimationFactor,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetSignalDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalDelay,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetSignalDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSignalDelay,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetTriggerThreshold': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerThreshold,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'SetTriggerThreshold': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTriggerThreshold,
                    request_deserializer=datatypes__pb2.IndexedUInt.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetMixerFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMixerFrequency,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'SetMixerFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMixerFrequency,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetMixerPhase': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMixerPhase,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'SetMixerPhase': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMixerPhase,
                    request_deserializer=datatypes__pb2.IndexedDouble.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetMixerFirEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMixerFirEnable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'SetMixerFirEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMixerFirEnable,
                    request_deserializer=datatypes__pb2.IndexedBool.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetConditioningMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConditioningMatrix,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=multilateration__pb2.CondMatrix.SerializeToString,
            ),
            'SetConditioningMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConditioningMatrix,
                    request_deserializer=multilateration__pb2.CondMatrix.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetConditioningOffset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConditioningOffset,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=multilateration__pb2.CondOffset.SerializeToString,
            ),
            'SetConditioningOffset': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConditioningOffset,
                    request_deserializer=multilateration__pb2.CondOffset.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetFullTimetrace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFullTimetrace,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=multilateration__pb2.Timetrace.SerializeToString,
            ),
            'GetPartialTimetrace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPartialTimetrace,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=multilateration__pb2.Timetrace.SerializeToString,
            ),
            'GetAllTriggerTimes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTriggerTimes,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=multilateration__pb2.AllCounters.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'multilateration.MultilaterationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('multilateration.MultilaterationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MultilaterationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Activate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/Activate',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerManually(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/TriggerManually',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetStatus',
            datatypes__pb2.EndpointIndex.SerializeToString,
            multilateration__pb2.StatusFlags.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTriggerTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetTriggerTime',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.LUInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLostTriggerCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetLostTriggerCount',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDecimationFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetDecimationFactor',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDecimationFactor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetDecimationFactor',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSignalDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetSignalDelay',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSignalDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetSignalDelay',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTriggerThreshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetTriggerThreshold',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTriggerThreshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetTriggerThreshold',
            datatypes__pb2.IndexedUInt.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMixerFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetMixerFrequency',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetMixerFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetMixerFrequency',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMixerPhase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetMixerPhase',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetMixerPhase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetMixerPhase',
            datatypes__pb2.IndexedDouble.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMixerFirEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetMixerFirEnable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetMixerFirEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetMixerFirEnable',
            datatypes__pb2.IndexedBool.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConditioningMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetConditioningMatrix',
            datatypes__pb2.EndpointIndex.SerializeToString,
            multilateration__pb2.CondMatrix.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConditioningMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetConditioningMatrix',
            multilateration__pb2.CondMatrix.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConditioningOffset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetConditioningOffset',
            datatypes__pb2.EndpointIndex.SerializeToString,
            multilateration__pb2.CondOffset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConditioningOffset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/SetConditioningOffset',
            multilateration__pb2.CondOffset.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFullTimetrace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetFullTimetrace',
            datatypes__pb2.EndpointIndex.SerializeToString,
            multilateration__pb2.Timetrace.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPartialTimetrace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetPartialTimetrace',
            datatypes__pb2.EndpointIndex.SerializeToString,
            multilateration__pb2.Timetrace.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllTriggerTimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multilateration.MultilaterationService/GetAllTriggerTimes',
            datatypes__pb2.Empty.SerializeToString,
            multilateration__pb2.AllCounters.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
