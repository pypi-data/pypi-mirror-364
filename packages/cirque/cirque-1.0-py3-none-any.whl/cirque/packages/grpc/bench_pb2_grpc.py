# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.bench_pb2 as bench__pb2
import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bench_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BenchmarkServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDurationOfLastRequest = channel.unary_unary(
                '/bench.BenchmarkService/GetDurationOfLastRequest',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.DurationReply.FromString,
                _registered_method=True)
        self.IsHWEndpointAvailable = channel.unary_unary(
                '/bench.BenchmarkService/IsHWEndpointAvailable',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.AvailableReply.FromString,
                _registered_method=True)
        self.SetupSoftwareBandwidthTest = channel.unary_unary(
                '/bench.BenchmarkService/SetupSoftwareBandwidthTest',
                request_serializer=bench__pb2.SizeRequest.SerializeToString,
                response_deserializer=bench__pb2.AvailableReply.FromString,
                _registered_method=True)
        self.SetupSoftwareStreamBandwidthTest = channel.unary_unary(
                '/bench.BenchmarkService/SetupSoftwareStreamBandwidthTest',
                request_serializer=bench__pb2.SizeRequest.SerializeToString,
                response_deserializer=bench__pb2.AvailableReply.FromString,
                _registered_method=True)
        self.SetupSoftwareByteStreamBandwidthTest = channel.unary_unary(
                '/bench.BenchmarkService/SetupSoftwareByteStreamBandwidthTest',
                request_serializer=bench__pb2.SizeRequest.SerializeToString,
                response_deserializer=bench__pb2.AvailableReply.FromString,
                _registered_method=True)
        self.SetupHardwareBandwidthTest = channel.unary_unary(
                '/bench.BenchmarkService/SetupHardwareBandwidthTest',
                request_serializer=bench__pb2.SizeRequest.SerializeToString,
                response_deserializer=bench__pb2.AvailableReply.FromString,
                _registered_method=True)
        self.SetupDMABandwidthTest = channel.unary_unary(
                '/bench.BenchmarkService/SetupDMABandwidthTest',
                request_serializer=bench__pb2.DMASetup.SerializeToString,
                response_deserializer=bench__pb2.AvailableReply.FromString,
                _registered_method=True)
        self.GetSoftwareReadLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetSoftwareReadLatency',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32.FromString,
                _registered_method=True)
        self.GetSoftwareWriteLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetSoftwareWriteLatency',
                request_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSoftwareWriteReadLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetSoftwareWriteReadLatency',
                request_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32.FromString,
                _registered_method=True)
        self.GetHardwareReadLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetHardwareReadLatency',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32.FromString,
                _registered_method=True)
        self.GetHardwareWriteLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetHardwareWriteLatency',
                request_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetHardwareWriteReadLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetHardwareWriteReadLatency',
                request_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32.FromString,
                _registered_method=True)
        self.GetSoftwareReadBandwidth = channel.unary_unary(
                '/bench.BenchmarkService/GetSoftwareReadBandwidth',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32Array.FromString,
                _registered_method=True)
        self.GetSoftwareWriteBandwidth = channel.unary_unary(
                '/bench.BenchmarkService/GetSoftwareWriteBandwidth',
                request_serializer=bench__pb2.BenchmarkInt32Array.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetHardwareReadBandwidth = channel.unary_unary(
                '/bench.BenchmarkService/GetHardwareReadBandwidth',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32Array.FromString,
                _registered_method=True)
        self.GetHardwareWriteBandwidth = channel.unary_unary(
                '/bench.BenchmarkService/GetHardwareWriteBandwidth',
                request_serializer=bench__pb2.BenchmarkInt32Array.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSoftwareReadStreamBandwidth = channel.unary_stream(
                '/bench.BenchmarkService/GetSoftwareReadStreamBandwidth',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32Array.FromString,
                _registered_method=True)
        self.GetSoftwareWriteStreamBandwidth = channel.stream_unary(
                '/bench.BenchmarkService/GetSoftwareWriteStreamBandwidth',
                request_serializer=bench__pb2.BenchmarkInt32Array.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSoftwareReadByteStreamBandwidth = channel.unary_stream(
                '/bench.BenchmarkService/GetSoftwareReadByteStreamBandwidth',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.ByteStream.FromString,
                _registered_method=True)
        self.GetSoftwareWriteByteStreamBandwidth = channel.stream_unary(
                '/bench.BenchmarkService/GetSoftwareWriteByteStreamBandwidth',
                request_serializer=bench__pb2.ByteStream.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetDMAReadBandwidth = channel.unary_stream(
                '/bench.BenchmarkService/GetDMAReadBandwidth',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.AcquiredData.FromString,
                _registered_method=True)
        self.GetDMALostData = channel.unary_unary(
                '/bench.BenchmarkService/GetDMALostData',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.LostDataReply.FromString,
                _registered_method=True)
        self.IsIICAvailable = channel.unary_unary(
                '/bench.BenchmarkService/IsIICAvailable',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.AvailableReply.FromString,
                _registered_method=True)
        self.GetIICReadLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetIICReadLatency',
                request_serializer=datatypes__pb2.Empty.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32.FromString,
                _registered_method=True)
        self.GetIICWriteLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetIICWriteLatency',
                request_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetIICWriteReadLatency = channel.unary_unary(
                '/bench.BenchmarkService/GetIICWriteReadLatency',
                request_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
                response_deserializer=bench__pb2.BenchmarkInt32.FromString,
                _registered_method=True)


class BenchmarkServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDurationOfLastRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsHWEndpointAvailable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupSoftwareBandwidthTest(self, request, context):
        """Setup functions

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupSoftwareStreamBandwidthTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupSoftwareByteStreamBandwidthTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupHardwareBandwidthTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupDMABandwidthTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareReadLatency(self, request, context):
        """Single Values

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareWriteLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareWriteReadLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHardwareReadLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHardwareWriteLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHardwareWriteReadLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareReadBandwidth(self, request, context):
        """Arrays

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareWriteBandwidth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHardwareReadBandwidth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHardwareWriteBandwidth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareReadStreamBandwidth(self, request, context):
        """Streaming Arrays
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareWriteStreamBandwidth(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareReadByteStreamBandwidth(self, request, context):
        """Streaming bytes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSoftwareWriteByteStreamBandwidth(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDMAReadBandwidth(self, request, context):
        """DMA 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDMALostData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsIICAvailable(self, request, context):
        """IIC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIICReadLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIICWriteLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIICWriteReadLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BenchmarkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDurationOfLastRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDurationOfLastRequest,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.DurationReply.SerializeToString,
            ),
            'IsHWEndpointAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.IsHWEndpointAvailable,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.AvailableReply.SerializeToString,
            ),
            'SetupSoftwareBandwidthTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupSoftwareBandwidthTest,
                    request_deserializer=bench__pb2.SizeRequest.FromString,
                    response_serializer=bench__pb2.AvailableReply.SerializeToString,
            ),
            'SetupSoftwareStreamBandwidthTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupSoftwareStreamBandwidthTest,
                    request_deserializer=bench__pb2.SizeRequest.FromString,
                    response_serializer=bench__pb2.AvailableReply.SerializeToString,
            ),
            'SetupSoftwareByteStreamBandwidthTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupSoftwareByteStreamBandwidthTest,
                    request_deserializer=bench__pb2.SizeRequest.FromString,
                    response_serializer=bench__pb2.AvailableReply.SerializeToString,
            ),
            'SetupHardwareBandwidthTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupHardwareBandwidthTest,
                    request_deserializer=bench__pb2.SizeRequest.FromString,
                    response_serializer=bench__pb2.AvailableReply.SerializeToString,
            ),
            'SetupDMABandwidthTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupDMABandwidthTest,
                    request_deserializer=bench__pb2.DMASetup.FromString,
                    response_serializer=bench__pb2.AvailableReply.SerializeToString,
            ),
            'GetSoftwareReadLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSoftwareReadLatency,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
            ),
            'GetSoftwareWriteLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSoftwareWriteLatency,
                    request_deserializer=bench__pb2.BenchmarkInt32.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetSoftwareWriteReadLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSoftwareWriteReadLatency,
                    request_deserializer=bench__pb2.BenchmarkInt32.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
            ),
            'GetHardwareReadLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareReadLatency,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
            ),
            'GetHardwareWriteLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareWriteLatency,
                    request_deserializer=bench__pb2.BenchmarkInt32.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetHardwareWriteReadLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareWriteReadLatency,
                    request_deserializer=bench__pb2.BenchmarkInt32.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
            ),
            'GetSoftwareReadBandwidth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSoftwareReadBandwidth,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32Array.SerializeToString,
            ),
            'GetSoftwareWriteBandwidth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSoftwareWriteBandwidth,
                    request_deserializer=bench__pb2.BenchmarkInt32Array.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetHardwareReadBandwidth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareReadBandwidth,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32Array.SerializeToString,
            ),
            'GetHardwareWriteBandwidth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareWriteBandwidth,
                    request_deserializer=bench__pb2.BenchmarkInt32Array.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetSoftwareReadStreamBandwidth': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSoftwareReadStreamBandwidth,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32Array.SerializeToString,
            ),
            'GetSoftwareWriteStreamBandwidth': grpc.stream_unary_rpc_method_handler(
                    servicer.GetSoftwareWriteStreamBandwidth,
                    request_deserializer=bench__pb2.BenchmarkInt32Array.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetSoftwareReadByteStreamBandwidth': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSoftwareReadByteStreamBandwidth,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.ByteStream.SerializeToString,
            ),
            'GetSoftwareWriteByteStreamBandwidth': grpc.stream_unary_rpc_method_handler(
                    servicer.GetSoftwareWriteByteStreamBandwidth,
                    request_deserializer=bench__pb2.ByteStream.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetDMAReadBandwidth': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDMAReadBandwidth,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.AcquiredData.SerializeToString,
            ),
            'GetDMALostData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDMALostData,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.LostDataReply.SerializeToString,
            ),
            'IsIICAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.IsIICAvailable,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.AvailableReply.SerializeToString,
            ),
            'GetIICReadLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIICReadLatency,
                    request_deserializer=datatypes__pb2.Empty.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
            ),
            'GetIICWriteLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIICWriteLatency,
                    request_deserializer=bench__pb2.BenchmarkInt32.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetIICWriteReadLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIICWriteReadLatency,
                    request_deserializer=bench__pb2.BenchmarkInt32.FromString,
                    response_serializer=bench__pb2.BenchmarkInt32.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bench.BenchmarkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('bench.BenchmarkService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BenchmarkService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDurationOfLastRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetDurationOfLastRequest',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.DurationReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsHWEndpointAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/IsHWEndpointAvailable',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.AvailableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupSoftwareBandwidthTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/SetupSoftwareBandwidthTest',
            bench__pb2.SizeRequest.SerializeToString,
            bench__pb2.AvailableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupSoftwareStreamBandwidthTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/SetupSoftwareStreamBandwidthTest',
            bench__pb2.SizeRequest.SerializeToString,
            bench__pb2.AvailableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupSoftwareByteStreamBandwidthTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/SetupSoftwareByteStreamBandwidthTest',
            bench__pb2.SizeRequest.SerializeToString,
            bench__pb2.AvailableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupHardwareBandwidthTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/SetupHardwareBandwidthTest',
            bench__pb2.SizeRequest.SerializeToString,
            bench__pb2.AvailableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupDMABandwidthTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/SetupDMABandwidthTest',
            bench__pb2.DMASetup.SerializeToString,
            bench__pb2.AvailableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareReadLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetSoftwareReadLatency',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.BenchmarkInt32.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareWriteLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetSoftwareWriteLatency',
            bench__pb2.BenchmarkInt32.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareWriteReadLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetSoftwareWriteReadLatency',
            bench__pb2.BenchmarkInt32.SerializeToString,
            bench__pb2.BenchmarkInt32.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHardwareReadLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetHardwareReadLatency',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.BenchmarkInt32.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHardwareWriteLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetHardwareWriteLatency',
            bench__pb2.BenchmarkInt32.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHardwareWriteReadLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetHardwareWriteReadLatency',
            bench__pb2.BenchmarkInt32.SerializeToString,
            bench__pb2.BenchmarkInt32.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareReadBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetSoftwareReadBandwidth',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.BenchmarkInt32Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareWriteBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetSoftwareWriteBandwidth',
            bench__pb2.BenchmarkInt32Array.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHardwareReadBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetHardwareReadBandwidth',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.BenchmarkInt32Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHardwareWriteBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetHardwareWriteBandwidth',
            bench__pb2.BenchmarkInt32Array.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareReadStreamBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/bench.BenchmarkService/GetSoftwareReadStreamBandwidth',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.BenchmarkInt32Array.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareWriteStreamBandwidth(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/bench.BenchmarkService/GetSoftwareWriteStreamBandwidth',
            bench__pb2.BenchmarkInt32Array.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareReadByteStreamBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/bench.BenchmarkService/GetSoftwareReadByteStreamBandwidth',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.ByteStream.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSoftwareWriteByteStreamBandwidth(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/bench.BenchmarkService/GetSoftwareWriteByteStreamBandwidth',
            bench__pb2.ByteStream.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDMAReadBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/bench.BenchmarkService/GetDMAReadBandwidth',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.AcquiredData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDMALostData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetDMALostData',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.LostDataReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsIICAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/IsIICAvailable',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.AvailableReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIICReadLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetIICReadLatency',
            datatypes__pb2.Empty.SerializeToString,
            bench__pb2.BenchmarkInt32.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIICWriteLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetIICWriteLatency',
            bench__pb2.BenchmarkInt32.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIICWriteReadLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bench.BenchmarkService/GetIICWriteReadLatency',
            bench__pb2.BenchmarkInt32.SerializeToString,
            bench__pb2.BenchmarkInt32.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
