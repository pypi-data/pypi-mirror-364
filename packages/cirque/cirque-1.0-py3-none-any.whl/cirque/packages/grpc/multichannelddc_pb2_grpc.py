# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cirque.packages.grpc.datatypes_pb2 as datatypes__pb2
import cirque.packages.grpc.multichannelddc_pb2 as multichannelddc__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in multichannelddc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MultiChannelDDCServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Reset = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/Reset',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.Enable = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/Enable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.Disable = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/Disable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.GetEnable = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/GetEnable',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Bool.FromString,
                _registered_method=True)
        self.GetTDMChannels = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/GetTDMChannels',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.UInt.FromString,
                _registered_method=True)
        self.GetClockFrequency = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/GetClockFrequency',
                request_serializer=datatypes__pb2.EndpointIndex.SerializeToString,
                response_deserializer=datatypes__pb2.Double.FromString,
                _registered_method=True)
        self.SetNCOs = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/SetNCOs',
                request_serializer=multichannelddc__pb2.MultiNCO.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)
        self.SetNCO = channel.unary_unary(
                '/multichannelddc.MultiChannelDDCService/SetNCO',
                request_serializer=multichannelddc__pb2.SingleNCO.SerializeToString,
                response_deserializer=datatypes__pb2.Empty.FromString,
                _registered_method=True)


class MultiChannelDDCServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Reset(self, request, context):
        """*
        @brief Issues reset of the core

        The reset will set all values to zero, such as phases, frequencies.
        It also disables the core. Use @link NCO @endlink the set the phases aferwards.

        @param msg Specify the Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Enable(self, request, context):
        """*
        @brief Enables one of the submodules.

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disable(self, request, context):
        """*
        @brief Disables one of the submodules.

        The enable will start dataprocessing or stop it. Enable for normal operation.
        @param msg Endpoint ID
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnable(self, request, context):
        """*
        @brief Get the enable bit.

        Returns true if the core is processing data.

        @param msg Endpoint ID of the submodule.
        @return True if core is enable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTDMChannels(self, request, context):
        """*
        @brief Get the amount of channels that are processed in TDM.

        The processing core processes one channel each clock cycle. 
        Usually the clock is n times faster than the sample rate.
        Therefore n channels can be processed during the time of one
        sample.

        @param msg Endpoint ID of the submodule.
        @return Amount of TDM channels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClockFrequency(self, request, context):
        """*
        @brief Get the clock frequency of the MultiChannelDDC Module

        This parameter is set at the build stage of the project and cannot be
        changed.

        @param msg Endpoint ID of the submodule
        @return ClockFrequency of the module
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNCOs(self, request, context):
        """*
        @brief Set the phases of all NCOs of one MultiChannelNCO. 

        The length of the vectors of phases and frequencies 
        must be the amount of TDM channels. See @link GetTDMChannels @endlink.
        With the function @link SetChannelNCO @endlink a single channel can be set.

        @param Combination of Endpoint ID of the submodule and the 
        frequencies and phases (-pi to pi) of all channels.
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNCO(self, request, context):
        """*
        @brief Set the phases of all NCOs of one MultiChannelNCO. 


        @param msg The frequency and phase (-pi to pi) of one channel and Endpoint ID 
        of the submodule
        @return void
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MultiChannelDDCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'Enable': grpc.unary_unary_rpc_method_handler(
                    servicer.Enable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'Disable': grpc.unary_unary_rpc_method_handler(
                    servicer.Disable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'GetEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnable,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Bool.SerializeToString,
            ),
            'GetTDMChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTDMChannels,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.UInt.SerializeToString,
            ),
            'GetClockFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClockFrequency,
                    request_deserializer=datatypes__pb2.EndpointIndex.FromString,
                    response_serializer=datatypes__pb2.Double.SerializeToString,
            ),
            'SetNCOs': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNCOs,
                    request_deserializer=multichannelddc__pb2.MultiNCO.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
            'SetNCO': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNCO,
                    request_deserializer=multichannelddc__pb2.SingleNCO.FromString,
                    response_serializer=datatypes__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'multichannelddc.MultiChannelDDCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('multichannelddc.MultiChannelDDCService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MultiChannelDDCService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/Reset',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/Enable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/Disable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/GetEnable',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Bool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTDMChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/GetTDMChannels',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.UInt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClockFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/GetClockFrequency',
            datatypes__pb2.EndpointIndex.SerializeToString,
            datatypes__pb2.Double.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNCOs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/SetNCOs',
            multichannelddc__pb2.MultiNCO.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNCO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/multichannelddc.MultiChannelDDCService/SetNCO',
            multichannelddc__pb2.SingleNCO.SerializeToString,
            datatypes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
