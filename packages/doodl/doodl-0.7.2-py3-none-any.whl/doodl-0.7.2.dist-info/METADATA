Metadata-Version: 2.4
Name: doodl
Version: 0.7.2
Summary: A python module for including beautiful charts in Markdown for conversion to HTML
Author-email: "doodl.ai" <info@doodl.ai>
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pypandoc
Requires-Dist: beautifulsoup4
Requires-Dist: seaborn
Requires-Dist: colorcet
Requires-Dist: playwright
Requires-Dist: requests
Requires-Dist: ipython

Doodl is a near-complete rewrite of a
[package](http://coppeliamla.github.io/doodl)
written by Simon Raper at CoppeliaMLA. Like the original, this version
of doodl brings together three things:

1. The markdown markup language (and, in particular, the
   [pandoc](https://pandoc.org/) extensions to markdown)
2. The
   [Tufte wide margin layout](https://github.com/daveliepmann/tufte-css)
3. Data visualization using [d3](http://d3js.org)

The original version was groundbreaking when it was written in 2015,
but it was essentially a personal project that Raper kindly made available
to others as a courtesy. It was not intended to be a generally usable tool.
Our version differs from the original in the following ways:

1. We have upgraded the version of Python from the original 2.7 to 3.12.
2. We have upgraded the version of d3 from version 6 to version 12.
3. As a result of upgrading d3, all of the chart implementations have been
   almost completely rewritten.
4. We have changed the build implementation to use `make`, and have
   removed any dependencies or references to hard coded personal
   folder names.
5. We have added a number of new chart types that were not in the
   original version.
6. The generated Javascript bundles are now referenced from CDNs
   instead of locally.
7. We have added the ability to add many, many other sources of
   visualizations using
   [Laurent P. René de Cotret](https://laurentrdc.xyz/)'s
   [Pandoc-Plot](https://github.com/LaurentRDC/pandoc-plot) package
8. The package now consists of a python script (what you get when you
   type "doodl" on the command line), and three remotely hosted
   files (two CSS and one Javascript).

The result is that making and formatting a new document is now just a
matter of installing doodl, creating a new markdown document, and
running doodl on the document, which creates an equivalent HTML
document (possibly including image files in a `plots` folder,
generated by Pandoc-Plot).

## What is doodl?

Doodl was conceived with the goal of presenting the results of
statistical analysis in an attractive and interesting way. It brings
together three great components:

1. The markdown markup language.
2. The Tufte wide margin layout
3. Visualisation including, but not limited to [d3.js](http:/d3js.org).

The idea is to be able to write up work in Markdown/Pandoc and have
the results transformed into something like a Tufte layout. The Tufte
layout is based on the excellent tufte.css style sheet developed by
[Dave Liepmann and co](https://github.com/daveliepmann/tufte-css). Finally
doodl offers a collection of customizable charts, with data
provided either inline or from files, all easily invokable from within
Markdown.

## What it can do

### Side notes and margin notes

First there's the `<sidenote>` tag. Anything enclosed in these tags
will generate a numbered side note in the wide margin as close as
possible to the note number in the main text. These can be used for
commentary, links, bits of maths, anything that's peripheral to the
main discussion.

You can easily add images to the side notes and margin notes just by
including the usual markdown syntax for inserting an image within the
tags.

Then there is a `<marginnote>` tag which is the nearly the same as the
side note, only there's no number linking it to a particular part in
the main text. You'll see to the right an example of a margin note.

### d3 charts

The charts included in doodl are simple and uncluttered with the
tooltip taking over some of the work. This is so that they can fit in
the margin nicely. It's easy to include any of the d3 charts into
either the main body of the text or into the margin.

Inserting a plot is again just a matter of using some custom tags. For
example generating a line plot from data contained in a file looks
like this:

```
<lineplot file='{"path": "somefile.json"}'>
</lineplot
```

Doodl accepts data in JSON, CSV and TSV where appropriate, and
infers the format from the filename (although this can be overridden).

Alternatively you can write the data in json into the markdown. For
example we can create an interactive treemap by inserting the
following into the markdown. See the section below for the full
json</sidenote>

```
<treemap data='
{
    "name": "All",
    "children": [
        {"name": "Bakery", "size": 34},
        {"name": "Tinned Goods",
         "children": [
                {"name": "Beans", "size": 34},
                {"name": "Soups", "size": 56},
                {"name": "Puddings",
                 "children": [
                        {"name": "Fruit",
                         "children": [
                               	{"name": "Tangerines",
                                 "size": 15},
                                {"name": "Pears",
                                 "size": 17}
                            ]
                        },
                        {"name": "Apricots", "size": 89}
...
'></treemap>
```

The charts currently included in doodl include the following:

- Bar chart (tag `<barchart>`)
- Box plot (tag `<barchart>`)
    - For box plots, the data field (or contents of the file if the
      `path` option is used) must be a list of dicts, each with a
      `category` element and a `values` element, which must be a list
      of numbers.
- Dot plot (tag `<dotplot>`)
    - For dot plots, the data is a simple list of numbers
- Force graph (tag `<force>`)
    - A force graph is a little more complicated. The data is a dict
      with two elements:
        - The `nodes` element is an ordered (and implicitly numbered)
          list of dicts, with the following elements:
            - The value of the `name` element is a string giving the
              name of the node.
            - The `group` element...?
        - The `links` element determines the "pull" between pairs of
          elements.
- Gantt chart (tag `<gantt>`)
- Heat map (tag `<headmap>`)
- Line chart (tag `<linechart>`)
    - The `curved` option determines whether smooth or straight lines
      are used. The default value is `curved=0`. Use `curved=1` for
      curves.
- Pie chart (with or without a center; tag `<piechart>`)
    - The `donut` option may be set to `1` to obtain a donut-style pie
      chart, with the center empty.
- Sankey (tag `<skey>`)
- Scatter plot (tag `<scatterplot>`)
- Tree diagram (dendogram)
- Tree map
- Venn diagram

Others are being added all the time.

#### Common chart parameters

Charts are invoked with arguments given as HTML attributes to the
chart tag. This is a departure from the original design. Arguments
common chart parameters include:

- `data` gives a chart-specific collection of data to be charted. The
  form of the data is chart depended and described below.
  
- Alternatively, `path` is the name of a file, relative to the
  location of the *output* file, containing the data. For charts that
  only have *x*, *y* pairs for data (like line charts and scatter
  plots), the data may be:

    - in JSON, as a list of dicts containing an *x and *y* entry,
    - comma separated value (CSV), with an *x* and *y* column
    - tab separated, as for CSV

    The format may be specified explicitly, and will be inferred from
    the input file name if not otherwise specified.

- `size` is a (JSON) dictionary with `width` and `height` elements.
  If not given, it will be inferred.
  
- Color-related arguments

    - `colors` may be one of several things:

        - the name of a [Seaborn color palette](https://seaborn.pydata.org/tutorial/color_palettes.html)
        - specification to Seaborn for building a custom palette
        - a list of colors as used in standard HTML

    - `n_colors` is the number of colors required. If the number of
      colors is greater than the list of colors provided, the provided
      colors will be repeated.
      
    - `desat` is (confusingly) the level of saturation of the
      generated colors

    The default value for "colors" is "pastel".

The extra arguments accepted by various chart types includes:

- 

### Matplotlib charts

Because the Markdown input to doodl is handed to pandoc to be
turned into HTML, doodl can do anything that pandoc (with HTML
output) can do. This includes generating charts from matplotlib,
using the wonderful
[Pandoc-Plot](https://github.com/LaurentRDC/pandoc-plot) package
by
[Laurent P. René de Cotret](https://laurentrdc.xyz/).
Here's an example:

~~~{.matplotlib}
import seaborn as sns
df = sns.load_dataset("penguins")
sns.pairplot(df, hue="species")
~~~

Adding Python-generated plots requires the `-p` argument to doodl,
like this:

~~~
$ doodl -p myfile.md
~~~

or

~~~
$ doodl --plot myfile.md
~~~

This is equivalent to passing a "filter" argument to pandoc, like
this:

~~~
$ doodl -f pandoc-plot myfile.md
~~~

or

~~~
$ doodl --filter pandoc-plot myfile.md
~~~

Any filter that you have installed for pandoc will work with
doodl. Multiple filters can be provided by using the `-f` or
`--filter` arguments multiple times.

## How it works

Doodl is built using pandoc and the python beautifulsoup
library. Pandoc is used to generate the html from the markdown and
beautifulsoup is used to manipulate the extra tags and make the
appropriate substitutions, including adding in the d3 charts.

## Installing doodl

## Using doodl

Just create your markdown file using a text editor and then from the commandline run

```
doodl myMarkdownFile.md
```

The html will then be created in the current directory along with the
supporting css and javascript.

You can test it out using the demo that comes with the package. You'll
find the demo files in `path_to_your_packages/doodl/demo`. Copy
them to a new directory and run

```
doodl markdownExample.md
```

See the
[demo](http://coppeliamla.github.io/doodl/doodl_markdownExample/demo.html)
for more information.
### Command line arguments

Short  Long      Value     Description
-----  --------- --------- ------------------------------
-f     --filter  name      Pandoc filter *name*
-h     --help              Print help message
-o     --output  file      File to whichh to write output
-p     --plot              Use Pandoc-plot Pandoc plugin
-t     --title   text      Use *text* as HTML title
-v     --verbose           Add diagnostic output

The `-f` and `-v` arguments may be repeated.


