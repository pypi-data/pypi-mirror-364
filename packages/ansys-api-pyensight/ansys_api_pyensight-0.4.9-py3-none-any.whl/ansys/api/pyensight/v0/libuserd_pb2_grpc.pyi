"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.pyensight.v0.libuserd_pb2
import grpc
import typing

class LibUSERDServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Libuserd_nodes_per_element: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_nodes_per_elementRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_nodes_per_elementReply] = ...
    """For a given elemene type, return the number of nodes in each element"""

    Libuserd_element_is_ghost: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_ghostRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_ghostReply] = ...
    """Identify if the given element type is ghost e.g. Valid Ghost Element is QUA04_GHOST"""

    Libuserd_element_is_zoo: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_zooRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_zooReply] = ...
    """Identify if the given element type is a standard element type e.h. HEX08"""

    Libuserd_element_is_nsided: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nsidedRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nsidedReply] = ...
    """Identify if the given element type in NSIDED e.g. Polygon"""

    Libuserd_element_is_nfaced: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nfacedRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nfacedReply] = ...
    """Identify if the given element type is NFACED e.g. Polyhedron"""

    Libuserd_number_of_simple_element_types: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_number_of_simple_element_typesRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_number_of_simple_element_typesReply] = ...
    """Find number of supported standard element types"""

    Libuserd_library_version: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_library_versionRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_library_versionReply] = ...
    """LibUSERD API version"""

    Libuserd_ansys_release_string: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_stringRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_stringReply] = ...
    """ANSYS Release string"""

    Libuserd_ansys_release_number: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_numberRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_numberReply] = ...
    """ANSYS Relase ID"""

    Libuserd_element_type_to_string: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_type_to_stringRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_type_to_stringReply] = ...
    """For a given element type, return its name"""

    Libuserd_set_reader_path: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_set_reader_pathRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_set_reader_pathReply] = ...
    """Initialize before calling it. User can opt to set a path to reader shared ibraries"""

    Libuserd_initialize: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_initializeRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_initializeReply] = ...
    """Initialize LibUSERD"""

    Libuserd_get_available_reader_count: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_available_reader_countRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_available_reader_countReply] = ...
    """Get count of available readers"""

    Libuserd_get_all_readers: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_all_readersRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_all_readersReply] = ...
    """Get all available readers"""

    Libuserd_query_format: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_query_formatRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_query_formatReply] = ...
    """Based in input file extension provide a list of supported readers"""

    Libuserd_shutdown: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_shutdownRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Libuserd_shutdownReply] = ...
    """Shutdown"""

    ReaderInfo_read_dataset: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.ReaderInfo_read_datasetRequest,
        ansys.api.pyensight.v0.libuserd_pb2.ReaderInfo_read_datasetReply] = ...
    """ReaderInfo
    ==========
    Read dataset
    """

    Reader_parts: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_partsRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_partsReply] = ...
    """Reader
    ======
    Get a list of available parts
    """

    Reader_variables: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_variablesRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_variablesReply] = ...
    """Get a list of available variables"""

    Reader_queries: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_queriesRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_queriesReply] = ...
    """Get a list of available queries"""

    Reader_get_number_of_time_sets: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_get_number_of_time_setsRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_get_number_of_time_setsReply] = ...
    """Get number of timesets"""

    Reader_timevalues: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_timevaluesRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_timevaluesReply] = ...
    """Get timevalues"""

    Reader_set_timevalue: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timevalueRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timevalueReply] = ...
    """Set a time value to read specific time-step data"""

    Reader_set_timestep: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timestepRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timestepReply] = ...
    """Set a timestep value to read specific time-step data"""

    Reader_variable_value: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_variable_valueRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_variable_valueReply] = ...
    """For a given dataset get the dataset constant value"""

    Reader_is_geometry_changing: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_is_geometry_changingRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_is_geometry_changingReply] = ...
    """Is geometry changing? Static, changing conn, changing coords?"""

    Reader_dynamic_update_check: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Reader_dynamic_update_checkRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Reader_dynamic_update_checkReply] = ...
    """Check/allow the dataset to change"""

    Part_num_nodes: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_num_nodesRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_num_nodesReply] = ...
    """Parts
    =====
    Get number of nodes in a part
    """

    Part_nodes: grpc.UnaryStreamMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_nodesRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_nodesReply] = ...
    """Get Part node coordinates"""

    Part_num_elements: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_num_elementsRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_num_elementsReply] = ...
    """Get number of elements in a part of each element type"""

    Part_element_conn: grpc.UnaryStreamMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_connRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_connReply] = ...
    """Get the part element connectivity by element type"""

    Part_element_conn_nsided_size: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsided_sizeRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsided_sizeReply] = ...
    """If nsided elements are present, for a part return
     (1)Number of polygon(nsided) elements
     (2)Total Number of nodes in available polygon elements
    """

    Part_element_conn_nsided: grpc.UnaryStreamMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsidedRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsidedReply] = ...
    """If nsided elements are present, for a part return
    (1) List of number of nodes in each polygon
    (2) Return node indices for all polygons
    """

    Part_element_conn_nfaced_size: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfaced_sizeRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfaced_sizeReply] = ...
    """If nfaced elements are present, for a part return nfaced element count, numfaces and node count"""

    Part_element_conn_nfaced: grpc.UnaryStreamMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfacedRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfacedReply] = ...
    """If nfaced elements are present, for a part return a connectivity"""

    Part_variable_values: grpc.UnaryStreamMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_variable_valuesRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_variable_valuesReply] = ...
    """For a part, return variable values"""

    Part_rigid_body_transform: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Part_rigid_body_transformRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Part_rigid_body_transformReply] = ...
    """For a part, return any rigid body transform for the current timestep"""

    Variable_get_variable_type_string: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_type_stringRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_type_stringReply] = ...
    """Variable
    ========
    For a given variable id, return its name
    """

    Variable_get_variable_location_string: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_location_stringRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_location_stringReply] = ...
    """For a given variable id and location, return a location string"""

    Query_num_points: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Query_num_pointsRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Query_num_pointsReply] = ...
    """Query
    =====
    Return number of points for a given query
    """

    Query_data: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.libuserd_pb2.Query_dataRequest,
        ansys.api.pyensight.v0.libuserd_pb2.Query_dataReply] = ...
    """Return x, values for a query"""


class LibUSERDServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Libuserd_nodes_per_element(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_nodes_per_elementRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_nodes_per_elementReply:
        """For a given elemene type, return the number of nodes in each element"""
        pass

    @abc.abstractmethod
    def Libuserd_element_is_ghost(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_ghostRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_ghostReply:
        """Identify if the given element type is ghost e.g. Valid Ghost Element is QUA04_GHOST"""
        pass

    @abc.abstractmethod
    def Libuserd_element_is_zoo(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_zooRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_zooReply:
        """Identify if the given element type is a standard element type e.h. HEX08"""
        pass

    @abc.abstractmethod
    def Libuserd_element_is_nsided(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nsidedRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nsidedReply:
        """Identify if the given element type in NSIDED e.g. Polygon"""
        pass

    @abc.abstractmethod
    def Libuserd_element_is_nfaced(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nfacedRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_is_nfacedReply:
        """Identify if the given element type is NFACED e.g. Polyhedron"""
        pass

    @abc.abstractmethod
    def Libuserd_number_of_simple_element_types(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_number_of_simple_element_typesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_number_of_simple_element_typesReply:
        """Find number of supported standard element types"""
        pass

    @abc.abstractmethod
    def Libuserd_library_version(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_library_versionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_library_versionReply:
        """LibUSERD API version"""
        pass

    @abc.abstractmethod
    def Libuserd_ansys_release_string(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_stringRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_stringReply:
        """ANSYS Release string"""
        pass

    @abc.abstractmethod
    def Libuserd_ansys_release_number(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_numberRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_ansys_release_numberReply:
        """ANSYS Relase ID"""
        pass

    @abc.abstractmethod
    def Libuserd_element_type_to_string(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_type_to_stringRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_element_type_to_stringReply:
        """For a given element type, return its name"""
        pass

    @abc.abstractmethod
    def Libuserd_set_reader_path(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_set_reader_pathRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_set_reader_pathReply:
        """Initialize before calling it. User can opt to set a path to reader shared ibraries"""
        pass

    @abc.abstractmethod
    def Libuserd_initialize(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_initializeRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_initializeReply:
        """Initialize LibUSERD"""
        pass

    @abc.abstractmethod
    def Libuserd_get_available_reader_count(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_available_reader_countRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_available_reader_countReply:
        """Get count of available readers"""
        pass

    @abc.abstractmethod
    def Libuserd_get_all_readers(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_all_readersRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_get_all_readersReply:
        """Get all available readers"""
        pass

    @abc.abstractmethod
    def Libuserd_query_format(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_query_formatRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_query_formatReply:
        """Based in input file extension provide a list of supported readers"""
        pass

    @abc.abstractmethod
    def Libuserd_shutdown(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Libuserd_shutdownRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Libuserd_shutdownReply:
        """Shutdown"""
        pass

    @abc.abstractmethod
    def ReaderInfo_read_dataset(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.ReaderInfo_read_datasetRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.ReaderInfo_read_datasetReply:
        """ReaderInfo
        ==========
        Read dataset
        """
        pass

    @abc.abstractmethod
    def Reader_parts(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_partsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_partsReply:
        """Reader
        ======
        Get a list of available parts
        """
        pass

    @abc.abstractmethod
    def Reader_variables(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_variablesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_variablesReply:
        """Get a list of available variables"""
        pass

    @abc.abstractmethod
    def Reader_queries(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_queriesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_queriesReply:
        """Get a list of available queries"""
        pass

    @abc.abstractmethod
    def Reader_get_number_of_time_sets(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_get_number_of_time_setsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_get_number_of_time_setsReply:
        """Get number of timesets"""
        pass

    @abc.abstractmethod
    def Reader_timevalues(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_timevaluesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_timevaluesReply:
        """Get timevalues"""
        pass

    @abc.abstractmethod
    def Reader_set_timevalue(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timevalueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timevalueReply:
        """Set a time value to read specific time-step data"""
        pass

    @abc.abstractmethod
    def Reader_set_timestep(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timestepRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_set_timestepReply:
        """Set a timestep value to read specific time-step data"""
        pass

    @abc.abstractmethod
    def Reader_variable_value(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_variable_valueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_variable_valueReply:
        """For a given dataset get the dataset constant value"""
        pass

    @abc.abstractmethod
    def Reader_is_geometry_changing(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_is_geometry_changingRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_is_geometry_changingReply:
        """Is geometry changing? Static, changing conn, changing coords?"""
        pass

    @abc.abstractmethod
    def Reader_dynamic_update_check(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Reader_dynamic_update_checkRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Reader_dynamic_update_checkReply:
        """Check/allow the dataset to change"""
        pass

    @abc.abstractmethod
    def Part_num_nodes(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_num_nodesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Part_num_nodesReply:
        """Parts
        =====
        Get number of nodes in a part
        """
        pass

    @abc.abstractmethod
    def Part_nodes(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_nodesRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.pyensight.v0.libuserd_pb2.Part_nodesReply]:
        """Get Part node coordinates"""
        pass

    @abc.abstractmethod
    def Part_num_elements(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_num_elementsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Part_num_elementsReply:
        """Get number of elements in a part of each element type"""
        pass

    @abc.abstractmethod
    def Part_element_conn(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_element_connRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.pyensight.v0.libuserd_pb2.Part_element_connReply]:
        """Get the part element connectivity by element type"""
        pass

    @abc.abstractmethod
    def Part_element_conn_nsided_size(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsided_sizeRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsided_sizeReply:
        """If nsided elements are present, for a part return
         (1)Number of polygon(nsided) elements
         (2)Total Number of nodes in available polygon elements
        """
        pass

    @abc.abstractmethod
    def Part_element_conn_nsided(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsidedRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nsidedReply]:
        """If nsided elements are present, for a part return
        (1) List of number of nodes in each polygon
        (2) Return node indices for all polygons
        """
        pass

    @abc.abstractmethod
    def Part_element_conn_nfaced_size(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfaced_sizeRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfaced_sizeReply:
        """If nfaced elements are present, for a part return nfaced element count, numfaces and node count"""
        pass

    @abc.abstractmethod
    def Part_element_conn_nfaced(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfacedRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.pyensight.v0.libuserd_pb2.Part_element_conn_nfacedReply]:
        """If nfaced elements are present, for a part return a connectivity"""
        pass

    @abc.abstractmethod
    def Part_variable_values(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_variable_valuesRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.pyensight.v0.libuserd_pb2.Part_variable_valuesReply]:
        """For a part, return variable values"""
        pass

    @abc.abstractmethod
    def Part_rigid_body_transform(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Part_rigid_body_transformRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Part_rigid_body_transformReply:
        """For a part, return any rigid body transform for the current timestep"""
        pass

    @abc.abstractmethod
    def Variable_get_variable_type_string(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_type_stringRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_type_stringReply:
        """Variable
        ========
        For a given variable id, return its name
        """
        pass

    @abc.abstractmethod
    def Variable_get_variable_location_string(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_location_stringRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Variable_get_variable_location_stringReply:
        """For a given variable id and location, return a location string"""
        pass

    @abc.abstractmethod
    def Query_num_points(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Query_num_pointsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Query_num_pointsReply:
        """Query
        =====
        Return number of points for a given query
        """
        pass

    @abc.abstractmethod
    def Query_data(self,
        request: ansys.api.pyensight.v0.libuserd_pb2.Query_dataRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.libuserd_pb2.Query_dataReply:
        """Return x, values for a query"""
        pass


def add_LibUSERDServiceServicer_to_server(servicer: LibUSERDServiceServicer, server: grpc.Server) -> None: ...
