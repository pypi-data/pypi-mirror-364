"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class GenericResponse(google.protobuf.message.Message):
    """The generic return value for an EnSightSubscription rpc call"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    STR_FIELD_NUMBER: builtins.int
    str: typing.Text = ...
    """Generic return string"""

    def __init__(self,
        *,
        str : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["str",b"str"]) -> None: ...
global___GenericResponse = GenericResponse

class Prefix(google.protobuf.message.Message):
    """The prefix to be Unsubscribe"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PREFIX_FIELD_NUMBER: builtins.int
    prefix: typing.Text = ...
    """The subscription prefix passed in SubscribeEventOptions or SubscribeImageOptions"""

    def __init__(self,
        *,
        prefix : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["prefix",b"prefix"]) -> None: ...
global___Prefix = Prefix

class SubscribeEventOptions(google.protobuf.message.Message):
    """The event subscription options"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ChannelType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ChannelTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ChannelType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        GRPC: SubscribeEventOptions.ChannelType.ValueType = ...  # 0
        """EnSight should use gRPC PublishEvent() to send the events back to the client"""

    class ChannelType(_ChannelType, metaclass=_ChannelTypeEnumTypeWrapper):
        """@brief Subscription channel type
        Presently, only image subscriptions are supported
        """
        pass

    GRPC: SubscribeEventOptions.ChannelType.ValueType = ...  # 0
    """EnSight should use gRPC PublishEvent() to send the events back to the client"""


    class OptionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PREFIX_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    OPTIONS_FIELD_NUMBER: builtins.int
    prefix: typing.Text = ...
    """A unique prefix string (perhaps a GUID) used to identify this stream (used by Unsubscribe())"""

    type: global___SubscribeEventOptions.ChannelType.ValueType = ...
    """The EventReply transport mechanism (GRPC)"""

    @property
    def options(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """@brief various type specific options

        For type=ChannelType::GRPC, 'uri' map key contains the URI for the server launched by the client (required).  'num_retries' map
        key is the number of times EnSight should attempt to connect before failing the operation.  'shared_secret' map
        key is the shared secret that the client gRPC server is expecting to see to authenticate a connection.
        """
        pass
    def __init__(self,
        *,
        prefix : typing.Text = ...,
        type : global___SubscribeEventOptions.ChannelType.ValueType = ...,
        options : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["options",b"options","prefix",b"prefix","type",b"type"]) -> None: ...
global___SubscribeEventOptions = SubscribeEventOptions

class SubscribeImageOptions(google.protobuf.message.Message):
    """The image subscription  options"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _ChannelType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ChannelTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ChannelType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        GRPC: SubscribeImageOptions.ChannelType.ValueType = ...  # 0
        """EnSight should use gRPC PublishImage() calls to send images back to the client"""

        SHARED_MEM: SubscribeImageOptions.ChannelType.ValueType = ...  # 1
        """EnSight should use a \\ref SharedMemoryImageStream to send images back to the client"""

    class ChannelType(_ChannelType, metaclass=_ChannelTypeEnumTypeWrapper):
        """@brief Image channel type
        The image subscription can be via gRPC protocol or via shared memory transport
        """
        pass

    GRPC: SubscribeImageOptions.ChannelType.ValueType = ...  # 0
    """EnSight should use gRPC PublishImage() calls to send images back to the client"""

    SHARED_MEM: SubscribeImageOptions.ChannelType.ValueType = ...  # 1
    """EnSight should use a \\ref SharedMemoryImageStream to send images back to the client"""


    class OptionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    PREFIX_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    FLIP_VERTICAL_FIELD_NUMBER: builtins.int
    CHUNK_FIELD_NUMBER: builtins.int
    OPTIONS_FIELD_NUMBER: builtins.int
    prefix: typing.Text = ...
    """A unique prefix string (perhaps a GUID) used to identify this stream (used by Unsubscribe())"""

    type: global___SubscribeImageOptions.ChannelType.ValueType = ...
    """Select GRPC or SHARED_MEM transport"""

    flip_vertical: builtins.bool = ...
    """If true, flip the image over the X axis before sending the image"""

    chunk: builtins.bool = ...
    """Set to send images in 1MB chunks to speed up large (>1MB) image transfers (see ImageStreamRequest and ImageReply)"""

    @property
    def options(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """@brief various type specific options

        For type=GRPC, 'uri' map key contains the URI for the server launched by the client (required).  'num_retries' map
        key is the number of times EnSight should attempt to connect before failing the operation.  'shared_secret' map
        key is the shared secret that the client gRPC server is expecting to see to authenticate a connection.

        For type=SHARED_MEM, 'filename' map key contains the name of local file to be used
        as the memory mapped shared memory block (required).
        """
        pass
    def __init__(self,
        *,
        prefix : typing.Text = ...,
        type : global___SubscribeImageOptions.ChannelType.ValueType = ...,
        flip_vertical : builtins.bool = ...,
        chunk : builtins.bool = ...,
        options : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["chunk",b"chunk","flip_vertical",b"flip_vertical","options",b"options","prefix",b"prefix","type",b"type"]) -> None: ...
global___SubscribeImageOptions = SubscribeImageOptions

class PythonRequest(google.protobuf.message.Message):
    """A string to execute in the EnSight Python interpreter and execution options"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _CmdType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CmdTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CmdType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        EXEC_NO_RESULT: PythonRequest.CmdType.ValueType = ...  # 0
        """Run the command with exec() with no return value"""

        EXEC_RETURN_PYTHON: PythonRequest.CmdType.ValueType = ...  # 1
        """Run the string using eval() and return the resulting Python object via Python repr()"""

        EXEC_RETURN_JSON: PythonRequest.CmdType.ValueType = ...  # 2
        """Run the string using eval() and return the resulting Python object encoded via json"""

    class CmdType(_CmdType, metaclass=_CmdTypeEnumTypeWrapper):
        """@brief Specify the execution type and return value for the Python command"""
        pass

    EXEC_NO_RESULT: PythonRequest.CmdType.ValueType = ...  # 0
    """Run the command with exec() with no return value"""

    EXEC_RETURN_PYTHON: PythonRequest.CmdType.ValueType = ...  # 1
    """Run the string using eval() and return the resulting Python object via Python repr()"""

    EXEC_RETURN_JSON: PythonRequest.CmdType.ValueType = ...  # 2
    """Run the string using eval() and return the resulting Python object encoded via json"""


    TYPE_FIELD_NUMBER: builtins.int
    COMMAND_FIELD_NUMBER: builtins.int
    type: global___PythonRequest.CmdType.ValueType = ...
    """Specify how the string should be executed and what the return value should be"""

    command: typing.Text = ...
    """UTF8 encoded string to be exec() or eval() by the EnSight Python interpreter"""

    def __init__(self,
        *,
        type : global___PythonRequest.CmdType.ValueType = ...,
        command : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["command",b"command","type",b"type"]) -> None: ...
global___PythonRequest = PythonRequest

class PythonReply(google.protobuf.message.Message):
    """The result of executing a Python string in EnSight"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    value: typing.Text = ...
    """UTF8 encoded string, the repr() or json representation of the evaluated expression depending on the PythonRequest::CmdType specified"""

    error: builtins.int = ...
    """If error < 0 an error occurred"""

    def __init__(self,
        *,
        value : typing.Text = ...,
        error : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["error",b"error","value",b"value"]) -> None: ...
global___PythonReply = PythonReply

class RenderRequest(google.protobuf.message.Message):
    """Control options for a single image render request"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _RenderType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RenderTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RenderType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        IMAGE_PNG: RenderRequest.RenderType.ValueType = ...  # 0
        """The returned image will be encoded into the PNG image file format and returned as an array of bytes."""

        IMAGE_RAW: RenderRequest.RenderType.ValueType = ...  # 1
        """The returned value be in raw binary bytes: RGBRGBRGB... width*height*3 bytes total"""

    class RenderType(_RenderType, metaclass=_RenderTypeEnumTypeWrapper):
        """@brief Specify the return type of the rendering request"""
        pass

    IMAGE_PNG: RenderRequest.RenderType.ValueType = ...  # 0
    """The returned image will be encoded into the PNG image file format and returned as an array of bytes."""

    IMAGE_RAW: RenderRequest.RenderType.ValueType = ...  # 1
    """The returned value be in raw binary bytes: RGBRGBRGB... width*height*3 bytes total"""


    TYPE_FIELD_NUMBER: builtins.int
    IMAGE_WIDTH_FIELD_NUMBER: builtins.int
    IMAGE_HEIGHT_FIELD_NUMBER: builtins.int
    IMAGE_AA_PASSES_FIELD_NUMBER: builtins.int
    INCLUDE_HIGHLIGHTING_FIELD_NUMBER: builtins.int
    type: global___RenderRequest.RenderType.ValueType = ...
    """Select the format the returned image should be in."""

    image_width: builtins.int = ...
    """The desired image width in pixels"""

    image_height: builtins.int = ...
    """The desired image height in pixels"""

    image_aa_passes: builtins.int = ...
    """The number of anti-aliasing passes to be applied"""

    include_highlighting: builtins.bool = ...
    """If true, any dynamic overlay will be included in the rendered image"""

    def __init__(self,
        *,
        type : global___RenderRequest.RenderType.ValueType = ...,
        image_width : builtins.int = ...,
        image_height : builtins.int = ...,
        image_aa_passes : builtins.int = ...,
        include_highlighting : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["image_aa_passes",b"image_aa_passes","image_height",b"image_height","image_width",b"image_width","include_highlighting",b"include_highlighting","type",b"type"]) -> None: ...
global___RenderRequest = RenderRequest

class RenderReply(google.protobuf.message.Message):
    """The returned, rendered image"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.bytes = ...
    """An array of byte representing the image.  See RenderRequest::RenderType for the specific format."""

    def __init__(self,
        *,
        value : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["value",b"value"]) -> None: ...
global___RenderReply = RenderReply

class AnimSaveRequest(google.protobuf.message.Message):
    """Request that an image or animation be saved.  
    If saving an animation, and format is an image format like png, save multiple images 
    and insert an index like "_0003" into the file name before the extension.
    If saving one frame in an animation format, a one-frame movie will be written.
    Valid anim formats: .mp4, .avi, .mov
    Valid image formats: .png, .tif/.tiff, .jpg/.jpeg, .ppm

    Format  Option name    Value                             Notes
    mp4:    Quality        Best|High|Medium|Low              default: High
            Type           0|1                               default: 1       1 for H.264, 0 for non-H.264
    avi:    Compression    MJPEG|RAW|MPEG4V2                 default: MPEG4V2
            BitRate        (a value between 0 and 80000)     default: 20000   kbits/sec   
    mov:    BitRate        (a value between 0 and 80000)     default: 20000   kbits/sec  
    png:    Compression    None|Fast|Best|Default            default: Default  (zlib compression setting)
    tif:    Compression    None|PackBits|Deflate             default: PackBits
    jpg:    Quality        (a value between 0 and 100)       default: 75
    ppm:    Format         Binary|Ascii                      default: Binary
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class FormatOptionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    FILENAME_FIELD_NUMBER: builtins.int
    FORMAT_OPTIONS_FIELD_NUMBER: builtins.int
    WIDTH_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    AA_PASSES_FIELD_NUMBER: builtins.int
    WHITE_BACKGROUND_FIELD_NUMBER: builtins.int
    START_FRAME_FIELD_NUMBER: builtins.int
    NUM_FRAMES_FIELD_NUMBER: builtins.int
    FPS_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Handle used to query progress or cancel a save.  Any unique string, provided by the caller."""

    filename: typing.Text = ...
    """Name of file to save.  Format determined from file extension.  Defaults to .mp4 or .png with no file extension.  UTF8 encoding.  Existing files are overwritten."""

    @property
    def format_options(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Options specific to certain formats, as (option_name, value) pairs"""
        pass
    width: builtins.int = ...
    """Image width.  0 means current window width."""

    height: builtins.int = ...
    """Image height.  0 means current window height."""

    aa_passes: builtins.int = ...
    """Num anti-aliasing passes.  0 uses EnSight default 4-pass antialiasing."""

    white_background: builtins.bool = ...
    """If True, set background to white, and change text and misc colors to black as necessary.  Restore all, after save.  If False, leave all colors as they are."""

    start_frame: builtins.int = ...
    """First frame to save.  0-based.  -1 special value that means the current timestep"""

    num_frames: builtins.int = ...
    """Num frames to save.  -1 special value that means all timesteps.  num_frames > num timesteps  allows multiple cycles through time."""

    fps: builtins.float = ...
    """Frames/sec.  Ignored if saving an image."""

    def __init__(self,
        *,
        id : typing.Text = ...,
        filename : typing.Text = ...,
        format_options : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        width : builtins.int = ...,
        height : builtins.int = ...,
        aa_passes : builtins.int = ...,
        white_background : builtins.bool = ...,
        start_frame : builtins.int = ...,
        num_frames : builtins.int = ...,
        fps : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["aa_passes",b"aa_passes","filename",b"filename","format_options",b"format_options","fps",b"fps","height",b"height","id",b"id","num_frames",b"num_frames","start_frame",b"start_frame","white_background",b"white_background","width",b"width"]) -> None: ...
global___AnimSaveRequest = AnimSaveRequest

class AnimSaveReply(google.protobuf.message.Message):
    """Reply to request to save an image or animation"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___AnimSaveReply = AnimSaveReply

class AnimQueryProgressRequest(google.protobuf.message.Message):
    """Query the progress of an animation being saved.  This can be called while AnimSaveRequest is in progress"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    CANCEL_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Handle for the save operation, same as in the request"""

    cancel: builtins.bool = ...
    """If True, request cancellation of the save."""

    def __init__(self,
        *,
        id : typing.Text = ...,
        cancel : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cancel",b"cancel","id",b"id"]) -> None: ...
global___AnimQueryProgressRequest = AnimQueryProgressRequest

class AnimQueryProgressReply(google.protobuf.message.Message):
    """Reply to query of animation progress"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _Status:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        IN_PROGRESS: AnimQueryProgressReply.Status.ValueType = ...  # 0
        """Saving"""

        COMPLETE: AnimQueryProgressReply.Status.ValueType = ...  # 1
        """Successfully completed."""

        CANCEL_REQUESTED: AnimQueryProgressReply.Status.ValueType = ...  # 2
        """Cancellation requested, but not yet cancelled"""

        CANCELLED: AnimQueryProgressReply.Status.ValueType = ...  # 3
        """Cancellation completed"""

        WRITE_ERROR: AnimQueryProgressReply.Status.ValueType = ...  # 4
        """Animation could not be saved - file not writable, output size too big, ..."""

    class Status(_Status, metaclass=_StatusEnumTypeWrapper):
        """@brief The current status of the animation rendering operation"""
        pass

    IN_PROGRESS: AnimQueryProgressReply.Status.ValueType = ...  # 0
    """Saving"""

    COMPLETE: AnimQueryProgressReply.Status.ValueType = ...  # 1
    """Successfully completed."""

    CANCEL_REQUESTED: AnimQueryProgressReply.Status.ValueType = ...  # 2
    """Cancellation requested, but not yet cancelled"""

    CANCELLED: AnimQueryProgressReply.Status.ValueType = ...  # 3
    """Cancellation completed"""

    WRITE_ERROR: AnimQueryProgressReply.Status.ValueType = ...  # 4
    """Animation could not be saved - file not writable, output size too big, ..."""


    ID_FIELD_NUMBER: builtins.int
    NUM_FRAMES_FINISHED_FIELD_NUMBER: builtins.int
    NUM_FRAMES_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    ERROR_MSG_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Handle for the save operation, same as in the request"""

    num_frames_finished: builtins.int = ...
    """Is 0 at first, will be equal to num_frames when finished."""

    num_frames: builtins.int = ...
    """Same as num_frames in request, unless num_frames in request == -1."""

    status: global___AnimQueryProgressReply.Status.ValueType = ...
    """If 'cancel' is True in the request, but the anim had already completed or errored out, returned status is COMPLETE or ERROR"""

    error_msg: typing.Text = ...
    """If the status==WRITE_ERROR, the error message"""

    def __init__(self,
        *,
        id : typing.Text = ...,
        num_frames_finished : builtins.int = ...,
        num_frames : builtins.int = ...,
        status : global___AnimQueryProgressReply.Status.ValueType = ...,
        error_msg : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_msg",b"error_msg","id",b"id","num_frames",b"num_frames","num_frames_finished",b"num_frames_finished","status",b"status"]) -> None: ...
global___AnimQueryProgressReply = AnimQueryProgressReply

class GeometryRequest(google.protobuf.message.Message):
    """Control options for a geometry pull request"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _GeometryType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _GeometryTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_GeometryType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        GEOMETRY_GLB: GeometryRequest.GeometryType.ValueType = ...  # 0
        """The returned geometry is returned as an in-memory glTF encoded file"""

    class GeometryType(_GeometryType, metaclass=_GeometryTypeEnumTypeWrapper):
        """@brief select the format of the geometry reqquest"""
        pass

    GEOMETRY_GLB: GeometryRequest.GeometryType.ValueType = ...  # 0
    """The returned geometry is returned as an in-memory glTF encoded file"""


    TYPE_FIELD_NUMBER: builtins.int
    type: global___GeometryRequest.GeometryType.ValueType = ...
    """The format the geometry data should be returned in."""

    def __init__(self,
        *,
        type : global___GeometryRequest.GeometryType.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["type",b"type"]) -> None: ...
global___GeometryRequest = GeometryRequest

class GeometryReply(google.protobuf.message.Message):
    """The returned geometry request payload"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.bytes = ...
    """a binary array containing the geometry in the format specified by GeometryRequest::GeometryType"""

    def __init__(self,
        *,
        value : builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["value",b"value"]) -> None: ...
global___GeometryReply = GeometryReply

class ExitRequest(google.protobuf.message.Message):
    """Request that the EnSight server shut down"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ExitRequest = ExitRequest

class ExitReply(google.protobuf.message.Message):
    """The value returned by an ExitRequest rpc call
    Note: it is not uncommon for the ExitRequest call to return a gRPC error due to shutdown race conditions.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___ExitReply = ExitReply

class ImageStreamRequest(google.protobuf.message.Message):
    """@brief Request the start of an image stream

    This message dictates the form of the ImageReply messages.  One can have the images flipped vertically
    and can optionally chunk an entire image frame into multiple ImageReply messages.  Empirical measurements
    demonstrate that gRPC can transfer smaller blocks of pixels faster that larger blocks. If the chunk option
    is enabled, the ImageReply messages will contain 1MB of pixel data maximum.  The client must
    concatenate the pixel data from consecutive ImageReply messages until it receives a message
    with the final flag set.  At that point, all of the pixel data for a complete image frame has
    been received.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FLIP_VERTICAL_FIELD_NUMBER: builtins.int
    CHUNK_FIELD_NUMBER: builtins.int
    flip_vertical: builtins.bool = ...
    """If true, flip the image over the X axis before sending the image"""

    chunk: builtins.bool = ...
    """Set to send images in 1MB chunks to speed up large (>1MB) image transfers"""

    def __init__(self,
        *,
        flip_vertical : builtins.bool = ...,
        chunk : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["chunk",b"chunk","flip_vertical",b"flip_vertical"]) -> None: ...
global___ImageStreamRequest = ImageStreamRequest

class ImageReply(google.protobuf.message.Message):
    """@brief An image frame message

    These messages can contain the pixel data for an entire image or some portion of the image. An
    image frame can be broken up into multiple ImageReply messages.  If the client receives an 
    ImageReply message with the final flag set to false, it must continue reading messages,
    concatenating the pixels data until it receives an ImageReply with the final flag set to
    true.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _CompressionType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CompressionTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CompressionType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        NONE: ImageReply.CompressionType.ValueType = ...  # 0
        """The data are in raw-binary uncompressed format"""

    class CompressionType(_CompressionType, metaclass=_CompressionTypeEnumTypeWrapper):
        """@brief the pixel compression, if any"""
        pass

    NONE: ImageReply.CompressionType.ValueType = ...  # 0
    """The data are in raw-binary uncompressed format"""


    WIDTH_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    COMPRESSION_FIELD_NUMBER: builtins.int
    PIXELS_FIELD_NUMBER: builtins.int
    FINAL_FIELD_NUMBER: builtins.int
    width: builtins.int = ...
    """The width of the image in pixels"""

    height: builtins.int = ...
    """The height of the image in pixels"""

    compression: global___ImageReply.CompressionType.ValueType = ...
    """The compression scheme used for the pixel data payload"""

    pixels: builtins.bytes = ...
    """The pixel data in RGBRGBRGB... form, width*height*3 bytes"""

    final: builtins.bool = ...
    """If the ImageStreamRequest chunk is true, this is the final message in an image frame"""

    def __init__(self,
        *,
        width : builtins.int = ...,
        height : builtins.int = ...,
        compression : global___ImageReply.CompressionType.ValueType = ...,
        pixels : builtins.bytes = ...,
        final : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["compression",b"compression","final",b"final","height",b"height","pixels",b"pixels","width",b"width"]) -> None: ...
global___ImageReply = ImageReply

class EventStreamRequest(google.protobuf.message.Message):
    """Specify the prefix that should be used to set the filter prefix"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PREFIX_FIELD_NUMBER: builtins.int
    prefix: typing.Text = ...
    """Specify that only the events that begin with this prefix should be included in the event stream"""

    def __init__(self,
        *,
        prefix : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["prefix",b"prefix"]) -> None: ...
global___EventStreamRequest = EventStreamRequest

class EventReply(google.protobuf.message.Message):
    """A filtered event"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TAG_FIELD_NUMBER: builtins.int
    tag: typing.Text = ...
    """The string associated with the EnSight event callback.  It will begin with the prefix passed in the EventStreamRequest message"""

    def __init__(self,
        *,
        tag : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["tag",b"tag"]) -> None: ...
global___EventReply = EventReply
