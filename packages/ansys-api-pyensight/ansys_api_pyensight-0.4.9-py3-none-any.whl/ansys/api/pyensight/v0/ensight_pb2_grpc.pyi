"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.pyensight.v0.ensight_pb2
import grpc
import typing

class EnSightServiceStub:
    """@defgroup EnSightService EnSightService
    @ingroup grpc
    @brief The core EnSight gRPC service

    The remote EnSight command and control functions provided by the EnSight core.
    They provide access to the EnSight Python interpreter, scene geometry (via glTF blobs),
    the generated image stream and the internal event queue. Custom, special purpose 
    interfaces exist for other applications.  Most of these calls require the complete
    attention of the EnSight core to perform their operations and thus will block until 
    the EnSight core becomes available.  Calls that do not block in this fashion are
    marked "(non-blocking)" in their description.
    @{
    @addtogroup EnSightService
    @{
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    RunPython: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.PythonRequest,
        ansys.api.pyensight.v0.ensight_pb2.PythonReply] = ...
    """Run a Python command string in the EnSight Python interpreter
    @return PythonReply the result of the string
    """

    RenderImage: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.RenderRequest,
        ansys.api.pyensight.v0.ensight_pb2.RenderReply] = ...
    """Render an image of the current scene
    @return RenderReply the rendered image
    """

    GetGeometry: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.GeometryRequest,
        ansys.api.pyensight.v0.ensight_pb2.GeometryReply] = ...
    """Return current scene geometry representation
    @return GeometryReply the current scene geometry in glTF format
    """

    Exit: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.ExitRequest,
        ansys.api.pyensight.v0.ensight_pb2.ExitReply] = ...
    """Shutdown EnSight session
    @return ExitReply an acknowledgment from the EnSight server
    """

    GetEventStream: grpc.UnaryStreamMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.EventStreamRequest,
        ansys.api.pyensight.v0.ensight_pb2.EventReply] = ...
    """Enable a filtered stream of callback events from the EnSight session (non-blocking)

    EnSight supports a callback registration system that can associate a callback with
    with any attribute change in the client.  This is the ensight.objs.addcallback()
    Python call.  For example:
    ~~~~~~~~~~~~~~~{.py}
    ensight.objs.addcallback(ensight.objs.core, None, prefix+"PARTLIST_CHANGED", 
                             attrs=['PARTS'], flags=ensight.objs.EVENTMAP_FLAG_COMP_GLOBAL)
    ~~~~~~~~~~~~~~~
    will register a callback event associated with any changes in the ensight.objs.core.PARTS
    attribute.  When this happens, EnSight will emit an event with the string 
    "prefix+'PARTLIST_CHANGED'".  The gRPC interface enables a stream of these event strings
    to be returned to the calling application in EventReply messages.  It also provides a 
    simple prefix filter, so that only messages that start with the specific prefix will be 
    returned on the event stream.  This prefix is passed in the EventStreamRequest message.
    @return EventReply a stream of EventReply messages for each emitted event
    """

    SubscribeEvents: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.SubscribeEventOptions,
        ansys.api.pyensight.v0.ensight_pb2.GenericResponse] = ...
    """Subscribe to the EnSight event stream via reverse gRPC connection (non-blocking)

    Some gRPC clients have demonstrated problems maintaining a continuous EventReply 
    stream.  For these clients, it is possible for the client to reverse the gRPC 
    connection so EnSight will make gRPC calls back to the client.  In this case,
    the client application will start an \\ref EnSightSubscription service and inform
    EnSight of how to connect to it via SubscribeEventOptions.  EnSight will then
    make PublishEvent calls with the EventReply messages
    it would have used in the GetEventStream() configuration.
    """

    SubscribeImages: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.SubscribeImageOptions,
        ansys.api.pyensight.v0.ensight_pb2.GenericResponse] = ...
    """Subscribe to the EnSight image stream via reverse gRPC connection (non-blocking)

    Some gRPC clients have demonstrated problems maintaining a continuous ImageReply 
    stream.  For these clients, it is possible for the client to reverse the gRPC 
    connection so EnSight will make gRPC calls back to the client.  In this case,
    the client application will start an \\ref EnSightSubscription service and inform
    EnSight of how to connect to it via SubscribeImageOptions.  EnSight will then
    make PublishImage calls with a short lived (single image frame) ImageReply message
    stream it would have used in the GetEventStream() configuration.  EnSight will
    make a separate PublishImage call for every frame of imagery it generates.
    """

    Unsubscribe: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.Prefix,
        ansys.api.pyensight.v0.ensight_pb2.GenericResponse] = ...
    """Discontinue a previous established stream subscription (non-blocking)

    This call will cause EnSight to stop making gRPC calls to the client gRPC server
    associated with the prefix string.  It can be used to stop a SubscribeEvents() or 
    SubscribeImages() call.
    """

    GetImageStream: grpc.UnaryStreamMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.ImageStreamRequest,
        ansys.api.pyensight.v0.ensight_pb2.ImageReply] = ...
    """Enable a stream of rendered images from the EnSight session (non-blocking)

    A stream of the images rendered by EnSight.
    @return ImageReply a stream of ImageReply messages for each image rendered
    """

    AnimSave: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.AnimSaveRequest,
        ansys.api.pyensight.v0.ensight_pb2.AnimSaveReply] = ...
    """An interface to save an image or animation
    @return AnimSaveReply
    """

    AnimQueryProgress: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.AnimQueryProgressRequest,
        ansys.api.pyensight.v0.ensight_pb2.AnimQueryProgressReply] = ...
    """An interface to query the progress an animation being saved
    @return AnimQueryProgressReply describing progress toward completion
    """


class EnSightServiceServicer(metaclass=abc.ABCMeta):
    """@defgroup EnSightService EnSightService
    @ingroup grpc
    @brief The core EnSight gRPC service

    The remote EnSight command and control functions provided by the EnSight core.
    They provide access to the EnSight Python interpreter, scene geometry (via glTF blobs),
    the generated image stream and the internal event queue. Custom, special purpose 
    interfaces exist for other applications.  Most of these calls require the complete
    attention of the EnSight core to perform their operations and thus will block until 
    the EnSight core becomes available.  Calls that do not block in this fashion are
    marked "(non-blocking)" in their description.
    @{
    @addtogroup EnSightService
    @{
    """
    @abc.abstractmethod
    def RunPython(self,
        request: ansys.api.pyensight.v0.ensight_pb2.PythonRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.PythonReply:
        """Run a Python command string in the EnSight Python interpreter
        @return PythonReply the result of the string
        """
        pass

    @abc.abstractmethod
    def RenderImage(self,
        request: ansys.api.pyensight.v0.ensight_pb2.RenderRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.RenderReply:
        """Render an image of the current scene
        @return RenderReply the rendered image
        """
        pass

    @abc.abstractmethod
    def GetGeometry(self,
        request: ansys.api.pyensight.v0.ensight_pb2.GeometryRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.GeometryReply:
        """Return current scene geometry representation
        @return GeometryReply the current scene geometry in glTF format
        """
        pass

    @abc.abstractmethod
    def Exit(self,
        request: ansys.api.pyensight.v0.ensight_pb2.ExitRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.ExitReply:
        """Shutdown EnSight session
        @return ExitReply an acknowledgment from the EnSight server
        """
        pass

    @abc.abstractmethod
    def GetEventStream(self,
        request: ansys.api.pyensight.v0.ensight_pb2.EventStreamRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.pyensight.v0.ensight_pb2.EventReply]:
        """Enable a filtered stream of callback events from the EnSight session (non-blocking)

        EnSight supports a callback registration system that can associate a callback with
        with any attribute change in the client.  This is the ensight.objs.addcallback()
        Python call.  For example:
        ~~~~~~~~~~~~~~~{.py}
        ensight.objs.addcallback(ensight.objs.core, None, prefix+"PARTLIST_CHANGED", 
                                 attrs=['PARTS'], flags=ensight.objs.EVENTMAP_FLAG_COMP_GLOBAL)
        ~~~~~~~~~~~~~~~
        will register a callback event associated with any changes in the ensight.objs.core.PARTS
        attribute.  When this happens, EnSight will emit an event with the string 
        "prefix+'PARTLIST_CHANGED'".  The gRPC interface enables a stream of these event strings
        to be returned to the calling application in EventReply messages.  It also provides a 
        simple prefix filter, so that only messages that start with the specific prefix will be 
        returned on the event stream.  This prefix is passed in the EventStreamRequest message.
        @return EventReply a stream of EventReply messages for each emitted event
        """
        pass

    @abc.abstractmethod
    def SubscribeEvents(self,
        request: ansys.api.pyensight.v0.ensight_pb2.SubscribeEventOptions,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.GenericResponse:
        """Subscribe to the EnSight event stream via reverse gRPC connection (non-blocking)

        Some gRPC clients have demonstrated problems maintaining a continuous EventReply 
        stream.  For these clients, it is possible for the client to reverse the gRPC 
        connection so EnSight will make gRPC calls back to the client.  In this case,
        the client application will start an \\ref EnSightSubscription service and inform
        EnSight of how to connect to it via SubscribeEventOptions.  EnSight will then
        make PublishEvent calls with the EventReply messages
        it would have used in the GetEventStream() configuration.
        """
        pass

    @abc.abstractmethod
    def SubscribeImages(self,
        request: ansys.api.pyensight.v0.ensight_pb2.SubscribeImageOptions,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.GenericResponse:
        """Subscribe to the EnSight image stream via reverse gRPC connection (non-blocking)

        Some gRPC clients have demonstrated problems maintaining a continuous ImageReply 
        stream.  For these clients, it is possible for the client to reverse the gRPC 
        connection so EnSight will make gRPC calls back to the client.  In this case,
        the client application will start an \\ref EnSightSubscription service and inform
        EnSight of how to connect to it via SubscribeImageOptions.  EnSight will then
        make PublishImage calls with a short lived (single image frame) ImageReply message
        stream it would have used in the GetEventStream() configuration.  EnSight will
        make a separate PublishImage call for every frame of imagery it generates.
        """
        pass

    @abc.abstractmethod
    def Unsubscribe(self,
        request: ansys.api.pyensight.v0.ensight_pb2.Prefix,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.GenericResponse:
        """Discontinue a previous established stream subscription (non-blocking)

        This call will cause EnSight to stop making gRPC calls to the client gRPC server
        associated with the prefix string.  It can be used to stop a SubscribeEvents() or 
        SubscribeImages() call.
        """
        pass

    @abc.abstractmethod
    def GetImageStream(self,
        request: ansys.api.pyensight.v0.ensight_pb2.ImageStreamRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.pyensight.v0.ensight_pb2.ImageReply]:
        """Enable a stream of rendered images from the EnSight session (non-blocking)

        A stream of the images rendered by EnSight.
        @return ImageReply a stream of ImageReply messages for each image rendered
        """
        pass

    @abc.abstractmethod
    def AnimSave(self,
        request: ansys.api.pyensight.v0.ensight_pb2.AnimSaveRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.AnimSaveReply:
        """An interface to save an image or animation
        @return AnimSaveReply
        """
        pass

    @abc.abstractmethod
    def AnimQueryProgress(self,
        request: ansys.api.pyensight.v0.ensight_pb2.AnimQueryProgressRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.AnimQueryProgressReply:
        """An interface to query the progress an animation being saved
        @return AnimQueryProgressReply describing progress toward completion
        """
        pass


def add_EnSightServiceServicer_to_server(servicer: EnSightServiceServicer, server: grpc.Server) -> None: ...

class EnSightSubscriptionStub:
    """@defgroup EnSightSubscription EnSightSubscription
    @ingroup grpc
    @brief Client-side, reverse gRPC service

    Definition of the client-side, reverse gRPC service that EnSight 
    will connect to in response to a stream subscription request.
    @{
    @addtogroup EnSightSubscription
    @{
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    PublishImage: grpc.StreamUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.ImageReply,
        ansys.api.pyensight.v0.ensight_pb2.GenericResponse] = ...
    """Publish a single image (possibly in chucks) to the remote server
    @param ImageReply  The stream of ImageReply objects
    @return GenericResponse
    """

    PublishEvent: grpc.UnaryUnaryMultiCallable[
        ansys.api.pyensight.v0.ensight_pb2.EventReply,
        ansys.api.pyensight.v0.ensight_pb2.GenericResponse] = ...
    """Publish an event to the remote server
    @return GenericResponse
    """


class EnSightSubscriptionServicer(metaclass=abc.ABCMeta):
    """@defgroup EnSightSubscription EnSightSubscription
    @ingroup grpc
    @brief Client-side, reverse gRPC service

    Definition of the client-side, reverse gRPC service that EnSight 
    will connect to in response to a stream subscription request.
    @{
    @addtogroup EnSightSubscription
    @{
    """
    @abc.abstractmethod
    def PublishImage(self,
        request: typing.Iterator[ansys.api.pyensight.v0.ensight_pb2.ImageReply],
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.GenericResponse:
        """Publish a single image (possibly in chucks) to the remote server
        @param ImageReply  The stream of ImageReply objects
        @return GenericResponse
        """
        pass

    @abc.abstractmethod
    def PublishEvent(self,
        request: ansys.api.pyensight.v0.ensight_pb2.EventReply,
        context: grpc.ServicerContext,
    ) -> ansys.api.pyensight.v0.ensight_pb2.GenericResponse:
        """Publish an event to the remote server
        @return GenericResponse
        """
        pass


def add_EnSightSubscriptionServicer_to_server(servicer: EnSightSubscriptionServicer, server: grpc.Server) -> None: ...
