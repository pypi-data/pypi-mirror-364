# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ansys.api.pyensight.v0 import ensight_pb2 as ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2


class EnSightServiceStub(object):
    """@defgroup EnSightService EnSightService
    @ingroup grpc
    @brief The core EnSight gRPC service

    The remote EnSight command and control functions provided by the EnSight core.
    They provide access to the EnSight Python interpreter, scene geometry (via glTF blobs),
    the generated image stream and the internal event queue. Custom, special purpose 
    interfaces exist for other applications.  Most of these calls require the complete
    attention of the EnSight core to perform their operations and thus will block until 
    the EnSight core becomes available.  Calls that do not block in this fashion are
    marked "(non-blocking)" in their description.
    @{
    @addtogroup EnSightService
    @{
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunPython = channel.unary_unary(
                '/ensightservice.EnSightService/RunPython',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.PythonRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.PythonReply.FromString,
                )
        self.RenderImage = channel.unary_unary(
                '/ensightservice.EnSightService/RenderImage',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.RenderRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.RenderReply.FromString,
                )
        self.GetGeometry = channel.unary_unary(
                '/ensightservice.EnSightService/GetGeometry',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GeometryRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GeometryReply.FromString,
                )
        self.Exit = channel.unary_unary(
                '/ensightservice.EnSightService/Exit',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ExitRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ExitReply.FromString,
                )
        self.GetEventStream = channel.unary_stream(
                '/ensightservice.EnSightService/GetEventStream',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventStreamRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventReply.FromString,
                )
        self.SubscribeEvents = channel.unary_unary(
                '/ensightservice.EnSightService/SubscribeEvents',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.SubscribeEventOptions.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
                )
        self.SubscribeImages = channel.unary_unary(
                '/ensightservice.EnSightService/SubscribeImages',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.SubscribeImageOptions.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
                )
        self.Unsubscribe = channel.unary_unary(
                '/ensightservice.EnSightService/Unsubscribe',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.Prefix.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
                )
        self.GetImageStream = channel.unary_stream(
                '/ensightservice.EnSightService/GetImageStream',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageStreamRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageReply.FromString,
                )
        self.AnimSave = channel.unary_unary(
                '/ensightservice.EnSightService/AnimSave',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimSaveRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimSaveReply.FromString,
                )
        self.AnimQueryProgress = channel.unary_unary(
                '/ensightservice.EnSightService/AnimQueryProgress',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimQueryProgressRequest.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimQueryProgressReply.FromString,
                )


class EnSightServiceServicer(object):
    """@defgroup EnSightService EnSightService
    @ingroup grpc
    @brief The core EnSight gRPC service

    The remote EnSight command and control functions provided by the EnSight core.
    They provide access to the EnSight Python interpreter, scene geometry (via glTF blobs),
    the generated image stream and the internal event queue. Custom, special purpose 
    interfaces exist for other applications.  Most of these calls require the complete
    attention of the EnSight core to perform their operations and thus will block until 
    the EnSight core becomes available.  Calls that do not block in this fashion are
    marked "(non-blocking)" in their description.
    @{
    @addtogroup EnSightService
    @{
    """

    def RunPython(self, request, context):
        """Run a Python command string in the EnSight Python interpreter
        @return PythonReply the result of the string
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenderImage(self, request, context):
        """Render an image of the current scene
        @return RenderReply the rendered image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGeometry(self, request, context):
        """Return current scene geometry representation
        @return GeometryReply the current scene geometry in glTF format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exit(self, request, context):
        """Shutdown EnSight session
        @return ExitReply an acknowledgment from the EnSight server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventStream(self, request, context):
        """Enable a filtered stream of callback events from the EnSight session (non-blocking)

        EnSight supports a callback registration system that can associate a callback with
        with any attribute change in the client.  This is the ensight.objs.addcallback()
        Python call.  For example:
        ~~~~~~~~~~~~~~~{.py}
        ensight.objs.addcallback(ensight.objs.core, None, prefix+"PARTLIST_CHANGED", 
        attrs=['PARTS'], flags=ensight.objs.EVENTMAP_FLAG_COMP_GLOBAL)
        ~~~~~~~~~~~~~~~
        will register a callback event associated with any changes in the ensight.objs.core.PARTS
        attribute.  When this happens, EnSight will emit an event with the string 
        "prefix+'PARTLIST_CHANGED'".  The gRPC interface enables a stream of these event strings
        to be returned to the calling application in EventReply messages.  It also provides a 
        simple prefix filter, so that only messages that start with the specific prefix will be 
        returned on the event stream.  This prefix is passed in the EventStreamRequest message.
        @return EventReply a stream of EventReply messages for each emitted event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeEvents(self, request, context):
        """Subscribe to the EnSight event stream via reverse gRPC connection (non-blocking)

        Some gRPC clients have demonstrated problems maintaining a continuous EventReply 
        stream.  For these clients, it is possible for the client to reverse the gRPC 
        connection so EnSight will make gRPC calls back to the client.  In this case,
        the client application will start an \ref EnSightSubscription service and inform
        EnSight of how to connect to it via SubscribeEventOptions.  EnSight will then
        make PublishEvent calls with the EventReply messages
        it would have used in the GetEventStream() configuration.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeImages(self, request, context):
        """Subscribe to the EnSight image stream via reverse gRPC connection (non-blocking)

        Some gRPC clients have demonstrated problems maintaining a continuous ImageReply 
        stream.  For these clients, it is possible for the client to reverse the gRPC 
        connection so EnSight will make gRPC calls back to the client.  In this case,
        the client application will start an \ref EnSightSubscription service and inform
        EnSight of how to connect to it via SubscribeImageOptions.  EnSight will then
        make PublishImage calls with a short lived (single image frame) ImageReply message
        stream it would have used in the GetEventStream() configuration.  EnSight will
        make a separate PublishImage call for every frame of imagery it generates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Discontinue a previous established stream subscription (non-blocking)

        This call will cause EnSight to stop making gRPC calls to the client gRPC server
        associated with the prefix string.  It can be used to stop a SubscribeEvents() or 
        SubscribeImages() call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImageStream(self, request, context):
        """Enable a stream of rendered images from the EnSight session (non-blocking)

        A stream of the images rendered by EnSight.
        @return ImageReply a stream of ImageReply messages for each image rendered
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnimSave(self, request, context):
        """An interface to save an image or animation
        @return AnimSaveReply
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnimQueryProgress(self, request, context):
        """An interface to query the progress an animation being saved
        @return AnimQueryProgressReply describing progress toward completion
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnSightServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunPython': grpc.unary_unary_rpc_method_handler(
                    servicer.RunPython,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.PythonRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.PythonReply.SerializeToString,
            ),
            'RenderImage': grpc.unary_unary_rpc_method_handler(
                    servicer.RenderImage,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.RenderRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.RenderReply.SerializeToString,
            ),
            'GetGeometry': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGeometry,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GeometryRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GeometryReply.SerializeToString,
            ),
            'Exit': grpc.unary_unary_rpc_method_handler(
                    servicer.Exit,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ExitRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ExitReply.SerializeToString,
            ),
            'GetEventStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEventStream,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventStreamRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventReply.SerializeToString,
            ),
            'SubscribeEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeEvents,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.SubscribeEventOptions.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.SerializeToString,
            ),
            'SubscribeImages': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeImages,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.SubscribeImageOptions.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.Prefix.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.SerializeToString,
            ),
            'GetImageStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetImageStream,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageStreamRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageReply.SerializeToString,
            ),
            'AnimSave': grpc.unary_unary_rpc_method_handler(
                    servicer.AnimSave,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimSaveRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimSaveReply.SerializeToString,
            ),
            'AnimQueryProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.AnimQueryProgress,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimQueryProgressRequest.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimQueryProgressReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ensightservice.EnSightService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnSightService(object):
    """@defgroup EnSightService EnSightService
    @ingroup grpc
    @brief The core EnSight gRPC service

    The remote EnSight command and control functions provided by the EnSight core.
    They provide access to the EnSight Python interpreter, scene geometry (via glTF blobs),
    the generated image stream and the internal event queue. Custom, special purpose 
    interfaces exist for other applications.  Most of these calls require the complete
    attention of the EnSight core to perform their operations and thus will block until 
    the EnSight core becomes available.  Calls that do not block in this fashion are
    marked "(non-blocking)" in their description.
    @{
    @addtogroup EnSightService
    @{
    """

    @staticmethod
    def RunPython(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/RunPython',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.PythonRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.PythonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenderImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/RenderImage',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.RenderRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.RenderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGeometry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/GetGeometry',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GeometryRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GeometryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/Exit',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ExitRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ExitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ensightservice.EnSightService/GetEventStream',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventStreamRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/SubscribeEvents',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.SubscribeEventOptions.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/SubscribeImages',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.SubscribeImageOptions.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/Unsubscribe',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.Prefix.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetImageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ensightservice.EnSightService/GetImageStream',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageStreamRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnimSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/AnimSave',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimSaveRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimSaveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnimQueryProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightService/AnimQueryProgress',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimQueryProgressRequest.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.AnimQueryProgressReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EnSightSubscriptionStub(object):
    """@defgroup EnSightSubscription EnSightSubscription
    @ingroup grpc
    @brief Client-side, reverse gRPC service

    Definition of the client-side, reverse gRPC service that EnSight 
    will connect to in response to a stream subscription request.
    @{
    @addtogroup EnSightSubscription
    @{
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishImage = channel.stream_unary(
                '/ensightservice.EnSightSubscription/PublishImage',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageReply.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
                )
        self.PublishEvent = channel.unary_unary(
                '/ensightservice.EnSightSubscription/PublishEvent',
                request_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventReply.SerializeToString,
                response_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
                )


class EnSightSubscriptionServicer(object):
    """@defgroup EnSightSubscription EnSightSubscription
    @ingroup grpc
    @brief Client-side, reverse gRPC service

    Definition of the client-side, reverse gRPC service that EnSight 
    will connect to in response to a stream subscription request.
    @{
    @addtogroup EnSightSubscription
    @{
    """

    def PublishImage(self, request_iterator, context):
        """Publish a single image (possibly in chucks) to the remote server
        @param ImageReply  The stream of ImageReply objects
        @return GenericResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishEvent(self, request, context):
        """Publish an event to the remote server
        @return GenericResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnSightSubscriptionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishImage': grpc.stream_unary_rpc_method_handler(
                    servicer.PublishImage,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageReply.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.SerializeToString,
            ),
            'PublishEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishEvent,
                    request_deserializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventReply.FromString,
                    response_serializer=ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ensightservice.EnSightSubscription', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnSightSubscription(object):
    """@defgroup EnSightSubscription EnSightSubscription
    @ingroup grpc
    @brief Client-side, reverse gRPC service

    Definition of the client-side, reverse gRPC service that EnSight 
    will connect to in response to a stream subscription request.
    @{
    @addtogroup EnSightSubscription
    @{
    """

    @staticmethod
    def PublishImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ensightservice.EnSightSubscription/PublishImage',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.ImageReply.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ensightservice.EnSightSubscription/PublishEvent',
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.EventReply.SerializeToString,
            ansys_dot_api_dot_pyensight_dot_v0_dot_ensight__pb2.GenericResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
