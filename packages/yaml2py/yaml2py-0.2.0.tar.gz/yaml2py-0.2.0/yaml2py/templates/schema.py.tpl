# THIS FILE IS AUTO-GENERATED BY yaml2py.
# DO NOT EDIT THIS FILE MANUALLY.

from typing import Any, Dict, List, Union, Optional
import os


class ConfigSchema:
    """
    配置架構基礎類，用於處理 YAML 配置的資料存取。

    提供方法來返回屬性名稱和值，並支援敏感信息的遮罩處理。
    """
    def __init__(self, data: Dict[str, Any]) -> None:
        """
        初始化 ConfigSchema 實例。

        參數：
            data (Dict[str, Any]): YAML 配置資料字典。
        """
        self._data = data
        
    def return_properties(self, return_type="list", mask_sensitive=True):
        """
        返回所有 @property 方法的名稱和對應的值。

        參數：
            return_type (str): 指定返回格式，'list' 返回列表，'dict' 返回字典。
            mask_sensitive (bool): 是否對敏感信息進行隱藏處理。

        返回：
            list 或 dict: 包含 @property 名稱和值的列表或字典。
        """
        if return_type == "dict":
            payload = {}
        elif return_type == "list":
            payload = []
        else:
            raise ValueError("Invalid return_type. Must be 'list' or 'dict'.")

        sensitive_keywords = [
            "password", "pwd", "api_token", "token", "appkey", "secret", "key",
        ]

        def mask_value(value):
            """
            對敏感值進行遮罩處理。

            參數：
                value: 要遮罩的值。

            返回：
                str: 遮罩後的值。
            """
            value_str = str(value)
            if len(value_str) > 4:
                return value_str[:2] + "*" * (len(value_str) - 4) + value_str[-2:]
            return value

        for attr_name in dir(self):
            attr = getattr(self.__class__, attr_name, None)
            if isinstance(attr, property):
                try:
                    value = getattr(self, attr_name)
                    if mask_sensitive and any(
                        keyword.lower() in attr_name.lower()
                        for keyword in sensitive_keywords
                    ):
                        value = mask_value(value)
                except Exception as e:
                    value = "<Error: " + str(e) + ">"

                if return_type == "dict":
                    payload[attr_name] = value
                elif return_type == "list":
                    payload.append(str(attr_name) + ": " + str(value))

        return payload
    
    def to_dict(self) -> Dict[str, Any]:
        """
        將配置轉換為字典格式。
        
        返回：
            Dict[str, Any]: 配置資料字典。
        """
        return self._data.copy()
    
    def __repr__(self) -> str:
        """返回物件的字串表示。"""
        class_name = self.__class__.__name__
        props = self.return_properties(return_type="dict", mask_sensitive=True)
        return f"{class_name}({props})"
    
    def print_all(self, mask_sensitive=True):
        """
        以格式化的方式列印所有配置項目。
        
        參數：
            mask_sensitive (bool): 是否對敏感信息進行隱藏處理（預設為 True）。
        """
        class_name = self.__class__.__name__
        print(f"\n{class_name}:")
        print("-" * 40)
        
        props = self.return_properties(return_type="list", mask_sensitive=mask_sensitive)
        for prop in props:
            print(f"  {prop}")
        print("-" * 40)


# ---------- GENERATED CLASSES START ----------
{{CLASS_DEFINITIONS}}
# ---------- GENERATED CLASSES END ----------