name: 📚 Build Docs & 📦 Publish Package

on:
  # 当推送到 master 分支时触发测试
  # push:
  #   tags:
  #     - 'v*'
  
  # # 当创建 PR 时触发测试
  # pull_request:
  #   branches:
  #     - master
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      publish_pypi:
        description: '是否发布到PyPI'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      deploy_docs:
        description: '是否部署文档'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  # 构建文档
  build-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_docs == 'true'
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt

    - name: 🔧 Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: 📚 Deploy Documentation
      run: |
        mkdocs gh-deploy --force --clean --verbose --remote-branch gh-pages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建包
  build-package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.publish_pypi == 'true'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 🔍 Debug - Check files and environment
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== List all files ==="
        ls -la
        echo "=== Check README.md ==="
        if [ -f "README.md" ]; then
          echo "README.md exists, size: $(wc -c < README.md) bytes"
          echo "First 10 lines:"
          head -10 README.md
          echo "=== File permissions ==="
          ls -l README.md
        else
          echo "README.md not found"
          echo "Creating a minimal README.md for build"
          echo "# EmailWidget" > README.md
          echo "" >> README.md
          echo "🚀 一个现代化、易用的Python邮件组件库，让你轻松创建美观的HTML邮件报告" >> README.md
        fi
        echo "=== Check pyproject.toml ==="
        if [ -f "pyproject.toml" ]; then
          echo "pyproject.toml exists"
          grep -A2 -B2 "readme" pyproject.toml || echo "No readme config found"
        fi

    - name: 🏗️ Build Package
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m build
    
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: dist/

  # 发布到PyPI
  pypi-publish:
    name: 📤 Publish to PyPI
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'push' || github.event.inputs.publish_pypi == 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    
    # Use dedicated environment for PyPI publishing
    environment:
      name: pypi
      url: https://pypi.org/project/EmailWidget/
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dists
        path: dist/
    
    - name: 📤 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/

  # 运行测试
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # 直接安装测试所需的依赖，避免可编辑安装的构建问题
        pip install pytest pytest-cov
        pip install jinja2
        # 如果需要pandas功能的测试，安装pandas
        pip install pandas matplotlib seaborn || echo "Optional pandas dependencies not available"
    
    - name: 🧪 Run Tests
      run: |
        # 如果有测试文件的话运行测试
        if [ -d "tests" ]; then
          # 将当前目录添加到Python路径并运行测试
          python -c "import sys; sys.path.insert(0, '.'); import pytest; pytest.main(['tests/', '-v', '--cov=email_widget', '--cov-report=xml'])"
        else
          echo "No tests directory found, skipping tests"
        fi
    
    - name: 📊 Upload Coverage
      if: matrix.python-version == '3.10' && (github.event_name == 'push' || github.event_name == 'pull_request')
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }} 