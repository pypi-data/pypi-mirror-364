[project]
name = "EmailWidget"
version = "0.23.1"
authors = [
    { name = "PythonImporter", email = "271374667@qq.com"}
    ]
description = "ðŸš€ A modern and user-friendly Python email component library that enables you to easily create beautiful HTML email reports"
requires-python = ">=3.10"
readme = "README.md"
dependencies = [
    "jinja2>=3.1.6",
]

[project.urls]
"Homepage" = "https://github.com/271374667/EmailWidget"
"Source Code" = "https://github.com/271374667/EmailWidget"

[build-system]
requires = ["hatchling>=1.18"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["email_widget"]

[dependency-groups]
dev = [
    "hatchling>=1.27.0",
    "loguru>=0.7.3",
    "matplotlib>=3.7.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
    "pandas>=2.3.0",
    "pandas-stubs>=2.2.3.250527",
    "pytest>=8.4.1",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "redmail>=0.6.0",
    "seaborn>=0.13.2",
    "ruff>=0.1.7",
    "notebook>=7.4.4",
    "psutil>=6.1.1",
    "mkdocs-static-i18n>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "notebook>=7.4.4",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "isort>=5.12.0",
]

test = [
    "pytest>=8.4.1",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
]

lint = [
    "ruff>=0.1.7",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "isort>=5.12.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["email_widget"]
omit = [
    "tests/*",
    "*/tests/*",
    "demo/*",
    "*/demo/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "W291",
    "W293",
    "UP038"
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
ignore_missing_imports = true

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.bandit]
exclude_dirs = ["tests", "demo"]
skips = ["B101", "B601"]
