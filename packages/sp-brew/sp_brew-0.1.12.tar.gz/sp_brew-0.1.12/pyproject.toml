[project]
name = "sp-brew"
version = "0.1.12"
description = "Module to visualize and extract information from raw data"
readme = "README.md"
authors = [
    { name = "DMassella", email = "damiano.massella@smartphotonics.nl" },
    { name = "CMattia", email = "matta.conti@smartphotonics.nl" }
]
requires-python = ">=3.11"
dependencies = [
    "matplotlib>=3.9.4",
    "numpy>=2.0.2",
    "pandas>=2.2.3",
    "scipy>=1.13.1",
]

[project.scripts]
sp-brew = "sp_brew:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "build>=1.2.2.post1",
    "furo>=2024.8.6",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.13",
    "sphinx>=7.4.7",
    "sphinx-autodoc-typehints>=2.3.0",
    "twine>=6.1.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]             # Tell pytest where to look for tests
python_files = "test_*.py"        # Only discover files starting with 'test_'
python_classes = "Test*"          # Discover classes starting with 'Test'
python_functions = "test_*"       # Discover functions starting with 'test_'
addopts = "--strict-markers --strict-config --import-mode=importlib" # Common useful options

[tool.black]
line-length = 88

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F","D"]
ignore = ["D212","D203","D406","D407"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
