import logging
import os


class ColorFormatter(logging.Formatter):
    """Custom formatter with colored output."""

    COLORS = {
        logging.DEBUG: "\x1b[90m",  # grey
        logging.INFO: "\x1b[34m",  # blue
        logging.WARNING: "\x1b[33m",  # yellow
        logging.ERROR: "\x1b[31m",  # red
        logging.CRITICAL: "\x1b[31;1m"  # bold red
    }

    def format(self, name, record):
        color = self.COLORS.get(record.levelno, "\x1b[90m")
        fmt = (f"[{name}]{color}\x1b[1m[%(levelname)s]\x1b[0m "
               f"\x1b[2m[%(asctime)s]\x1b[0m "
               f"\x1b[2m[%(filename)s:%(lineno)d]\x1b[0m "
               f"%(message)s")

        formatter = logging.Formatter(fmt, datefmt="%H:%M:%S")
        return formatter.format(record)


def get_log_level():
    level = os.getenv("KVCACHED_LOG_LEVEL", "INFO").upper()
    return getattr(logging, level, logging.INFO)


def create_logger(name):
    logger = logging.getLogger(name)
    logger.handlers.clear()
    logger.propagate = False

    handler = logging.StreamHandler()
    handler.setLevel(get_log_level())
    handler.setFormatter(ColorFormatter())

    logger.addHandler(handler)
    logger.setLevel(get_log_level())
    return logger


def get_kvcached_logger(name: str = "kvcached") -> logging.Logger:
    logger = logging.getLogger(name)

    # Only add handler if none exists (prevents duplicate handlers)
    if not logger.handlers:
        handler = logging.StreamHandler()
        handler.setFormatter(ColorFormatter())
        logger.addHandler(handler)
        logger.setLevel(get_log_level())
        # Prevent propagation to inference engines; avoid duplicate messages
        logger.propagate = False

    return logger


if __name__ == "__main__":
    logger = get_kvcached_logger(__name__)

    logger.debug("Debug message")
    logger.info("Info message")
    logger.warning("Warning message")
    logger.error("Error message")
    logger.critical("Critical message")
