# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsumo
else:
    import _libsumo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _libsumo.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsumo.delete_SwigPyIterator

    def value(self):
        return _libsumo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsumo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsumo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsumo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsumo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsumo.SwigPyIterator_copy(self)

    def next(self):
        return _libsumo.SwigPyIterator_next(self)

    def __next__(self):
        return _libsumo.SwigPyIterator___next__(self)

    def previous(self):
        return _libsumo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsumo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsumo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsumo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsumo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsumo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsumo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsumo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libsumo:
_libsumo.SwigPyIterator_swigregister(SwigPyIterator)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.StringVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.StringVector___bool__(self)

    def __len__(self):
        return _libsumo.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.StringVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.StringVector_pop(self)

    def append(self, x):
        return _libsumo.StringVector_append(self, x)

    def empty(self):
        return _libsumo.StringVector_empty(self)

    def size(self):
        return _libsumo.StringVector_size(self)

    def swap(self, v):
        return _libsumo.StringVector_swap(self, v)

    def begin(self):
        return _libsumo.StringVector_begin(self)

    def end(self):
        return _libsumo.StringVector_end(self)

    def rbegin(self):
        return _libsumo.StringVector_rbegin(self)

    def rend(self):
        return _libsumo.StringVector_rend(self)

    def clear(self):
        return _libsumo.StringVector_clear(self)

    def get_allocator(self):
        return _libsumo.StringVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.StringVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.StringVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.StringVector_swiginit(self, _libsumo.new_StringVector(*args))

    def push_back(self, x):
        return _libsumo.StringVector_push_back(self, x)

    def front(self):
        return _libsumo.StringVector_front(self)

    def back(self):
        return _libsumo.StringVector_back(self)

    def assign(self, n, x):
        return _libsumo.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.StringVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.StringVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.StringVector_reserve(self, n)

    def capacity(self):
        return _libsumo.StringVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_StringVector

# Register StringVector in _libsumo:
_libsumo.StringVector_swigregister(StringVector)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.IntVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.IntVector___bool__(self)

    def __len__(self):
        return _libsumo.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.IntVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.IntVector_pop(self)

    def append(self, x):
        return _libsumo.IntVector_append(self, x)

    def empty(self):
        return _libsumo.IntVector_empty(self)

    def size(self):
        return _libsumo.IntVector_size(self)

    def swap(self, v):
        return _libsumo.IntVector_swap(self, v)

    def begin(self):
        return _libsumo.IntVector_begin(self)

    def end(self):
        return _libsumo.IntVector_end(self)

    def rbegin(self):
        return _libsumo.IntVector_rbegin(self)

    def rend(self):
        return _libsumo.IntVector_rend(self)

    def clear(self):
        return _libsumo.IntVector_clear(self)

    def get_allocator(self):
        return _libsumo.IntVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.IntVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.IntVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.IntVector_swiginit(self, _libsumo.new_IntVector(*args))

    def push_back(self, x):
        return _libsumo.IntVector_push_back(self, x)

    def front(self):
        return _libsumo.IntVector_front(self)

    def back(self):
        return _libsumo.IntVector_back(self)

    def assign(self, n, x):
        return _libsumo.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.IntVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.IntVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.IntVector_reserve(self, n)

    def capacity(self):
        return _libsumo.IntVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_IntVector

# Register IntVector in _libsumo:
_libsumo.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.DoubleVector___bool__(self)

    def __len__(self):
        return _libsumo.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.DoubleVector_pop(self)

    def append(self, x):
        return _libsumo.DoubleVector_append(self, x)

    def empty(self):
        return _libsumo.DoubleVector_empty(self)

    def size(self):
        return _libsumo.DoubleVector_size(self)

    def swap(self, v):
        return _libsumo.DoubleVector_swap(self, v)

    def begin(self):
        return _libsumo.DoubleVector_begin(self)

    def end(self):
        return _libsumo.DoubleVector_end(self)

    def rbegin(self):
        return _libsumo.DoubleVector_rbegin(self)

    def rend(self):
        return _libsumo.DoubleVector_rend(self)

    def clear(self):
        return _libsumo.DoubleVector_clear(self)

    def get_allocator(self):
        return _libsumo.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.DoubleVector_swiginit(self, _libsumo.new_DoubleVector(*args))

    def push_back(self, x):
        return _libsumo.DoubleVector_push_back(self, x)

    def front(self):
        return _libsumo.DoubleVector_front(self)

    def back(self):
        return _libsumo.DoubleVector_back(self)

    def assign(self, n, x):
        return _libsumo.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.DoubleVector_reserve(self, n)

    def capacity(self):
        return _libsumo.DoubleVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_DoubleVector

# Register DoubleVector in _libsumo:
_libsumo.DoubleVector_swigregister(DoubleVector)
class StringStringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.StringStringPair_swiginit(self, _libsumo.new_StringStringPair(*args))
    first = property(_libsumo.StringStringPair_first_get, _libsumo.StringStringPair_first_set)
    second = property(_libsumo.StringStringPair_second_get, _libsumo.StringStringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libsumo.delete_StringStringPair

# Register StringStringPair in _libsumo:
_libsumo.StringStringPair_swigregister(StringStringPair)
class IntStringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.IntStringPair_swiginit(self, _libsumo.new_IntStringPair(*args))
    first = property(_libsumo.IntStringPair_first_get, _libsumo.IntStringPair_first_set)
    second = property(_libsumo.IntStringPair_second_get, _libsumo.IntStringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libsumo.delete_IntStringPair

# Register IntStringPair in _libsumo:
_libsumo.IntStringPair_swigregister(IntStringPair)
class IntIntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.IntIntPair_swiginit(self, _libsumo.new_IntIntPair(*args))
    first = property(_libsumo.IntIntPair_first_get, _libsumo.IntIntPair_first_set)
    second = property(_libsumo.IntIntPair_second_get, _libsumo.IntIntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libsumo.delete_IntIntPair

# Register IntIntPair in _libsumo:
_libsumo.IntIntPair_swigregister(IntIntPair)
class StringDoublePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.StringDoublePair_swiginit(self, _libsumo.new_StringDoublePair(*args))
    first = property(_libsumo.StringDoublePair_first_get, _libsumo.StringDoublePair_first_set)
    second = property(_libsumo.StringDoublePair_second_get, _libsumo.StringDoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libsumo.delete_StringDoublePair

# Register StringDoublePair in _libsumo:
_libsumo.StringDoublePair_swigregister(StringDoublePair)
class StringDoublePairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.StringDoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.StringDoublePairVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.StringDoublePairVector___bool__(self)

    def __len__(self):
        return _libsumo.StringDoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.StringDoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.StringDoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.StringDoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.StringDoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.StringDoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.StringDoublePairVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.StringDoublePairVector_pop(self)

    def append(self, x):
        return _libsumo.StringDoublePairVector_append(self, x)

    def empty(self):
        return _libsumo.StringDoublePairVector_empty(self)

    def size(self):
        return _libsumo.StringDoublePairVector_size(self)

    def swap(self, v):
        return _libsumo.StringDoublePairVector_swap(self, v)

    def begin(self):
        return _libsumo.StringDoublePairVector_begin(self)

    def end(self):
        return _libsumo.StringDoublePairVector_end(self)

    def rbegin(self):
        return _libsumo.StringDoublePairVector_rbegin(self)

    def rend(self):
        return _libsumo.StringDoublePairVector_rend(self)

    def clear(self):
        return _libsumo.StringDoublePairVector_clear(self)

    def get_allocator(self):
        return _libsumo.StringDoublePairVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.StringDoublePairVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.StringDoublePairVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.StringDoublePairVector_swiginit(self, _libsumo.new_StringDoublePairVector(*args))

    def push_back(self, x):
        return _libsumo.StringDoublePairVector_push_back(self, x)

    def front(self):
        return _libsumo.StringDoublePairVector_front(self)

    def back(self):
        return _libsumo.StringDoublePairVector_back(self)

    def assign(self, n, x):
        return _libsumo.StringDoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.StringDoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.StringDoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.StringDoublePairVector_reserve(self, n)

    def capacity(self):
        return _libsumo.StringDoublePairVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_StringDoublePairVector

# Register StringDoublePairVector in _libsumo:
_libsumo.StringDoublePairVector_swigregister(StringDoublePairVector)
class TraCIException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, what):
        _libsumo.TraCIException_swiginit(self, _libsumo.new_TraCIException(what))
    __swig_destroy__ = _libsumo.delete_TraCIException

# Register TraCIException in _libsumo:
_libsumo.TraCIException_swigregister(TraCIException)
class FatalTraCIError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, what):
        _libsumo.FatalTraCIError_swiginit(self, _libsumo.new_FatalTraCIError(what))
    __swig_destroy__ = _libsumo.delete_FatalTraCIError

# Register FatalTraCIError in _libsumo:
_libsumo.FatalTraCIError_swigregister(FatalTraCIError)
class TraCIResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsumo.delete_TraCIResult

    def getString(self):
        return _libsumo.TraCIResult_getString(self)

    def getType(self):
        return _libsumo.TraCIResult_getType(self)

    def __init__(self):
        _libsumo.TraCIResult_swiginit(self, _libsumo.new_TraCIResult())

# Register TraCIResult in _libsumo:
_libsumo.TraCIResult_swigregister(TraCIResult)
class TraCIPosition(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIPosition_getString(self)

    def getType(self):
        return _libsumo.TraCIPosition_getType(self)
    x = property(_libsumo.TraCIPosition_x_get, _libsumo.TraCIPosition_x_set)
    y = property(_libsumo.TraCIPosition_y_get, _libsumo.TraCIPosition_y_set)
    z = property(_libsumo.TraCIPosition_z_get, _libsumo.TraCIPosition_z_set)

    def __init__(self):
        _libsumo.TraCIPosition_swiginit(self, _libsumo.new_TraCIPosition())
    __swig_destroy__ = _libsumo.delete_TraCIPosition

# Register TraCIPosition in _libsumo:
_libsumo.TraCIPosition_swigregister(TraCIPosition)
class TraCIRoadPosition(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _libsumo.TraCIRoadPosition_swiginit(self, _libsumo.new_TraCIRoadPosition(*args, **kwargs))

    def getString(self):
        return _libsumo.TraCIRoadPosition_getString(self)

    def getType(self):
        return _libsumo.TraCIRoadPosition_getType(self)
    edgeID = property(_libsumo.TraCIRoadPosition_edgeID_get, _libsumo.TraCIRoadPosition_edgeID_set)
    pos = property(_libsumo.TraCIRoadPosition_pos_get, _libsumo.TraCIRoadPosition_pos_set)
    laneIndex = property(_libsumo.TraCIRoadPosition_laneIndex_get, _libsumo.TraCIRoadPosition_laneIndex_set)
    __swig_destroy__ = _libsumo.delete_TraCIRoadPosition

# Register TraCIRoadPosition in _libsumo:
_libsumo.TraCIRoadPosition_swigregister(TraCIRoadPosition)
class TraCIColor(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIColor_swiginit(self, _libsumo.new_TraCIColor(*args))

    def getString(self):
        return _libsumo.TraCIColor_getString(self)
    r = property(_libsumo.TraCIColor_r_get, _libsumo.TraCIColor_r_set)
    g = property(_libsumo.TraCIColor_g_get, _libsumo.TraCIColor_g_set)
    b = property(_libsumo.TraCIColor_b_get, _libsumo.TraCIColor_b_set)
    a = property(_libsumo.TraCIColor_a_get, _libsumo.TraCIColor_a_set)
    __swig_destroy__ = _libsumo.delete_TraCIColor

# Register TraCIColor in _libsumo:
_libsumo.TraCIColor_swigregister(TraCIColor)
class TraCIPositionVector(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIPositionVector_getString(self)
    value = property(_libsumo.TraCIPositionVector_value_get, _libsumo.TraCIPositionVector_value_set)

    def __init__(self):
        _libsumo.TraCIPositionVector_swiginit(self, _libsumo.new_TraCIPositionVector())
    __swig_destroy__ = _libsumo.delete_TraCIPositionVector

# Register TraCIPositionVector in _libsumo:
_libsumo.TraCIPositionVector_swigregister(TraCIPositionVector)
class TraCIInt(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _libsumo.TraCIInt_swiginit(self, _libsumo.new_TraCIInt(*args, **kwargs))

    def getString(self):
        return _libsumo.TraCIInt_getString(self)

    def getType(self):
        return _libsumo.TraCIInt_getType(self)
    value = property(_libsumo.TraCIInt_value_get, _libsumo.TraCIInt_value_set)
    traciType = property(_libsumo.TraCIInt_traciType_get, _libsumo.TraCIInt_traciType_set)
    __swig_destroy__ = _libsumo.delete_TraCIInt

# Register TraCIInt in _libsumo:
_libsumo.TraCIInt_swigregister(TraCIInt)
class TraCIDouble(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v=0.):
        _libsumo.TraCIDouble_swiginit(self, _libsumo.new_TraCIDouble(v))

    def getString(self):
        return _libsumo.TraCIDouble_getString(self)

    def getType(self):
        return _libsumo.TraCIDouble_getType(self)
    value = property(_libsumo.TraCIDouble_value_get, _libsumo.TraCIDouble_value_set)
    __swig_destroy__ = _libsumo.delete_TraCIDouble

# Register TraCIDouble in _libsumo:
_libsumo.TraCIDouble_swigregister(TraCIDouble)
class TraCIString(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _libsumo.TraCIString_swiginit(self, _libsumo.new_TraCIString(*args, **kwargs))

    def getString(self):
        return _libsumo.TraCIString_getString(self)

    def getType(self):
        return _libsumo.TraCIString_getType(self)
    value = property(_libsumo.TraCIString_value_get, _libsumo.TraCIString_value_set)
    __swig_destroy__ = _libsumo.delete_TraCIString

# Register TraCIString in _libsumo:
_libsumo.TraCIString_swigregister(TraCIString)
class TraCIStringList(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIStringList_getString(self)
    value = property(_libsumo.TraCIStringList_value_get, _libsumo.TraCIStringList_value_set)

    def __init__(self):
        _libsumo.TraCIStringList_swiginit(self, _libsumo.new_TraCIStringList())
    __swig_destroy__ = _libsumo.delete_TraCIStringList

# Register TraCIStringList in _libsumo:
_libsumo.TraCIStringList_swigregister(TraCIStringList)
class TraCIDoubleList(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIDoubleList_getString(self)
    value = property(_libsumo.TraCIDoubleList_value_get, _libsumo.TraCIDoubleList_value_set)

    def __init__(self):
        _libsumo.TraCIDoubleList_swiginit(self, _libsumo.new_TraCIDoubleList())
    __swig_destroy__ = _libsumo.delete_TraCIDoubleList

# Register TraCIDoubleList in _libsumo:
_libsumo.TraCIDoubleList_swigregister(TraCIDoubleList)
class TraCIIntList(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIIntList_getString(self)
    value = property(_libsumo.TraCIIntList_value_get, _libsumo.TraCIIntList_value_set)

    def __init__(self):
        _libsumo.TraCIIntList_swiginit(self, _libsumo.new_TraCIIntList())
    __swig_destroy__ = _libsumo.delete_TraCIIntList

# Register TraCIIntList in _libsumo:
_libsumo.TraCIIntList_swigregister(TraCIIntList)
class TraCIStringDoublePairList(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIStringDoublePairList_getString(self)
    value = property(_libsumo.TraCIStringDoublePairList_value_get, _libsumo.TraCIStringDoublePairList_value_set)

    def __init__(self):
        _libsumo.TraCIStringDoublePairList_swiginit(self, _libsumo.new_TraCIStringDoublePairList())
    __swig_destroy__ = _libsumo.delete_TraCIStringDoublePairList

# Register TraCIStringDoublePairList in _libsumo:
_libsumo.TraCIStringDoublePairList_swigregister(TraCIStringDoublePairList)
class TraCIPhase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIPhase_swiginit(self, _libsumo.new_TraCIPhase(*args))
    __swig_destroy__ = _libsumo.delete_TraCIPhase
    duration = property(_libsumo.TraCIPhase_duration_get, _libsumo.TraCIPhase_duration_set)
    state = property(_libsumo.TraCIPhase_state_get, _libsumo.TraCIPhase_state_set)
    minDur = property(_libsumo.TraCIPhase_minDur_get, _libsumo.TraCIPhase_minDur_set)
    maxDur = property(_libsumo.TraCIPhase_maxDur_get, _libsumo.TraCIPhase_maxDur_set)
    next = property(_libsumo.TraCIPhase_next_get, _libsumo.TraCIPhase_next_set)
    name = property(_libsumo.TraCIPhase_name_get, _libsumo.TraCIPhase_name_set)
    earlyTarget = property(_libsumo.TraCIPhase_earlyTarget_get, _libsumo.TraCIPhase_earlyTarget_set)

# Register TraCIPhase in _libsumo:
_libsumo.TraCIPhase_swigregister(TraCIPhase)
class TraCIPhaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCIPhaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCIPhaseVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCIPhaseVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCIPhaseVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCIPhaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCIPhaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCIPhaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCIPhaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCIPhaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCIPhaseVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCIPhaseVector_pop(self)

    def append(self, x):
        return _libsumo.TraCIPhaseVector_append(self, x)

    def empty(self):
        return _libsumo.TraCIPhaseVector_empty(self)

    def size(self):
        return _libsumo.TraCIPhaseVector_size(self)

    def swap(self, v):
        return _libsumo.TraCIPhaseVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCIPhaseVector_begin(self)

    def end(self):
        return _libsumo.TraCIPhaseVector_end(self)

    def rbegin(self):
        return _libsumo.TraCIPhaseVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCIPhaseVector_rend(self)

    def clear(self):
        return _libsumo.TraCIPhaseVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCIPhaseVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCIPhaseVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCIPhaseVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCIPhaseVector_swiginit(self, _libsumo.new_TraCIPhaseVector(*args))

    def push_back(self, x):
        return _libsumo.TraCIPhaseVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCIPhaseVector_front(self)

    def back(self):
        return _libsumo.TraCIPhaseVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCIPhaseVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCIPhaseVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCIPhaseVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCIPhaseVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCIPhaseVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCIPhaseVector

# Register TraCIPhaseVector in _libsumo:
_libsumo.TraCIPhaseVector_swigregister(TraCIPhaseVector)
class TraCILogic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCILogic_swiginit(self, _libsumo.new_TraCILogic(*args))
    __swig_destroy__ = _libsumo.delete_TraCILogic

    def getString(self):
        return _libsumo.TraCILogic_getString(self)
    programID = property(_libsumo.TraCILogic_programID_get, _libsumo.TraCILogic_programID_set)
    type = property(_libsumo.TraCILogic_type_get, _libsumo.TraCILogic_type_set)
    currentPhaseIndex = property(_libsumo.TraCILogic_currentPhaseIndex_get, _libsumo.TraCILogic_currentPhaseIndex_set)
    phases = property(_libsumo.TraCILogic_phases_get, _libsumo.TraCILogic_phases_set)
    subParameter = property(_libsumo.TraCILogic_subParameter_get, _libsumo.TraCILogic_subParameter_set)

# Register TraCILogic in _libsumo:
_libsumo.TraCILogic_swigregister(TraCILogic)
class TraCILogicVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCILogicVectorWrapped_getString(self)
    value = property(_libsumo.TraCILogicVectorWrapped_value_get, _libsumo.TraCILogicVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCILogicVectorWrapped_swiginit(self, _libsumo.new_TraCILogicVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCILogicVectorWrapped

# Register TraCILogicVectorWrapped in _libsumo:
_libsumo.TraCILogicVectorWrapped_swigregister(TraCILogicVectorWrapped)
class TraCILink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCILink_swiginit(self, _libsumo.new_TraCILink(*args))
    __swig_destroy__ = _libsumo.delete_TraCILink

    def getString(self):
        return _libsumo.TraCILink_getString(self)
    fromLane = property(_libsumo.TraCILink_fromLane_get, _libsumo.TraCILink_fromLane_set)
    viaLane = property(_libsumo.TraCILink_viaLane_get, _libsumo.TraCILink_viaLane_set)
    toLane = property(_libsumo.TraCILink_toLane_get, _libsumo.TraCILink_toLane_set)

# Register TraCILink in _libsumo:
_libsumo.TraCILink_swigregister(TraCILink)
class TraCILinkVectorVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCILinkVectorVectorWrapped_getString(self)
    value = property(_libsumo.TraCILinkVectorVectorWrapped_value_get, _libsumo.TraCILinkVectorVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCILinkVectorVectorWrapped_swiginit(self, _libsumo.new_TraCILinkVectorVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCILinkVectorVectorWrapped

# Register TraCILinkVectorVectorWrapped in _libsumo:
_libsumo.TraCILinkVectorVectorWrapped_swigregister(TraCILinkVectorVectorWrapped)
class TraCIConnection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIConnection_swiginit(self, _libsumo.new_TraCIConnection(*args))
    __swig_destroy__ = _libsumo.delete_TraCIConnection

    def getString(self):
        return _libsumo.TraCIConnection_getString(self)
    approachedLane = property(_libsumo.TraCIConnection_approachedLane_get, _libsumo.TraCIConnection_approachedLane_set)
    hasPrio = property(_libsumo.TraCIConnection_hasPrio_get, _libsumo.TraCIConnection_hasPrio_set)
    isOpen = property(_libsumo.TraCIConnection_isOpen_get, _libsumo.TraCIConnection_isOpen_set)
    hasFoe = property(_libsumo.TraCIConnection_hasFoe_get, _libsumo.TraCIConnection_hasFoe_set)
    approachedInternal = property(_libsumo.TraCIConnection_approachedInternal_get, _libsumo.TraCIConnection_approachedInternal_set)
    state = property(_libsumo.TraCIConnection_state_get, _libsumo.TraCIConnection_state_set)
    direction = property(_libsumo.TraCIConnection_direction_get, _libsumo.TraCIConnection_direction_set)
    length = property(_libsumo.TraCIConnection_length_get, _libsumo.TraCIConnection_length_set)

# Register TraCIConnection in _libsumo:
_libsumo.TraCIConnection_swigregister(TraCIConnection)
class TraCIConnectionVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIConnectionVectorWrapped_getString(self)
    value = property(_libsumo.TraCIConnectionVectorWrapped_value_get, _libsumo.TraCIConnectionVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCIConnectionVectorWrapped_swiginit(self, _libsumo.new_TraCIConnectionVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCIConnectionVectorWrapped

# Register TraCIConnectionVectorWrapped in _libsumo:
_libsumo.TraCIConnectionVectorWrapped_swigregister(TraCIConnectionVectorWrapped)
class TraCIVehicleData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIVehicleData_getString(self)
    id = property(_libsumo.TraCIVehicleData_id_get, _libsumo.TraCIVehicleData_id_set)
    length = property(_libsumo.TraCIVehicleData_length_get, _libsumo.TraCIVehicleData_length_set)
    entryTime = property(_libsumo.TraCIVehicleData_entryTime_get, _libsumo.TraCIVehicleData_entryTime_set)
    leaveTime = property(_libsumo.TraCIVehicleData_leaveTime_get, _libsumo.TraCIVehicleData_leaveTime_set)
    typeID = property(_libsumo.TraCIVehicleData_typeID_get, _libsumo.TraCIVehicleData_typeID_set)

    def __init__(self):
        _libsumo.TraCIVehicleData_swiginit(self, _libsumo.new_TraCIVehicleData())
    __swig_destroy__ = _libsumo.delete_TraCIVehicleData

# Register TraCIVehicleData in _libsumo:
_libsumo.TraCIVehicleData_swigregister(TraCIVehicleData)
class TraCIVehicleDataVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIVehicleDataVectorWrapped_getString(self)
    value = property(_libsumo.TraCIVehicleDataVectorWrapped_value_get, _libsumo.TraCIVehicleDataVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCIVehicleDataVectorWrapped_swiginit(self, _libsumo.new_TraCIVehicleDataVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCIVehicleDataVectorWrapped

# Register TraCIVehicleDataVectorWrapped in _libsumo:
_libsumo.TraCIVehicleDataVectorWrapped_swigregister(TraCIVehicleDataVectorWrapped)
class TraCINextTLSData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCINextTLSData_getString(self)
    id = property(_libsumo.TraCINextTLSData_id_get, _libsumo.TraCINextTLSData_id_set)
    tlIndex = property(_libsumo.TraCINextTLSData_tlIndex_get, _libsumo.TraCINextTLSData_tlIndex_set)
    dist = property(_libsumo.TraCINextTLSData_dist_get, _libsumo.TraCINextTLSData_dist_set)
    state = property(_libsumo.TraCINextTLSData_state_get, _libsumo.TraCINextTLSData_state_set)

    def __init__(self):
        _libsumo.TraCINextTLSData_swiginit(self, _libsumo.new_TraCINextTLSData())
    __swig_destroy__ = _libsumo.delete_TraCINextTLSData

# Register TraCINextTLSData in _libsumo:
_libsumo.TraCINextTLSData_swigregister(TraCINextTLSData)
class TraCINextTLSDataVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCINextTLSDataVectorWrapped_getString(self)
    value = property(_libsumo.TraCINextTLSDataVectorWrapped_value_get, _libsumo.TraCINextTLSDataVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCINextTLSDataVectorWrapped_swiginit(self, _libsumo.new_TraCINextTLSDataVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCINextTLSDataVectorWrapped

# Register TraCINextTLSDataVectorWrapped in _libsumo:
_libsumo.TraCINextTLSDataVectorWrapped_swigregister(TraCINextTLSDataVectorWrapped)
class TraCINextStopData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _libsumo.TraCINextStopData_swiginit(self, _libsumo.new_TraCINextStopData(*args, **kwargs))

    def getString(self):
        return _libsumo.TraCINextStopData_getString(self)
    lane = property(_libsumo.TraCINextStopData_lane_get, _libsumo.TraCINextStopData_lane_set)
    startPos = property(_libsumo.TraCINextStopData_startPos_get, _libsumo.TraCINextStopData_startPos_set)
    endPos = property(_libsumo.TraCINextStopData_endPos_get, _libsumo.TraCINextStopData_endPos_set)
    stoppingPlaceID = property(_libsumo.TraCINextStopData_stoppingPlaceID_get, _libsumo.TraCINextStopData_stoppingPlaceID_set)
    stopFlags = property(_libsumo.TraCINextStopData_stopFlags_get, _libsumo.TraCINextStopData_stopFlags_set)
    duration = property(_libsumo.TraCINextStopData_duration_get, _libsumo.TraCINextStopData_duration_set)
    until = property(_libsumo.TraCINextStopData_until_get, _libsumo.TraCINextStopData_until_set)
    intendedArrival = property(_libsumo.TraCINextStopData_intendedArrival_get, _libsumo.TraCINextStopData_intendedArrival_set)
    arrival = property(_libsumo.TraCINextStopData_arrival_get, _libsumo.TraCINextStopData_arrival_set)
    depart = property(_libsumo.TraCINextStopData_depart_get, _libsumo.TraCINextStopData_depart_set)
    split = property(_libsumo.TraCINextStopData_split_get, _libsumo.TraCINextStopData_split_set)
    join = property(_libsumo.TraCINextStopData_join_get, _libsumo.TraCINextStopData_join_set)
    actType = property(_libsumo.TraCINextStopData_actType_get, _libsumo.TraCINextStopData_actType_set)
    tripId = property(_libsumo.TraCINextStopData_tripId_get, _libsumo.TraCINextStopData_tripId_set)
    line = property(_libsumo.TraCINextStopData_line_get, _libsumo.TraCINextStopData_line_set)
    speed = property(_libsumo.TraCINextStopData_speed_get, _libsumo.TraCINextStopData_speed_set)
    __swig_destroy__ = _libsumo.delete_TraCINextStopData

# Register TraCINextStopData in _libsumo:
_libsumo.TraCINextStopData_swigregister(TraCINextStopData)
class TraCINextStopDataVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCINextStopDataVectorWrapped_getString(self)
    value = property(_libsumo.TraCINextStopDataVectorWrapped_value_get, _libsumo.TraCINextStopDataVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCINextStopDataVectorWrapped_swiginit(self, _libsumo.new_TraCINextStopDataVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCINextStopDataVectorWrapped

# Register TraCINextStopDataVectorWrapped in _libsumo:
_libsumo.TraCINextStopDataVectorWrapped_swigregister(TraCINextStopDataVectorWrapped)
class TraCIBestLanesData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIBestLanesData_getString(self)
    laneID = property(_libsumo.TraCIBestLanesData_laneID_get, _libsumo.TraCIBestLanesData_laneID_set)
    length = property(_libsumo.TraCIBestLanesData_length_get, _libsumo.TraCIBestLanesData_length_set)
    occupation = property(_libsumo.TraCIBestLanesData_occupation_get, _libsumo.TraCIBestLanesData_occupation_set)
    bestLaneOffset = property(_libsumo.TraCIBestLanesData_bestLaneOffset_get, _libsumo.TraCIBestLanesData_bestLaneOffset_set)
    allowsContinuation = property(_libsumo.TraCIBestLanesData_allowsContinuation_get, _libsumo.TraCIBestLanesData_allowsContinuation_set)
    continuationLanes = property(_libsumo.TraCIBestLanesData_continuationLanes_get, _libsumo.TraCIBestLanesData_continuationLanes_set)

    def __init__(self):
        _libsumo.TraCIBestLanesData_swiginit(self, _libsumo.new_TraCIBestLanesData())
    __swig_destroy__ = _libsumo.delete_TraCIBestLanesData

# Register TraCIBestLanesData in _libsumo:
_libsumo.TraCIBestLanesData_swigregister(TraCIBestLanesData)
class TraCIBestLanesDataVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIBestLanesDataVectorWrapped_getString(self)
    value = property(_libsumo.TraCIBestLanesDataVectorWrapped_value_get, _libsumo.TraCIBestLanesDataVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCIBestLanesDataVectorWrapped_swiginit(self, _libsumo.new_TraCIBestLanesDataVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCIBestLanesDataVectorWrapped

# Register TraCIBestLanesDataVectorWrapped in _libsumo:
_libsumo.TraCIBestLanesDataVectorWrapped_swigregister(TraCIBestLanesDataVectorWrapped)
class TraCIStage(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _libsumo.TraCIStage_swiginit(self, _libsumo.new_TraCIStage(*args, **kwargs))
    type = property(_libsumo.TraCIStage_type_get, _libsumo.TraCIStage_type_set)
    vType = property(_libsumo.TraCIStage_vType_get, _libsumo.TraCIStage_vType_set)
    line = property(_libsumo.TraCIStage_line_get, _libsumo.TraCIStage_line_set)
    destStop = property(_libsumo.TraCIStage_destStop_get, _libsumo.TraCIStage_destStop_set)
    edges = property(_libsumo.TraCIStage_edges_get, _libsumo.TraCIStage_edges_set)
    travelTime = property(_libsumo.TraCIStage_travelTime_get, _libsumo.TraCIStage_travelTime_set)
    cost = property(_libsumo.TraCIStage_cost_get, _libsumo.TraCIStage_cost_set)
    length = property(_libsumo.TraCIStage_length_get, _libsumo.TraCIStage_length_set)
    intended = property(_libsumo.TraCIStage_intended_get, _libsumo.TraCIStage_intended_set)
    depart = property(_libsumo.TraCIStage_depart_get, _libsumo.TraCIStage_depart_set)
    departPos = property(_libsumo.TraCIStage_departPos_get, _libsumo.TraCIStage_departPos_set)
    arrivalPos = property(_libsumo.TraCIStage_arrivalPos_get, _libsumo.TraCIStage_arrivalPos_set)
    description = property(_libsumo.TraCIStage_description_get, _libsumo.TraCIStage_description_set)
    __swig_destroy__ = _libsumo.delete_TraCIStage

# Register TraCIStage in _libsumo:
_libsumo.TraCIStage_swigregister(TraCIStage)
class TraCIReservation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsumo.TraCIReservation_swiginit(self, _libsumo.new_TraCIReservation(*args))
    id = property(_libsumo.TraCIReservation_id_get, _libsumo.TraCIReservation_id_set)
    persons = property(_libsumo.TraCIReservation_persons_get, _libsumo.TraCIReservation_persons_set)
    group = property(_libsumo.TraCIReservation_group_get, _libsumo.TraCIReservation_group_set)
    fromEdge = property(_libsumo.TraCIReservation_fromEdge_get, _libsumo.TraCIReservation_fromEdge_set)
    toEdge = property(_libsumo.TraCIReservation_toEdge_get, _libsumo.TraCIReservation_toEdge_set)
    departPos = property(_libsumo.TraCIReservation_departPos_get, _libsumo.TraCIReservation_departPos_set)
    arrivalPos = property(_libsumo.TraCIReservation_arrivalPos_get, _libsumo.TraCIReservation_arrivalPos_set)
    depart = property(_libsumo.TraCIReservation_depart_get, _libsumo.TraCIReservation_depart_set)
    reservationTime = property(_libsumo.TraCIReservation_reservationTime_get, _libsumo.TraCIReservation_reservationTime_set)
    state = property(_libsumo.TraCIReservation_state_get, _libsumo.TraCIReservation_state_set)

    def getString(self):
        return _libsumo.TraCIReservation_getString(self)
    __swig_destroy__ = _libsumo.delete_TraCIReservation

# Register TraCIReservation in _libsumo:
_libsumo.TraCIReservation_swigregister(TraCIReservation)
class TraCIReservationVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIReservationVectorWrapped_getString(self)
    value = property(_libsumo.TraCIReservationVectorWrapped_value_get, _libsumo.TraCIReservationVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCIReservationVectorWrapped_swiginit(self, _libsumo.new_TraCIReservationVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCIReservationVectorWrapped

# Register TraCIReservationVectorWrapped in _libsumo:
_libsumo.TraCIReservationVectorWrapped_swigregister(TraCIReservationVectorWrapped)
class TraCICollision(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    collider = property(_libsumo.TraCICollision_collider_get, _libsumo.TraCICollision_collider_set)
    victim = property(_libsumo.TraCICollision_victim_get, _libsumo.TraCICollision_victim_set)
    colliderType = property(_libsumo.TraCICollision_colliderType_get, _libsumo.TraCICollision_colliderType_set)
    victimType = property(_libsumo.TraCICollision_victimType_get, _libsumo.TraCICollision_victimType_set)
    colliderSpeed = property(_libsumo.TraCICollision_colliderSpeed_get, _libsumo.TraCICollision_colliderSpeed_set)
    victimSpeed = property(_libsumo.TraCICollision_victimSpeed_get, _libsumo.TraCICollision_victimSpeed_set)
    type = property(_libsumo.TraCICollision_type_get, _libsumo.TraCICollision_type_set)
    lane = property(_libsumo.TraCICollision_lane_get, _libsumo.TraCICollision_lane_set)
    pos = property(_libsumo.TraCICollision_pos_get, _libsumo.TraCICollision_pos_set)

    def getString(self):
        return _libsumo.TraCICollision_getString(self)

    def __init__(self):
        _libsumo.TraCICollision_swiginit(self, _libsumo.new_TraCICollision())
    __swig_destroy__ = _libsumo.delete_TraCICollision

# Register TraCICollision in _libsumo:
_libsumo.TraCICollision_swigregister(TraCICollision)
class TraCICollisionVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCICollisionVectorWrapped_getString(self)
    value = property(_libsumo.TraCICollisionVectorWrapped_value_get, _libsumo.TraCICollisionVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCICollisionVectorWrapped_swiginit(self, _libsumo.new_TraCICollisionVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCICollisionVectorWrapped

# Register TraCICollisionVectorWrapped in _libsumo:
_libsumo.TraCICollisionVectorWrapped_swigregister(TraCICollisionVectorWrapped)
class TraCISignalConstraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    signalId = property(_libsumo.TraCISignalConstraint_signalId_get, _libsumo.TraCISignalConstraint_signalId_set)
    tripId = property(_libsumo.TraCISignalConstraint_tripId_get, _libsumo.TraCISignalConstraint_tripId_set)
    foeId = property(_libsumo.TraCISignalConstraint_foeId_get, _libsumo.TraCISignalConstraint_foeId_set)
    foeSignal = property(_libsumo.TraCISignalConstraint_foeSignal_get, _libsumo.TraCISignalConstraint_foeSignal_set)
    limit = property(_libsumo.TraCISignalConstraint_limit_get, _libsumo.TraCISignalConstraint_limit_set)
    type = property(_libsumo.TraCISignalConstraint_type_get, _libsumo.TraCISignalConstraint_type_set)
    mustWait = property(_libsumo.TraCISignalConstraint_mustWait_get, _libsumo.TraCISignalConstraint_mustWait_set)
    active = property(_libsumo.TraCISignalConstraint_active_get, _libsumo.TraCISignalConstraint_active_set)
    param = property(_libsumo.TraCISignalConstraint_param_get, _libsumo.TraCISignalConstraint_param_set)

    def getString(self):
        return _libsumo.TraCISignalConstraint_getString(self)

    def __init__(self):
        _libsumo.TraCISignalConstraint_swiginit(self, _libsumo.new_TraCISignalConstraint())
    __swig_destroy__ = _libsumo.delete_TraCISignalConstraint

# Register TraCISignalConstraint in _libsumo:
_libsumo.TraCISignalConstraint_swigregister(TraCISignalConstraint)
class TraCISignalConstraintVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCISignalConstraintVectorWrapped_getString(self)
    value = property(_libsumo.TraCISignalConstraintVectorWrapped_value_get, _libsumo.TraCISignalConstraintVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCISignalConstraintVectorWrapped_swiginit(self, _libsumo.new_TraCISignalConstraintVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCISignalConstraintVectorWrapped

# Register TraCISignalConstraintVectorWrapped in _libsumo:
_libsumo.TraCISignalConstraintVectorWrapped_swigregister(TraCISignalConstraintVectorWrapped)
class TraCIJunctionFoe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    foeId = property(_libsumo.TraCIJunctionFoe_foeId_get, _libsumo.TraCIJunctionFoe_foeId_set)
    egoDist = property(_libsumo.TraCIJunctionFoe_egoDist_get, _libsumo.TraCIJunctionFoe_egoDist_set)
    foeDist = property(_libsumo.TraCIJunctionFoe_foeDist_get, _libsumo.TraCIJunctionFoe_foeDist_set)
    egoExitDist = property(_libsumo.TraCIJunctionFoe_egoExitDist_get, _libsumo.TraCIJunctionFoe_egoExitDist_set)
    foeExitDist = property(_libsumo.TraCIJunctionFoe_foeExitDist_get, _libsumo.TraCIJunctionFoe_foeExitDist_set)
    egoLane = property(_libsumo.TraCIJunctionFoe_egoLane_get, _libsumo.TraCIJunctionFoe_egoLane_set)
    foeLane = property(_libsumo.TraCIJunctionFoe_foeLane_get, _libsumo.TraCIJunctionFoe_foeLane_set)
    egoResponse = property(_libsumo.TraCIJunctionFoe_egoResponse_get, _libsumo.TraCIJunctionFoe_egoResponse_set)
    foeResponse = property(_libsumo.TraCIJunctionFoe_foeResponse_get, _libsumo.TraCIJunctionFoe_foeResponse_set)

    def getString(self):
        return _libsumo.TraCIJunctionFoe_getString(self)

    def __init__(self):
        _libsumo.TraCIJunctionFoe_swiginit(self, _libsumo.new_TraCIJunctionFoe())
    __swig_destroy__ = _libsumo.delete_TraCIJunctionFoe

# Register TraCIJunctionFoe in _libsumo:
_libsumo.TraCIJunctionFoe_swigregister(TraCIJunctionFoe)
class TraCIJunctionFoeVectorWrapped(TraCIResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getString(self):
        return _libsumo.TraCIJunctionFoeVectorWrapped_getString(self)
    value = property(_libsumo.TraCIJunctionFoeVectorWrapped_value_get, _libsumo.TraCIJunctionFoeVectorWrapped_value_set)

    def __init__(self):
        _libsumo.TraCIJunctionFoeVectorWrapped_swiginit(self, _libsumo.new_TraCIJunctionFoeVectorWrapped())
    __swig_destroy__ = _libsumo.delete_TraCIJunctionFoeVectorWrapped

# Register TraCIJunctionFoeVectorWrapped in _libsumo:
_libsumo.TraCIJunctionFoeVectorWrapped_swigregister(TraCIJunctionFoeVectorWrapped)
class TraCILogicVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCILogicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCILogicVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCILogicVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCILogicVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCILogicVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCILogicVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCILogicVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCILogicVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCILogicVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCILogicVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCILogicVector_pop(self)

    def append(self, x):
        return _libsumo.TraCILogicVector_append(self, x)

    def empty(self):
        return _libsumo.TraCILogicVector_empty(self)

    def size(self):
        return _libsumo.TraCILogicVector_size(self)

    def swap(self, v):
        return _libsumo.TraCILogicVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCILogicVector_begin(self)

    def end(self):
        return _libsumo.TraCILogicVector_end(self)

    def rbegin(self):
        return _libsumo.TraCILogicVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCILogicVector_rend(self)

    def clear(self):
        return _libsumo.TraCILogicVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCILogicVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCILogicVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCILogicVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCILogicVector_swiginit(self, _libsumo.new_TraCILogicVector(*args))

    def push_back(self, x):
        return _libsumo.TraCILogicVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCILogicVector_front(self)

    def back(self):
        return _libsumo.TraCILogicVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCILogicVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCILogicVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCILogicVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCILogicVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCILogicVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCILogicVector

# Register TraCILogicVector in _libsumo:
_libsumo.TraCILogicVector_swigregister(TraCILogicVector)
class TraCIStageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCIStageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCIStageVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCIStageVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCIStageVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCIStageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCIStageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCIStageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCIStageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCIStageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCIStageVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCIStageVector_pop(self)

    def append(self, x):
        return _libsumo.TraCIStageVector_append(self, x)

    def empty(self):
        return _libsumo.TraCIStageVector_empty(self)

    def size(self):
        return _libsumo.TraCIStageVector_size(self)

    def swap(self, v):
        return _libsumo.TraCIStageVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCIStageVector_begin(self)

    def end(self):
        return _libsumo.TraCIStageVector_end(self)

    def rbegin(self):
        return _libsumo.TraCIStageVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCIStageVector_rend(self)

    def clear(self):
        return _libsumo.TraCIStageVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCIStageVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCIStageVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCIStageVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCIStageVector_swiginit(self, _libsumo.new_TraCIStageVector(*args))

    def push_back(self, x):
        return _libsumo.TraCIStageVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCIStageVector_front(self)

    def back(self):
        return _libsumo.TraCIStageVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCIStageVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCIStageVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCIStageVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCIStageVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCIStageVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCIStageVector

# Register TraCIStageVector in _libsumo:
_libsumo.TraCIStageVector_swigregister(TraCIStageVector)
class TraCINextStopDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCINextStopDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCINextStopDataVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCINextStopDataVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCINextStopDataVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCINextStopDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCINextStopDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCINextStopDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCINextStopDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCINextStopDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCINextStopDataVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCINextStopDataVector_pop(self)

    def append(self, x):
        return _libsumo.TraCINextStopDataVector_append(self, x)

    def empty(self):
        return _libsumo.TraCINextStopDataVector_empty(self)

    def size(self):
        return _libsumo.TraCINextStopDataVector_size(self)

    def swap(self, v):
        return _libsumo.TraCINextStopDataVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCINextStopDataVector_begin(self)

    def end(self):
        return _libsumo.TraCINextStopDataVector_end(self)

    def rbegin(self):
        return _libsumo.TraCINextStopDataVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCINextStopDataVector_rend(self)

    def clear(self):
        return _libsumo.TraCINextStopDataVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCINextStopDataVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCINextStopDataVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCINextStopDataVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCINextStopDataVector_swiginit(self, _libsumo.new_TraCINextStopDataVector(*args))

    def push_back(self, x):
        return _libsumo.TraCINextStopDataVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCINextStopDataVector_front(self)

    def back(self):
        return _libsumo.TraCINextStopDataVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCINextStopDataVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCINextStopDataVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCINextStopDataVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCINextStopDataVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCINextStopDataVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCINextStopDataVector

# Register TraCINextStopDataVector in _libsumo:
_libsumo.TraCINextStopDataVector_swigregister(TraCINextStopDataVector)
class TraCIReservationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCIReservationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCIReservationVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCIReservationVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCIReservationVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCIReservationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCIReservationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCIReservationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCIReservationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCIReservationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCIReservationVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCIReservationVector_pop(self)

    def append(self, x):
        return _libsumo.TraCIReservationVector_append(self, x)

    def empty(self):
        return _libsumo.TraCIReservationVector_empty(self)

    def size(self):
        return _libsumo.TraCIReservationVector_size(self)

    def swap(self, v):
        return _libsumo.TraCIReservationVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCIReservationVector_begin(self)

    def end(self):
        return _libsumo.TraCIReservationVector_end(self)

    def rbegin(self):
        return _libsumo.TraCIReservationVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCIReservationVector_rend(self)

    def clear(self):
        return _libsumo.TraCIReservationVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCIReservationVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCIReservationVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCIReservationVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCIReservationVector_swiginit(self, _libsumo.new_TraCIReservationVector(*args))

    def push_back(self, x):
        return _libsumo.TraCIReservationVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCIReservationVector_front(self)

    def back(self):
        return _libsumo.TraCIReservationVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCIReservationVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCIReservationVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCIReservationVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCIReservationVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCIReservationVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCIReservationVector

# Register TraCIReservationVector in _libsumo:
_libsumo.TraCIReservationVector_swigregister(TraCIReservationVector)
class TraCISignalConstraintVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCISignalConstraintVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCISignalConstraintVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCISignalConstraintVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCISignalConstraintVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCISignalConstraintVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCISignalConstraintVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCISignalConstraintVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCISignalConstraintVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCISignalConstraintVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCISignalConstraintVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCISignalConstraintVector_pop(self)

    def append(self, x):
        return _libsumo.TraCISignalConstraintVector_append(self, x)

    def empty(self):
        return _libsumo.TraCISignalConstraintVector_empty(self)

    def size(self):
        return _libsumo.TraCISignalConstraintVector_size(self)

    def swap(self, v):
        return _libsumo.TraCISignalConstraintVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCISignalConstraintVector_begin(self)

    def end(self):
        return _libsumo.TraCISignalConstraintVector_end(self)

    def rbegin(self):
        return _libsumo.TraCISignalConstraintVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCISignalConstraintVector_rend(self)

    def clear(self):
        return _libsumo.TraCISignalConstraintVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCISignalConstraintVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCISignalConstraintVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCISignalConstraintVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCISignalConstraintVector_swiginit(self, _libsumo.new_TraCISignalConstraintVector(*args))

    def push_back(self, x):
        return _libsumo.TraCISignalConstraintVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCISignalConstraintVector_front(self)

    def back(self):
        return _libsumo.TraCISignalConstraintVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCISignalConstraintVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCISignalConstraintVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCISignalConstraintVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCISignalConstraintVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCISignalConstraintVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCISignalConstraintVector

# Register TraCISignalConstraintVector in _libsumo:
_libsumo.TraCISignalConstraintVector_swigregister(TraCISignalConstraintVector)
class TraCICollisionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCICollisionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCICollisionVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCICollisionVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCICollisionVector___len__(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCICollisionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCICollisionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCICollisionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCICollisionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCICollisionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCICollisionVector___setitem__(self, *args)

    def pop(self):
        return _libsumo.TraCICollisionVector_pop(self)

    def append(self, x):
        return _libsumo.TraCICollisionVector_append(self, x)

    def empty(self):
        return _libsumo.TraCICollisionVector_empty(self)

    def size(self):
        return _libsumo.TraCICollisionVector_size(self)

    def swap(self, v):
        return _libsumo.TraCICollisionVector_swap(self, v)

    def begin(self):
        return _libsumo.TraCICollisionVector_begin(self)

    def end(self):
        return _libsumo.TraCICollisionVector_end(self)

    def rbegin(self):
        return _libsumo.TraCICollisionVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCICollisionVector_rend(self)

    def clear(self):
        return _libsumo.TraCICollisionVector_clear(self)

    def get_allocator(self):
        return _libsumo.TraCICollisionVector_get_allocator(self)

    def pop_back(self):
        return _libsumo.TraCICollisionVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCICollisionVector_erase(self, *args)

    def __init__(self, *args):
        _libsumo.TraCICollisionVector_swiginit(self, _libsumo.new_TraCICollisionVector(*args))

    def push_back(self, x):
        return _libsumo.TraCICollisionVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCICollisionVector_front(self)

    def back(self):
        return _libsumo.TraCICollisionVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCICollisionVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCICollisionVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCICollisionVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCICollisionVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCICollisionVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCICollisionVector

# Register TraCICollisionVector in _libsumo:
_libsumo.TraCICollisionVector_swigregister(TraCICollisionVector)
class edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getAdaptedTraveltime(edgeID, time):
        return _libsumo.edge_getAdaptedTraveltime(edgeID, time)

    @staticmethod
    def getEffort(edgeID, time):
        return _libsumo.edge_getEffort(edgeID, time)

    @staticmethod
    def getTraveltime(edgeID):
        return _libsumo.edge_getTraveltime(edgeID)

    @staticmethod
    def getWaitingTime(edgeID):
        return _libsumo.edge_getWaitingTime(edgeID)

    @staticmethod
    def getLastStepPersonIDs(edgeID):
        return _libsumo.edge_getLastStepPersonIDs(edgeID)

    @staticmethod
    def getLastStepVehicleIDs(edgeID):
        return _libsumo.edge_getLastStepVehicleIDs(edgeID)

    @staticmethod
    def getCO2Emission(edgeID):
        return _libsumo.edge_getCO2Emission(edgeID)

    @staticmethod
    def getCOEmission(edgeID):
        return _libsumo.edge_getCOEmission(edgeID)

    @staticmethod
    def getHCEmission(edgeID):
        return _libsumo.edge_getHCEmission(edgeID)

    @staticmethod
    def getPMxEmission(edgeID):
        return _libsumo.edge_getPMxEmission(edgeID)

    @staticmethod
    def getNOxEmission(edgeID):
        return _libsumo.edge_getNOxEmission(edgeID)

    @staticmethod
    def getFuelConsumption(edgeID):
        return _libsumo.edge_getFuelConsumption(edgeID)

    @staticmethod
    def getNoiseEmission(edgeID):
        return _libsumo.edge_getNoiseEmission(edgeID)

    @staticmethod
    def getElectricityConsumption(edgeID):
        return _libsumo.edge_getElectricityConsumption(edgeID)

    @staticmethod
    def getLastStepVehicleNumber(edgeID):
        return _libsumo.edge_getLastStepVehicleNumber(edgeID)

    @staticmethod
    def getLastStepMeanSpeed(edgeID):
        return _libsumo.edge_getLastStepMeanSpeed(edgeID)

    @staticmethod
    def getMeanFriction(edgeID):
        return _libsumo.edge_getMeanFriction(edgeID)

    @staticmethod
    def getLastStepOccupancy(edgeID):
        return _libsumo.edge_getLastStepOccupancy(edgeID)

    @staticmethod
    def getLastStepHaltingNumber(edgeID):
        return _libsumo.edge_getLastStepHaltingNumber(edgeID)

    @staticmethod
    def getLastStepLength(edgeID):
        return _libsumo.edge_getLastStepLength(edgeID)

    @staticmethod
    def getLaneNumber(edgeID):
        return _libsumo.edge_getLaneNumber(edgeID)

    @staticmethod
    def getStreetName(edgeID):
        return _libsumo.edge_getStreetName(edgeID)

    @staticmethod
    def getPendingVehicles(edgeID):
        return _libsumo.edge_getPendingVehicles(edgeID)

    @staticmethod
    def getAngle(*args, **kwargs):
        return _libsumo.edge_getAngle(*args, **kwargs)

    @staticmethod
    def getFromJunction(edgeID):
        return _libsumo.edge_getFromJunction(edgeID)

    @staticmethod
    def getToJunction(edgeID):
        return _libsumo.edge_getToJunction(edgeID)

    @staticmethod
    def getBidiEdge(edgeID):
        return _libsumo.edge_getBidiEdge(edgeID)

    @staticmethod
    def getIDList():
        return _libsumo.edge_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.edge_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.edge_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.edge_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.edge_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.edge_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.edge_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.edge_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.edge_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.edge_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.edge_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.edge_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.edge_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.edge_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.edge_domainID()

    @staticmethod
    def setAllowed(*args):
        return _libsumo.edge_setAllowed(*args)

    @staticmethod
    def setDisallowed(*args):
        return _libsumo.edge_setDisallowed(*args)

    @staticmethod
    def adaptTraveltime(*args, **kwargs):
        return _libsumo.edge_adaptTraveltime(*args, **kwargs)

    @staticmethod
    def setEffort(*args, **kwargs):
        return _libsumo.edge_setEffort(*args, **kwargs)

    @staticmethod
    def setMaxSpeed(edgeID, speed):
        return _libsumo.edge_setMaxSpeed(edgeID, speed)

    @staticmethod
    def setFriction(edgeID, friction):
        return _libsumo.edge_setFriction(edgeID, friction)
    __swig_destroy__ = _libsumo.delete_edge

# Register edge in _libsumo:
_libsumo.edge_swigregister(edge)
cvar = _libsumo.cvar
edge.DOMAIN_ID = _libsumo.cvar.edge_DOMAIN_ID

DEFAULT_VIEW = _libsumo.DEFAULT_VIEW
class gui(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getZoom(*args, **kwargs):
        return _libsumo.gui_getZoom(*args, **kwargs)

    @staticmethod
    def getAngle(*args, **kwargs):
        return _libsumo.gui_getAngle(*args, **kwargs)

    @staticmethod
    def getOffset(*args, **kwargs):
        return _libsumo.gui_getOffset(*args, **kwargs)

    @staticmethod
    def getSchema(*args, **kwargs):
        return _libsumo.gui_getSchema(*args, **kwargs)

    @staticmethod
    def getBoundary(*args, **kwargs):
        return _libsumo.gui_getBoundary(*args, **kwargs)

    @staticmethod
    def hasView(*args, **kwargs):
        return _libsumo.gui_hasView(*args, **kwargs)

    @staticmethod
    def getTrackedVehicle(*args, **kwargs):
        return _libsumo.gui_getTrackedVehicle(*args, **kwargs)

    @staticmethod
    def isSelected(*args, **kwargs):
        return _libsumo.gui_isSelected(*args, **kwargs)

    @staticmethod
    def setZoom(viewID, zoom):
        return _libsumo.gui_setZoom(viewID, zoom)

    @staticmethod
    def setAngle(viewID, angle):
        return _libsumo.gui_setAngle(viewID, angle)

    @staticmethod
    def setOffset(viewID, x, y):
        return _libsumo.gui_setOffset(viewID, x, y)

    @staticmethod
    def setSchema(viewID, schemeName):
        return _libsumo.gui_setSchema(viewID, schemeName)

    @staticmethod
    def setBoundary(viewID, xmin, ymin, xmax, ymax):
        return _libsumo.gui_setBoundary(viewID, xmin, ymin, xmax, ymax)

    @staticmethod
    def trackVehicle(viewID, vehID):
        return _libsumo.gui_trackVehicle(viewID, vehID)

    @staticmethod
    def screenshot(viewID, filename, width=-1, height=-1):
        return _libsumo.gui_screenshot(viewID, filename, width, height)

    @staticmethod
    def track(*args, **kwargs):
        return _libsumo.gui_track(*args, **kwargs)

    @staticmethod
    def toggleSelection(*args, **kwargs):
        return _libsumo.gui_toggleSelection(*args, **kwargs)

    @staticmethod
    def addView(*args, **kwargs):
        return _libsumo.gui_addView(*args, **kwargs)

    @staticmethod
    def removeView(viewID):
        return _libsumo.gui_removeView(viewID)

    @staticmethod
    def getIDList():
        return _libsumo.gui_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.gui_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.gui_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.gui_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.gui_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.gui_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.gui_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.gui_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.gui_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.gui_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.gui_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.gui_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.gui_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.gui_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.gui_domainID()
    __swig_destroy__ = _libsumo.delete_gui

# Register gui in _libsumo:
_libsumo.gui_swigregister(gui)
gui.DOMAIN_ID = _libsumo.cvar.gui_DOMAIN_ID

class inductionloop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getPosition(loopID):
        return _libsumo.inductionloop_getPosition(loopID)

    @staticmethod
    def getLaneID(loopID):
        return _libsumo.inductionloop_getLaneID(loopID)

    @staticmethod
    def getLastStepVehicleNumber(loopID):
        return _libsumo.inductionloop_getLastStepVehicleNumber(loopID)

    @staticmethod
    def getLastStepMeanSpeed(loopID):
        return _libsumo.inductionloop_getLastStepMeanSpeed(loopID)

    @staticmethod
    def getLastStepVehicleIDs(loopID):
        return _libsumo.inductionloop_getLastStepVehicleIDs(loopID)

    @staticmethod
    def getLastStepOccupancy(loopID):
        return _libsumo.inductionloop_getLastStepOccupancy(loopID)

    @staticmethod
    def getLastStepMeanLength(loopID):
        return _libsumo.inductionloop_getLastStepMeanLength(loopID)

    @staticmethod
    def getTimeSinceDetection(loopID):
        return _libsumo.inductionloop_getTimeSinceDetection(loopID)

    @staticmethod
    def getVehicleData(loopID):
        return _libsumo.inductionloop_getVehicleData(loopID)

    @staticmethod
    def getIntervalOccupancy(loopID):
        return _libsumo.inductionloop_getIntervalOccupancy(loopID)

    @staticmethod
    def getIntervalMeanSpeed(loopID):
        return _libsumo.inductionloop_getIntervalMeanSpeed(loopID)

    @staticmethod
    def getIntervalVehicleNumber(loopID):
        return _libsumo.inductionloop_getIntervalVehicleNumber(loopID)

    @staticmethod
    def getIntervalVehicleIDs(loopID):
        return _libsumo.inductionloop_getIntervalVehicleIDs(loopID)

    @staticmethod
    def getLastIntervalOccupancy(loopID):
        return _libsumo.inductionloop_getLastIntervalOccupancy(loopID)

    @staticmethod
    def getLastIntervalMeanSpeed(loopID):
        return _libsumo.inductionloop_getLastIntervalMeanSpeed(loopID)

    @staticmethod
    def getLastIntervalVehicleNumber(loopID):
        return _libsumo.inductionloop_getLastIntervalVehicleNumber(loopID)

    @staticmethod
    def getLastIntervalVehicleIDs(loopID):
        return _libsumo.inductionloop_getLastIntervalVehicleIDs(loopID)

    @staticmethod
    def overrideTimeSinceDetection(loopID, time):
        return _libsumo.inductionloop_overrideTimeSinceDetection(loopID, time)

    @staticmethod
    def getIDList():
        return _libsumo.inductionloop_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.inductionloop_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.inductionloop_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.inductionloop_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.inductionloop_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.inductionloop_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.inductionloop_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.inductionloop_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.inductionloop_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.inductionloop_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.inductionloop_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.inductionloop_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.inductionloop_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.inductionloop_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.inductionloop_domainID()
    __swig_destroy__ = _libsumo.delete_inductionloop

# Register inductionloop in _libsumo:
_libsumo.inductionloop_swigregister(inductionloop)
inductionloop.DOMAIN_ID = _libsumo.cvar.inductionloop_DOMAIN_ID

class junction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getPosition(junctionID, includeZ=False):
        return _libsumo.junction_getPosition(junctionID, includeZ)

    @staticmethod
    def getShape(junctionID):
        return _libsumo.junction_getShape(junctionID)

    @staticmethod
    def getIncomingEdges(junctionID):
        return _libsumo.junction_getIncomingEdges(junctionID)

    @staticmethod
    def getOutgoingEdges(junctionID):
        return _libsumo.junction_getOutgoingEdges(junctionID)

    @staticmethod
    def getIDList():
        return _libsumo.junction_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.junction_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.junction_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.junction_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.junction_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.junction_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.junction_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.junction_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.junction_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.junction_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.junction_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.junction_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.junction_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.junction_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.junction_domainID()
    __swig_destroy__ = _libsumo.delete_junction

# Register junction in _libsumo:
_libsumo.junction_swigregister(junction)
junction.DOMAIN_ID = _libsumo.cvar.junction_DOMAIN_ID

class lanearea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getJamLengthVehicle(detID):
        return _libsumo.lanearea_getJamLengthVehicle(detID)

    @staticmethod
    def getJamLengthMeters(detID):
        return _libsumo.lanearea_getJamLengthMeters(detID)

    @staticmethod
    def getLastStepMeanSpeed(detID):
        return _libsumo.lanearea_getLastStepMeanSpeed(detID)

    @staticmethod
    def getLastStepVehicleIDs(detID):
        return _libsumo.lanearea_getLastStepVehicleIDs(detID)

    @staticmethod
    def getLastStepOccupancy(detID):
        return _libsumo.lanearea_getLastStepOccupancy(detID)

    @staticmethod
    def getPosition(detID):
        return _libsumo.lanearea_getPosition(detID)

    @staticmethod
    def getLaneID(detID):
        return _libsumo.lanearea_getLaneID(detID)

    @staticmethod
    def getLength(detID):
        return _libsumo.lanearea_getLength(detID)

    @staticmethod
    def getLastStepVehicleNumber(detID):
        return _libsumo.lanearea_getLastStepVehicleNumber(detID)

    @staticmethod
    def getLastStepHaltingNumber(detID):
        return _libsumo.lanearea_getLastStepHaltingNumber(detID)

    @staticmethod
    def getIntervalOccupancy(detID):
        return _libsumo.lanearea_getIntervalOccupancy(detID)

    @staticmethod
    def getIntervalMeanSpeed(detID):
        return _libsumo.lanearea_getIntervalMeanSpeed(detID)

    @staticmethod
    def getIntervalMeanTimeLoss(detID):
        return _libsumo.lanearea_getIntervalMeanTimeLoss(detID)

    @staticmethod
    def getIntervalMaxJamLengthInMeters(detID):
        return _libsumo.lanearea_getIntervalMaxJamLengthInMeters(detID)

    @staticmethod
    def getIntervalVehicleNumber(detID):
        return _libsumo.lanearea_getIntervalVehicleNumber(detID)

    @staticmethod
    def getLastIntervalOccupancy(detID):
        return _libsumo.lanearea_getLastIntervalOccupancy(detID)

    @staticmethod
    def getLastIntervalMeanSpeed(detID):
        return _libsumo.lanearea_getLastIntervalMeanSpeed(detID)

    @staticmethod
    def getLastIntervalMeanTimeLoss(detID):
        return _libsumo.lanearea_getLastIntervalMeanTimeLoss(detID)

    @staticmethod
    def getLastIntervalMaxJamLengthInMeters(detID):
        return _libsumo.lanearea_getLastIntervalMaxJamLengthInMeters(detID)

    @staticmethod
    def getLastIntervalVehicleNumber(detID):
        return _libsumo.lanearea_getLastIntervalVehicleNumber(detID)

    @staticmethod
    def overrideVehicleNumber(detID, vehNum):
        return _libsumo.lanearea_overrideVehicleNumber(detID, vehNum)

    @staticmethod
    def getIDList():
        return _libsumo.lanearea_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.lanearea_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.lanearea_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.lanearea_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.lanearea_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.lanearea_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.lanearea_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.lanearea_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.lanearea_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.lanearea_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.lanearea_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.lanearea_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.lanearea_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.lanearea_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.lanearea_domainID()
    __swig_destroy__ = _libsumo.delete_lanearea

# Register lanearea in _libsumo:
_libsumo.lanearea_swigregister(lanearea)
lanearea.DOMAIN_ID = _libsumo.cvar.lanearea_DOMAIN_ID

class lane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLinkNumber(laneID):
        return _libsumo.lane_getLinkNumber(laneID)

    @staticmethod
    def getEdgeID(laneID):
        return _libsumo.lane_getEdgeID(laneID)

    @staticmethod
    def getLength(laneID):
        return _libsumo.lane_getLength(laneID)

    @staticmethod
    def getMaxSpeed(laneID):
        return _libsumo.lane_getMaxSpeed(laneID)

    @staticmethod
    def getFriction(laneID):
        return _libsumo.lane_getFriction(laneID)

    @staticmethod
    def getAllowed(laneID):
        return _libsumo.lane_getAllowed(laneID)

    @staticmethod
    def getDisallowed(laneID):
        return _libsumo.lane_getDisallowed(laneID)

    @staticmethod
    def getChangePermissions(laneID, direction):
        return _libsumo.lane_getChangePermissions(laneID, direction)

    @staticmethod
    def getLinks(laneID):
        return _libsumo.lane_getLinks(laneID)

    @staticmethod
    def getShape(laneID):
        return _libsumo.lane_getShape(laneID)

    @staticmethod
    def getWidth(laneID):
        return _libsumo.lane_getWidth(laneID)

    @staticmethod
    def getCO2Emission(laneID):
        return _libsumo.lane_getCO2Emission(laneID)

    @staticmethod
    def getCOEmission(laneID):
        return _libsumo.lane_getCOEmission(laneID)

    @staticmethod
    def getHCEmission(laneID):
        return _libsumo.lane_getHCEmission(laneID)

    @staticmethod
    def getPMxEmission(laneID):
        return _libsumo.lane_getPMxEmission(laneID)

    @staticmethod
    def getNOxEmission(laneID):
        return _libsumo.lane_getNOxEmission(laneID)

    @staticmethod
    def getFuelConsumption(laneID):
        return _libsumo.lane_getFuelConsumption(laneID)

    @staticmethod
    def getNoiseEmission(laneID):
        return _libsumo.lane_getNoiseEmission(laneID)

    @staticmethod
    def getElectricityConsumption(laneID):
        return _libsumo.lane_getElectricityConsumption(laneID)

    @staticmethod
    def getLastStepMeanSpeed(laneID):
        return _libsumo.lane_getLastStepMeanSpeed(laneID)

    @staticmethod
    def getLastStepOccupancy(laneID):
        return _libsumo.lane_getLastStepOccupancy(laneID)

    @staticmethod
    def getLastStepLength(laneID):
        return _libsumo.lane_getLastStepLength(laneID)

    @staticmethod
    def getWaitingTime(laneID):
        return _libsumo.lane_getWaitingTime(laneID)

    @staticmethod
    def getTraveltime(laneID):
        return _libsumo.lane_getTraveltime(laneID)

    @staticmethod
    def getLastStepVehicleNumber(laneID):
        return _libsumo.lane_getLastStepVehicleNumber(laneID)

    @staticmethod
    def getLastStepHaltingNumber(laneID):
        return _libsumo.lane_getLastStepHaltingNumber(laneID)

    @staticmethod
    def getLastStepVehicleIDs(laneID):
        return _libsumo.lane_getLastStepVehicleIDs(laneID)

    @staticmethod
    def getFoes(laneID, toLaneID):
        return _libsumo.lane_getFoes(laneID, toLaneID)

    @staticmethod
    def getInternalFoes(laneID):
        return _libsumo.lane_getInternalFoes(laneID)

    @staticmethod
    def getPendingVehicles(laneID):
        return _libsumo.lane_getPendingVehicles(laneID)

    @staticmethod
    def getAngle(*args, **kwargs):
        return _libsumo.lane_getAngle(*args, **kwargs)

    @staticmethod
    def getBidiLane(laneID):
        return _libsumo.lane_getBidiLane(laneID)

    @staticmethod
    def getIDList():
        return _libsumo.lane_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.lane_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.lane_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.lane_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.lane_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.lane_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.lane_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.lane_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.lane_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.lane_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.lane_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.lane_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.lane_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.lane_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.lane_domainID()

    @staticmethod
    def setAllowed(*args):
        return _libsumo.lane_setAllowed(*args)

    @staticmethod
    def setDisallowed(*args):
        return _libsumo.lane_setDisallowed(*args)

    @staticmethod
    def setChangePermissions(laneID, allowedClasses, direction):
        return _libsumo.lane_setChangePermissions(laneID, allowedClasses, direction)

    @staticmethod
    def setMaxSpeed(laneID, speed):
        return _libsumo.lane_setMaxSpeed(laneID, speed)

    @staticmethod
    def setLength(laneID, length):
        return _libsumo.lane_setLength(laneID, length)

    @staticmethod
    def setFriction(laneID, friction):
        return _libsumo.lane_setFriction(laneID, friction)
    __swig_destroy__ = _libsumo.delete_lane

# Register lane in _libsumo:
_libsumo.lane_swigregister(lane)
lane.DOMAIN_ID = _libsumo.cvar.lane_DOMAIN_ID

class multientryexit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getEntryLanes(detID):
        return _libsumo.multientryexit_getEntryLanes(detID)

    @staticmethod
    def getExitLanes(detID):
        return _libsumo.multientryexit_getExitLanes(detID)

    @staticmethod
    def getEntryPositions(detID):
        return _libsumo.multientryexit_getEntryPositions(detID)

    @staticmethod
    def getExitPositions(detID):
        return _libsumo.multientryexit_getExitPositions(detID)

    @staticmethod
    def getLastStepVehicleNumber(detID):
        return _libsumo.multientryexit_getLastStepVehicleNumber(detID)

    @staticmethod
    def getLastStepMeanSpeed(detID):
        return _libsumo.multientryexit_getLastStepMeanSpeed(detID)

    @staticmethod
    def getLastStepVehicleIDs(detID):
        return _libsumo.multientryexit_getLastStepVehicleIDs(detID)

    @staticmethod
    def getLastStepHaltingNumber(detID):
        return _libsumo.multientryexit_getLastStepHaltingNumber(detID)

    @staticmethod
    def getLastIntervalMeanTravelTime(detID):
        return _libsumo.multientryexit_getLastIntervalMeanTravelTime(detID)

    @staticmethod
    def getLastIntervalMeanHaltsPerVehicle(detID):
        return _libsumo.multientryexit_getLastIntervalMeanHaltsPerVehicle(detID)

    @staticmethod
    def getLastIntervalMeanTimeLoss(detID):
        return _libsumo.multientryexit_getLastIntervalMeanTimeLoss(detID)

    @staticmethod
    def getLastIntervalVehicleSum(detID):
        return _libsumo.multientryexit_getLastIntervalVehicleSum(detID)

    @staticmethod
    def getIDList():
        return _libsumo.multientryexit_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.multientryexit_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.multientryexit_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.multientryexit_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.multientryexit_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.multientryexit_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.multientryexit_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.multientryexit_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.multientryexit_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.multientryexit_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.multientryexit_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.multientryexit_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.multientryexit_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.multientryexit_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.multientryexit_domainID()
    __swig_destroy__ = _libsumo.delete_multientryexit

# Register multientryexit in _libsumo:
_libsumo.multientryexit_swigregister(multientryexit)
multientryexit.DOMAIN_ID = _libsumo.cvar.multientryexit_DOMAIN_ID

class poi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getType(poiID):
        return _libsumo.poi_getType(poiID)

    @staticmethod
    def getPosition(poiID, includeZ=False):
        return _libsumo.poi_getPosition(poiID, includeZ)

    @staticmethod
    def getColor(poiID):
        return _libsumo.poi_getColor(poiID)

    @staticmethod
    def getWidth(poiID):
        return _libsumo.poi_getWidth(poiID)

    @staticmethod
    def getHeight(poiID):
        return _libsumo.poi_getHeight(poiID)

    @staticmethod
    def getAngle(poiID):
        return _libsumo.poi_getAngle(poiID)

    @staticmethod
    def getImageFile(poiID):
        return _libsumo.poi_getImageFile(poiID)

    @staticmethod
    def getIDList():
        return _libsumo.poi_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.poi_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.poi_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.poi_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.poi_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.poi_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.poi_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.poi_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.poi_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.poi_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.poi_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.poi_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.poi_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.poi_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.poi_domainID()

    @staticmethod
    def setType(poiID, poiType):
        return _libsumo.poi_setType(poiID, poiType)

    @staticmethod
    def setColor(poiID, color):
        return _libsumo.poi_setColor(poiID, color)

    @staticmethod
    def setPosition(poiID, x, y):
        return _libsumo.poi_setPosition(poiID, x, y)

    @staticmethod
    def setWidth(poiID, width):
        return _libsumo.poi_setWidth(poiID, width)

    @staticmethod
    def setHeight(poiID, height):
        return _libsumo.poi_setHeight(poiID, height)

    @staticmethod
    def setAngle(poiID, angle):
        return _libsumo.poi_setAngle(poiID, angle)

    @staticmethod
    def setImageFile(poiID, imageFile):
        return _libsumo.poi_setImageFile(poiID, imageFile)

    @staticmethod
    def add(*args, **kwargs):
        return _libsumo.poi_add(*args, **kwargs)

    @staticmethod
    def remove(poiID, layer=0):
        return _libsumo.poi_remove(poiID, layer)

    @staticmethod
    def highlight(*args, **kwargs):
        return _libsumo.poi_highlight(*args, **kwargs)
    __swig_destroy__ = _libsumo.delete_poi

# Register poi in _libsumo:
_libsumo.poi_swigregister(poi)
poi.DOMAIN_ID = _libsumo.cvar.poi_DOMAIN_ID

class polygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getType(polygonID):
        return _libsumo.polygon_getType(polygonID)

    @staticmethod
    def getShape(polygonID):
        return _libsumo.polygon_getShape(polygonID)

    @staticmethod
    def getColor(polygonID):
        return _libsumo.polygon_getColor(polygonID)

    @staticmethod
    def getFilled(polygonID):
        return _libsumo.polygon_getFilled(polygonID)

    @staticmethod
    def getLineWidth(polygonID):
        return _libsumo.polygon_getLineWidth(polygonID)

    @staticmethod
    def getIDList():
        return _libsumo.polygon_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.polygon_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.polygon_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.polygon_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.polygon_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.polygon_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.polygon_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.polygon_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.polygon_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.polygon_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.polygon_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.polygon_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.polygon_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.polygon_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.polygon_domainID()

    @staticmethod
    def setType(polygonID, polygonType):
        return _libsumo.polygon_setType(polygonID, polygonType)

    @staticmethod
    def setShape(polygonID, shape):
        return _libsumo.polygon_setShape(polygonID, shape)

    @staticmethod
    def setColor(polygonID, color):
        return _libsumo.polygon_setColor(polygonID, color)

    @staticmethod
    def add(*args, **kwargs):
        return _libsumo.polygon_add(*args, **kwargs)

    @staticmethod
    def addDynamics(*args, **kwargs):
        return _libsumo.polygon_addDynamics(*args, **kwargs)

    @staticmethod
    def remove(polygonID, layer=0):
        return _libsumo.polygon_remove(polygonID, layer)

    @staticmethod
    def setFilled(polygonID, filled):
        return _libsumo.polygon_setFilled(polygonID, filled)

    @staticmethod
    def setLineWidth(polygonID, lineWidth):
        return _libsumo.polygon_setLineWidth(polygonID, lineWidth)
    __swig_destroy__ = _libsumo.delete_polygon

# Register polygon in _libsumo:
_libsumo.polygon_swigregister(polygon)
polygon.DOMAIN_ID = _libsumo.cvar.polygon_DOMAIN_ID

class route(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getEdges(routeID):
        return _libsumo.route_getEdges(routeID)

    @staticmethod
    def getIDList():
        return _libsumo.route_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.route_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.route_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.route_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.route_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.route_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.route_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.route_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.route_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.route_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.route_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.route_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.route_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.route_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.route_domainID()

    @staticmethod
    def add(routeID, edges):
        return _libsumo.route_add(routeID, edges)

    @staticmethod
    def remove(routeID):
        return _libsumo.route_remove(routeID)
    __swig_destroy__ = _libsumo.delete_route

# Register route in _libsumo:
_libsumo.route_swigregister(route)
route.DOMAIN_ID = _libsumo.cvar.route_DOMAIN_ID

class simulation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def init(*args, **kwargs):
        return _libsumo.simulation_init(*args, **kwargs)

    @staticmethod
    def start(*args, **kwargs):
        return _libsumo.simulation_start(*args, **kwargs)

    @staticmethod
    def isLibsumo():
        return _libsumo.simulation_isLibsumo()

    @staticmethod
    def switchConnection(label):
        return _libsumo.simulation_switchConnection(label)

    @staticmethod
    def getLabel():
        return _libsumo.simulation_getLabel()

    @staticmethod
    def setOrder(order):
        return _libsumo.simulation_setOrder(order)

    @staticmethod
    def load(args):
        return _libsumo.simulation_load(args)

    @staticmethod
    def hasGUI():
        return _libsumo.simulation_hasGUI()

    @staticmethod
    def isLoaded():
        return _libsumo.simulation_isLoaded()

    @staticmethod
    def step(time=0.):
        return _libsumo.simulation_step(time)

    @staticmethod
    def executeMove():
        return _libsumo.simulation_executeMove()

    @staticmethod
    def close(*args, **kwargs):
        return _libsumo.simulation_close(*args, **kwargs)

    @staticmethod
    def getVersion():
        return _libsumo.simulation_getVersion()

    @staticmethod
    def getOption(option):
        return _libsumo.simulation_getOption(option)

    @staticmethod
    def getCurrentTime():
        return _libsumo.simulation_getCurrentTime()

    @staticmethod
    def getTime():
        return _libsumo.simulation_getTime()

    @staticmethod
    def getEndTime():
        return _libsumo.simulation_getEndTime()

    @staticmethod
    def getLoadedNumber():
        return _libsumo.simulation_getLoadedNumber()

    @staticmethod
    def getLoadedIDList():
        return _libsumo.simulation_getLoadedIDList()

    @staticmethod
    def getDepartedNumber():
        return _libsumo.simulation_getDepartedNumber()

    @staticmethod
    def getDepartedIDList():
        return _libsumo.simulation_getDepartedIDList()

    @staticmethod
    def getArrivedNumber():
        return _libsumo.simulation_getArrivedNumber()

    @staticmethod
    def getArrivedIDList():
        return _libsumo.simulation_getArrivedIDList()

    @staticmethod
    def getParkingStartingVehiclesNumber():
        return _libsumo.simulation_getParkingStartingVehiclesNumber()

    @staticmethod
    def getParkingStartingVehiclesIDList():
        return _libsumo.simulation_getParkingStartingVehiclesIDList()

    @staticmethod
    def getParkingEndingVehiclesNumber():
        return _libsumo.simulation_getParkingEndingVehiclesNumber()

    @staticmethod
    def getParkingEndingVehiclesIDList():
        return _libsumo.simulation_getParkingEndingVehiclesIDList()

    @staticmethod
    def getStopStartingVehiclesNumber():
        return _libsumo.simulation_getStopStartingVehiclesNumber()

    @staticmethod
    def getStopStartingVehiclesIDList():
        return _libsumo.simulation_getStopStartingVehiclesIDList()

    @staticmethod
    def getStopEndingVehiclesNumber():
        return _libsumo.simulation_getStopEndingVehiclesNumber()

    @staticmethod
    def getStopEndingVehiclesIDList():
        return _libsumo.simulation_getStopEndingVehiclesIDList()

    @staticmethod
    def getCollidingVehiclesNumber():
        return _libsumo.simulation_getCollidingVehiclesNumber()

    @staticmethod
    def getCollidingVehiclesIDList():
        return _libsumo.simulation_getCollidingVehiclesIDList()

    @staticmethod
    def getEmergencyStoppingVehiclesNumber():
        return _libsumo.simulation_getEmergencyStoppingVehiclesNumber()

    @staticmethod
    def getEmergencyStoppingVehiclesIDList():
        return _libsumo.simulation_getEmergencyStoppingVehiclesIDList()

    @staticmethod
    def getStartingTeleportNumber():
        return _libsumo.simulation_getStartingTeleportNumber()

    @staticmethod
    def getStartingTeleportIDList():
        return _libsumo.simulation_getStartingTeleportIDList()

    @staticmethod
    def getEndingTeleportNumber():
        return _libsumo.simulation_getEndingTeleportNumber()

    @staticmethod
    def getEndingTeleportIDList():
        return _libsumo.simulation_getEndingTeleportIDList()

    @staticmethod
    def getDepartedPersonNumber():
        return _libsumo.simulation_getDepartedPersonNumber()

    @staticmethod
    def getDepartedPersonIDList():
        return _libsumo.simulation_getDepartedPersonIDList()

    @staticmethod
    def getArrivedPersonNumber():
        return _libsumo.simulation_getArrivedPersonNumber()

    @staticmethod
    def getArrivedPersonIDList():
        return _libsumo.simulation_getArrivedPersonIDList()

    @staticmethod
    def getBusStopIDList():
        return _libsumo.simulation_getBusStopIDList()

    @staticmethod
    def getBusStopWaiting(stopID):
        return _libsumo.simulation_getBusStopWaiting(stopID)

    @staticmethod
    def getBusStopWaitingIDList(stopID):
        return _libsumo.simulation_getBusStopWaitingIDList(stopID)

    @staticmethod
    def getPendingVehicles():
        return _libsumo.simulation_getPendingVehicles()

    @staticmethod
    def getCollisions():
        return _libsumo.simulation_getCollisions()

    @staticmethod
    def getScale():
        return _libsumo.simulation_getScale()

    @staticmethod
    def getDeltaT():
        return _libsumo.simulation_getDeltaT()

    @staticmethod
    def getNetBoundary():
        return _libsumo.simulation_getNetBoundary()

    @staticmethod
    def getMinExpectedNumber():
        return _libsumo.simulation_getMinExpectedNumber()

    @staticmethod
    def convert2D(edgeID, pos, laneIndex=0, toGeo=False):
        return _libsumo.simulation_convert2D(edgeID, pos, laneIndex, toGeo)

    @staticmethod
    def convert3D(edgeID, pos, laneIndex=0, toGeo=False):
        return _libsumo.simulation_convert3D(edgeID, pos, laneIndex, toGeo)

    @staticmethod
    def convertRoad(*args, **kwargs):
        return _libsumo.simulation_convertRoad(*args, **kwargs)

    @staticmethod
    def convertGeo(x, y, fromGeo=False):
        return _libsumo.simulation_convertGeo(x, y, fromGeo)

    @staticmethod
    def getDistance2D(x1, y1, x2, y2, isGeo=False, isDriving=False):
        return _libsumo.simulation_getDistance2D(x1, y1, x2, y2, isGeo, isDriving)

    @staticmethod
    def getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving=False):
        return _libsumo.simulation_getDistanceRoad(edgeID1, pos1, edgeID2, pos2, isDriving)

    @staticmethod
    def findRoute(*args, **kwargs):
        return _libsumo.simulation_findRoute(*args, **kwargs)

    @staticmethod
    def findIntermodalRoute(*args, **kwargs):
        return _libsumo.simulation_findIntermodalRoute(*args, **kwargs)

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.simulation_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.simulation_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.simulation_setParameter(objectID, key, value)

    @staticmethod
    def setScale(value):
        return _libsumo.simulation_setScale(value)

    @staticmethod
    def clearPending(*args, **kwargs):
        return _libsumo.simulation_clearPending(*args, **kwargs)

    @staticmethod
    def saveState(fileName):
        return _libsumo.simulation_saveState(fileName)

    @staticmethod
    def loadState(fileName):
        return _libsumo.simulation_loadState(fileName)

    @staticmethod
    def writeMessage(msg):
        return _libsumo.simulation_writeMessage(msg)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.simulation_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.simulation_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.simulation_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.simulation_getAllSubscriptionResults()

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.simulation_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.simulation_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.simulation_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.simulation_domainID()

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 0 and args[0] is None:
            args = ([-1],) + args[1:]
        if len(args) > 3 and args[3] is None:
            args = args[:3] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.simulation_subscribe(*args, **kwargs)

    @staticmethod
    def getSubscriptionResults(*args):
        return _libsumo.simulation_getSubscriptionResults(*args)
    __swig_destroy__ = _libsumo.delete_simulation

# Register simulation in _libsumo:
_libsumo.simulation_swigregister(simulation)
simulation.DOMAIN_ID = _libsumo.cvar.simulation_DOMAIN_ID

class trafficlight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getRedYellowGreenState(tlsID):
        return _libsumo.trafficlight_getRedYellowGreenState(tlsID)

    @staticmethod
    def getAllProgramLogics(tlsID):
        return _libsumo.trafficlight_getAllProgramLogics(tlsID)

    @staticmethod
    def getControlledJunctions(tlsID):
        return _libsumo.trafficlight_getControlledJunctions(tlsID)

    @staticmethod
    def getControlledLanes(tlsID):
        return _libsumo.trafficlight_getControlledLanes(tlsID)

    @staticmethod
    def getControlledLinks(tlsID):
        return _libsumo.trafficlight_getControlledLinks(tlsID)

    @staticmethod
    def getProgram(tlsID):
        return _libsumo.trafficlight_getProgram(tlsID)

    @staticmethod
    def getPhase(tlsID):
        return _libsumo.trafficlight_getPhase(tlsID)

    @staticmethod
    def getPhaseName(tlsID):
        return _libsumo.trafficlight_getPhaseName(tlsID)

    @staticmethod
    def getPhaseDuration(tlsID):
        return _libsumo.trafficlight_getPhaseDuration(tlsID)

    @staticmethod
    def getNextSwitch(tlsID):
        return _libsumo.trafficlight_getNextSwitch(tlsID)

    @staticmethod
    def getSpentDuration(tlsID):
        return _libsumo.trafficlight_getSpentDuration(tlsID)

    @staticmethod
    def getServedPersonCount(tlsID, index):
        return _libsumo.trafficlight_getServedPersonCount(tlsID, index)

    @staticmethod
    def getBlockingVehicles(tlsID, linkIndex):
        return _libsumo.trafficlight_getBlockingVehicles(tlsID, linkIndex)

    @staticmethod
    def getRivalVehicles(tlsID, linkIndex):
        return _libsumo.trafficlight_getRivalVehicles(tlsID, linkIndex)

    @staticmethod
    def getPriorityVehicles(tlsID, linkIndex):
        return _libsumo.trafficlight_getPriorityVehicles(tlsID, linkIndex)

    @staticmethod
    def getConstraints(*args, **kwargs):
        return _libsumo.trafficlight_getConstraints(*args, **kwargs)

    @staticmethod
    def getConstraintsByFoe(*args, **kwargs):
        return _libsumo.trafficlight_getConstraintsByFoe(*args, **kwargs)

    @staticmethod
    def getIDList():
        return _libsumo.trafficlight_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.trafficlight_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.trafficlight_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.trafficlight_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.trafficlight_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.trafficlight_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.trafficlight_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.trafficlight_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.trafficlight_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.trafficlight_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.trafficlight_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.trafficlight_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.trafficlight_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.trafficlight_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.trafficlight_domainID()

    @staticmethod
    def setRedYellowGreenState(tlsID, state):
        return _libsumo.trafficlight_setRedYellowGreenState(tlsID, state)

    @staticmethod
    def setPhase(tlsID, index):
        return _libsumo.trafficlight_setPhase(tlsID, index)

    @staticmethod
    def setPhaseName(tlsID, name):
        return _libsumo.trafficlight_setPhaseName(tlsID, name)

    @staticmethod
    def setProgram(tlsID, programID):
        return _libsumo.trafficlight_setProgram(tlsID, programID)

    @staticmethod
    def setPhaseDuration(tlsID, phaseDuration):
        return _libsumo.trafficlight_setPhaseDuration(tlsID, phaseDuration)

    @staticmethod
    def setProgramLogic(tlsID, logic):
        return _libsumo.trafficlight_setProgramLogic(tlsID, logic)

    @staticmethod
    def addConstraint(tlsID, tripId, foeSignal, foeId, type=0, limit=0):
        return _libsumo.trafficlight_addConstraint(tlsID, tripId, foeSignal, foeId, type, limit)

    @staticmethod
    def swapConstraints(tlsID, tripId, foeSignal, foeId):
        return _libsumo.trafficlight_swapConstraints(tlsID, tripId, foeSignal, foeId)

    @staticmethod
    def removeConstraints(tlsID, tripId, foeSignal, foeId):
        return _libsumo.trafficlight_removeConstraints(tlsID, tripId, foeSignal, foeId)

    @staticmethod
    def updateConstraints(*args, **kwargs):
        return _libsumo.trafficlight_updateConstraints(*args, **kwargs)

    @staticmethod
    def getCompleteRedYellowGreenDefinition(tlsID):
        return _libsumo.trafficlight_getCompleteRedYellowGreenDefinition(tlsID)

    @staticmethod
    def setCompleteRedYellowGreenDefinition(tlsID, logic):
        return _libsumo.trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic)

    @staticmethod
    def setNemaSplits(tlsID, splits):
        return _libsumo.trafficlight_setNemaSplits(tlsID, splits)

    @staticmethod
    def setNemaMaxGreens(tlsID, maxGreens):
        return _libsumo.trafficlight_setNemaMaxGreens(tlsID, maxGreens)

    @staticmethod
    def setNemaCycleLength(tlsID, cycleLength):
        return _libsumo.trafficlight_setNemaCycleLength(tlsID, cycleLength)

    @staticmethod
    def setNemaOffset(tlsID, offset):
        return _libsumo.trafficlight_setNemaOffset(tlsID, offset)
    __swig_destroy__ = _libsumo.delete_trafficlight

# Register trafficlight in _libsumo:
_libsumo.trafficlight_swigregister(trafficlight)
TRACI_VERSION = cvar.TRACI_VERSION
CMD_GETVERSION = cvar.CMD_GETVERSION
CMD_LOAD = cvar.CMD_LOAD
CMD_EXECUTEMOVE = cvar.CMD_EXECUTEMOVE
CMD_SIMSTEP = cvar.CMD_SIMSTEP
CMD_SETORDER = cvar.CMD_SETORDER
CMD_STOP = cvar.CMD_STOP
CMD_REROUTE_TO_PARKING = cvar.CMD_REROUTE_TO_PARKING
CMD_RESUME = cvar.CMD_RESUME
CMD_CHANGELANE = cvar.CMD_CHANGELANE
CMD_SLOWDOWN = cvar.CMD_SLOWDOWN
CMD_CHANGESUBLANE = cvar.CMD_CHANGESUBLANE
CMD_OPENGAP = cvar.CMD_OPENGAP
CMD_REPLACE_STOP = cvar.CMD_REPLACE_STOP
CMD_INSERT_STOP = cvar.CMD_INSERT_STOP
VAR_TAXI_FLEET = cvar.VAR_TAXI_FLEET
CMD_TAXI_DISPATCH = cvar.CMD_TAXI_DISPATCH
CMD_CHANGETARGET = cvar.CMD_CHANGETARGET
CMD_CLOSE = cvar.CMD_CLOSE
CMD_ADD_SUBSCRIPTION_FILTER = cvar.CMD_ADD_SUBSCRIPTION_FILTER
CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
CMD_GET_INDUCTIONLOOP_VARIABLE = cvar.CMD_GET_INDUCTIONLOOP_VARIABLE
RESPONSE_GET_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_GET_INDUCTIONLOOP_VARIABLE
CMD_SET_INDUCTIONLOOP_VARIABLE = cvar.CMD_SET_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
CMD_GET_MULTIENTRYEXIT_VARIABLE = cvar.CMD_GET_MULTIENTRYEXIT_VARIABLE
RESPONSE_GET_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_GET_MULTIENTRYEXIT_VARIABLE
CMD_SET_MULTIENTRYEXIT_VARIABLE = cvar.CMD_SET_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_TL_CONTEXT = cvar.CMD_SUBSCRIBE_TL_CONTEXT
RESPONSE_SUBSCRIBE_TL_CONTEXT = cvar.RESPONSE_SUBSCRIBE_TL_CONTEXT
CMD_GET_TL_VARIABLE = cvar.CMD_GET_TL_VARIABLE
RESPONSE_GET_TL_VARIABLE = cvar.RESPONSE_GET_TL_VARIABLE
CMD_SET_TL_VARIABLE = cvar.CMD_SET_TL_VARIABLE
CMD_SUBSCRIBE_TL_VARIABLE = cvar.CMD_SUBSCRIBE_TL_VARIABLE
RESPONSE_SUBSCRIBE_TL_VARIABLE = cvar.RESPONSE_SUBSCRIBE_TL_VARIABLE
CMD_SUBSCRIBE_LANE_CONTEXT = cvar.CMD_SUBSCRIBE_LANE_CONTEXT
RESPONSE_SUBSCRIBE_LANE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANE_CONTEXT
CMD_GET_LANE_VARIABLE = cvar.CMD_GET_LANE_VARIABLE
RESPONSE_GET_LANE_VARIABLE = cvar.RESPONSE_GET_LANE_VARIABLE
CMD_SET_LANE_VARIABLE = cvar.CMD_SET_LANE_VARIABLE
CMD_SUBSCRIBE_LANE_VARIABLE = cvar.CMD_SUBSCRIBE_LANE_VARIABLE
RESPONSE_SUBSCRIBE_LANE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT
CMD_GET_VEHICLE_VARIABLE = cvar.CMD_GET_VEHICLE_VARIABLE
RESPONSE_GET_VEHICLE_VARIABLE = cvar.RESPONSE_GET_VEHICLE_VARIABLE
CMD_SET_VEHICLE_VARIABLE = cvar.CMD_SET_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT
CMD_GET_VEHICLETYPE_VARIABLE = cvar.CMD_GET_VEHICLETYPE_VARIABLE
RESPONSE_GET_VEHICLETYPE_VARIABLE = cvar.RESPONSE_GET_VEHICLETYPE_VARIABLE
CMD_SET_VEHICLETYPE_VARIABLE = cvar.CMD_SET_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_ROUTE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTE_CONTEXT
CMD_GET_ROUTE_VARIABLE = cvar.CMD_GET_ROUTE_VARIABLE
RESPONSE_GET_ROUTE_VARIABLE = cvar.RESPONSE_GET_ROUTE_VARIABLE
CMD_SET_ROUTE_VARIABLE = cvar.CMD_SET_ROUTE_VARIABLE
CMD_SUBSCRIBE_ROUTE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTE_VARIABLE
CMD_SUBSCRIBE_POI_CONTEXT = cvar.CMD_SUBSCRIBE_POI_CONTEXT
RESPONSE_SUBSCRIBE_POI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POI_CONTEXT
CMD_GET_POI_VARIABLE = cvar.CMD_GET_POI_VARIABLE
RESPONSE_GET_POI_VARIABLE = cvar.RESPONSE_GET_POI_VARIABLE
CMD_SET_POI_VARIABLE = cvar.CMD_SET_POI_VARIABLE
CMD_SUBSCRIBE_POI_VARIABLE = cvar.CMD_SUBSCRIBE_POI_VARIABLE
RESPONSE_SUBSCRIBE_POI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POI_VARIABLE
CMD_SUBSCRIBE_POLYGON_CONTEXT = cvar.CMD_SUBSCRIBE_POLYGON_CONTEXT
RESPONSE_SUBSCRIBE_POLYGON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POLYGON_CONTEXT
CMD_GET_POLYGON_VARIABLE = cvar.CMD_GET_POLYGON_VARIABLE
RESPONSE_GET_POLYGON_VARIABLE = cvar.RESPONSE_GET_POLYGON_VARIABLE
CMD_SET_POLYGON_VARIABLE = cvar.CMD_SET_POLYGON_VARIABLE
CMD_SUBSCRIBE_POLYGON_VARIABLE = cvar.CMD_SUBSCRIBE_POLYGON_VARIABLE
RESPONSE_SUBSCRIBE_POLYGON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POLYGON_VARIABLE
CMD_SUBSCRIBE_JUNCTION_CONTEXT = cvar.CMD_SUBSCRIBE_JUNCTION_CONTEXT
RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT
CMD_GET_JUNCTION_VARIABLE = cvar.CMD_GET_JUNCTION_VARIABLE
RESPONSE_GET_JUNCTION_VARIABLE = cvar.RESPONSE_GET_JUNCTION_VARIABLE
CMD_SET_JUNCTION_VARIABLE = cvar.CMD_SET_JUNCTION_VARIABLE
CMD_SUBSCRIBE_JUNCTION_VARIABLE = cvar.CMD_SUBSCRIBE_JUNCTION_VARIABLE
RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE
CMD_SUBSCRIBE_EDGE_CONTEXT = cvar.CMD_SUBSCRIBE_EDGE_CONTEXT
RESPONSE_SUBSCRIBE_EDGE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_EDGE_CONTEXT
CMD_GET_EDGE_VARIABLE = cvar.CMD_GET_EDGE_VARIABLE
RESPONSE_GET_EDGE_VARIABLE = cvar.RESPONSE_GET_EDGE_VARIABLE
CMD_SET_EDGE_VARIABLE = cvar.CMD_SET_EDGE_VARIABLE
CMD_SUBSCRIBE_EDGE_VARIABLE = cvar.CMD_SUBSCRIBE_EDGE_VARIABLE
RESPONSE_SUBSCRIBE_EDGE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_EDGE_VARIABLE
CMD_SUBSCRIBE_SIM_CONTEXT = cvar.CMD_SUBSCRIBE_SIM_CONTEXT
RESPONSE_SUBSCRIBE_SIM_CONTEXT = cvar.RESPONSE_SUBSCRIBE_SIM_CONTEXT
CMD_GET_SIM_VARIABLE = cvar.CMD_GET_SIM_VARIABLE
RESPONSE_GET_SIM_VARIABLE = cvar.RESPONSE_GET_SIM_VARIABLE
CMD_SET_SIM_VARIABLE = cvar.CMD_SET_SIM_VARIABLE
CMD_SUBSCRIBE_SIM_VARIABLE = cvar.CMD_SUBSCRIBE_SIM_VARIABLE
RESPONSE_SUBSCRIBE_SIM_VARIABLE = cvar.RESPONSE_SUBSCRIBE_SIM_VARIABLE
CMD_SUBSCRIBE_GUI_CONTEXT = cvar.CMD_SUBSCRIBE_GUI_CONTEXT
RESPONSE_SUBSCRIBE_GUI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_GUI_CONTEXT
CMD_GET_GUI_VARIABLE = cvar.CMD_GET_GUI_VARIABLE
RESPONSE_GET_GUI_VARIABLE = cvar.RESPONSE_GET_GUI_VARIABLE
CMD_SET_GUI_VARIABLE = cvar.CMD_SET_GUI_VARIABLE
CMD_SUBSCRIBE_GUI_VARIABLE = cvar.CMD_SUBSCRIBE_GUI_VARIABLE
RESPONSE_SUBSCRIBE_GUI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_GUI_VARIABLE
CMD_SUBSCRIBE_LANEAREA_CONTEXT = cvar.CMD_SUBSCRIBE_LANEAREA_CONTEXT
RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT
CMD_GET_LANEAREA_VARIABLE = cvar.CMD_GET_LANEAREA_VARIABLE
RESPONSE_GET_LANEAREA_VARIABLE = cvar.RESPONSE_GET_LANEAREA_VARIABLE
CMD_SET_LANEAREA_VARIABLE = cvar.CMD_SET_LANEAREA_VARIABLE
CMD_SUBSCRIBE_LANEAREA_VARIABLE = cvar.CMD_SUBSCRIBE_LANEAREA_VARIABLE
RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE
CMD_SUBSCRIBE_PERSON_CONTEXT = cvar.CMD_SUBSCRIBE_PERSON_CONTEXT
RESPONSE_SUBSCRIBE_PERSON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PERSON_CONTEXT
CMD_GET_PERSON_VARIABLE = cvar.CMD_GET_PERSON_VARIABLE
RESPONSE_GET_PERSON_VARIABLE = cvar.RESPONSE_GET_PERSON_VARIABLE
CMD_SET_PERSON_VARIABLE = cvar.CMD_SET_PERSON_VARIABLE
CMD_SUBSCRIBE_PERSON_VARIABLE = cvar.CMD_SUBSCRIBE_PERSON_VARIABLE
RESPONSE_SUBSCRIBE_PERSON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PERSON_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.CMD_SUBSCRIBE_BUSSTOP_CONTEXT
RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT
CMD_GET_BUSSTOP_VARIABLE = cvar.CMD_GET_BUSSTOP_VARIABLE
RESPONSE_GET_BUSSTOP_VARIABLE = cvar.RESPONSE_GET_BUSSTOP_VARIABLE
CMD_SET_BUSSTOP_VARIABLE = cvar.CMD_SET_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.CMD_SUBSCRIBE_BUSSTOP_VARIABLE
RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.CMD_SUBSCRIBE_PARKINGAREA_CONTEXT
RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT
CMD_GET_PARKINGAREA_VARIABLE = cvar.CMD_GET_PARKINGAREA_VARIABLE
RESPONSE_GET_PARKINGAREA_VARIABLE = cvar.RESPONSE_GET_PARKINGAREA_VARIABLE
CMD_SET_PARKINGAREA_VARIABLE = cvar.CMD_SET_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.CMD_SUBSCRIBE_PARKINGAREA_VARIABLE
RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT
RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT
CMD_GET_CHARGINGSTATION_VARIABLE = cvar.CMD_GET_CHARGINGSTATION_VARIABLE
RESPONSE_GET_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_GET_CHARGINGSTATION_VARIABLE
CMD_SET_CHARGINGSTATION_VARIABLE = cvar.CMD_SET_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE
RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT
CMD_GET_ROUTEPROBE_VARIABLE = cvar.CMD_GET_ROUTEPROBE_VARIABLE
RESPONSE_GET_ROUTEPROBE_VARIABLE = cvar.RESPONSE_GET_ROUTEPROBE_VARIABLE
CMD_SET_ROUTEPROBE_VARIABLE = cvar.CMD_SET_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.CMD_SUBSCRIBE_CALIBRATOR_CONTEXT
RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT
CMD_GET_CALIBRATOR_VARIABLE = cvar.CMD_GET_CALIBRATOR_VARIABLE
RESPONSE_GET_CALIBRATOR_VARIABLE = cvar.RESPONSE_GET_CALIBRATOR_VARIABLE
CMD_SET_CALIBRATOR_VARIABLE = cvar.CMD_SET_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.CMD_SUBSCRIBE_CALIBRATOR_VARIABLE
RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_REROUTER_CONTEXT = cvar.CMD_SUBSCRIBE_REROUTER_CONTEXT
RESPONSE_SUBSCRIBE_REROUTER_CONTEXT = cvar.RESPONSE_SUBSCRIBE_REROUTER_CONTEXT
CMD_GET_REROUTER_VARIABLE = cvar.CMD_GET_REROUTER_VARIABLE
RESPONSE_GET_REROUTER_VARIABLE = cvar.RESPONSE_GET_REROUTER_VARIABLE
CMD_SET_REROUTER_VARIABLE = cvar.CMD_SET_REROUTER_VARIABLE
CMD_SUBSCRIBE_REROUTER_VARIABLE = cvar.CMD_SUBSCRIBE_REROUTER_VARIABLE
RESPONSE_SUBSCRIBE_REROUTER_VARIABLE = cvar.RESPONSE_SUBSCRIBE_REROUTER_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
CMD_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_GET_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE
CMD_SET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SET_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_MEANDATA_CONTEXT = cvar.CMD_SUBSCRIBE_MEANDATA_CONTEXT
RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT
CMD_GET_MEANDATA_VARIABLE = cvar.CMD_GET_MEANDATA_VARIABLE
RESPONSE_GET_MEANDATA_VARIABLE = cvar.RESPONSE_GET_MEANDATA_VARIABLE
CMD_SET_MEANDATA_VARIABLE = cvar.CMD_SET_MEANDATA_VARIABLE
CMD_SUBSCRIBE_MEANDATA_VARIABLE = cvar.CMD_SUBSCRIBE_MEANDATA_VARIABLE
RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT
RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT
CMD_GET_OVERHEADWIRE_VARIABLE = cvar.CMD_GET_OVERHEADWIRE_VARIABLE
RESPONSE_GET_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_GET_OVERHEADWIRE_VARIABLE
CMD_SET_OVERHEADWIRE_VARIABLE = cvar.CMD_SET_OVERHEADWIRE_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE
RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE
POSITION_LON_LAT = cvar.POSITION_LON_LAT
POSITION_2D = cvar.POSITION_2D
POSITION_LON_LAT_ALT = cvar.POSITION_LON_LAT_ALT
POSITION_3D = cvar.POSITION_3D
POSITION_ROADMAP = cvar.POSITION_ROADMAP
TYPE_POLYGON = cvar.TYPE_POLYGON
TYPE_UBYTE = cvar.TYPE_UBYTE
TYPE_BYTE = cvar.TYPE_BYTE
TYPE_INTEGER = cvar.TYPE_INTEGER
TYPE_DOUBLE = cvar.TYPE_DOUBLE
TYPE_STRING = cvar.TYPE_STRING
TYPE_STRINGLIST = cvar.TYPE_STRINGLIST
TYPE_COMPOUND = cvar.TYPE_COMPOUND
TYPE_DOUBLELIST = cvar.TYPE_DOUBLELIST
TYPE_COLOR = cvar.TYPE_COLOR
RTYPE_OK = cvar.RTYPE_OK
RTYPE_NOTIMPLEMENTED = cvar.RTYPE_NOTIMPLEMENTED
RTYPE_ERR = cvar.RTYPE_ERR
INVALID_DOUBLE_VALUE = cvar.INVALID_DOUBLE_VALUE
INVALID_INT_VALUE = cvar.INVALID_INT_VALUE
MAX_ORDER = cvar.MAX_ORDER
DEFAULT_NUM_RETRIES = cvar.DEFAULT_NUM_RETRIES
REQUEST_AIRDIST = cvar.REQUEST_AIRDIST
REQUEST_DRIVINGDIST = cvar.REQUEST_DRIVINGDIST
REMOVE_TELEPORT = cvar.REMOVE_TELEPORT
REMOVE_PARKING = cvar.REMOVE_PARKING
REMOVE_ARRIVED = cvar.REMOVE_ARRIVED
REMOVE_VAPORIZED = cvar.REMOVE_VAPORIZED
REMOVE_TELEPORT_ARRIVED = cvar.REMOVE_TELEPORT_ARRIVED
MOVE_AUTOMATIC = cvar.MOVE_AUTOMATIC
MOVE_TELEPORT = cvar.MOVE_TELEPORT
MOVE_NORMAL = cvar.MOVE_NORMAL
STAGE_WAITING_FOR_DEPART = cvar.STAGE_WAITING_FOR_DEPART
STAGE_WAITING = cvar.STAGE_WAITING
STAGE_WALKING = cvar.STAGE_WALKING
STAGE_DRIVING = cvar.STAGE_DRIVING
STAGE_ACCESS = cvar.STAGE_ACCESS
STAGE_TRIP = cvar.STAGE_TRIP
STAGE_TRANSHIP = cvar.STAGE_TRANSHIP
STOP_DEFAULT = cvar.STOP_DEFAULT
STOP_PARKING = cvar.STOP_PARKING
STOP_TRIGGERED = cvar.STOP_TRIGGERED
STOP_CONTAINER_TRIGGERED = cvar.STOP_CONTAINER_TRIGGERED
STOP_BUS_STOP = cvar.STOP_BUS_STOP
STOP_CONTAINER_STOP = cvar.STOP_CONTAINER_STOP
STOP_CHARGING_STATION = cvar.STOP_CHARGING_STATION
STOP_PARKING_AREA = cvar.STOP_PARKING_AREA
STOP_OVERHEAD_WIRE = cvar.STOP_OVERHEAD_WIRE
DEPARTFLAG_TRIGGERED = cvar.DEPARTFLAG_TRIGGERED
DEPARTFLAG_CONTAINER_TRIGGERED = cvar.DEPARTFLAG_CONTAINER_TRIGGERED
DEPARTFLAG_NOW = cvar.DEPARTFLAG_NOW
DEPARTFLAG_SPLIT = cvar.DEPARTFLAG_SPLIT
DEPARTFLAG_BEGIN = cvar.DEPARTFLAG_BEGIN
DEPARTFLAG_SPEED_RANDOM = cvar.DEPARTFLAG_SPEED_RANDOM
DEPARTFLAG_SPEED_MAX = cvar.DEPARTFLAG_SPEED_MAX
DEPARTFLAG_LANE_RANDOM = cvar.DEPARTFLAG_LANE_RANDOM
DEPARTFLAG_LANE_FREE = cvar.DEPARTFLAG_LANE_FREE
DEPARTFLAG_LANE_ALLOWED_FREE = cvar.DEPARTFLAG_LANE_ALLOWED_FREE
DEPARTFLAG_LANE_BEST_FREE = cvar.DEPARTFLAG_LANE_BEST_FREE
DEPARTFLAG_LANE_FIRST_ALLOWED = cvar.DEPARTFLAG_LANE_FIRST_ALLOWED
DEPARTFLAG_POS_RANDOM = cvar.DEPARTFLAG_POS_RANDOM
DEPARTFLAG_POS_FREE = cvar.DEPARTFLAG_POS_FREE
DEPARTFLAG_POS_BASE = cvar.DEPARTFLAG_POS_BASE
DEPARTFLAG_POS_LAST = cvar.DEPARTFLAG_POS_LAST
DEPARTFLAG_POS_RANDOM_FREE = cvar.DEPARTFLAG_POS_RANDOM_FREE
ARRIVALFLAG_LANE_CURRENT = cvar.ARRIVALFLAG_LANE_CURRENT
ARRIVALFLAG_SPEED_CURRENT = cvar.ARRIVALFLAG_SPEED_CURRENT
ARRIVALFLAG_POS_RANDOM = cvar.ARRIVALFLAG_POS_RANDOM
ARRIVALFLAG_POS_MAX = cvar.ARRIVALFLAG_POS_MAX
ROUTING_MODE_DEFAULT = cvar.ROUTING_MODE_DEFAULT
ROUTING_MODE_AGGREGATED = cvar.ROUTING_MODE_AGGREGATED
ROUTING_MODE_EFFORT = cvar.ROUTING_MODE_EFFORT
ROUTING_MODE_COMBINED = cvar.ROUTING_MODE_COMBINED
ROUTING_MODE_AGGREGATED_CUSTOM = cvar.ROUTING_MODE_AGGREGATED_CUSTOM
ROUTING_MODE_IGNORE_TRANSIENT_PERMISSIONS = cvar.ROUTING_MODE_IGNORE_TRANSIENT_PERMISSIONS
TRAFFICLIGHT_TYPE_STATIC = cvar.TRAFFICLIGHT_TYPE_STATIC
TRAFFICLIGHT_TYPE_ACTUATED = cvar.TRAFFICLIGHT_TYPE_ACTUATED
TRAFFICLIGHT_TYPE_NEMA = cvar.TRAFFICLIGHT_TYPE_NEMA
TRAFFICLIGHT_TYPE_DELAYBASED = cvar.TRAFFICLIGHT_TYPE_DELAYBASED
LANECHANGE_LEFT = cvar.LANECHANGE_LEFT
LANECHANGE_RIGHT = cvar.LANECHANGE_RIGHT
FILTER_TYPE_NONE = cvar.FILTER_TYPE_NONE
FILTER_TYPE_LANES = cvar.FILTER_TYPE_LANES
FILTER_TYPE_NOOPPOSITE = cvar.FILTER_TYPE_NOOPPOSITE
FILTER_TYPE_DOWNSTREAM_DIST = cvar.FILTER_TYPE_DOWNSTREAM_DIST
FILTER_TYPE_UPSTREAM_DIST = cvar.FILTER_TYPE_UPSTREAM_DIST
FILTER_TYPE_LEAD_FOLLOW = cvar.FILTER_TYPE_LEAD_FOLLOW
FILTER_TYPE_TURN = cvar.FILTER_TYPE_TURN
FILTER_TYPE_VCLASS = cvar.FILTER_TYPE_VCLASS
FILTER_TYPE_VTYPE = cvar.FILTER_TYPE_VTYPE
FILTER_TYPE_FIELD_OF_VISION = cvar.FILTER_TYPE_FIELD_OF_VISION
FILTER_TYPE_LATERAL_DIST = cvar.FILTER_TYPE_LATERAL_DIST
TRACI_ID_LIST = cvar.TRACI_ID_LIST
ID_COUNT = cvar.ID_COUNT
AUTOMATIC_VARIABLES_SUBSCRIPTION = cvar.AUTOMATIC_VARIABLES_SUBSCRIPTION
AUTOMATIC_CONTEXT_SUBSCRIPTION = cvar.AUTOMATIC_CONTEXT_SUBSCRIPTION
GENERIC_ATTRIBUTE = cvar.GENERIC_ATTRIBUTE
LAST_STEP_VEHICLE_NUMBER = cvar.LAST_STEP_VEHICLE_NUMBER
LAST_STEP_MEAN_SPEED = cvar.LAST_STEP_MEAN_SPEED
LAST_STEP_VEHICLE_ID_LIST = cvar.LAST_STEP_VEHICLE_ID_LIST
LAST_STEP_OCCUPANCY = cvar.LAST_STEP_OCCUPANCY
LAST_STEP_VEHICLE_HALTING_NUMBER = cvar.LAST_STEP_VEHICLE_HALTING_NUMBER
FROM_JUNCTION = cvar.FROM_JUNCTION
TO_JUNCTION = cvar.TO_JUNCTION
INCOMING_EDGES = cvar.INCOMING_EDGES
OUTGOING_EDGES = cvar.OUTGOING_EDGES
VAR_BIDI = cvar.VAR_BIDI
LAST_STEP_LENGTH = cvar.LAST_STEP_LENGTH
LAST_STEP_TIME_SINCE_DETECTION = cvar.LAST_STEP_TIME_SINCE_DETECTION
LAST_STEP_VEHICLE_DATA = cvar.LAST_STEP_VEHICLE_DATA
VAR_INTERVAL_OCCUPANCY = cvar.VAR_INTERVAL_OCCUPANCY
VAR_INTERVAL_SPEED = cvar.VAR_INTERVAL_SPEED
VAR_INTERVAL_NUMBER = cvar.VAR_INTERVAL_NUMBER
VAR_INTERVAL_IDS = cvar.VAR_INTERVAL_IDS
VAR_INTERVAL_TIMELOSS = cvar.VAR_INTERVAL_TIMELOSS
VAR_LAST_INTERVAL_OCCUPANCY = cvar.VAR_LAST_INTERVAL_OCCUPANCY
VAR_LAST_INTERVAL_SPEED = cvar.VAR_LAST_INTERVAL_SPEED
VAR_LAST_INTERVAL_NUMBER = cvar.VAR_LAST_INTERVAL_NUMBER
VAR_LAST_INTERVAL_IDS = cvar.VAR_LAST_INTERVAL_IDS
JAM_LENGTH_VEHICLE = cvar.JAM_LENGTH_VEHICLE
JAM_LENGTH_METERS = cvar.JAM_LENGTH_METERS
VAR_INTERVAL_MAX_JAM_LENGTH_METERS = cvar.VAR_INTERVAL_MAX_JAM_LENGTH_METERS
VAR_LAST_INTERVAL_MAX_JAM_LENGTH_METERS = cvar.VAR_LAST_INTERVAL_MAX_JAM_LENGTH_METERS
VAR_LAST_INTERVAL_TRAVELTIME = cvar.VAR_LAST_INTERVAL_TRAVELTIME
VAR_LAST_INTERVAL_MEAN_HALTING_NUMBER = cvar.VAR_LAST_INTERVAL_MEAN_HALTING_NUMBER
VAR_LAST_INTERVAL_VEHICLE_NUMBER = cvar.VAR_LAST_INTERVAL_VEHICLE_NUMBER
VAR_LAST_INTERVAL_TIMELOSS = cvar.VAR_LAST_INTERVAL_TIMELOSS
VAR_VIRTUAL_DETECTION = cvar.VAR_VIRTUAL_DETECTION
LAST_STEP_PERSON_ID_LIST = cvar.LAST_STEP_PERSON_ID_LIST
VAR_NAME = cvar.VAR_NAME
VAR_FOLLOW_SPEED = cvar.VAR_FOLLOW_SPEED
VAR_STOP_SPEED = cvar.VAR_STOP_SPEED
VAR_SECURE_GAP = cvar.VAR_SECURE_GAP
VAR_STOP_DELAY = cvar.VAR_STOP_DELAY
VAR_STOP_ARRIVALDELAY = cvar.VAR_STOP_ARRIVALDELAY
VAR_TIMELOSS = cvar.VAR_TIMELOSS
VAR_BEGIN = cvar.VAR_BEGIN
VAR_END = cvar.VAR_END
VAR_VTYPES = cvar.VAR_VTYPES
VAR_VEHSPERHOUR = cvar.VAR_VEHSPERHOUR
VAR_PASSED = cvar.VAR_PASSED
VAR_INSERTED = cvar.VAR_INSERTED
VAR_REMOVED = cvar.VAR_REMOVED
VAR_ROUTE_PROBE = cvar.VAR_ROUTE_PROBE
CMD_SET_FLOW = cvar.CMD_SET_FLOW
TL_RED_YELLOW_GREEN_STATE = cvar.TL_RED_YELLOW_GREEN_STATE
TL_PHASE_INDEX = cvar.TL_PHASE_INDEX
TL_PROGRAM = cvar.TL_PROGRAM
TL_PHASE_DURATION = cvar.TL_PHASE_DURATION
TL_BLOCKING_VEHICLES = cvar.TL_BLOCKING_VEHICLES
TL_CONTROLLED_LANES = cvar.TL_CONTROLLED_LANES
TL_CONTROLLED_LINKS = cvar.TL_CONTROLLED_LINKS
TL_CURRENT_PHASE = cvar.TL_CURRENT_PHASE
TL_CURRENT_PROGRAM = cvar.TL_CURRENT_PROGRAM
TL_RIVAL_VEHICLES = cvar.TL_RIVAL_VEHICLES
TL_PRIORITY_VEHICLES = cvar.TL_PRIORITY_VEHICLES
TL_CONTROLLED_JUNCTIONS = cvar.TL_CONTROLLED_JUNCTIONS
TL_COMPLETE_DEFINITION_RYG = cvar.TL_COMPLETE_DEFINITION_RYG
TL_COMPLETE_PROGRAM_RYG = cvar.TL_COMPLETE_PROGRAM_RYG
TL_NEXT_SWITCH = cvar.TL_NEXT_SWITCH
TL_CONSTRAINT = cvar.TL_CONSTRAINT
TL_CONSTRAINT_SWAP = cvar.TL_CONSTRAINT_SWAP
TL_CONSTRAINT_BYFOE = cvar.TL_CONSTRAINT_BYFOE
TL_CONSTRAINT_REMOVE = cvar.TL_CONSTRAINT_REMOVE
TL_CONSTRAINT_UPDATE = cvar.TL_CONSTRAINT_UPDATE
TL_CONSTRAINT_ADD = cvar.TL_CONSTRAINT_ADD
TL_SPENT_DURATION = cvar.TL_SPENT_DURATION
LANE_LINK_NUMBER = cvar.LANE_LINK_NUMBER
LANE_EDGE_ID = cvar.LANE_EDGE_ID
LANE_LINKS = cvar.LANE_LINKS
LANE_ALLOWED = cvar.LANE_ALLOWED
LANE_DISALLOWED = cvar.LANE_DISALLOWED
LANE_CHANGES = cvar.LANE_CHANGES
VAR_FOES = cvar.VAR_FOES
VAR_SLOPE = cvar.VAR_SLOPE
VAR_SPEED = cvar.VAR_SPEED
VAR_PREV_SPEED = cvar.VAR_PREV_SPEED
VAR_FRICTION = cvar.VAR_FRICTION
VAR_SPEED_LAT = cvar.VAR_SPEED_LAT
VAR_MAXSPEED = cvar.VAR_MAXSPEED
VAR_POSITION = cvar.VAR_POSITION
VAR_EXIT_POSITIONS = cvar.VAR_EXIT_POSITIONS
VAR_POSITION3D = cvar.VAR_POSITION3D
VAR_ANGLE = cvar.VAR_ANGLE
VAR_LENGTH = cvar.VAR_LENGTH
VAR_COLOR = cvar.VAR_COLOR
VAR_ACCEL = cvar.VAR_ACCEL
VAR_DECEL = cvar.VAR_DECEL
VAR_EMERGENCY_DECEL = cvar.VAR_EMERGENCY_DECEL
VAR_APPARENT_DECEL = cvar.VAR_APPARENT_DECEL
VAR_ACTIONSTEPLENGTH = cvar.VAR_ACTIONSTEPLENGTH
VAR_LASTACTIONTIME = cvar.VAR_LASTACTIONTIME
VAR_TAU = cvar.VAR_TAU
VAR_VEHICLECLASS = cvar.VAR_VEHICLECLASS
VAR_EMISSIONCLASS = cvar.VAR_EMISSIONCLASS
VAR_SHAPECLASS = cvar.VAR_SHAPECLASS
VAR_MINGAP = cvar.VAR_MINGAP
VAR_WIDTH = cvar.VAR_WIDTH
VAR_SHAPE = cvar.VAR_SHAPE
VAR_TYPE = cvar.VAR_TYPE
VAR_ROAD_ID = cvar.VAR_ROAD_ID
VAR_LANE_ID = cvar.VAR_LANE_ID
VAR_LANE_INDEX = cvar.VAR_LANE_INDEX
VAR_SEGMENT_ID = cvar.VAR_SEGMENT_ID
VAR_SEGMENT_INDEX = cvar.VAR_SEGMENT_INDEX
VAR_ROUTE_ID = cvar.VAR_ROUTE_ID
VAR_EDGES = cvar.VAR_EDGES
VAR_STOP_PARAMETER = cvar.VAR_STOP_PARAMETER
VAR_LANES = cvar.VAR_LANES
VAR_EXIT_LANES = cvar.VAR_EXIT_LANES
VAR_UPDATE_BESTLANES = cvar.VAR_UPDATE_BESTLANES
VAR_FILL = cvar.VAR_FILL
VAR_IMAGEFILE = cvar.VAR_IMAGEFILE
VAR_LANEPOSITION = cvar.VAR_LANEPOSITION
VAR_ROUTE = cvar.VAR_ROUTE
VAR_EDGE_TRAVELTIME = cvar.VAR_EDGE_TRAVELTIME
VAR_EDGE_EFFORT = cvar.VAR_EDGE_EFFORT
VAR_CURRENT_TRAVELTIME = cvar.VAR_CURRENT_TRAVELTIME
VAR_SIGNALS = cvar.VAR_SIGNALS
VAR_MOVE_TO = cvar.VAR_MOVE_TO
VAR_ADD_DYNAMICS = cvar.VAR_ADD_DYNAMICS
VAR_HIGHLIGHT = cvar.VAR_HIGHLIGHT
VAR_IMPERFECTION = cvar.VAR_IMPERFECTION
VAR_SPEED_FACTOR = cvar.VAR_SPEED_FACTOR
VAR_SPEED_DEVIATION = cvar.VAR_SPEED_DEVIATION
VAR_ROUTING_MODE = cvar.VAR_ROUTING_MODE
VAR_SPEED_WITHOUT_TRACI = cvar.VAR_SPEED_WITHOUT_TRACI
VAR_BEST_LANES = cvar.VAR_BEST_LANES
VAR_SPEEDSETMODE = cvar.VAR_SPEEDSETMODE
MOVE_TO_XY = cvar.MOVE_TO_XY
VAR_STOPSTATE = cvar.VAR_STOPSTATE
VAR_LANECHANGE_MODE = cvar.VAR_LANECHANGE_MODE
VAR_ALLOWED_SPEED = cvar.VAR_ALLOWED_SPEED
VAR_LANEPOSITION_LAT = cvar.VAR_LANEPOSITION_LAT
VAR_LATALIGNMENT = cvar.VAR_LATALIGNMENT
VAR_MAXSPEED_LAT = cvar.VAR_MAXSPEED_LAT
VAR_MINGAP_LAT = cvar.VAR_MINGAP_LAT
VAR_HEIGHT = cvar.VAR_HEIGHT
VAR_MASS = cvar.VAR_MASS
VAR_LINE = cvar.VAR_LINE
VAR_VIA = cvar.VAR_VIA
VAR_NEIGHBORS = cvar.VAR_NEIGHBORS
VAR_CO2EMISSION = cvar.VAR_CO2EMISSION
VAR_COEMISSION = cvar.VAR_COEMISSION
VAR_HCEMISSION = cvar.VAR_HCEMISSION
VAR_PMXEMISSION = cvar.VAR_PMXEMISSION
VAR_NOXEMISSION = cvar.VAR_NOXEMISSION
VAR_FUELCONSUMPTION = cvar.VAR_FUELCONSUMPTION
VAR_NOISEEMISSION = cvar.VAR_NOISEEMISSION
VAR_PERSON_NUMBER = cvar.VAR_PERSON_NUMBER
VAR_PERSON_CAPACITY = cvar.VAR_PERSON_CAPACITY
VAR_DEPARTURE = cvar.VAR_DEPARTURE
VAR_DEPART_DELAY = cvar.VAR_DEPART_DELAY
VAR_BOARDING_DURATION = cvar.VAR_BOARDING_DURATION
VAR_IMPATIENCE = cvar.VAR_IMPATIENCE
VAR_BUS_STOP_ID_LIST = cvar.VAR_BUS_STOP_ID_LIST
VAR_BUS_STOP_WAITING = cvar.VAR_BUS_STOP_WAITING
VAR_BUS_STOP_WAITING_IDS = cvar.VAR_BUS_STOP_WAITING_IDS
VAR_LEADER = cvar.VAR_LEADER
VAR_FOLLOWER = cvar.VAR_FOLLOWER
VAR_ROUTE_INDEX = cvar.VAR_ROUTE_INDEX
VAR_WAITING_TIME = cvar.VAR_WAITING_TIME
VAR_ACCUMULATED_WAITING_TIME = cvar.VAR_ACCUMULATED_WAITING_TIME
VAR_NEXT_TLS = cvar.VAR_NEXT_TLS
VAR_NEXT_STOPS = cvar.VAR_NEXT_STOPS
VAR_NEXT_STOPS2 = cvar.VAR_NEXT_STOPS2
VAR_NEXT_LINKS = cvar.VAR_NEXT_LINKS
VAR_ACCELERATION = cvar.VAR_ACCELERATION
VAR_ARRIVALPOS = cvar.VAR_ARRIVALPOS
VAR_ARRIVALLANE = cvar.VAR_ARRIVALLANE
VAR_ARRIVALSPEED = cvar.VAR_ARRIVALSPEED
CMD_MESSAGE = cvar.CMD_MESSAGE
VAR_TIME = cvar.VAR_TIME
VAR_TIME_STEP = cvar.VAR_TIME_STEP
VAR_ELECTRICITYCONSUMPTION = cvar.VAR_ELECTRICITYCONSUMPTION
VAR_LOADED_VEHICLES_NUMBER = cvar.VAR_LOADED_VEHICLES_NUMBER
VAR_LOADED_VEHICLES_IDS = cvar.VAR_LOADED_VEHICLES_IDS
VAR_DEPARTED_VEHICLES_NUMBER = cvar.VAR_DEPARTED_VEHICLES_NUMBER
VAR_DEPARTED_VEHICLES_IDS = cvar.VAR_DEPARTED_VEHICLES_IDS
VAR_TELEPORT_STARTING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_STARTING_VEHICLES_NUMBER
VAR_TELEPORT_STARTING_VEHICLES_IDS = cvar.VAR_TELEPORT_STARTING_VEHICLES_IDS
VAR_TELEPORT_ENDING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_ENDING_VEHICLES_NUMBER
VAR_TELEPORT_ENDING_VEHICLES_IDS = cvar.VAR_TELEPORT_ENDING_VEHICLES_IDS
VAR_ARRIVED_VEHICLES_NUMBER = cvar.VAR_ARRIVED_VEHICLES_NUMBER
VAR_ARRIVED_VEHICLES_IDS = cvar.VAR_ARRIVED_VEHICLES_IDS
VAR_DELTA_T = cvar.VAR_DELTA_T
VAR_NET_BOUNDING_BOX = cvar.VAR_NET_BOUNDING_BOX
VAR_MIN_EXPECTED_VEHICLES = cvar.VAR_MIN_EXPECTED_VEHICLES
VAR_DEPARTED_PERSONS_NUMBER = cvar.VAR_DEPARTED_PERSONS_NUMBER
VAR_DEPARTED_PERSONS_IDS = cvar.VAR_DEPARTED_PERSONS_IDS
VAR_ARRIVED_PERSONS_NUMBER = cvar.VAR_ARRIVED_PERSONS_NUMBER
VAR_ARRIVED_PERSONS_IDS = cvar.VAR_ARRIVED_PERSONS_IDS
VAR_STOP_STARTING_VEHICLES_NUMBER = cvar.VAR_STOP_STARTING_VEHICLES_NUMBER
VAR_STOP_STARTING_VEHICLES_IDS = cvar.VAR_STOP_STARTING_VEHICLES_IDS
VAR_STOP_ENDING_VEHICLES_NUMBER = cvar.VAR_STOP_ENDING_VEHICLES_NUMBER
VAR_STOP_ENDING_VEHICLES_IDS = cvar.VAR_STOP_ENDING_VEHICLES_IDS
VAR_PARKING_STARTING_VEHICLES_NUMBER = cvar.VAR_PARKING_STARTING_VEHICLES_NUMBER
VAR_PARKING_STARTING_VEHICLES_IDS = cvar.VAR_PARKING_STARTING_VEHICLES_IDS
VAR_PARKING_MANEUVERING_VEHICLES_NUMBER = cvar.VAR_PARKING_MANEUVERING_VEHICLES_NUMBER
VAR_PARKING_MANEUVERING_VEHICLES_IDS = cvar.VAR_PARKING_MANEUVERING_VEHICLES_IDS
VAR_PARKING_ENDING_VEHICLES_NUMBER = cvar.VAR_PARKING_ENDING_VEHICLES_NUMBER
VAR_PARKING_ENDING_VEHICLES_IDS = cvar.VAR_PARKING_ENDING_VEHICLES_IDS
VAR_COLLIDING_VEHICLES_NUMBER = cvar.VAR_COLLIDING_VEHICLES_NUMBER
VAR_COLLIDING_VEHICLES_IDS = cvar.VAR_COLLIDING_VEHICLES_IDS
VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER
VAR_EMERGENCYSTOPPING_VEHICLES_IDS = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_IDS
VAR_SCALE = cvar.VAR_SCALE
CMD_CLEAR_PENDING_VEHICLES = cvar.CMD_CLEAR_PENDING_VEHICLES
VAR_PENDING_VEHICLES = cvar.VAR_PENDING_VEHICLES
VAR_OPTION = cvar.VAR_OPTION
CMD_SAVE_SIMSTATE = cvar.CMD_SAVE_SIMSTATE
CMD_LOAD_SIMSTATE = cvar.CMD_LOAD_SIMSTATE
VAR_COLLISIONS = cvar.VAR_COLLISIONS
VAR_LOADED_LIST = cvar.VAR_LOADED_LIST
VAR_TELEPORTING_LIST = cvar.VAR_TELEPORTING_LIST
VAR_PARAMETER = cvar.VAR_PARAMETER
VAR_PARAMETER_WITH_KEY = cvar.VAR_PARAMETER_WITH_KEY
ADD = cvar.ADD
REMOVE = cvar.REMOVE
COPY = cvar.COPY
POSITION_CONVERSION = cvar.POSITION_CONVERSION
DISTANCE_REQUEST = cvar.DISTANCE_REQUEST
VAR_DISTANCE = cvar.VAR_DISTANCE
ADD_FULL = cvar.ADD_FULL
FIND_ROUTE = cvar.FIND_ROUTE
FIND_INTERMODAL_ROUTE = cvar.FIND_INTERMODAL_ROUTE
CMD_REROUTE_TRAVELTIME = cvar.CMD_REROUTE_TRAVELTIME
CMD_REROUTE_EFFORT = cvar.CMD_REROUTE_EFFORT
VAR_ROUTE_VALID = cvar.VAR_ROUTE_VALID
VAR_STAGE = cvar.VAR_STAGE
VAR_NEXT_EDGE = cvar.VAR_NEXT_EDGE
VAR_STAGES_REMAINING = cvar.VAR_STAGES_REMAINING
VAR_VEHICLE = cvar.VAR_VEHICLE
APPEND_STAGE = cvar.APPEND_STAGE
REPLACE_STAGE = cvar.REPLACE_STAGE
REMOVE_STAGE = cvar.REMOVE_STAGE
VAR_TAXI_RESERVATIONS = cvar.VAR_TAXI_RESERVATIONS
SPLIT_TAXI_RESERVATIONS = cvar.SPLIT_TAXI_RESERVATIONS
VAR_SAMPLE_LAST = cvar.VAR_SAMPLE_LAST
VAR_SAMPLE_CURRENT = cvar.VAR_SAMPLE_CURRENT
VAR_VIEW_ZOOM = cvar.VAR_VIEW_ZOOM
VAR_VIEW_OFFSET = cvar.VAR_VIEW_OFFSET
VAR_VIEW_SCHEMA = cvar.VAR_VIEW_SCHEMA
VAR_VIEW_BOUNDARY = cvar.VAR_VIEW_BOUNDARY
VAR_SELECT = cvar.VAR_SELECT
VAR_SCREENSHOT = cvar.VAR_SCREENSHOT
VAR_TRACK_VEHICLE = cvar.VAR_TRACK_VEHICLE
VAR_HAS_VIEW = cvar.VAR_HAS_VIEW
VAR_CS_POWER = cvar.VAR_CS_POWER
VAR_CS_EFFICIENCY = cvar.VAR_CS_EFFICIENCY
VAR_CS_CHARGE_IN_TRANSIT = cvar.VAR_CS_CHARGE_IN_TRANSIT
VAR_CS_CHARGE_DELAY = cvar.VAR_CS_CHARGE_DELAY
VAR_ACCESS_BADGE = cvar.VAR_ACCESS_BADGE
trafficlight.DOMAIN_ID = _libsumo.cvar.trafficlight_DOMAIN_ID

class vehicletype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLength(typeID):
        return _libsumo.vehicletype_getLength(typeID)

    @staticmethod
    def getMaxSpeed(typeID):
        return _libsumo.vehicletype_getMaxSpeed(typeID)

    @staticmethod
    def getVehicleClass(typeID):
        return _libsumo.vehicletype_getVehicleClass(typeID)

    @staticmethod
    def getSpeedFactor(typeID):
        return _libsumo.vehicletype_getSpeedFactor(typeID)

    @staticmethod
    def getAccel(typeID):
        return _libsumo.vehicletype_getAccel(typeID)

    @staticmethod
    def getDecel(typeID):
        return _libsumo.vehicletype_getDecel(typeID)

    @staticmethod
    def getEmergencyDecel(typeID):
        return _libsumo.vehicletype_getEmergencyDecel(typeID)

    @staticmethod
    def getApparentDecel(typeID):
        return _libsumo.vehicletype_getApparentDecel(typeID)

    @staticmethod
    def getImperfection(typeID):
        return _libsumo.vehicletype_getImperfection(typeID)

    @staticmethod
    def getTau(typeID):
        return _libsumo.vehicletype_getTau(typeID)

    @staticmethod
    def getEmissionClass(typeID):
        return _libsumo.vehicletype_getEmissionClass(typeID)

    @staticmethod
    def getShapeClass(typeID):
        return _libsumo.vehicletype_getShapeClass(typeID)

    @staticmethod
    def getMinGap(typeID):
        return _libsumo.vehicletype_getMinGap(typeID)

    @staticmethod
    def getWidth(typeID):
        return _libsumo.vehicletype_getWidth(typeID)

    @staticmethod
    def getHeight(typeID):
        return _libsumo.vehicletype_getHeight(typeID)

    @staticmethod
    def getMass(typeID):
        return _libsumo.vehicletype_getMass(typeID)

    @staticmethod
    def getColor(typeID):
        return _libsumo.vehicletype_getColor(typeID)

    @staticmethod
    def getMinGapLat(typeID):
        return _libsumo.vehicletype_getMinGapLat(typeID)

    @staticmethod
    def getMaxSpeedLat(typeID):
        return _libsumo.vehicletype_getMaxSpeedLat(typeID)

    @staticmethod
    def getLateralAlignment(typeID):
        return _libsumo.vehicletype_getLateralAlignment(typeID)

    @staticmethod
    def getPersonCapacity(typeID):
        return _libsumo.vehicletype_getPersonCapacity(typeID)

    @staticmethod
    def getActionStepLength(typeID):
        return _libsumo.vehicletype_getActionStepLength(typeID)

    @staticmethod
    def getSpeedDeviation(typeID):
        return _libsumo.vehicletype_getSpeedDeviation(typeID)

    @staticmethod
    def getBoardingDuration(typeID):
        return _libsumo.vehicletype_getBoardingDuration(typeID)

    @staticmethod
    def getImpatience(typeID):
        return _libsumo.vehicletype_getImpatience(typeID)

    @staticmethod
    def getIDList():
        return _libsumo.vehicletype_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.vehicletype_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.vehicletype_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.vehicletype_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.vehicletype_setParameter(objectID, key, value)

    @staticmethod
    def setLength(typeID, length):
        return _libsumo.vehicletype_setLength(typeID, length)

    @staticmethod
    def setMaxSpeed(typeID, speed):
        return _libsumo.vehicletype_setMaxSpeed(typeID, speed)

    @staticmethod
    def setVehicleClass(typeID, clazz):
        return _libsumo.vehicletype_setVehicleClass(typeID, clazz)

    @staticmethod
    def setSpeedFactor(typeID, factor):
        return _libsumo.vehicletype_setSpeedFactor(typeID, factor)

    @staticmethod
    def setAccel(typeID, accel):
        return _libsumo.vehicletype_setAccel(typeID, accel)

    @staticmethod
    def setDecel(typeID, decel):
        return _libsumo.vehicletype_setDecel(typeID, decel)

    @staticmethod
    def setEmergencyDecel(typeID, decel):
        return _libsumo.vehicletype_setEmergencyDecel(typeID, decel)

    @staticmethod
    def setApparentDecel(typeID, decel):
        return _libsumo.vehicletype_setApparentDecel(typeID, decel)

    @staticmethod
    def setImperfection(typeID, imperfection):
        return _libsumo.vehicletype_setImperfection(typeID, imperfection)

    @staticmethod
    def setTau(typeID, tau):
        return _libsumo.vehicletype_setTau(typeID, tau)

    @staticmethod
    def setEmissionClass(typeID, clazz):
        return _libsumo.vehicletype_setEmissionClass(typeID, clazz)

    @staticmethod
    def setShapeClass(typeID, shapeClass):
        return _libsumo.vehicletype_setShapeClass(typeID, shapeClass)

    @staticmethod
    def setWidth(typeID, width):
        return _libsumo.vehicletype_setWidth(typeID, width)

    @staticmethod
    def setHeight(typeID, height):
        return _libsumo.vehicletype_setHeight(typeID, height)

    @staticmethod
    def setMass(typeID, mass):
        return _libsumo.vehicletype_setMass(typeID, mass)

    @staticmethod
    def setColor(typeID, color):
        return _libsumo.vehicletype_setColor(typeID, color)

    @staticmethod
    def setMinGap(typeID, minGap):
        return _libsumo.vehicletype_setMinGap(typeID, minGap)

    @staticmethod
    def setMinGapLat(typeID, minGapLat):
        return _libsumo.vehicletype_setMinGapLat(typeID, minGapLat)

    @staticmethod
    def setMaxSpeedLat(typeID, speed):
        return _libsumo.vehicletype_setMaxSpeedLat(typeID, speed)

    @staticmethod
    def setLateralAlignment(typeID, latAlignment):
        return _libsumo.vehicletype_setLateralAlignment(typeID, latAlignment)

    @staticmethod
    def setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
        return _libsumo.vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset)

    @staticmethod
    def setBoardingDuration(typeID, boardingDuration):
        return _libsumo.vehicletype_setBoardingDuration(typeID, boardingDuration)

    @staticmethod
    def setImpatience(typeID, impatience):
        return _libsumo.vehicletype_setImpatience(typeID, impatience)

    @staticmethod
    def copy(origTypeID, newTypeID):
        return _libsumo.vehicletype_copy(origTypeID, newTypeID)

    @staticmethod
    def setSpeedDeviation(typeID, deviation):
        return _libsumo.vehicletype_setSpeedDeviation(typeID, deviation)

    @staticmethod
    def getScale(typeID):
        return _libsumo.vehicletype_getScale(typeID)

    @staticmethod
    def setScale(typeID, value):
        return _libsumo.vehicletype_setScale(typeID, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.vehicletype_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.vehicletype_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.vehicletype_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.vehicletype_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.vehicletype_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.vehicletype_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.vehicletype_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.vehicletype_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.vehicletype_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.vehicletype_domainID()
    __swig_destroy__ = _libsumo.delete_vehicletype

# Register vehicletype in _libsumo:
_libsumo.vehicletype_swigregister(vehicletype)
vehicletype.DOMAIN_ID = _libsumo.cvar.vehicletype_DOMAIN_ID

class vehicle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSpeed(vehID):
        return _libsumo.vehicle_getSpeed(vehID)

    @staticmethod
    def getLateralSpeed(vehID):
        return _libsumo.vehicle_getLateralSpeed(vehID)

    @staticmethod
    def getAcceleration(vehID):
        return _libsumo.vehicle_getAcceleration(vehID)

    @staticmethod
    def getSpeedWithoutTraCI(vehID):
        return _libsumo.vehicle_getSpeedWithoutTraCI(vehID)

    @staticmethod
    def getPosition(vehID, includeZ=False):
        return _libsumo.vehicle_getPosition(vehID, includeZ)

    @staticmethod
    def getPosition3D(vehID):
        return _libsumo.vehicle_getPosition3D(vehID)

    @staticmethod
    def getAngle(vehID):
        return _libsumo.vehicle_getAngle(vehID)

    @staticmethod
    def getSlope(vehID):
        return _libsumo.vehicle_getSlope(vehID)

    @staticmethod
    def getRoadID(vehID):
        return _libsumo.vehicle_getRoadID(vehID)

    @staticmethod
    def getLaneID(vehID):
        return _libsumo.vehicle_getLaneID(vehID)

    @staticmethod
    def getLaneIndex(vehID):
        return _libsumo.vehicle_getLaneIndex(vehID)

    @staticmethod
    def getSegmentID(vehID):
        return _libsumo.vehicle_getSegmentID(vehID)

    @staticmethod
    def getSegmentIndex(vehID):
        return _libsumo.vehicle_getSegmentIndex(vehID)

    @staticmethod
    def getTypeID(vehID):
        return _libsumo.vehicle_getTypeID(vehID)

    @staticmethod
    def getRouteID(vehID):
        return _libsumo.vehicle_getRouteID(vehID)

    @staticmethod
    def getDeparture(vehID):
        return _libsumo.vehicle_getDeparture(vehID)

    @staticmethod
    def getDepartDelay(vehID):
        return _libsumo.vehicle_getDepartDelay(vehID)

    @staticmethod
    def getRouteIndex(vehID):
        return _libsumo.vehicle_getRouteIndex(vehID)

    @staticmethod
    def getLanePosition(vehID):
        return _libsumo.vehicle_getLanePosition(vehID)

    @staticmethod
    def getLateralLanePosition(vehID):
        return _libsumo.vehicle_getLateralLanePosition(vehID)

    @staticmethod
    def getCO2Emission(vehID):
        return _libsumo.vehicle_getCO2Emission(vehID)

    @staticmethod
    def getCOEmission(vehID):
        return _libsumo.vehicle_getCOEmission(vehID)

    @staticmethod
    def getHCEmission(vehID):
        return _libsumo.vehicle_getHCEmission(vehID)

    @staticmethod
    def getPMxEmission(vehID):
        return _libsumo.vehicle_getPMxEmission(vehID)

    @staticmethod
    def getNOxEmission(vehID):
        return _libsumo.vehicle_getNOxEmission(vehID)

    @staticmethod
    def getFuelConsumption(vehID):
        return _libsumo.vehicle_getFuelConsumption(vehID)

    @staticmethod
    def getNoiseEmission(vehID):
        return _libsumo.vehicle_getNoiseEmission(vehID)

    @staticmethod
    def getElectricityConsumption(vehID):
        return _libsumo.vehicle_getElectricityConsumption(vehID)

    @staticmethod
    def getPersonNumber(vehID):
        return _libsumo.vehicle_getPersonNumber(vehID)

    @staticmethod
    def getPersonIDList(vehID):
        return _libsumo.vehicle_getPersonIDList(vehID)

    @staticmethod
    def getLeader(vehID, dist=100.):
        val = _libsumo.vehicle_getLeader(vehID, dist)

        if val[0] == "" and vehicle._legacyGetLeader:
            return None


        return val

    @staticmethod
    def getFollower(vehID, dist=0.):
        return _libsumo.vehicle_getFollower(vehID, dist)

    @staticmethod
    def getJunctionFoes(vehID, dist=0.):
        return _libsumo.vehicle_getJunctionFoes(vehID, dist)

    @staticmethod
    def getWaitingTime(vehID):
        return _libsumo.vehicle_getWaitingTime(vehID)

    @staticmethod
    def getAccumulatedWaitingTime(vehID):
        return _libsumo.vehicle_getAccumulatedWaitingTime(vehID)

    @staticmethod
    def getAdaptedTraveltime(vehID, time, edgeID):
        return _libsumo.vehicle_getAdaptedTraveltime(vehID, time, edgeID)

    @staticmethod
    def getEffort(vehID, time, edgeID):
        return _libsumo.vehicle_getEffort(vehID, time, edgeID)

    @staticmethod
    def isRouteValid(vehID):
        return _libsumo.vehicle_isRouteValid(vehID)

    @staticmethod
    def getRoute(vehID):
        return _libsumo.vehicle_getRoute(vehID)

    @staticmethod
    def getSignals(vehID):
        return _libsumo.vehicle_getSignals(vehID)

    @staticmethod
    def getBestLanes(vehID):
        return _libsumo.vehicle_getBestLanes(vehID)

    @staticmethod
    def getNextTLS(vehID):
        return _libsumo.vehicle_getNextTLS(vehID)

    @staticmethod
    def getNextStops(vehID):
        return _libsumo.vehicle_getNextStops(vehID)

    @staticmethod
    def getNextLinks(vehID):
        return _libsumo.vehicle_getNextLinks(vehID)

    @staticmethod
    def getStops(vehID, limit=0):
        return _libsumo.vehicle_getStops(vehID, limit)

    @staticmethod
    def getStopState(vehID):
        return _libsumo.vehicle_getStopState(vehID)

    @staticmethod
    def getStopParameter(vehID, nextStopIndex, param, customParam=False):
        return _libsumo.vehicle_getStopParameter(vehID, nextStopIndex, param, customParam)

    @staticmethod
    def getDistance(vehID):
        return _libsumo.vehicle_getDistance(vehID)

    @staticmethod
    def getDrivingDistance(vehID, edgeID, pos, laneIndex=0):
        return _libsumo.vehicle_getDrivingDistance(vehID, edgeID, pos, laneIndex)

    @staticmethod
    def getDrivingDistance2D(vehID, x, y):
        return _libsumo.vehicle_getDrivingDistance2D(vehID, x, y)

    @staticmethod
    def getAllowedSpeed(vehID):
        return _libsumo.vehicle_getAllowedSpeed(vehID)

    @staticmethod
    def getSpeedMode(vehID):
        return _libsumo.vehicle_getSpeedMode(vehID)

    @staticmethod
    def getLaneChangeMode(vehID):
        return _libsumo.vehicle_getLaneChangeMode(vehID)

    @staticmethod
    def getRoutingMode(vehID):
        return _libsumo.vehicle_getRoutingMode(vehID)

    @staticmethod
    def getLine(vehID):
        return _libsumo.vehicle_getLine(vehID)

    @staticmethod
    def getVia(vehID):
        return _libsumo.vehicle_getVia(vehID)

    @staticmethod
    def getLaneChangeState(vehID, direction):
        return _libsumo.vehicle_getLaneChangeState(vehID, direction)

    @staticmethod
    def getLastActionTime(vehID):
        return _libsumo.vehicle_getLastActionTime(vehID)

    @staticmethod
    def getNeighbors(vehID, mode):
        return _libsumo.vehicle_getNeighbors(vehID, mode)

    @staticmethod
    def getFollowSpeed(*args, **kwargs):
        return _libsumo.vehicle_getFollowSpeed(*args, **kwargs)

    @staticmethod
    def getSecureGap(*args, **kwargs):
        return _libsumo.vehicle_getSecureGap(*args, **kwargs)

    @staticmethod
    def getStopSpeed(vehID, speed, gap):
        return _libsumo.vehicle_getStopSpeed(vehID, speed, gap)

    @staticmethod
    def getStopDelay(vehID):
        return _libsumo.vehicle_getStopDelay(vehID)

    @staticmethod
    def getStopArrivalDelay(vehID):
        return _libsumo.vehicle_getStopArrivalDelay(vehID)

    @staticmethod
    def getTimeLoss(vehID):
        return _libsumo.vehicle_getTimeLoss(vehID)

    @staticmethod
    def getTaxiFleet(taxiState=0):
        return _libsumo.vehicle_getTaxiFleet(taxiState)

    @staticmethod
    def getLoadedIDList():
        return _libsumo.vehicle_getLoadedIDList()

    @staticmethod
    def getTeleportingIDList():
        return _libsumo.vehicle_getTeleportingIDList()

    @staticmethod
    def getIDList():
        return _libsumo.vehicle_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.vehicle_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.vehicle_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.vehicle_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.vehicle_setParameter(objectID, key, value)

    @staticmethod
    def getLength(typeID):
        return _libsumo.vehicle_getLength(typeID)

    @staticmethod
    def getMaxSpeed(typeID):
        return _libsumo.vehicle_getMaxSpeed(typeID)

    @staticmethod
    def getVehicleClass(typeID):
        return _libsumo.vehicle_getVehicleClass(typeID)

    @staticmethod
    def getSpeedFactor(typeID):
        return _libsumo.vehicle_getSpeedFactor(typeID)

    @staticmethod
    def getAccel(typeID):
        return _libsumo.vehicle_getAccel(typeID)

    @staticmethod
    def getDecel(typeID):
        return _libsumo.vehicle_getDecel(typeID)

    @staticmethod
    def getEmergencyDecel(typeID):
        return _libsumo.vehicle_getEmergencyDecel(typeID)

    @staticmethod
    def getApparentDecel(typeID):
        return _libsumo.vehicle_getApparentDecel(typeID)

    @staticmethod
    def getImperfection(typeID):
        return _libsumo.vehicle_getImperfection(typeID)

    @staticmethod
    def getTau(typeID):
        return _libsumo.vehicle_getTau(typeID)

    @staticmethod
    def getEmissionClass(typeID):
        return _libsumo.vehicle_getEmissionClass(typeID)

    @staticmethod
    def getShapeClass(typeID):
        return _libsumo.vehicle_getShapeClass(typeID)

    @staticmethod
    def getMinGap(typeID):
        return _libsumo.vehicle_getMinGap(typeID)

    @staticmethod
    def getWidth(typeID):
        return _libsumo.vehicle_getWidth(typeID)

    @staticmethod
    def getHeight(typeID):
        return _libsumo.vehicle_getHeight(typeID)

    @staticmethod
    def getMass(typeID):
        return _libsumo.vehicle_getMass(typeID)

    @staticmethod
    def getColor(typeID):
        return _libsumo.vehicle_getColor(typeID)

    @staticmethod
    def getMinGapLat(typeID):
        return _libsumo.vehicle_getMinGapLat(typeID)

    @staticmethod
    def getMaxSpeedLat(typeID):
        return _libsumo.vehicle_getMaxSpeedLat(typeID)

    @staticmethod
    def getLateralAlignment(typeID):
        return _libsumo.vehicle_getLateralAlignment(typeID)

    @staticmethod
    def getPersonCapacity(typeID):
        return _libsumo.vehicle_getPersonCapacity(typeID)

    @staticmethod
    def getActionStepLength(typeID):
        return _libsumo.vehicle_getActionStepLength(typeID)

    @staticmethod
    def getSpeedDeviation(typeID):
        return _libsumo.vehicle_getSpeedDeviation(typeID)

    @staticmethod
    def getBoardingDuration(typeID):
        return _libsumo.vehicle_getBoardingDuration(typeID)

    @staticmethod
    def getImpatience(typeID):
        return _libsumo.vehicle_getImpatience(typeID)

    @staticmethod
    def setStop(*args, **kwargs):
        return _libsumo.vehicle_setStop(*args, **kwargs)

    @staticmethod
    def replaceStop(*args, **kwargs):
        return _libsumo.vehicle_replaceStop(*args, **kwargs)

    @staticmethod
    def insertStop(*args, **kwargs):
        return _libsumo.vehicle_insertStop(*args, **kwargs)

    @staticmethod
    def setStopParameter(vehID, nextStopIndex, param, value, customParam=False):
        return _libsumo.vehicle_setStopParameter(vehID, nextStopIndex, param, value, customParam)

    @staticmethod
    def rerouteParkingArea(vehID, parkingAreaID):
        return _libsumo.vehicle_rerouteParkingArea(vehID, parkingAreaID)

    @staticmethod
    def resume(vehID):
        return _libsumo.vehicle_resume(vehID)

    @staticmethod
    def add(*args, **kwargs):

        args = [str(a) for a in args[:13]] + list(args[13:])
        for key, val in kwargs.items():
            if key not in ("personCapacity", "personNumber"):
                kwargs[key] = str(val)


        return _libsumo.vehicle_add(*args, **kwargs)

    @staticmethod
    def changeTarget(vehID, edgeID):
        return _libsumo.vehicle_changeTarget(vehID, edgeID)

    @staticmethod
    def changeLane(vehID, laneIndex, duration):
        return _libsumo.vehicle_changeLane(vehID, laneIndex, duration)

    @staticmethod
    def changeLaneRelative(vehID, indexOffset, duration):
        return _libsumo.vehicle_changeLaneRelative(vehID, indexOffset, duration)

    @staticmethod
    def changeSublane(vehID, latDist):
        return _libsumo.vehicle_changeSublane(vehID, latDist)

    @staticmethod
    def slowDown(vehID, speed, duration):
        return _libsumo.vehicle_slowDown(vehID, speed, duration)

    @staticmethod
    def openGap(*args, **kwargs):
        return _libsumo.vehicle_openGap(*args, **kwargs)

    @staticmethod
    def deactivateGapControl(vehID):
        return _libsumo.vehicle_deactivateGapControl(vehID)

    @staticmethod
    def requestToC(vehID, leadTime):
        return _libsumo.vehicle_requestToC(vehID, leadTime)

    @staticmethod
    def setSpeed(vehID, speed):
        return _libsumo.vehicle_setSpeed(vehID, speed)

    @staticmethod
    def setAcceleration(vehID, acceleration, duration):
        return _libsumo.vehicle_setAcceleration(vehID, acceleration, duration)

    @staticmethod
    def setPreviousSpeed(*args, **kwargs):
        return _libsumo.vehicle_setPreviousSpeed(*args, **kwargs)

    @staticmethod
    def setSpeedMode(vehID, speedMode):
        return _libsumo.vehicle_setSpeedMode(vehID, speedMode)

    @staticmethod
    def setLaneChangeMode(vehID, laneChangeMode):
        return _libsumo.vehicle_setLaneChangeMode(vehID, laneChangeMode)

    @staticmethod
    def setRoutingMode(vehID, routingMode):
        return _libsumo.vehicle_setRoutingMode(vehID, routingMode)

    @staticmethod
    def setType(vehID, typeID):
        return _libsumo.vehicle_setType(vehID, typeID)

    @staticmethod
    def setRouteID(vehID, routeID):
        return _libsumo.vehicle_setRouteID(vehID, routeID)

    @staticmethod
    def setRoute(*args):
        return _libsumo.vehicle_setRoute(*args)

    @staticmethod
    def setLateralLanePosition(vehID, posLat):
        return _libsumo.vehicle_setLateralLanePosition(vehID, posLat)

    @staticmethod
    def updateBestLanes(vehID):
        return _libsumo.vehicle_updateBestLanes(vehID)

    @staticmethod
    def setAdaptedTraveltime(*args, **kwargs):
        return _libsumo.vehicle_setAdaptedTraveltime(*args, **kwargs)

    @staticmethod
    def setEffort(*args, **kwargs):
        return _libsumo.vehicle_setEffort(*args, **kwargs)

    @staticmethod
    def rerouteTraveltime(vehID, currentTravelTimes=True):
        return _libsumo.vehicle_rerouteTraveltime(vehID, currentTravelTimes)

    @staticmethod
    def rerouteEffort(vehID):
        return _libsumo.vehicle_rerouteEffort(vehID)

    @staticmethod
    def setSignals(vehID, signals):
        return _libsumo.vehicle_setSignals(vehID, signals)

    @staticmethod
    def moveTo(*args, **kwargs):
        return _libsumo.vehicle_moveTo(*args, **kwargs)

    @staticmethod
    def moveToXY(*args, **kwargs):
        return _libsumo.vehicle_moveToXY(*args, **kwargs)

    @staticmethod
    def remove(*args, **kwargs):
        return _libsumo.vehicle_remove(*args, **kwargs)

    @staticmethod
    def setLine(vehID, line):
        return _libsumo.vehicle_setLine(vehID, line)

    @staticmethod
    def setVia(vehID, edgeList):
        return _libsumo.vehicle_setVia(vehID, edgeList)

    @staticmethod
    def highlight(*args, **kwargs):
        return _libsumo.vehicle_highlight(*args, **kwargs)

    @staticmethod
    def dispatchTaxi(vehID, reservations):
        return _libsumo.vehicle_dispatchTaxi(vehID, reservations)

    @staticmethod
    def setLength(typeID, length):
        return _libsumo.vehicle_setLength(typeID, length)

    @staticmethod
    def setMaxSpeed(typeID, speed):
        return _libsumo.vehicle_setMaxSpeed(typeID, speed)

    @staticmethod
    def setVehicleClass(typeID, clazz):
        return _libsumo.vehicle_setVehicleClass(typeID, clazz)

    @staticmethod
    def setSpeedFactor(typeID, factor):
        return _libsumo.vehicle_setSpeedFactor(typeID, factor)

    @staticmethod
    def setAccel(typeID, accel):
        return _libsumo.vehicle_setAccel(typeID, accel)

    @staticmethod
    def setDecel(typeID, decel):
        return _libsumo.vehicle_setDecel(typeID, decel)

    @staticmethod
    def setEmergencyDecel(typeID, decel):
        return _libsumo.vehicle_setEmergencyDecel(typeID, decel)

    @staticmethod
    def setApparentDecel(typeID, decel):
        return _libsumo.vehicle_setApparentDecel(typeID, decel)

    @staticmethod
    def setImperfection(typeID, imperfection):
        return _libsumo.vehicle_setImperfection(typeID, imperfection)

    @staticmethod
    def setTau(typeID, tau):
        return _libsumo.vehicle_setTau(typeID, tau)

    @staticmethod
    def setEmissionClass(typeID, clazz):
        return _libsumo.vehicle_setEmissionClass(typeID, clazz)

    @staticmethod
    def setShapeClass(typeID, shapeClass):
        return _libsumo.vehicle_setShapeClass(typeID, shapeClass)

    @staticmethod
    def setWidth(typeID, width):
        return _libsumo.vehicle_setWidth(typeID, width)

    @staticmethod
    def setHeight(typeID, height):
        return _libsumo.vehicle_setHeight(typeID, height)

    @staticmethod
    def setMass(typeID, mass):
        return _libsumo.vehicle_setMass(typeID, mass)

    @staticmethod
    def setColor(typeID, color):
        return _libsumo.vehicle_setColor(typeID, color)

    @staticmethod
    def setMinGap(typeID, minGap):
        return _libsumo.vehicle_setMinGap(typeID, minGap)

    @staticmethod
    def setMinGapLat(typeID, minGapLat):
        return _libsumo.vehicle_setMinGapLat(typeID, minGapLat)

    @staticmethod
    def setMaxSpeedLat(typeID, speed):
        return _libsumo.vehicle_setMaxSpeedLat(typeID, speed)

    @staticmethod
    def setLateralAlignment(typeID, latAlignment):
        return _libsumo.vehicle_setLateralAlignment(typeID, latAlignment)

    @staticmethod
    def setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
        return _libsumo.vehicle_setActionStepLength(typeID, actionStepLength, resetActionOffset)

    @staticmethod
    def setBoardingDuration(typeID, boardingDuration):
        return _libsumo.vehicle_setBoardingDuration(typeID, boardingDuration)

    @staticmethod
    def setImpatience(typeID, impatience):
        return _libsumo.vehicle_setImpatience(typeID, impatience)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.vehicle_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.vehicle_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.vehicle_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.vehicle_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.vehicle_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.vehicle_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.vehicle_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.vehicle_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.vehicle_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.vehicle_domainID()

    @staticmethod
    def subscribeLeader(*args, **kwargs):
        return _libsumo.vehicle_subscribeLeader(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterLanes(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterLanes(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterNoOpposite():
        return _libsumo.vehicle_addSubscriptionFilterNoOpposite()

    @staticmethod
    def addSubscriptionFilterDownstreamDistance(dist):
        return _libsumo.vehicle_addSubscriptionFilterDownstreamDistance(dist)

    @staticmethod
    def addSubscriptionFilterUpstreamDistance(dist):
        return _libsumo.vehicle_addSubscriptionFilterUpstreamDistance(dist)

    @staticmethod
    def addSubscriptionFilterCFManeuver(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterCFManeuver(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterLCManeuver(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterLCManeuver(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterLeadFollow(lanes):
        return _libsumo.vehicle_addSubscriptionFilterLeadFollow(lanes)

    @staticmethod
    def addSubscriptionFilterTurn(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterTurn(*args, **kwargs)

    @staticmethod
    def addSubscriptionFilterVClass(vClasses):
        return _libsumo.vehicle_addSubscriptionFilterVClass(vClasses)

    @staticmethod
    def addSubscriptionFilterVType(vTypes):
        return _libsumo.vehicle_addSubscriptionFilterVType(vTypes)

    @staticmethod
    def addSubscriptionFilterFieldOfVision(openingAngle):
        return _libsumo.vehicle_addSubscriptionFilterFieldOfVision(openingAngle)

    @staticmethod
    def addSubscriptionFilterLateralDistance(*args, **kwargs):
        return _libsumo.vehicle_addSubscriptionFilterLateralDistance(*args, **kwargs)
    __swig_destroy__ = _libsumo.delete_vehicle

# Register vehicle in _libsumo:
_libsumo.vehicle_swigregister(vehicle)
vehicle.DOMAIN_ID = _libsumo.cvar.vehicle_DOMAIN_ID

class person(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSpeed(personID):
        return _libsumo.person_getSpeed(personID)

    @staticmethod
    def getPosition(personID, includeZ=False):
        return _libsumo.person_getPosition(personID, includeZ)

    @staticmethod
    def getPosition3D(personID):
        return _libsumo.person_getPosition3D(personID)

    @staticmethod
    def getRoadID(personID):
        return _libsumo.person_getRoadID(personID)

    @staticmethod
    def getLaneID(personID):
        return _libsumo.person_getLaneID(personID)

    @staticmethod
    def getTypeID(personID):
        return _libsumo.person_getTypeID(personID)

    @staticmethod
    def getWaitingTime(personID):
        return _libsumo.person_getWaitingTime(personID)

    @staticmethod
    def getNextEdge(personID):
        return _libsumo.person_getNextEdge(personID)

    @staticmethod
    def getVehicle(personID):
        return _libsumo.person_getVehicle(personID)

    @staticmethod
    def getRemainingStages(personID):
        return _libsumo.person_getRemainingStages(personID)

    @staticmethod
    def getStage(personID, nextStageIndex=0):
        return _libsumo.person_getStage(personID, nextStageIndex)

    @staticmethod
    def getEdges(personID, nextStageIndex=0):
        return _libsumo.person_getEdges(personID, nextStageIndex)

    @staticmethod
    def getAngle(personID):
        return _libsumo.person_getAngle(personID)

    @staticmethod
    def getSlope(personID):
        return _libsumo.person_getSlope(personID)

    @staticmethod
    def getLanePosition(personID):
        return _libsumo.person_getLanePosition(personID)

    @staticmethod
    def getWalkingDistance(personID, edgeID, pos, laneIndex=0):
        return _libsumo.person_getWalkingDistance(personID, edgeID, pos, laneIndex)

    @staticmethod
    def getWalkingDistance2D(personID, x, y):
        return _libsumo.person_getWalkingDistance2D(personID, x, y)

    @staticmethod
    def getTaxiReservations(onlyNew=0):
        return _libsumo.person_getTaxiReservations(onlyNew)

    @staticmethod
    def splitTaxiReservation(reservationID, personIDs):
        return _libsumo.person_splitTaxiReservation(reservationID, personIDs)

    @staticmethod
    def getIDList():
        return _libsumo.person_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.person_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.person_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.person_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.person_setParameter(objectID, key, value)

    @staticmethod
    def getLength(typeID):
        return _libsumo.person_getLength(typeID)

    @staticmethod
    def getMaxSpeed(typeID):
        return _libsumo.person_getMaxSpeed(typeID)

    @staticmethod
    def getVehicleClass(typeID):
        return _libsumo.person_getVehicleClass(typeID)

    @staticmethod
    def getSpeedFactor(typeID):
        return _libsumo.person_getSpeedFactor(typeID)

    @staticmethod
    def getAccel(typeID):
        return _libsumo.person_getAccel(typeID)

    @staticmethod
    def getDecel(typeID):
        return _libsumo.person_getDecel(typeID)

    @staticmethod
    def getEmergencyDecel(typeID):
        return _libsumo.person_getEmergencyDecel(typeID)

    @staticmethod
    def getApparentDecel(typeID):
        return _libsumo.person_getApparentDecel(typeID)

    @staticmethod
    def getImperfection(typeID):
        return _libsumo.person_getImperfection(typeID)

    @staticmethod
    def getTau(typeID):
        return _libsumo.person_getTau(typeID)

    @staticmethod
    def getEmissionClass(typeID):
        return _libsumo.person_getEmissionClass(typeID)

    @staticmethod
    def getShapeClass(typeID):
        return _libsumo.person_getShapeClass(typeID)

    @staticmethod
    def getMinGap(typeID):
        return _libsumo.person_getMinGap(typeID)

    @staticmethod
    def getWidth(typeID):
        return _libsumo.person_getWidth(typeID)

    @staticmethod
    def getHeight(typeID):
        return _libsumo.person_getHeight(typeID)

    @staticmethod
    def getMass(typeID):
        return _libsumo.person_getMass(typeID)

    @staticmethod
    def getColor(typeID):
        return _libsumo.person_getColor(typeID)

    @staticmethod
    def getMinGapLat(typeID):
        return _libsumo.person_getMinGapLat(typeID)

    @staticmethod
    def getMaxSpeedLat(typeID):
        return _libsumo.person_getMaxSpeedLat(typeID)

    @staticmethod
    def getLateralAlignment(typeID):
        return _libsumo.person_getLateralAlignment(typeID)

    @staticmethod
    def getPersonCapacity(typeID):
        return _libsumo.person_getPersonCapacity(typeID)

    @staticmethod
    def getActionStepLength(typeID):
        return _libsumo.person_getActionStepLength(typeID)

    @staticmethod
    def getSpeedDeviation(typeID):
        return _libsumo.person_getSpeedDeviation(typeID)

    @staticmethod
    def getBoardingDuration(typeID):
        return _libsumo.person_getBoardingDuration(typeID)

    @staticmethod
    def getImpatience(typeID):
        return _libsumo.person_getImpatience(typeID)

    @staticmethod
    def add(*args, **kwargs):
        return _libsumo.person_add(*args, **kwargs)

    @staticmethod
    def appendStage(personID, stage):
        return _libsumo.person_appendStage(personID, stage)

    @staticmethod
    def replaceStage(personID, stageIndex, stage):
        return _libsumo.person_replaceStage(personID, stageIndex, stage)

    @staticmethod
    def appendWaitingStage(*args, **kwargs):
        return _libsumo.person_appendWaitingStage(*args, **kwargs)

    @staticmethod
    def appendWalkingStage(*args, **kwargs):
        return _libsumo.person_appendWalkingStage(*args, **kwargs)

    @staticmethod
    def appendDrivingStage(*args, **kwargs):
        return _libsumo.person_appendDrivingStage(*args, **kwargs)

    @staticmethod
    def removeStage(personID, nextStageIndex):
        return _libsumo.person_removeStage(personID, nextStageIndex)

    @staticmethod
    def rerouteTraveltime(personID):
        return _libsumo.person_rerouteTraveltime(personID)

    @staticmethod
    def moveTo(*args, **kwargs):
        return _libsumo.person_moveTo(*args, **kwargs)

    @staticmethod
    def moveToXY(*args, **kwargs):
        return _libsumo.person_moveToXY(*args, **kwargs)

    @staticmethod
    def remove(*args, **kwargs):
        return _libsumo.person_remove(*args, **kwargs)

    @staticmethod
    def setSpeed(personID, speed):
        return _libsumo.person_setSpeed(personID, speed)

    @staticmethod
    def setType(personID, typeID):
        return _libsumo.person_setType(personID, typeID)

    @staticmethod
    def setLength(typeID, length):
        return _libsumo.person_setLength(typeID, length)

    @staticmethod
    def setMaxSpeed(typeID, speed):
        return _libsumo.person_setMaxSpeed(typeID, speed)

    @staticmethod
    def setVehicleClass(typeID, clazz):
        return _libsumo.person_setVehicleClass(typeID, clazz)

    @staticmethod
    def setSpeedFactor(typeID, factor):
        return _libsumo.person_setSpeedFactor(typeID, factor)

    @staticmethod
    def setAccel(typeID, accel):
        return _libsumo.person_setAccel(typeID, accel)

    @staticmethod
    def setDecel(typeID, decel):
        return _libsumo.person_setDecel(typeID, decel)

    @staticmethod
    def setEmergencyDecel(typeID, decel):
        return _libsumo.person_setEmergencyDecel(typeID, decel)

    @staticmethod
    def setApparentDecel(typeID, decel):
        return _libsumo.person_setApparentDecel(typeID, decel)

    @staticmethod
    def setImperfection(typeID, imperfection):
        return _libsumo.person_setImperfection(typeID, imperfection)

    @staticmethod
    def setTau(typeID, tau):
        return _libsumo.person_setTau(typeID, tau)

    @staticmethod
    def setEmissionClass(typeID, clazz):
        return _libsumo.person_setEmissionClass(typeID, clazz)

    @staticmethod
    def setShapeClass(typeID, shapeClass):
        return _libsumo.person_setShapeClass(typeID, shapeClass)

    @staticmethod
    def setWidth(typeID, width):
        return _libsumo.person_setWidth(typeID, width)

    @staticmethod
    def setHeight(typeID, height):
        return _libsumo.person_setHeight(typeID, height)

    @staticmethod
    def setMass(typeID, mass):
        return _libsumo.person_setMass(typeID, mass)

    @staticmethod
    def setColor(typeID, color):
        return _libsumo.person_setColor(typeID, color)

    @staticmethod
    def setMinGap(typeID, minGap):
        return _libsumo.person_setMinGap(typeID, minGap)

    @staticmethod
    def setMinGapLat(typeID, minGapLat):
        return _libsumo.person_setMinGapLat(typeID, minGapLat)

    @staticmethod
    def setMaxSpeedLat(typeID, speed):
        return _libsumo.person_setMaxSpeedLat(typeID, speed)

    @staticmethod
    def setLateralAlignment(typeID, latAlignment):
        return _libsumo.person_setLateralAlignment(typeID, latAlignment)

    @staticmethod
    def setActionStepLength(typeID, actionStepLength, resetActionOffset=True):
        return _libsumo.person_setActionStepLength(typeID, actionStepLength, resetActionOffset)

    @staticmethod
    def setBoardingDuration(typeID, boardingDuration):
        return _libsumo.person_setBoardingDuration(typeID, boardingDuration)

    @staticmethod
    def setImpatience(typeID, impatience):
        return _libsumo.person_setImpatience(typeID, impatience)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.person_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.person_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.person_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.person_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.person_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.person_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.person_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.person_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.person_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.person_domainID()
    __swig_destroy__ = _libsumo.delete_person

# Register person in _libsumo:
_libsumo.person_swigregister(person)
person.DOMAIN_ID = _libsumo.cvar.person_DOMAIN_ID

class calibrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getEdgeID(calibratorID):
        return _libsumo.calibrator_getEdgeID(calibratorID)

    @staticmethod
    def getLaneID(calibratorID):
        return _libsumo.calibrator_getLaneID(calibratorID)

    @staticmethod
    def getVehsPerHour(calibratorID):
        return _libsumo.calibrator_getVehsPerHour(calibratorID)

    @staticmethod
    def getSpeed(calibratorID):
        return _libsumo.calibrator_getSpeed(calibratorID)

    @staticmethod
    def getTypeID(calibratorID):
        return _libsumo.calibrator_getTypeID(calibratorID)

    @staticmethod
    def getBegin(calibratorID):
        return _libsumo.calibrator_getBegin(calibratorID)

    @staticmethod
    def getEnd(calibratorID):
        return _libsumo.calibrator_getEnd(calibratorID)

    @staticmethod
    def getRouteID(calibratorID):
        return _libsumo.calibrator_getRouteID(calibratorID)

    @staticmethod
    def getRouteProbeID(calibratorID):
        return _libsumo.calibrator_getRouteProbeID(calibratorID)

    @staticmethod
    def getVTypes(calibratorID):
        return _libsumo.calibrator_getVTypes(calibratorID)

    @staticmethod
    def getPassed(calibratorID):
        return _libsumo.calibrator_getPassed(calibratorID)

    @staticmethod
    def getInserted(calibratorID):
        return _libsumo.calibrator_getInserted(calibratorID)

    @staticmethod
    def getRemoved(calibratorID):
        return _libsumo.calibrator_getRemoved(calibratorID)

    @staticmethod
    def getIDList():
        return _libsumo.calibrator_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.calibrator_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.calibrator_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.calibrator_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.calibrator_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.calibrator_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.calibrator_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.calibrator_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.calibrator_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.calibrator_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.calibrator_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.calibrator_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.calibrator_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.calibrator_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.calibrator_domainID()

    @staticmethod
    def setFlow(*args, **kwargs):
        return _libsumo.calibrator_setFlow(*args, **kwargs)
    __swig_destroy__ = _libsumo.delete_calibrator

# Register calibrator in _libsumo:
_libsumo.calibrator_swigregister(calibrator)
calibrator.DOMAIN_ID = _libsumo.cvar.calibrator_DOMAIN_ID

class busstop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.busstop_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.busstop_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.busstop_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.busstop_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.busstop_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.busstop_getVehicleIDs(stopID)

    @staticmethod
    def getPersonCount(stopID):
        return _libsumo.busstop_getPersonCount(stopID)

    @staticmethod
    def getPersonIDs(stopID):
        return _libsumo.busstop_getPersonIDs(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.busstop_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.busstop_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.busstop_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.busstop_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.busstop_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.busstop_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.busstop_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.busstop_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.busstop_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.busstop_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.busstop_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.busstop_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.busstop_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.busstop_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.busstop_domainID()
    __swig_destroy__ = _libsumo.delete_busstop

# Register busstop in _libsumo:
_libsumo.busstop_swigregister(busstop)
busstop.DOMAIN_ID = _libsumo.cvar.busstop_DOMAIN_ID

class parkingarea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.parkingarea_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.parkingarea_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.parkingarea_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.parkingarea_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.parkingarea_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.parkingarea_getVehicleIDs(stopID)

    @staticmethod
    def getAcceptedBadges(stopID):
        return _libsumo.parkingarea_getAcceptedBadges(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.parkingarea_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.parkingarea_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.parkingarea_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.parkingarea_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.parkingarea_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.parkingarea_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.parkingarea_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.parkingarea_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.parkingarea_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.parkingarea_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.parkingarea_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.parkingarea_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.parkingarea_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.parkingarea_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.parkingarea_domainID()

    @staticmethod
    def setAcceptedBadges(stopID, badges):
        return _libsumo.parkingarea_setAcceptedBadges(stopID, badges)
    __swig_destroy__ = _libsumo.delete_parkingarea

# Register parkingarea in _libsumo:
_libsumo.parkingarea_swigregister(parkingarea)
parkingarea.DOMAIN_ID = _libsumo.cvar.parkingarea_DOMAIN_ID

class chargingstation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.chargingstation_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.chargingstation_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.chargingstation_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.chargingstation_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.chargingstation_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.chargingstation_getVehicleIDs(stopID)

    @staticmethod
    def getChargingPower(stopID):
        return _libsumo.chargingstation_getChargingPower(stopID)

    @staticmethod
    def getEfficiency(stopID):
        return _libsumo.chargingstation_getEfficiency(stopID)

    @staticmethod
    def getChargeDelay(stopID):
        return _libsumo.chargingstation_getChargeDelay(stopID)

    @staticmethod
    def getChargeInTransit(stopID):
        return _libsumo.chargingstation_getChargeInTransit(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.chargingstation_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.chargingstation_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.chargingstation_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.chargingstation_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.chargingstation_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.chargingstation_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.chargingstation_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.chargingstation_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.chargingstation_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.chargingstation_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.chargingstation_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.chargingstation_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.chargingstation_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.chargingstation_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.chargingstation_domainID()

    @staticmethod
    def setChargingPower(stopID, power):
        return _libsumo.chargingstation_setChargingPower(stopID, power)

    @staticmethod
    def setEfficiency(stopID, efficiency):
        return _libsumo.chargingstation_setEfficiency(stopID, efficiency)

    @staticmethod
    def setChargeDelay(stopID, delay):
        return _libsumo.chargingstation_setChargeDelay(stopID, delay)

    @staticmethod
    def setChargeInTransit(stopID, inTransit):
        return _libsumo.chargingstation_setChargeInTransit(stopID, inTransit)
    __swig_destroy__ = _libsumo.delete_chargingstation

# Register chargingstation in _libsumo:
_libsumo.chargingstation_swigregister(chargingstation)
chargingstation.DOMAIN_ID = _libsumo.cvar.chargingstation_DOMAIN_ID

class overheadwire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLaneID(stopID):
        return _libsumo.overheadwire_getLaneID(stopID)

    @staticmethod
    def getStartPos(stopID):
        return _libsumo.overheadwire_getStartPos(stopID)

    @staticmethod
    def getEndPos(stopID):
        return _libsumo.overheadwire_getEndPos(stopID)

    @staticmethod
    def getName(stopID):
        return _libsumo.overheadwire_getName(stopID)

    @staticmethod
    def getVehicleCount(stopID):
        return _libsumo.overheadwire_getVehicleCount(stopID)

    @staticmethod
    def getVehicleIDs(stopID):
        return _libsumo.overheadwire_getVehicleIDs(stopID)

    @staticmethod
    def getIDList():
        return _libsumo.overheadwire_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.overheadwire_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.overheadwire_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.overheadwire_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.overheadwire_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.overheadwire_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.overheadwire_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.overheadwire_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.overheadwire_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.overheadwire_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.overheadwire_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.overheadwire_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.overheadwire_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.overheadwire_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.overheadwire_domainID()
    __swig_destroy__ = _libsumo.delete_overheadwire

# Register overheadwire in _libsumo:
_libsumo.overheadwire_swigregister(overheadwire)
overheadwire.DOMAIN_ID = _libsumo.cvar.overheadwire_DOMAIN_ID

class rerouter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getIDList():
        return _libsumo.rerouter_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.rerouter_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.rerouter_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.rerouter_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.rerouter_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.rerouter_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.rerouter_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.rerouter_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.rerouter_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.rerouter_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.rerouter_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.rerouter_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.rerouter_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.rerouter_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.rerouter_domainID()
    __swig_destroy__ = _libsumo.delete_rerouter

# Register rerouter in _libsumo:
_libsumo.rerouter_swigregister(rerouter)
rerouter.DOMAIN_ID = _libsumo.cvar.rerouter_DOMAIN_ID

class meandata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getIDList():
        return _libsumo.meandata_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.meandata_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.meandata_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.meandata_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.meandata_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.meandata_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.meandata_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.meandata_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.meandata_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.meandata_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.meandata_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.meandata_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.meandata_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.meandata_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.meandata_domainID()
    __swig_destroy__ = _libsumo.delete_meandata

# Register meandata in _libsumo:
_libsumo.meandata_swigregister(meandata)
meandata.DOMAIN_ID = _libsumo.cvar.meandata_DOMAIN_ID

class variablespeedsign(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLanes(vssID):
        return _libsumo.variablespeedsign_getLanes(vssID)

    @staticmethod
    def getIDList():
        return _libsumo.variablespeedsign_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.variablespeedsign_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.variablespeedsign_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.variablespeedsign_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.variablespeedsign_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.variablespeedsign_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.variablespeedsign_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.variablespeedsign_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.variablespeedsign_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.variablespeedsign_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.variablespeedsign_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.variablespeedsign_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.variablespeedsign_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.variablespeedsign_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.variablespeedsign_domainID()
    __swig_destroy__ = _libsumo.delete_variablespeedsign

# Register variablespeedsign in _libsumo:
_libsumo.variablespeedsign_swigregister(variablespeedsign)
variablespeedsign.DOMAIN_ID = _libsumo.cvar.variablespeedsign_DOMAIN_ID

class routeprobe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getEdgeID(probeID):
        return _libsumo.routeprobe_getEdgeID(probeID)

    @staticmethod
    def sampleLastRouteID(probeID):
        return _libsumo.routeprobe_sampleLastRouteID(probeID)

    @staticmethod
    def sampleCurrentRouteID(probeID):
        return _libsumo.routeprobe_sampleCurrentRouteID(probeID)

    @staticmethod
    def getIDList():
        return _libsumo.routeprobe_getIDList()

    @staticmethod
    def getIDCount():
        return _libsumo.routeprobe_getIDCount()

    @staticmethod
    def getParameter(objectID, key):
        return _libsumo.routeprobe_getParameter(objectID, key)

    @staticmethod
    def getParameterWithKey(objectID, key):
        return _libsumo.routeprobe_getParameterWithKey(objectID, key)

    @staticmethod
    def setParameter(objectID, key, value):
        return _libsumo.routeprobe_setParameter(objectID, key, value)

    @staticmethod
    def subscribe(*args, **kwargs):

        if len(args) > 1 and args[1] is None:
            args = (args[0], [-1]) + args[2:]
        if len(args) > 4 and args[4] is None:
            args = args[:4] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.routeprobe_subscribe(*args, **kwargs)

    @staticmethod
    def unsubscribe(objectID):
        return _libsumo.routeprobe_unsubscribe(objectID)

    @staticmethod
    def subscribeContext(*args, **kwargs):

        if len(args) > 3 and args[3] is None:
            args = (args[0], args[1], args[2], [-1]) + args[4:]
        if len(args) > 6 and args[6] is None:
            args = args[:6] + ({},)
        if "varIDs" in kwargs and kwargs["varIDs"] is None:
            kwargs["varIDs"] = [-1]
        if "parameters" in kwargs and kwargs["parameters"] is None:
            kwargs["parameters"] = {}


        return _libsumo.routeprobe_subscribeContext(*args, **kwargs)

    @staticmethod
    def unsubscribeContext(objectID, domain, dist):
        return _libsumo.routeprobe_unsubscribeContext(objectID, domain, dist)

    @staticmethod
    def getAllSubscriptionResults():
        return _libsumo.routeprobe_getAllSubscriptionResults()

    @staticmethod
    def getSubscriptionResults(objectID):
        return _libsumo.routeprobe_getSubscriptionResults(objectID)

    @staticmethod
    def getAllContextSubscriptionResults():
        return _libsumo.routeprobe_getAllContextSubscriptionResults()

    @staticmethod
    def getContextSubscriptionResults(objectID):
        return _libsumo.routeprobe_getContextSubscriptionResults(objectID)

    @staticmethod
    def subscribeParameterWithKey(*args, **kwargs):
        return _libsumo.routeprobe_subscribeParameterWithKey(*args, **kwargs)

    @staticmethod
    def domainID():
        return _libsumo.routeprobe_domainID()
    __swig_destroy__ = _libsumo.delete_routeprobe

# Register routeprobe in _libsumo:
_libsumo.routeprobe_swigregister(routeprobe)
routeprobe.DOMAIN_ID = _libsumo.cvar.routeprobe_DOMAIN_ID


